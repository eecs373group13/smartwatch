
smartwatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009114  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  080092d8  080092d8  0000a2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009744  08009744  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009744  08009744  0000a744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800974c  0800974c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800974c  0800974c  0000a74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20040000  08009754  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200401d4  08009928  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200403fc  08009928  0000b3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d08c  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e95  00000000  00000000  00018290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b22  00000000  00000000  0001afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f7a  00000000  00000000  0001bac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc6d  00000000  00000000  00045a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010544d  00000000  00000000  000556a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015aaf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005168  00000000  00000000  0015ab3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0015fca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200401d4 	.word	0x200401d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080092bc 	.word	0x080092bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200401d8 	.word	0x200401d8
 80001fc:	080092bc 	.word	0x080092bc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <screen_reset>:

/******************************************************************************
 function :	Hardware reset
 parameter:
 ******************************************************************************/
static void screen_reset(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	SET_RST_HIGH;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d2e:	480d      	ldr	r0, [pc, #52]	@ (8000d64 <screen_reset+0x40>)
 8000d30:	f001 fca2 	bl	8002678 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d34:	2064      	movs	r0, #100	@ 0x64
 8000d36:	f001 fa03 	bl	8002140 <HAL_Delay>
	SET_RST_LOW;
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <screen_reset+0x40>)
 8000d42:	f001 fc99 	bl	8002678 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f001 f9fa 	bl	8002140 <HAL_Delay>
	SET_RST_HIGH;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <screen_reset+0x40>)
 8000d54:	f001 fc90 	bl	8002678 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d58:	2064      	movs	r0, #100	@ 0x64
 8000d5a:	f001 f9f1 	bl	8002140 <HAL_Delay>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	48000400 	.word	0x48000400

08000d68 <LCD_1IN28_SendCommand>:
/******************************************************************************
 function :	send command
 parameter:
 Reg : Command register
 ******************************************************************************/
static void LCD_1IN28_SendCommand(uint8_t reg) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	SET_DC_LOW;
 8000d72:	2200      	movs	r2, #0
 8000d74:	2120      	movs	r1, #32
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7a:	f001 fc7d 	bl	8002678 <HAL_GPIO_WritePin>
	SET_CS_LOW;
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d84:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <LCD_1IN28_SendCommand+0x4c>)
 8000d86:	f001 fc77 	bl	8002678 <HAL_GPIO_WritePin>
	uint8_t buf[1] = { reg };
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 500);
 8000d8e:	f107 010c 	add.w	r1, r7, #12
 8000d92:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d96:	2201      	movs	r2, #1
 8000d98:	4807      	ldr	r0, [pc, #28]	@ (8000db8 <LCD_1IN28_SendCommand+0x50>)
 8000d9a:	f002 fc9c 	bl	80036d6 <HAL_SPI_Transmit>
	SET_CS_HIGH;
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <LCD_1IN28_SendCommand+0x4c>)
 8000da6:	f001 fc67 	bl	8002678 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	48000400 	.word	0x48000400
 8000db8:	200401f8 	.word	0x200401f8

08000dbc <LCD_1IN28_SendData_8Bit>:
/******************************************************************************
 function :	send data
 parameter:
 Data : Write data
 ******************************************************************************/
static void LCD_1IN28_SendData_8Bit(uint8_t data) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	SET_DC_HIGH;
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2120      	movs	r1, #32
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dce:	f001 fc53 	bl	8002678 <HAL_GPIO_WritePin>
	SET_CS_LOW;
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd8:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <LCD_1IN28_SendData_8Bit+0x4c>)
 8000dda:	f001 fc4d 	bl	8002678 <HAL_GPIO_WritePin>
	uint8_t buf[1] = { data };
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 500);
 8000de2:	f107 010c 	add.w	r1, r7, #12
 8000de6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000dea:	2201      	movs	r2, #1
 8000dec:	4807      	ldr	r0, [pc, #28]	@ (8000e0c <LCD_1IN28_SendData_8Bit+0x50>)
 8000dee:	f002 fc72 	bl	80036d6 <HAL_SPI_Transmit>
	SET_CS_HIGH;
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df8:	4803      	ldr	r0, [pc, #12]	@ (8000e08 <LCD_1IN28_SendData_8Bit+0x4c>)
 8000dfa:	f001 fc3d 	bl	8002678 <HAL_GPIO_WritePin>
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	200401f8 	.word	0x200401f8

08000e10 <LCD_1IN28_InitReg>:

/******************************************************************************
 function :	Initialize the lcd register
 parameter:
 ******************************************************************************/
static void LCD_1IN28_InitReg(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	LCD_1IN28_SendCommand(0xEF);
 8000e14:	20ef      	movs	r0, #239	@ 0xef
 8000e16:	f7ff ffa7 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 8000e1a:	20eb      	movs	r0, #235	@ 0xeb
 8000e1c:	f7ff ffa4 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14);
 8000e20:	2014      	movs	r0, #20
 8000e22:	f7ff ffcb 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFE);
 8000e26:	20fe      	movs	r0, #254	@ 0xfe
 8000e28:	f7ff ff9e 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF);
 8000e2c:	20ef      	movs	r0, #239	@ 0xef
 8000e2e:	f7ff ff9b 	bl	8000d68 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);
 8000e32:	20eb      	movs	r0, #235	@ 0xeb
 8000e34:	f7ff ff98 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14);
 8000e38:	2014      	movs	r0, #20
 8000e3a:	f7ff ffbf 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);
 8000e3e:	2084      	movs	r0, #132	@ 0x84
 8000e40:	f7ff ff92 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40);
 8000e44:	2040      	movs	r0, #64	@ 0x40
 8000e46:	f7ff ffb9 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);
 8000e4a:	2085      	movs	r0, #133	@ 0x85
 8000e4c:	f7ff ff8c 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8000e50:	20ff      	movs	r0, #255	@ 0xff
 8000e52:	f7ff ffb3 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);
 8000e56:	2086      	movs	r0, #134	@ 0x86
 8000e58:	f7ff ff86 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8000e5c:	20ff      	movs	r0, #255	@ 0xff
 8000e5e:	f7ff ffad 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);
 8000e62:	2087      	movs	r0, #135	@ 0x87
 8000e64:	f7ff ff80 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8000e68:	20ff      	movs	r0, #255	@ 0xff
 8000e6a:	f7ff ffa7 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);
 8000e6e:	2088      	movs	r0, #136	@ 0x88
 8000e70:	f7ff ff7a 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8000e74:	200a      	movs	r0, #10
 8000e76:	f7ff ffa1 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);
 8000e7a:	2089      	movs	r0, #137	@ 0x89
 8000e7c:	f7ff ff74 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8000e80:	2021      	movs	r0, #33	@ 0x21
 8000e82:	f7ff ff9b 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);
 8000e86:	208a      	movs	r0, #138	@ 0x8a
 8000e88:	f7ff ff6e 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff ff95 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);
 8000e92:	208b      	movs	r0, #139	@ 0x8b
 8000e94:	f7ff ff68 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80);
 8000e98:	2080      	movs	r0, #128	@ 0x80
 8000e9a:	f7ff ff8f 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);
 8000e9e:	208c      	movs	r0, #140	@ 0x8c
 8000ea0:	f7ff ff62 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f7ff ff89 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);
 8000eaa:	208d      	movs	r0, #141	@ 0x8d
 8000eac:	f7ff ff5c 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff ff83 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);
 8000eb6:	208e      	movs	r0, #142	@ 0x8e
 8000eb8:	f7ff ff56 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8000ebc:	20ff      	movs	r0, #255	@ 0xff
 8000ebe:	f7ff ff7d 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);
 8000ec2:	208f      	movs	r0, #143	@ 0x8f
 8000ec4:	f7ff ff50 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8000ec8:	20ff      	movs	r0, #255	@ 0xff
 8000eca:	f7ff ff77 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xB6);
 8000ece:	20b6      	movs	r0, #182	@ 0xb6
 8000ed0:	f7ff ff4a 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff ff71 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8000eda:	2020      	movs	r0, #32
 8000edc:	f7ff ff6e 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8000ee0:	2036      	movs	r0, #54	@ 0x36
 8000ee2:	f7ff ff41 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08); //Set as vertical screen
 8000ee6:	2008      	movs	r0, #8
 8000ee8:	f7ff ff68 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);
 8000eec:	203a      	movs	r0, #58	@ 0x3a
 8000eee:	f7ff ff3b 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05);
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f7ff ff62 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x90);
 8000ef8:	2090      	movs	r0, #144	@ 0x90
 8000efa:	f7ff ff35 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8000efe:	2008      	movs	r0, #8
 8000f00:	f7ff ff5c 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000f04:	2008      	movs	r0, #8
 8000f06:	f7ff ff59 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000f0a:	2008      	movs	r0, #8
 8000f0c:	f7ff ff56 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000f10:	2008      	movs	r0, #8
 8000f12:	f7ff ff53 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);
 8000f16:	20bd      	movs	r0, #189	@ 0xbd
 8000f18:	f7ff ff26 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8000f1c:	2006      	movs	r0, #6
 8000f1e:	f7ff ff4d 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBC);
 8000f22:	20bc      	movs	r0, #188	@ 0xbc
 8000f24:	f7ff ff20 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff ff47 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);
 8000f2e:	20ff      	movs	r0, #255	@ 0xff
 8000f30:	f7ff ff1a 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8000f34:	2060      	movs	r0, #96	@ 0x60
 8000f36:	f7ff ff41 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff3e 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8000f40:	2004      	movs	r0, #4
 8000f42:	f7ff ff3b 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);
 8000f46:	20c3      	movs	r0, #195	@ 0xc3
 8000f48:	f7ff ff0e 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8000f4c:	2013      	movs	r0, #19
 8000f4e:	f7ff ff35 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);
 8000f52:	20c4      	movs	r0, #196	@ 0xc4
 8000f54:	f7ff ff08 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8000f58:	2013      	movs	r0, #19
 8000f5a:	f7ff ff2f 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);
 8000f5e:	20c9      	movs	r0, #201	@ 0xc9
 8000f60:	f7ff ff02 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8000f64:	2022      	movs	r0, #34	@ 0x22
 8000f66:	f7ff ff29 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);
 8000f6a:	20be      	movs	r0, #190	@ 0xbe
 8000f6c:	f7ff fefc 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11);
 8000f70:	2011      	movs	r0, #17
 8000f72:	f7ff ff23 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);
 8000f76:	20e1      	movs	r0, #225	@ 0xe1
 8000f78:	f7ff fef6 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	f7ff ff1d 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8000f82:	200e      	movs	r0, #14
 8000f84:	f7ff ff1a 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);
 8000f88:	20df      	movs	r0, #223	@ 0xdf
 8000f8a:	f7ff feed 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8000f8e:	2021      	movs	r0, #33	@ 0x21
 8000f90:	f7ff ff14 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8000f94:	200c      	movs	r0, #12
 8000f96:	f7ff ff11 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff ff0e 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);
 8000fa0:	20f0      	movs	r0, #240	@ 0xf0
 8000fa2:	f7ff fee1 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8000fa6:	2045      	movs	r0, #69	@ 0x45
 8000fa8:	f7ff ff08 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8000fac:	2009      	movs	r0, #9
 8000fae:	f7ff ff05 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000fb2:	2008      	movs	r0, #8
 8000fb4:	f7ff ff02 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8000fb8:	2008      	movs	r0, #8
 8000fba:	f7ff feff 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8000fbe:	2026      	movs	r0, #38	@ 0x26
 8000fc0:	f7ff fefc 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x2A);
 8000fc4:	202a      	movs	r0, #42	@ 0x2a
 8000fc6:	f7ff fef9 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF1);
 8000fca:	20f1      	movs	r0, #241	@ 0xf1
 8000fcc:	f7ff fecc 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x43);
 8000fd0:	2043      	movs	r0, #67	@ 0x43
 8000fd2:	f7ff fef3 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8000fd6:	2070      	movs	r0, #112	@ 0x70
 8000fd8:	f7ff fef0 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x72);
 8000fdc:	2072      	movs	r0, #114	@ 0x72
 8000fde:	f7ff feed 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x36);
 8000fe2:	2036      	movs	r0, #54	@ 0x36
 8000fe4:	f7ff feea 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x37);
 8000fe8:	2037      	movs	r0, #55	@ 0x37
 8000fea:	f7ff fee7 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x6F);
 8000fee:	206f      	movs	r0, #111	@ 0x6f
 8000ff0:	f7ff fee4 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF2);
 8000ff4:	20f2      	movs	r0, #242	@ 0xf2
 8000ff6:	f7ff feb7 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8000ffa:	2045      	movs	r0, #69	@ 0x45
 8000ffc:	f7ff fede 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001000:	2009      	movs	r0, #9
 8001002:	f7ff fedb 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001006:	2008      	movs	r0, #8
 8001008:	f7ff fed8 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800100c:	2008      	movs	r0, #8
 800100e:	f7ff fed5 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8001012:	2026      	movs	r0, #38	@ 0x26
 8001014:	f7ff fed2 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x2A);
 8001018:	202a      	movs	r0, #42	@ 0x2a
 800101a:	f7ff fecf 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF3);
 800101e:	20f3      	movs	r0, #243	@ 0xf3
 8001020:	f7ff fea2 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x43);
 8001024:	2043      	movs	r0, #67	@ 0x43
 8001026:	f7ff fec9 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800102a:	2070      	movs	r0, #112	@ 0x70
 800102c:	f7ff fec6 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x72);
 8001030:	2072      	movs	r0, #114	@ 0x72
 8001032:	f7ff fec3 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x36);
 8001036:	2036      	movs	r0, #54	@ 0x36
 8001038:	f7ff fec0 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x37);
 800103c:	2037      	movs	r0, #55	@ 0x37
 800103e:	f7ff febd 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x6F);
 8001042:	206f      	movs	r0, #111	@ 0x6f
 8001044:	f7ff feba 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);
 8001048:	20ed      	movs	r0, #237	@ 0xed
 800104a:	f7ff fe8d 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B);
 800104e:	201b      	movs	r0, #27
 8001050:	f7ff feb4 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B);
 8001054:	200b      	movs	r0, #11
 8001056:	f7ff feb1 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);
 800105a:	20ae      	movs	r0, #174	@ 0xae
 800105c:	f7ff fe84 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001060:	2077      	movs	r0, #119	@ 0x77
 8001062:	f7ff feab 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xCD);
 8001066:	20cd      	movs	r0, #205	@ 0xcd
 8001068:	f7ff fe7e 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);
 800106c:	2063      	movs	r0, #99	@ 0x63
 800106e:	f7ff fea5 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x70);
 8001072:	2070      	movs	r0, #112	@ 0x70
 8001074:	f7ff fe78 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8001078:	2007      	movs	r0, #7
 800107a:	f7ff fe9f 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fe9c 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001084:	2004      	movs	r0, #4
 8001086:	f7ff fe99 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 800108a:	200e      	movs	r0, #14
 800108c:	f7ff fe96 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8001090:	200f      	movs	r0, #15
 8001092:	f7ff fe93 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001096:	2009      	movs	r0, #9
 8001098:	f7ff fe90 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800109c:	2007      	movs	r0, #7
 800109e:	f7ff fe8d 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80010a2:	2008      	movs	r0, #8
 80010a4:	f7ff fe8a 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f7ff fe87 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);
 80010ae:	20e8      	movs	r0, #232	@ 0xe8
 80010b0:	f7ff fe5a 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 80010b4:	2034      	movs	r0, #52	@ 0x34
 80010b6:	f7ff fe81 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);
 80010ba:	2062      	movs	r0, #98	@ 0x62
 80010bc:	f7ff fe54 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80010c0:	2018      	movs	r0, #24
 80010c2:	f7ff fe7b 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 80010c6:	200d      	movs	r0, #13
 80010c8:	f7ff fe78 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80010cc:	2071      	movs	r0, #113	@ 0x71
 80010ce:	f7ff fe75 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 80010d2:	20ed      	movs	r0, #237	@ 0xed
 80010d4:	f7ff fe72 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80010d8:	2070      	movs	r0, #112	@ 0x70
 80010da:	f7ff fe6f 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80010de:	2070      	movs	r0, #112	@ 0x70
 80010e0:	f7ff fe6c 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80010e4:	2018      	movs	r0, #24
 80010e6:	f7ff fe69 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f7ff fe66 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80010f0:	2071      	movs	r0, #113	@ 0x71
 80010f2:	f7ff fe63 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 80010f6:	20ef      	movs	r0, #239	@ 0xef
 80010f8:	f7ff fe60 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80010fc:	2070      	movs	r0, #112	@ 0x70
 80010fe:	f7ff fe5d 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001102:	2070      	movs	r0, #112	@ 0x70
 8001104:	f7ff fe5a 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);
 8001108:	2063      	movs	r0, #99	@ 0x63
 800110a:	f7ff fe2d 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800110e:	2018      	movs	r0, #24
 8001110:	f7ff fe54 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001114:	2011      	movs	r0, #17
 8001116:	f7ff fe51 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800111a:	2071      	movs	r0, #113	@ 0x71
 800111c:	f7ff fe4e 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001120:	20f1      	movs	r0, #241	@ 0xf1
 8001122:	f7ff fe4b 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001126:	2070      	movs	r0, #112	@ 0x70
 8001128:	f7ff fe48 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800112c:	2070      	movs	r0, #112	@ 0x70
 800112e:	f7ff fe45 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001132:	2018      	movs	r0, #24
 8001134:	f7ff fe42 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8001138:	2013      	movs	r0, #19
 800113a:	f7ff fe3f 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800113e:	2071      	movs	r0, #113	@ 0x71
 8001140:	f7ff fe3c 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001144:	20f3      	movs	r0, #243	@ 0xf3
 8001146:	f7ff fe39 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800114a:	2070      	movs	r0, #112	@ 0x70
 800114c:	f7ff fe36 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001150:	2070      	movs	r0, #112	@ 0x70
 8001152:	f7ff fe33 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);
 8001156:	2064      	movs	r0, #100	@ 0x64
 8001158:	f7ff fe06 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 800115c:	2028      	movs	r0, #40	@ 0x28
 800115e:	f7ff fe2d 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001162:	2029      	movs	r0, #41	@ 0x29
 8001164:	f7ff fe2a 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001168:	20f1      	movs	r0, #241	@ 0xf1
 800116a:	f7ff fe27 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff fe24 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001174:	20f1      	movs	r0, #241	@ 0xf1
 8001176:	f7ff fe21 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fe1e 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001180:	2007      	movs	r0, #7
 8001182:	f7ff fe1b 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);
 8001186:	2066      	movs	r0, #102	@ 0x66
 8001188:	f7ff fdee 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 800118c:	203c      	movs	r0, #60	@ 0x3c
 800118e:	f7ff fe15 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fe12 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001198:	20cd      	movs	r0, #205	@ 0xcd
 800119a:	f7ff fe0f 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 800119e:	2067      	movs	r0, #103	@ 0x67
 80011a0:	f7ff fe0c 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80011a4:	2045      	movs	r0, #69	@ 0x45
 80011a6:	f7ff fe09 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80011aa:	2045      	movs	r0, #69	@ 0x45
 80011ac:	f7ff fe06 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80011b0:	2010      	movs	r0, #16
 80011b2:	f7ff fe03 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fe00 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fdfd 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fdfa 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);
 80011c8:	2067      	movs	r0, #103	@ 0x67
 80011ca:	f7ff fdcd 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fdf4 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 80011d4:	203c      	movs	r0, #60	@ 0x3c
 80011d6:	f7ff fdf1 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fdee 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fdeb 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fde8 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fde5 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 80011f2:	2054      	movs	r0, #84	@ 0x54
 80011f4:	f7ff fde2 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80011f8:	2010      	movs	r0, #16
 80011fa:	f7ff fddf 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 80011fe:	2032      	movs	r0, #50	@ 0x32
 8001200:	f7ff fddc 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001204:	2098      	movs	r0, #152	@ 0x98
 8001206:	f7ff fdd9 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);
 800120a:	2074      	movs	r0, #116	@ 0x74
 800120c:	f7ff fdac 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001210:	2010      	movs	r0, #16
 8001212:	f7ff fdd3 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);
 8001216:	2085      	movs	r0, #133	@ 0x85
 8001218:	f7ff fdd0 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 800121c:	2080      	movs	r0, #128	@ 0x80
 800121e:	f7ff fdcd 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fdca 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fdc7 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 800122e:	204e      	movs	r0, #78	@ 0x4e
 8001230:	f7ff fdc4 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fdc1 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x98);
 800123a:	2098      	movs	r0, #152	@ 0x98
 800123c:	f7ff fd94 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8001240:	203e      	movs	r0, #62	@ 0x3e
 8001242:	f7ff fdbb 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001246:	2007      	movs	r0, #7
 8001248:	f7ff fdb8 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);
 800124c:	2035      	movs	r0, #53	@ 0x35
 800124e:	f7ff fd8b 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8001252:	2021      	movs	r0, #33	@ 0x21
 8001254:	f7ff fd88 	bl	8000d68 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8001258:	2011      	movs	r0, #17
 800125a:	f7ff fd85 	bl	8000d68 <LCD_1IN28_SendCommand>
	HAL_Delay(120);
 800125e:	2078      	movs	r0, #120	@ 0x78
 8001260:	f000 ff6e 	bl	8002140 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8001264:	2029      	movs	r0, #41	@ 0x29
 8001266:	f7ff fd7f 	bl	8000d68 <LCD_1IN28_SendCommand>
	HAL_Delay(20);
 800126a:	2014      	movs	r0, #20
 800126c:	f000 ff68 	bl	8002140 <HAL_Delay>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <LCD_1IN28_SetAttributes>:
/********************************************************************************
 function:	Set the resolution and scanning method of the screen
 parameter:
 Scan_dir:   Scan direction
 ********************************************************************************/
static void LCD_1IN28_SetAttributes(uint8_t scan_dir) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	LCD_1IN28.SCAN_DIR = scan_dir;
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <LCD_1IN28_SetAttributes+0x54>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	7113      	strb	r3, [r2, #4]
	uint8_t MemoryAccessReg = 0x08;
 8001284:	2308      	movs	r3, #8
 8001286:	73fb      	strb	r3, [r7, #15]

	//Get GRAM and LCD width and height
	if (scan_dir == HORIZONTAL) {
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <LCD_1IN28_SetAttributes+0x2c>
		LCD_1IN28.HEIGHT = LCD_1IN28_HEIGHT;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <LCD_1IN28_SetAttributes+0x54>)
 8001290:	22f0      	movs	r2, #240	@ 0xf0
 8001292:	805a      	strh	r2, [r3, #2]
		LCD_1IN28.WIDTH = LCD_1IN28_WIDTH;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <LCD_1IN28_SetAttributes+0x54>)
 8001296:	22f0      	movs	r2, #240	@ 0xf0
 8001298:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0XC8;
 800129a:	23c8      	movs	r3, #200	@ 0xc8
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e007      	b.n	80012b0 <LCD_1IN28_SetAttributes+0x3c>
	} else {
		LCD_1IN28.HEIGHT = LCD_1IN28_WIDTH;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <LCD_1IN28_SetAttributes+0x54>)
 80012a2:	22f0      	movs	r2, #240	@ 0xf0
 80012a4:	805a      	strh	r2, [r3, #2]
		LCD_1IN28.WIDTH = LCD_1IN28_HEIGHT;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <LCD_1IN28_SetAttributes+0x54>)
 80012a8:	22f0      	movs	r2, #240	@ 0xf0
 80012aa:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0X68;
 80012ac:	2368      	movs	r3, #104	@ 0x68
 80012ae:	73fb      	strb	r3, [r7, #15]
	}

	// Set the read / write scan direction of the frame memory
	LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 80012b0:	2036      	movs	r0, #54	@ 0x36
 80012b2:	f7ff fd59 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd7f 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200401f0 	.word	0x200401f0

080012cc <screen_init>:

/********************************************************************************
 function :	Initialize the lcd
 parameter:
 ********************************************************************************/
void screen_init(uint8_t scan_dir) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	SET_DC_HIGH;
 80012d6:	2201      	movs	r2, #1
 80012d8:	2120      	movs	r1, #32
 80012da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012de:	f001 f9cb 	bl	8002678 <HAL_GPIO_WritePin>
	SET_CS_HIGH;
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e8:	480a      	ldr	r0, [pc, #40]	@ (8001314 <screen_init+0x48>)
 80012ea:	f001 f9c5 	bl	8002678 <HAL_GPIO_WritePin>
	SET_RST_HIGH;
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012f4:	4807      	ldr	r0, [pc, #28]	@ (8001314 <screen_init+0x48>)
 80012f6:	f001 f9bf 	bl	8002678 <HAL_GPIO_WritePin>
	//Hardware reset
	screen_reset();
 80012fa:	f7ff fd13 	bl	8000d24 <screen_reset>
	//Set the resolution and scanning method of the screen
	LCD_1IN28_SetAttributes(scan_dir);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ffb7 	bl	8001274 <LCD_1IN28_SetAttributes>
	//Set the initialization register
	LCD_1IN28_InitReg();
 8001306:	f7ff fd83 	bl	8000e10 <LCD_1IN28_InitReg>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	48000400 	.word	0x48000400

08001318 <screen_set_windows>:
 Ystart  :   Y direction Start coordinates
 Xend    :   X direction end coordinates
 Yend    :   Y direction end coordinates
 ********************************************************************************/
void screen_set_windows(uint8_t Xstart, uint8_t Ystart, uint8_t Xend,
		uint8_t Yend) {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	4603      	mov	r3, r0
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	460b      	mov	r3, r1
 8001330:	717b      	strb	r3, [r7, #5]
 8001332:	4613      	mov	r3, r2
 8001334:	713b      	strb	r3, [r7, #4]
	//set the X coordinates
	LCD_1IN28_SendCommand(0x2A);
 8001336:	202a      	movs	r0, #42	@ 0x2a
 8001338:	f7ff fd16 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fd3d 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Xstart);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fd39 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fd36 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Xend);
 8001350:	797b      	ldrb	r3, [r7, #5]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd32 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	//set the Y coordinates
	LCD_1IN28_SendCommand(0x2B);
 8001358:	202b      	movs	r0, #43	@ 0x2b
 800135a:	f7ff fd05 	bl	8000d68 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fd2c 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Ystart);
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd28 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fd25 	bl	8000dbc <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Yend);
 8001372:	793b      	ldrb	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fd21 	bl	8000dbc <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0X2C);
 800137a:	202c      	movs	r0, #44	@ 0x2c
 800137c:	f7ff fcf4 	bl	8000d68 <LCD_1IN28_SendCommand>
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}

08001388 <screen_clear>:

/******************************************************************************
 function :	Clear screen
 parameter:
 ******************************************************************************/
void screen_clear(uint16_t color) {
 8001388:	b580      	push	{r7, lr}
 800138a:	f5ad 3de1 	sub.w	sp, sp, #115200	@ 0x1c200
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4602      	mov	r2, r0
 8001394:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001398:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 800139c:	801a      	strh	r2, [r3, #0]
	uint16_t buf[240*240];

	for (uint16_t i = 0; i < 240*240; i++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	f507 32e1 	add.w	r2, r7, #115200	@ 0x1c200
 80013a4:	f102 020e 	add.w	r2, r2, #14
 80013a8:	8013      	strh	r3, [r2, #0]
 80013aa:	e01a      	b.n	80013e2 <screen_clear+0x5a>
		buf[i] = color;
 80013ac:	f507 33e1 	add.w	r3, r7, #115200	@ 0x1c200
 80013b0:	f103 030e 	add.w	r3, r3, #14
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80013ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013be:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80013c2:	f2a1 210a 	subw	r1, r1, #522	@ 0x20a
 80013c6:	8809      	ldrh	r1, [r1, #0]
 80013c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < 240*240; i++) {
 80013cc:	f507 33e1 	add.w	r3, r7, #115200	@ 0x1c200
 80013d0:	f103 030e 	add.w	r3, r3, #14
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	f507 32e1 	add.w	r2, r7, #115200	@ 0x1c200
 80013dc:	f102 020e 	add.w	r2, r2, #14
 80013e0:	8013      	strh	r3, [r2, #0]
 80013e2:	f507 33e1 	add.w	r3, r7, #115200	@ 0x1c200
 80013e6:	f103 030e 	add.w	r3, r3, #14
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	f5b3 4f61 	cmp.w	r3, #57600	@ 0xe100
 80013f0:	d3dc      	bcc.n	80013ac <screen_clear+0x24>
	}

    screen_set_windows(0, 0, 240-1, 240-1);
 80013f2:	23ef      	movs	r3, #239	@ 0xef
 80013f4:	22ef      	movs	r2, #239	@ 0xef
 80013f6:	2100      	movs	r1, #0
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff ff8d 	bl	8001318 <screen_set_windows>
    SET_DC_HIGH;
 80013fe:	2201      	movs	r2, #1
 8001400:	2120      	movs	r1, #32
 8001402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001406:	f001 f937 	bl	8002678 <HAL_GPIO_WritePin>
    SET_CS_LOW;
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001410:	4816      	ldr	r0, [pc, #88]	@ (800146c <screen_clear+0xe4>)
 8001412:	f001 f931 	bl	8002678 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*) buf, 60000, HAL_MAX_DELAY);
 8001416:	f107 0110 	add.w	r1, r7, #16
 800141a:	3904      	subs	r1, #4
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001424:	4812      	ldr	r0, [pc, #72]	@ (8001470 <screen_clear+0xe8>)
 8001426:	f002 f956 	bl	80036d6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*) buf + 60000, (240*240*2-60000), HAL_MAX_DELAY);
 800142a:	f107 0110 	add.w	r1, r7, #16
 800142e:	3904      	subs	r1, #4
 8001430:	f501 436a 	add.w	r3, r1, #59904	@ 0xea00
 8001434:	3360      	adds	r3, #96	@ 0x60
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	f24d 72a0 	movw	r2, #55200	@ 0xd7a0
 8001440:	480b      	ldr	r0, [pc, #44]	@ (8001470 <screen_clear+0xe8>)
 8001442:	f002 f948 	bl	80036d6 <HAL_SPI_Transmit>
    SET_DC_LOW;
 8001446:	2200      	movs	r2, #0
 8001448:	2120      	movs	r1, #32
 800144a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144e:	f001 f913 	bl	8002678 <HAL_GPIO_WritePin>
    SET_CS_HIGH;
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <screen_clear+0xe4>)
 800145a:	f001 f90d 	bl	8002678 <HAL_GPIO_WritePin>
}
 800145e:	bf00      	nop
 8001460:	f507 37e1 	add.w	r7, r7, #115200	@ 0x1c200
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	48000400 	.word	0x48000400
 8001470:	200401f8 	.word	0x200401f8

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f000 fded 	bl	8002056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f80f 	bl	800149e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f000 f940 	bl	8001704 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001484:	f000 f890 	bl	80015a8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001488:	f000 f850 	bl	800152c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  screen_init(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff ff1d 	bl	80012cc <screen_init>
  screen_clear(0xFFFF);
 8001492:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001496:	f7ff ff77 	bl	8001388 <screen_clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149a:	bf00      	nop
 800149c:	e7fd      	b.n	800149a <main+0x26>

0800149e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b096      	sub	sp, #88	@ 0x58
 80014a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2244      	movs	r2, #68	@ 0x44
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fb2a 	bl	8005b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014c4:	f001 f910 	bl	80026e8 <HAL_PWREx_ControlVoltageScaling>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014ce:	f000 fb5b 	bl	8001b88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014d2:	2310      	movs	r3, #16
 80014d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d6:	2301      	movs	r3, #1
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014de:	2360      	movs	r3, #96	@ 0x60
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 f9b0 	bl	8002850 <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80014f6:	f000 fb47 	bl	8001b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fa:	230f      	movs	r3, #15
 80014fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fdb6 	bl	8003084 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800151e:	f000 fb33 	bl	8001b88 <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3758      	adds	r7, #88	@ 0x58
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	@ (80015a4 <MX_SPI1_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001538:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800153c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001546:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800154a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <MX_SPI1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <MX_SPI1_Init+0x74>)
 800155a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800155e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001562:	2208      	movs	r2, #8
 8001564:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <MX_SPI1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <MX_SPI1_Init+0x74>)
 800157a:	2207      	movs	r2, #7
 800157c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <MX_SPI1_Init+0x74>)
 8001586:	2208      	movs	r2, #8
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <MX_SPI1_Init+0x74>)
 800158c:	f002 f800 	bl	8003590 <HAL_SPI_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001596:	f000 faf7 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200401f8 	.word	0x200401f8
 80015a4:	40013000 	.word	0x40013000

080015a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09a      	sub	sp, #104	@ 0x68
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	222c      	movs	r2, #44	@ 0x2c
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fa8f 	bl	8005b06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015e8:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <MX_TIM1_Init+0x154>)
 80015ea:	4a45      	ldr	r2, [pc, #276]	@ (8001700 <MX_TIM1_Init+0x158>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 299;
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <MX_TIM1_Init+0x154>)
 80015f0:	f240 122b 	movw	r2, #299	@ 0x12b
 80015f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b41      	ldr	r3, [pc, #260]	@ (80016fc <MX_TIM1_Init+0x154>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80015fc:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <MX_TIM1_Init+0x154>)
 80015fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001602:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <MX_TIM1_Init+0x154>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800160a:	4b3c      	ldr	r3, [pc, #240]	@ (80016fc <MX_TIM1_Init+0x154>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001610:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <MX_TIM1_Init+0x154>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001616:	4839      	ldr	r0, [pc, #228]	@ (80016fc <MX_TIM1_Init+0x154>)
 8001618:	f002 fb38 	bl	8003c8c <HAL_TIM_Base_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001622:	f000 fab1 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800162c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001630:	4619      	mov	r1, r3
 8001632:	4832      	ldr	r0, [pc, #200]	@ (80016fc <MX_TIM1_Init+0x154>)
 8001634:	f002 fcf6 	bl	8004024 <HAL_TIM_ConfigClockSource>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800163e:	f000 faa3 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001642:	482e      	ldr	r0, [pc, #184]	@ (80016fc <MX_TIM1_Init+0x154>)
 8001644:	f002 fb79 	bl	8003d3a <HAL_TIM_PWM_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800164e:	f000 fa9b 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800165e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001662:	4619      	mov	r1, r3
 8001664:	4825      	ldr	r0, [pc, #148]	@ (80016fc <MX_TIM1_Init+0x154>)
 8001666:	f003 f9bd 	bl	80049e4 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001670:	f000 fa8a 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	@ 0x60
 8001676:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001690:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4818      	ldr	r0, [pc, #96]	@ (80016fc <MX_TIM1_Init+0x154>)
 800169a:	f002 fbaf 	bl	8003dfc <HAL_TIM_PWM_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80016a4:	f000 fa70 	bl	8001b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4807      	ldr	r0, [pc, #28]	@ (80016fc <MX_TIM1_Init+0x154>)
 80016de:	f003 fa09 	bl	8004af4 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80016e8:	f000 fa4e 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016ec:	4803      	ldr	r0, [pc, #12]	@ (80016fc <MX_TIM1_Init+0x154>)
 80016ee:	f000 fb2b 	bl	8001d48 <HAL_TIM_MspPostInit>

}
 80016f2:	bf00      	nop
 80016f4:	3768      	adds	r7, #104	@ 0x68
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2004025c 	.word	0x2004025c
 8001700:	40012c00 	.word	0x40012c00

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	@ 0x38
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800171a:	4bb4      	ldr	r3, [pc, #720]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	4ab3      	ldr	r2, [pc, #716]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001720:	f043 0310 	orr.w	r3, r3, #16
 8001724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001726:	4bb1      	ldr	r3, [pc, #708]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	4bae      	ldr	r3, [pc, #696]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4aad      	ldr	r2, [pc, #692]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4bab      	ldr	r3, [pc, #684]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800174a:	4ba8      	ldr	r3, [pc, #672]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	4aa7      	ldr	r2, [pc, #668]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001756:	4ba5      	ldr	r3, [pc, #660]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001762:	4ba2      	ldr	r3, [pc, #648]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	4aa1      	ldr	r2, [pc, #644]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800176c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176e:	4b9f      	ldr	r3, [pc, #636]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b9c      	ldr	r3, [pc, #624]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	4a9b      	ldr	r2, [pc, #620]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001786:	4b99      	ldr	r3, [pc, #612]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	4b96      	ldr	r3, [pc, #600]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	4a95      	ldr	r2, [pc, #596]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179e:	4b93      	ldr	r3, [pc, #588]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017aa:	4b90      	ldr	r3, [pc, #576]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a8f      	ldr	r2, [pc, #572]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b8d      	ldr	r3, [pc, #564]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c2:	4b8a      	ldr	r3, [pc, #552]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a89      	ldr	r2, [pc, #548]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 80017c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b87      	ldr	r3, [pc, #540]	@ (80019ec <MX_GPIO_Init+0x2e8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80017da:	f001 f829 	bl	8002830 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCRN_DC_Pin|RST_Screen_Pin|DC_Screen_Pin|CS_S_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 6162 	mov.w	r1, #3616	@ 0xe20
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e8:	f000 ff46 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_Shutdown_GPIO_Port, ACC_Shutdown_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2104      	movs	r1, #4
 80017f0:	487f      	ldr	r0, [pc, #508]	@ (80019f0 <MX_GPIO_Init+0x2ec>)
 80017f2:	f000 ff41 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCRN_CS_Pin|SCRN_RST_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80017fc:	487d      	ldr	r0, [pc, #500]	@ (80019f4 <MX_GPIO_Init+0x2f0>)
 80017fe:	f000 ff3b 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001802:	230c      	movs	r3, #12
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001812:	230d      	movs	r3, #13
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4876      	ldr	r0, [pc, #472]	@ (80019f8 <MX_GPIO_Init+0x2f4>)
 800181e:	f000 fd99 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001822:	2307      	movs	r3, #7
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001826:	2312      	movs	r3, #18
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001832:	2304      	movs	r3, #4
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	486f      	ldr	r0, [pc, #444]	@ (80019fc <MX_GPIO_Init+0x2f8>)
 800183e:	f000 fd89 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001842:	2380      	movs	r3, #128	@ 0x80
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001852:	230d      	movs	r3, #13
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4867      	ldr	r0, [pc, #412]	@ (80019fc <MX_GPIO_Init+0x2f8>)
 800185e:	f000 fd79 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001862:	230f      	movs	r3, #15
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001866:	230b      	movs	r3, #11
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	4862      	ldr	r0, [pc, #392]	@ (8001a00 <MX_GPIO_Init+0x2fc>)
 8001876:	f000 fd6d 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_Haptic_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_Haptic_Pin;
 800187a:	2301      	movs	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800188a:	2301      	movs	r3, #1
 800188c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TIM2_CH1_Haptic_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001898:	f000 fd5c 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800189c:	2308      	movs	r3, #8
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018a0:	230b      	movs	r3, #11
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b2:	f000 fd4f 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCRN_DC_Pin RST_Screen_Pin DC_Screen_Pin CS_S_Pin */
  GPIO_InitStruct.Pin = SCRN_DC_Pin|RST_Screen_Pin|DC_Screen_Pin|CS_S_Pin;
 80018b6:	f44f 6362 	mov.w	r3, #3616	@ 0xe20
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d2:	f000 fd3f 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018d6:	2330      	movs	r3, #48	@ 0x30
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e6:	2307      	movs	r3, #7
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4843      	ldr	r0, [pc, #268]	@ (8001a00 <MX_GPIO_Init+0x2fc>)
 80018f2:	f000 fd2f 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f6:	2301      	movs	r3, #1
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001906:	2302      	movs	r3, #2
 8001908:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190e:	4619      	mov	r1, r3
 8001910:	4838      	ldr	r0, [pc, #224]	@ (80019f4 <MX_GPIO_Init+0x2f0>)
 8001912:	f000 fd1f 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001916:	2302      	movs	r3, #2
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800191a:	230b      	movs	r3, #11
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	4832      	ldr	r0, [pc, #200]	@ (80019f4 <MX_GPIO_Init+0x2f0>)
 800192a:	f000 fd13 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800192e:	2304      	movs	r3, #4
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001932:	2303      	movs	r3, #3
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	482c      	ldr	r0, [pc, #176]	@ (80019f4 <MX_GPIO_Init+0x2f0>)
 8001942:	f000 fd07 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001958:	2301      	movs	r3, #1
 800195a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	4824      	ldr	r0, [pc, #144]	@ (80019f4 <MX_GPIO_Init+0x2f0>)
 8001964:	f000 fcf6 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001968:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800197a:	230d      	movs	r3, #13
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	481b      	ldr	r0, [pc, #108]	@ (80019f4 <MX_GPIO_Init+0x2f0>)
 8001986:	f000 fce5 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800198a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800199c:	230e      	movs	r3, #14
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	4813      	ldr	r0, [pc, #76]	@ (80019f4 <MX_GPIO_Init+0x2f0>)
 80019a8:	f000 fcd4 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019be:	2302      	movs	r3, #2
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c6:	4619      	mov	r1, r3
 80019c8:	4809      	ldr	r0, [pc, #36]	@ (80019f0 <MX_GPIO_Init+0x2ec>)
 80019ca:	f000 fcc3 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80019ce:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80019e0:	2308      	movs	r3, #8
 80019e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e8:	e00c      	b.n	8001a04 <MX_GPIO_Init+0x300>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48001000 	.word	0x48001000
 80019fc:	48001400 	.word	0x48001400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	4619      	mov	r1, r3
 8001a06:	485b      	ldr	r0, [pc, #364]	@ (8001b74 <MX_GPIO_Init+0x470>)
 8001a08:	f000 fca4 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a0c:	2340      	movs	r3, #64	@ 0x40
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001a1c:	230d      	movs	r3, #13
 8001a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	4854      	ldr	r0, [pc, #336]	@ (8001b78 <MX_GPIO_Init+0x474>)
 8001a28:	f000 fc94 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a44:	4619      	mov	r1, r3
 8001a46:	484c      	ldr	r0, [pc, #304]	@ (8001b78 <MX_GPIO_Init+0x474>)
 8001a48:	f000 fc84 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8001a4c:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a5e:	230c      	movs	r3, #12
 8001a60:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a66:	4619      	mov	r1, r3
 8001a68:	4843      	ldr	r0, [pc, #268]	@ (8001b78 <MX_GPIO_Init+0x474>)
 8001a6a:	f000 fc73 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001a6e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a80:	2306      	movs	r3, #6
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	483b      	ldr	r0, [pc, #236]	@ (8001b78 <MX_GPIO_Init+0x474>)
 8001a8c:	f000 fc62 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a90:	2301      	movs	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001aa0:	2309      	movs	r3, #9
 8001aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4834      	ldr	r0, [pc, #208]	@ (8001b7c <MX_GPIO_Init+0x478>)
 8001aac:	f000 fc52 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_Shutdown_Pin */
  GPIO_InitStruct.Pin = ACC_Shutdown_Pin;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACC_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	482d      	ldr	r0, [pc, #180]	@ (8001b7c <MX_GPIO_Init+0x478>)
 8001ac8:	f000 fc44 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001acc:	2378      	movs	r3, #120	@ 0x78
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001adc:	2307      	movs	r3, #7
 8001ade:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4825      	ldr	r0, [pc, #148]	@ (8001b7c <MX_GPIO_Init+0x478>)
 8001ae8:	f000 fc34 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aec:	2310      	movs	r3, #16
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001afc:	2306      	movs	r3, #6
 8001afe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b04:	4619      	mov	r1, r3
 8001b06:	481e      	ldr	r0, [pc, #120]	@ (8001b80 <MX_GPIO_Init+0x47c>)
 8001b08:	f000 fc24 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0c:	23c0      	movs	r3, #192	@ 0xc0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4816      	ldr	r0, [pc, #88]	@ (8001b80 <MX_GPIO_Init+0x47c>)
 8001b28:	f000 fc14 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCRN_CS_Pin SCRN_RST_Pin */
  GPIO_InitStruct.Pin = SCRN_CS_Pin|SCRN_RST_Pin;
 8001b2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b42:	4619      	mov	r1, r3
 8001b44:	480e      	ldr	r0, [pc, #56]	@ (8001b80 <MX_GPIO_Init+0x47c>)
 8001b46:	f000 fc05 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <MX_GPIO_Init+0x480>)
 8001b66:	f000 fbf5 	bl	8002354 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3738      	adds	r7, #56	@ 0x38
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	48001800 	.word	0x48001800
 8001b78:	48000800 	.word	0x48000800
 8001b7c:	48000c00 	.word	0x48000c00
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48001000 	.word	0x48001000

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8c:	b672      	cpsid	i
}
 8001b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <Error_Handler+0x8>

08001b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	@ 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a25      	ldr	r2, [pc, #148]	@ (8001c90 <HAL_SPI_MspInit+0xb4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d144      	bne.n	8001c88 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfe:	4b25      	ldr	r3, [pc, #148]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c02:	4a24      	ldr	r2, [pc, #144]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c0a:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c22:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	4a18      	ldr	r2, [pc, #96]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3a:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <HAL_SPI_MspInit+0xb8>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c46:	2350      	movs	r3, #80	@ 0x50
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c56:	2305      	movs	r3, #5
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c64:	f000 fb76 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001c68:	2328      	movs	r3, #40	@ 0x28
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c78:	2305      	movs	r3, #5
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <HAL_SPI_MspInit+0xbc>)
 8001c84:	f000 fb66 	bl	8002354 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	@ 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40013000 	.word	0x40013000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000400 	.word	0x48000400

08001c9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	@ 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a20      	ldr	r2, [pc, #128]	@ (8001d3c <HAL_TIM_Base_MspInit+0xa0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d139      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa4>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa4>)
 8001cc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cca:	4b1d      	ldr	r3, [pc, #116]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa4>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa4>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	4a19      	ldr	r2, [pc, #100]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa4>)
 8001cdc:	f043 0310 	orr.w	r3, r3, #16
 8001ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <HAL_TIM_Base_MspInit+0xa4>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8001cee:	f44f 5322 	mov.w	r3, #10368	@ 0x2880
 8001cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480e      	ldr	r0, [pc, #56]	@ (8001d44 <HAL_TIM_Base_MspInit+0xa8>)
 8001d0c:	f000 fb22 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d10:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001d22:	2303      	movs	r3, #3
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <HAL_TIM_Base_MspInit+0xa8>)
 8001d2e:	f000 fb11 	bl	8002354 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	@ 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	48001000 	.word	0x48001000

08001d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a20      	ldr	r2, [pc, #128]	@ (8001de8 <HAL_TIM_MspPostInit+0xa0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d13a      	bne.n	8001de0 <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6a:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <HAL_TIM_MspPostInit+0xa4>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <HAL_TIM_MspPostInit+0xa4>)
 8001d70:	f043 0310 	orr.w	r3, r3, #16
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <HAL_TIM_MspPostInit+0xa4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <HAL_TIM_MspPostInit+0xa4>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <HAL_TIM_MspPostInit+0xa4>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <HAL_TIM_MspPostInit+0xa4>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8001d9a:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	480e      	ldr	r0, [pc, #56]	@ (8001df0 <HAL_TIM_MspPostInit+0xa8>)
 8001db8:	f000 facc 	bl	8002354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ddc:	f000 faba 	bl	8002354 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	@ 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48001000 	.word	0x48001000

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <NMI_Handler+0x4>

08001dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4a:	f000 f959 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  return 1;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_kill>:

int _kill(int pid, int sig)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e6c:	f003 fe9e 	bl	8005bac <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2216      	movs	r2, #22
 8001e74:	601a      	str	r2, [r3, #0]
  return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_exit>:

void _exit (int status)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffe7 	bl	8001e62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <_exit+0x12>

08001e98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e00a      	b.n	8001ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eaa:	f3af 8000 	nop.w
 8001eae:	4601      	mov	r1, r0
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	60ba      	str	r2, [r7, #8]
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbf0      	blt.n	8001eaa <_read+0x12>
  }

  return len;
 8001ec8:	687b      	ldr	r3, [r7, #4]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e009      	b.n	8001ef8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf1      	blt.n	8001ee4 <_write+0x12>
  }
  return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_close>:

int _close(int file)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f32:	605a      	str	r2, [r3, #4]
  return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <_isatty>:

int _isatty(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	@ (8001fd0 <_sbrk+0x5c>)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <_sbrk+0x60>)
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <_sbrk+0x64>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <_sbrk+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d207      	bcs.n	8001fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa4:	f003 fe02 	bl	8005bac <__errno>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	220c      	movs	r2, #12
 8001fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <_sbrk+0x64>)
 8001fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200a0000 	.word	0x200a0000
 8001fd4:	00000400 	.word	0x00000400
 8001fd8:	200402a8 	.word	0x200402a8
 8001fdc:	20040400 	.word	0x20040400

08001fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <SystemInit+0x20>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fea:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <SystemInit+0x20>)
 8001fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800203c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002008:	f7ff ffea 	bl	8001fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800200c:	480c      	ldr	r0, [pc, #48]	@ (8002040 <LoopForever+0x6>)
  ldr r1, =_edata
 800200e:	490d      	ldr	r1, [pc, #52]	@ (8002044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <LoopForever+0xe>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002024:	4c0a      	ldr	r4, [pc, #40]	@ (8002050 <LoopForever+0x16>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002032:	f003 fdc1 	bl	8005bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002036:	f7ff fa1d 	bl	8001474 <main>

0800203a <LoopForever>:

LoopForever:
    b LoopForever
 800203a:	e7fe      	b.n	800203a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800203c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002040:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8002044:	200401d4 	.word	0x200401d4
  ldr r2, =_sidata
 8002048:	08009754 	.word	0x08009754
  ldr r2, =_sbss
 800204c:	200401d4 	.word	0x200401d4
  ldr r4, =_ebss
 8002050:	200403fc 	.word	0x200403fc

08002054 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002054:	e7fe      	b.n	8002054 <ADC1_IRQHandler>

08002056 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 f943 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002066:	2000      	movs	r0, #0
 8002068:	f000 f80e 	bl	8002088 <HAL_InitTick>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	71fb      	strb	r3, [r7, #7]
 8002076:	e001      	b.n	800207c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002078:	f7ff fd8c 	bl	8001b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800207c:	79fb      	ldrb	r3, [r7, #7]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002094:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <HAL_InitTick+0x6c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800209c:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_InitTick+0x70>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <HAL_InitTick+0x6c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f941 	bl	800233a <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d809      	bhi.n	80020d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f919 	bl	8002302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d0:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <HAL_InitTick+0x74>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e004      	b.n	80020e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e001      	b.n	80020e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20040008 	.word	0x20040008
 80020f8:	20040000 	.word	0x20040000
 80020fc:	20040004 	.word	0x20040004

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20040008 	.word	0x20040008
 8002124:	200402ac 	.word	0x200402ac

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200402ac 	.word	0x200402ac

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_Delay+0x44>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20040008 	.word	0x20040008

08002188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	@ (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	@ (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f7ff ff8e 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff47 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff5c 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff8e 	bl	8002240 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5d 	bl	80021ec <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffb0 	bl	80022a8 <SysTick_Config>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002362:	e166      	b.n	8002632 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	4013      	ands	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8158 	beq.w	800262c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d005      	beq.n	8002394 <HAL_GPIO_Init+0x40>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d130      	bne.n	80023f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ca:	2201      	movs	r2, #1
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f003 0201 	and.w	r2, r3, #1
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d017      	beq.n	8002432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d123      	bne.n	8002486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	6939      	ldr	r1, [r7, #16]
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0203 	and.w	r2, r3, #3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80b2 	beq.w	800262c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c8:	4b61      	ldr	r3, [pc, #388]	@ (8002650 <HAL_GPIO_Init+0x2fc>)
 80024ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024cc:	4a60      	ldr	r2, [pc, #384]	@ (8002650 <HAL_GPIO_Init+0x2fc>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80024d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002650 <HAL_GPIO_Init+0x2fc>)
 80024d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800250a:	d02b      	beq.n	8002564 <HAL_GPIO_Init+0x210>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a52      	ldr	r2, [pc, #328]	@ (8002658 <HAL_GPIO_Init+0x304>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d025      	beq.n	8002560 <HAL_GPIO_Init+0x20c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a51      	ldr	r2, [pc, #324]	@ (800265c <HAL_GPIO_Init+0x308>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d01f      	beq.n	800255c <HAL_GPIO_Init+0x208>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a50      	ldr	r2, [pc, #320]	@ (8002660 <HAL_GPIO_Init+0x30c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d019      	beq.n	8002558 <HAL_GPIO_Init+0x204>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a4f      	ldr	r2, [pc, #316]	@ (8002664 <HAL_GPIO_Init+0x310>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_GPIO_Init+0x200>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a4e      	ldr	r2, [pc, #312]	@ (8002668 <HAL_GPIO_Init+0x314>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00d      	beq.n	8002550 <HAL_GPIO_Init+0x1fc>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a4d      	ldr	r2, [pc, #308]	@ (800266c <HAL_GPIO_Init+0x318>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <HAL_GPIO_Init+0x1f8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4c      	ldr	r2, [pc, #304]	@ (8002670 <HAL_GPIO_Init+0x31c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_GPIO_Init+0x1f4>
 8002544:	2307      	movs	r3, #7
 8002546:	e00e      	b.n	8002566 <HAL_GPIO_Init+0x212>
 8002548:	2308      	movs	r3, #8
 800254a:	e00c      	b.n	8002566 <HAL_GPIO_Init+0x212>
 800254c:	2306      	movs	r3, #6
 800254e:	e00a      	b.n	8002566 <HAL_GPIO_Init+0x212>
 8002550:	2305      	movs	r3, #5
 8002552:	e008      	b.n	8002566 <HAL_GPIO_Init+0x212>
 8002554:	2304      	movs	r3, #4
 8002556:	e006      	b.n	8002566 <HAL_GPIO_Init+0x212>
 8002558:	2303      	movs	r3, #3
 800255a:	e004      	b.n	8002566 <HAL_GPIO_Init+0x212>
 800255c:	2302      	movs	r3, #2
 800255e:	e002      	b.n	8002566 <HAL_GPIO_Init+0x212>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_GPIO_Init+0x212>
 8002564:	2300      	movs	r3, #0
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f002 0203 	and.w	r2, r2, #3
 800256c:	0092      	lsls	r2, r2, #2
 800256e:	4093      	lsls	r3, r2
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002576:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_GPIO_Init+0x300>)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002584:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <HAL_GPIO_Init+0x320>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025a8:	4a32      	ldr	r2, [pc, #200]	@ (8002674 <HAL_GPIO_Init+0x320>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ae:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <HAL_GPIO_Init+0x320>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025d2:	4a28      	ldr	r2, [pc, #160]	@ (8002674 <HAL_GPIO_Init+0x320>)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025d8:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <HAL_GPIO_Init+0x320>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <HAL_GPIO_Init+0x320>)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002602:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <HAL_GPIO_Init+0x320>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002626:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <HAL_GPIO_Init+0x320>)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	f47f ae91 	bne.w	8002364 <HAL_GPIO_Init+0x10>
  }
}
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40021000 	.word	0x40021000
 8002654:	40010000 	.word	0x40010000
 8002658:	48000400 	.word	0x48000400
 800265c:	48000800 	.word	0x48000800
 8002660:	48000c00 	.word	0x48000c00
 8002664:	48001000 	.word	0x48001000
 8002668:	48001400 	.word	0x48001400
 800266c:	48001800 	.word	0x48001800
 8002670:	48001c00 	.word	0x48001c00
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002694:	e002      	b.n	800269c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ac:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b8:	d102      	bne.n	80026c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80026ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026be:	e00b      	b.n	80026d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80026c0:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80026c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ce:	d102      	bne.n	80026d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80026d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026d4:	e000      	b.n	80026d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80026d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000

080026e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d141      	bne.n	800277a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002702:	d131      	bne.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002704:	4b47      	ldr	r3, [pc, #284]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800270a:	4a46      	ldr	r2, [pc, #280]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002714:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800271c:	4a41      	ldr	r2, [pc, #260]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002722:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002724:	4b40      	ldr	r3, [pc, #256]	@ (8002828 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2232      	movs	r2, #50	@ 0x32
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	4a3f      	ldr	r2, [pc, #252]	@ (800282c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	0c9b      	lsrs	r3, r3, #18
 8002736:	3301      	adds	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273a:	e002      	b.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3b01      	subs	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002742:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800274e:	d102      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f2      	bne.n	800273c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002756:	4b33      	ldr	r3, [pc, #204]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002762:	d158      	bne.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e057      	b.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002768:	4b2e      	ldr	r3, [pc, #184]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800276e:	4a2d      	ldr	r2, [pc, #180]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002778:	e04d      	b.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002780:	d141      	bne.n	8002806 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002782:	4b28      	ldr	r3, [pc, #160]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800278a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278e:	d131      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002796:	4a23      	ldr	r2, [pc, #140]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80027b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2232      	movs	r2, #50	@ 0x32
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c6:	e002      	b.n	80027ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027da:	d102      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f2      	bne.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ee:	d112      	bne.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e011      	b.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002804:	e007      	b.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002806:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800280e:	4a05      	ldr	r2, [pc, #20]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002814:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40007000 	.word	0x40007000
 8002828:	20040000 	.word	0x20040000
 800282c:	431bde83 	.word	0x431bde83

08002830 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_PWREx_EnableVddIO2+0x1c>)
 800283a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800283e:	6053      	str	r3, [r2, #4]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40007000 	.word	0x40007000

08002850 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f000 bc08 	b.w	8003074 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002864:	4b96      	ldr	r3, [pc, #600]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800286e:	4b94      	ldr	r3, [pc, #592]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80e4 	beq.w	8002a4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_RCC_OscConfig+0x4c>
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	f040 808b 	bne.w	80029aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b01      	cmp	r3, #1
 8002898:	f040 8087 	bne.w	80029aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800289c:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_OscConfig+0x64>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e3df      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	4b81      	ldr	r3, [pc, #516]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_RCC_OscConfig+0x7e>
 80028c4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028cc:	e005      	b.n	80028da <HAL_RCC_OscConfig+0x8a>
 80028ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028da:	4293      	cmp	r3, r2
 80028dc:	d223      	bcs.n	8002926 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fd94 	bl	8003410 <RCC_SetFlashLatencyFromMSIRange>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e3c0      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f2:	4b73      	ldr	r3, [pc, #460]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a72      	ldr	r2, [pc, #456]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b70      	ldr	r3, [pc, #448]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	496d      	ldr	r1, [pc, #436]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002910:	4b6b      	ldr	r3, [pc, #428]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	4968      	ldr	r1, [pc, #416]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	e025      	b.n	8002972 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002926:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a65      	ldr	r2, [pc, #404]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b63      	ldr	r3, [pc, #396]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4960      	ldr	r1, [pc, #384]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002944:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	495b      	ldr	r1, [pc, #364]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fd54 	bl	8003410 <RCC_SetFlashLatencyFromMSIRange>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e380      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002972:	f000 fcc1 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b51      	ldr	r3, [pc, #324]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	4950      	ldr	r1, [pc, #320]	@ (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac8 <HAL_RCC_OscConfig+0x278>)
 8002990:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002992:	4b4e      	ldr	r3, [pc, #312]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fb76 	bl	8002088 <HAL_InitTick>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d052      	beq.n	8002a4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	e364      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d032      	beq.n	8002a18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029b2:	4b43      	ldr	r3, [pc, #268]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a42      	ldr	r2, [pc, #264]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029be:	f7ff fbb3 	bl	8002128 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c6:	f7ff fbaf 	bl	8002128 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e34d      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d8:	4b39      	ldr	r3, [pc, #228]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e4:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a35      	ldr	r2, [pc, #212]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b33      	ldr	r3, [pc, #204]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4930      	ldr	r1, [pc, #192]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a02:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	492b      	ldr	r1, [pc, #172]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
 8002a16:	e01a      	b.n	8002a4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a18:	4b29      	ldr	r3, [pc, #164]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a24:	f7ff fb80 	bl	8002128 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fb7c 	bl	8002128 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e31a      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x1dc>
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d073      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x21c>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d10e      	bne.n	8002a84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d063      	beq.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d15f      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e2f7      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x24c>
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e025      	b.n	8002ae8 <HAL_RCC_OscConfig+0x298>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa4:	d114      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x280>
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a05      	ldr	r2, [pc, #20]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a02      	ldr	r2, [pc, #8]	@ (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e013      	b.n	8002ae8 <HAL_RCC_OscConfig+0x298>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	080092d8 	.word	0x080092d8
 8002ac8:	20040000 	.word	0x20040000
 8002acc:	20040004 	.word	0x20040004
 8002ad0:	4ba0      	ldr	r3, [pc, #640]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a9f      	ldr	r2, [pc, #636]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b9d      	ldr	r3, [pc, #628]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a9c      	ldr	r2, [pc, #624]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7ff fb1a 	bl	8002128 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7ff fb16 	bl	8002128 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e2b4      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0a:	4b92      	ldr	r3, [pc, #584]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2a8>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff fb06 	bl	8002128 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7ff fb02 	bl	8002128 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e2a0      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b32:	4b88      	ldr	r3, [pc, #544]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2d0>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d060      	beq.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_OscConfig+0x310>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d119      	bne.n	8002b8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d116      	bne.n	8002b8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b60:	4b7c      	ldr	r3, [pc, #496]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_OscConfig+0x328>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e27d      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b76      	ldr	r3, [pc, #472]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	4973      	ldr	r1, [pc, #460]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	e040      	b.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d023      	beq.n	8002bde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b96:	4b6f      	ldr	r3, [pc, #444]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7ff fac1 	bl	8002128 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff fabd 	bl	8002128 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e25b      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	4b65      	ldr	r3, [pc, #404]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b62      	ldr	r3, [pc, #392]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	495f      	ldr	r1, [pc, #380]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	e018      	b.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b5d      	ldr	r3, [pc, #372]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7ff fa9d 	bl	8002128 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7ff fa99 	bl	8002128 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e237      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c04:	4b53      	ldr	r3, [pc, #332]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d03c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c24:	4b4b      	ldr	r3, [pc, #300]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff fa78 	bl	8002128 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7ff fa74 	bl	8002128 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e212      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c4e:	4b41      	ldr	r3, [pc, #260]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ef      	beq.n	8002c3c <HAL_RCC_OscConfig+0x3ec>
 8002c5c:	e01b      	b.n	8002c96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c64:	4a3b      	ldr	r2, [pc, #236]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7ff fa5b 	bl	8002128 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c76:	f7ff fa57 	bl	8002128 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1f5      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c88:	4b32      	ldr	r3, [pc, #200]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ef      	bne.n	8002c76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80a6 	beq.w	8002df0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb4:	4b27      	ldr	r3, [pc, #156]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	4a26      	ldr	r2, [pc, #152]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc0:	4b24      	ldr	r3, [pc, #144]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd0:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d118      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce8:	f7ff fa1e 	bl	8002128 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf0:	f7ff fa1a 	bl	8002128 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1b8      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4d8>
 8002d16:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d26:	e029      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d115      	bne.n	8002d5c <HAL_RCC_OscConfig+0x50c>
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	4a07      	ldr	r2, [pc, #28]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d46:	4a03      	ldr	r2, [pc, #12]	@ (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	4b9d      	ldr	r3, [pc, #628]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d62:	4a9c      	ldr	r2, [pc, #624]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d6c:	4b99      	ldr	r3, [pc, #612]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	4a98      	ldr	r2, [pc, #608]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7ff f9d0 	bl	8002128 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7ff f9cc 	bl	8002128 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e168      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da2:	4b8c      	ldr	r3, [pc, #560]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ed      	beq.n	8002d8c <HAL_RCC_OscConfig+0x53c>
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7ff f9b9 	bl	8002128 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7ff f9b5 	bl	8002128 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e151      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd0:	4b80      	ldr	r3, [pc, #512]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ed      	bne.n	8002dba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de8:	4a7a      	ldr	r2, [pc, #488]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d03c      	beq.n	8002e76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e04:	4b73      	ldr	r3, [pc, #460]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e0a:	4a72      	ldr	r2, [pc, #456]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7ff f988 	bl	8002128 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e1c:	f7ff f984 	bl	8002128 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e122      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e2e:	4b69      	ldr	r3, [pc, #420]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ef      	beq.n	8002e1c <HAL_RCC_OscConfig+0x5cc>
 8002e3c:	e01b      	b.n	8002e76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e3e:	4b65      	ldr	r3, [pc, #404]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e44:	4a63      	ldr	r2, [pc, #396]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7ff f96b 	bl	8002128 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e56:	f7ff f967 	bl	8002128 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e105      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e68:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ef      	bne.n	8002e56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80f9 	beq.w	8003072 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	f040 80cf 	bne.w	8003028 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e8a:	4b52      	ldr	r3, [pc, #328]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 0203 	and.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d12c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d123      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d113      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	3b01      	subs	r3, #1
 8002ede:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d071      	beq.n	8002fdc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d068      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002efe:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f0a:	4b32      	ldr	r3, [pc, #200]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0ac      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f26:	f7ff f8ff 	bl	8002128 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7ff f8fb 	bl	8002128 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e099      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4c:	4b21      	ldr	r3, [pc, #132]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	4b21      	ldr	r3, [pc, #132]	@ (8002fd8 <HAL_RCC_OscConfig+0x788>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f5c:	3a01      	subs	r2, #1
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f66:	0212      	lsls	r2, r2, #8
 8002f68:	4311      	orrs	r1, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f6e:	0852      	lsrs	r2, r2, #1
 8002f70:	3a01      	subs	r2, #1
 8002f72:	0552      	lsls	r2, r2, #21
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f7a:	0852      	lsrs	r2, r2, #1
 8002f7c:	3a01      	subs	r2, #1
 8002f7e:	0652      	lsls	r2, r2, #25
 8002f80:	4311      	orrs	r1, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f86:	06d2      	lsls	r2, r2, #27
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	4912      	ldr	r1, [pc, #72]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f90:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0f      	ldr	r2, [pc, #60]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa8:	f7ff f8be 	bl	8002128 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7ff f8ba 	bl	8002128 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e058      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fce:	e050      	b.n	8003072 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e04f      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fdc:	4b27      	ldr	r3, [pc, #156]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d144      	bne.n	8003072 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b24      	ldr	r3, [pc, #144]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a23      	ldr	r2, [pc, #140]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8002fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff4:	4b21      	ldr	r3, [pc, #132]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003000:	f7ff f892 	bl	8002128 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7ff f88e 	bl	8002128 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e02c      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301a:	4b18      	ldr	r3, [pc, #96]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x7b8>
 8003026:	e024      	b.n	8003072 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d01f      	beq.n	800306e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	4b13      	ldr	r3, [pc, #76]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a12      	ldr	r2, [pc, #72]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8003034:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7ff f875 	bl	8002128 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003042:	f7ff f871 	bl	8002128 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e00f      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003060:	4b06      	ldr	r3, [pc, #24]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4905      	ldr	r1, [pc, #20]	@ (800307c <HAL_RCC_OscConfig+0x82c>)
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_RCC_OscConfig+0x830>)
 8003068:	4013      	ands	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
 800306c:	e001      	b.n	8003072 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	feeefffc 	.word	0xfeeefffc

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e11d      	b.n	80032d8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b90      	ldr	r3, [pc, #576]	@ (80032e0 <HAL_RCC_ClockConfig+0x25c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b8d      	ldr	r3, [pc, #564]	@ (80032e0 <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	498b      	ldr	r1, [pc, #556]	@ (80032e0 <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b89      	ldr	r3, [pc, #548]	@ (80032e0 <HAL_RCC_ClockConfig+0x25c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e105      	b.n	80032d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b81      	ldr	r3, [pc, #516]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b7e      	ldr	r3, [pc, #504]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	497b      	ldr	r1, [pc, #492]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d079      	beq.n	80031fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d11e      	bne.n	800314c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	4b75      	ldr	r3, [pc, #468]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0dc      	b.n	80032d8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800311e:	f000 f9d1 	bl	80034c4 <RCC_GetSysClockFreqFromPLLSource>
 8003122:	4603      	mov	r3, r0
 8003124:	4a70      	ldr	r2, [pc, #448]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d946      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800312a:	4b6e      	ldr	r3, [pc, #440]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d140      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003136:	4b6b      	ldr	r3, [pc, #428]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800313e:	4a69      	ldr	r2, [pc, #420]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003144:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003146:	2380      	movs	r3, #128	@ 0x80
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e035      	b.n	80031b8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d107      	bne.n	8003164 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003154:	4b63      	ldr	r3, [pc, #396]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d115      	bne.n	800318c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0b9      	b.n	80032d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d107      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316c:	4b5d      	ldr	r3, [pc, #372]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0ad      	b.n	80032d8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317c:	4b59      	ldr	r3, [pc, #356]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0a5      	b.n	80032d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800318c:	f000 f8b4 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8003190:	4603      	mov	r3, r0
 8003192:	4a55      	ldr	r2, [pc, #340]	@ (80032e8 <HAL_RCC_ClockConfig+0x264>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d90f      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003198:	4b52      	ldr	r3, [pc, #328]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031a4:	4b4f      	ldr	r3, [pc, #316]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ac:	4a4d      	ldr	r2, [pc, #308]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80031ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b8:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 0203 	bic.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4947      	ldr	r1, [pc, #284]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ca:	f7fe ffad 	bl	8002128 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d2:	f7fe ffa9 	bl	8002128 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e077      	b.n	80032d8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e8:	4b3e      	ldr	r3, [pc, #248]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 020c 	and.w	r2, r3, #12
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d1eb      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b80      	cmp	r3, #128	@ 0x80
 80031fe:	d105      	bne.n	800320c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003200:	4b38      	ldr	r3, [pc, #224]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a37      	ldr	r2, [pc, #220]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800320a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d010      	beq.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b31      	ldr	r3, [pc, #196]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003224:	429a      	cmp	r2, r3
 8003226:	d208      	bcs.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003228:	4b2e      	ldr	r3, [pc, #184]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	492b      	ldr	r1, [pc, #172]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323a:	4b29      	ldr	r3, [pc, #164]	@ (80032e0 <HAL_RCC_ClockConfig+0x25c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d210      	bcs.n	800326a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003248:	4b25      	ldr	r3, [pc, #148]	@ (80032e0 <HAL_RCC_ClockConfig+0x25c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f023 020f 	bic.w	r2, r3, #15
 8003250:	4923      	ldr	r1, [pc, #140]	@ (80032e0 <HAL_RCC_ClockConfig+0x25c>)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003258:	4b21      	ldr	r3, [pc, #132]	@ (80032e0 <HAL_RCC_ClockConfig+0x25c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e036      	b.n	80032d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003276:	4b1b      	ldr	r3, [pc, #108]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4918      	ldr	r1, [pc, #96]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003294:	4b13      	ldr	r3, [pc, #76]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4910      	ldr	r1, [pc, #64]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a8:	f000 f826 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <HAL_RCC_ClockConfig+0x260>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	490c      	ldr	r1, [pc, #48]	@ (80032ec <HAL_RCC_ClockConfig+0x268>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <HAL_RCC_ClockConfig+0x26c>)
 80032c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032c8:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <HAL_RCC_ClockConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe fedb 	bl	8002088 <HAL_InitTick>
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40022000 	.word	0x40022000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	04c4b400 	.word	0x04c4b400
 80032ec:	080092d8 	.word	0x080092d8
 80032f0:	20040000 	.word	0x20040000
 80032f4:	20040004 	.word	0x20040004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	@ 0x24
 80032fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003306:	4b3e      	ldr	r3, [pc, #248]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003310:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d121      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11e      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800332c:	4b34      	ldr	r3, [pc, #208]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003338:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e005      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003348:	4b2d      	ldr	r3, [pc, #180]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003354:	4a2b      	ldr	r2, [pc, #172]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d102      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e004      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d101      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800337c:	4b23      	ldr	r3, [pc, #140]	@ (800340c <HAL_RCC_GetSysClockFreq+0x114>)
 800337e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d134      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003386:	4b1e      	ldr	r3, [pc, #120]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0xa6>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d003      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0xac>
 800339c:	e005      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800339e:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 80033a0:	617b      	str	r3, [r7, #20]
      break;
 80033a2:	e005      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_GetSysClockFreq+0x114>)
 80033a6:	617b      	str	r3, [r7, #20]
      break;
 80033a8:	e002      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	617b      	str	r3, [r7, #20]
      break;
 80033ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033b0:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	3301      	adds	r3, #1
 80033bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033be:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	fb03 f202 	mul.w	r2, r3, r2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	0e5b      	lsrs	r3, r3, #25
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	3301      	adds	r3, #1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033f0:	69bb      	ldr	r3, [r7, #24]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3724      	adds	r7, #36	@ 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	080092e8 	.word	0x080092e8
 8003408:	00f42400 	.word	0x00f42400
 800340c:	007a1200 	.word	0x007a1200

08003410 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800341c:	4b27      	ldr	r3, [pc, #156]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003428:	f7ff f93e 	bl	80026a8 <HAL_PWREx_GetVoltageRange>
 800342c:	6178      	str	r0, [r7, #20]
 800342e:	e014      	b.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b22      	ldr	r3, [pc, #136]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003434:	4a21      	ldr	r2, [pc, #132]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343a:	6593      	str	r3, [r2, #88]	@ 0x58
 800343c:	4b1f      	ldr	r3, [pc, #124]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003448:	f7ff f92e 	bl	80026a8 <HAL_PWREx_GetVoltageRange>
 800344c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b1b      	ldr	r3, [pc, #108]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003458:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003460:	d10b      	bne.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b80      	cmp	r3, #128	@ 0x80
 8003466:	d913      	bls.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2ba0      	cmp	r3, #160	@ 0xa0
 800346c:	d902      	bls.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800346e:	2302      	movs	r3, #2
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	e00d      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003474:	2301      	movs	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e00a      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b7f      	cmp	r3, #127	@ 0x7f
 800347e:	d902      	bls.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003480:	2302      	movs	r3, #2
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	e004      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b70      	cmp	r3, #112	@ 0x70
 800348a:	d101      	bne.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800348c:	2301      	movs	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 020f 	bic.w	r2, r3, #15
 8003498:	4909      	ldr	r1, [pc, #36]	@ (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a0:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d001      	beq.n	80034b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40022000 	.word	0x40022000

080034c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d00b      	beq.n	80034f2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d825      	bhi.n	800352c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d008      	beq.n	80034f8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d11f      	bne.n	800352c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80034ec:	4b25      	ldr	r3, [pc, #148]	@ (8003584 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034ee:	613b      	str	r3, [r7, #16]
    break;
 80034f0:	e01f      	b.n	8003532 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80034f2:	4b25      	ldr	r3, [pc, #148]	@ (8003588 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80034f4:	613b      	str	r3, [r7, #16]
    break;
 80034f6:	e01c      	b.n	8003532 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034f8:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003504:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e005      	b.n	8003520 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003514:	4b1a      	ldr	r3, [pc, #104]	@ (8003580 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003520:	4a1a      	ldr	r2, [pc, #104]	@ (800358c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003528:	613b      	str	r3, [r7, #16]
    break;
 800352a:	e002      	b.n	8003532 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
    break;
 8003530:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003532:	4b13      	ldr	r3, [pc, #76]	@ (8003580 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	3301      	adds	r3, #1
 800353e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003540:	4b0f      	ldr	r3, [pc, #60]	@ (8003580 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	fb03 f202 	mul.w	r2, r3, r2
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003558:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0e5b      	lsrs	r3, r3, #25
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	3301      	adds	r3, #1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003572:	683b      	ldr	r3, [r7, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40021000 	.word	0x40021000
 8003584:	00f42400 	.word	0x00f42400
 8003588:	007a1200 	.word	0x007a1200
 800358c:	080092e8 	.word	0x080092e8

08003590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e095      	b.n	80036ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d108      	bne.n	80035bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035b2:	d009      	beq.n	80035c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	61da      	str	r2, [r3, #28]
 80035ba:	e005      	b.n	80035c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe fafa 	bl	8001bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003608:	d902      	bls.n	8003610 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e002      	b.n	8003616 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003614:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800361e:	d007      	beq.n	8003630 <HAL_SPI_Init+0xa0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003672:	ea42 0103 	orr.w	r1, r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	f003 0204 	and.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036ac:	ea42 0103 	orr.w	r1, r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b088      	sub	sp, #32
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036e6:	f7fe fd1f 	bl	8002128 <HAL_GetTick>
 80036ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d001      	beq.n	8003700 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
 80036fe:	e15c      	b.n	80039ba <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_SPI_Transmit+0x36>
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e154      	b.n	80039ba <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_SPI_Transmit+0x48>
 800371a:	2302      	movs	r3, #2
 800371c:	e14d      	b.n	80039ba <HAL_SPI_Transmit+0x2e4>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2203      	movs	r2, #3
 800372a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	88fa      	ldrh	r2, [r7, #6]
 8003744:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003770:	d10f      	bne.n	8003792 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379c:	2b40      	cmp	r3, #64	@ 0x40
 800379e:	d007      	beq.n	80037b0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037b8:	d952      	bls.n	8003860 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Transmit+0xf2>
 80037c2:	8b7b      	ldrh	r3, [r7, #26]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d145      	bne.n	8003854 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	881a      	ldrh	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037ec:	e032      	b.n	8003854 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d112      	bne.n	8003822 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003800:	881a      	ldrh	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	1c9a      	adds	r2, r3, #2
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003820:	e018      	b.n	8003854 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003822:	f7fe fc81 	bl	8002128 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d803      	bhi.n	800383a <HAL_SPI_Transmit+0x164>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d102      	bne.n	8003840 <HAL_SPI_Transmit+0x16a>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0b2      	b.n	80039ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1c7      	bne.n	80037ee <HAL_SPI_Transmit+0x118>
 800385e:	e083      	b.n	8003968 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_SPI_Transmit+0x198>
 8003868:	8b7b      	ldrh	r3, [r7, #26]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d177      	bne.n	800395e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d912      	bls.n	800389e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b02      	subs	r3, #2
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800389c:	e05f      	b.n	800395e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	330c      	adds	r3, #12
 80038a8:	7812      	ldrb	r2, [r2, #0]
 80038aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038c4:	e04b      	b.n	800395e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d12b      	bne.n	800392c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d912      	bls.n	8003904 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	881a      	ldrh	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b02      	subs	r3, #2
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003902:	e02c      	b.n	800395e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800392a:	e018      	b.n	800395e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392c:	f7fe fbfc 	bl	8002128 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d803      	bhi.n	8003944 <HAL_SPI_Transmit+0x26e>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d102      	bne.n	800394a <HAL_SPI_Transmit+0x274>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e02d      	b.n	80039ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ae      	bne.n	80038c6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f947 	bl	8003c00 <SPI_EndRxTxTransaction>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d4:	f7fe fba8 	bl	8002128 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039e4:	f7fe fba0 	bl	8002128 <HAL_GetTick>
 80039e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039ea:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	015b      	lsls	r3, r3, #5
 80039f0:	0d1b      	lsrs	r3, r3, #20
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039fa:	e054      	b.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d050      	beq.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a04:	f7fe fb90 	bl	8002128 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d902      	bls.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d13d      	bne.n	8003a96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a32:	d111      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3c:	d004      	beq.n	8003a48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a46:	d107      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a60:	d10f      	bne.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e017      	b.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d19b      	bne.n	80039fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20040000 	.word	0x20040000

08003ad4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	@ 0x28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ae6:	f7fe fb1f 	bl	8002128 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003af6:	f7fe fb17 	bl	8002128 <HAL_GetTick>
 8003afa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b04:	4b3d      	ldr	r3, [pc, #244]	@ (8003bfc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00da      	lsls	r2, r3, #3
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	0d1b      	lsrs	r3, r3, #20
 8003b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b1c:	e060      	b.n	8003be0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b24:	d107      	bne.n	8003b36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d050      	beq.n	8003be0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b3e:	f7fe faf3 	bl	8002128 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d902      	bls.n	8003b54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d13d      	bne.n	8003bd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b6c:	d111      	bne.n	8003b92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b76:	d004      	beq.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b80:	d107      	bne.n	8003b92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9a:	d10f      	bne.n	8003bbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e010      	b.n	8003bf2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d196      	bne.n	8003b1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3728      	adds	r7, #40	@ 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20040000 	.word	0x20040000

08003c00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ff5b 	bl	8003ad4 <SPI_WaitFifoStateUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e027      	b.n	8003c84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2180      	movs	r1, #128	@ 0x80
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff fec0 	bl	80039c4 <SPI_WaitFlagStateUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e014      	b.n	8003c84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff ff34 	bl	8003ad4 <SPI_WaitFifoStateUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e000      	b.n	8003c84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e049      	b.n	8003d32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fd fff2 	bl	8001c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f000 fa74 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e049      	b.n	8003de0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f841 	bl	8003de8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 fa1d 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0ff      	b.n	800401a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b14      	cmp	r3, #20
 8003e26:	f200 80f0 	bhi.w	800400a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e85 	.word	0x08003e85
 8003e34:	0800400b 	.word	0x0800400b
 8003e38:	0800400b 	.word	0x0800400b
 8003e3c:	0800400b 	.word	0x0800400b
 8003e40:	08003ec5 	.word	0x08003ec5
 8003e44:	0800400b 	.word	0x0800400b
 8003e48:	0800400b 	.word	0x0800400b
 8003e4c:	0800400b 	.word	0x0800400b
 8003e50:	08003f07 	.word	0x08003f07
 8003e54:	0800400b 	.word	0x0800400b
 8003e58:	0800400b 	.word	0x0800400b
 8003e5c:	0800400b 	.word	0x0800400b
 8003e60:	08003f47 	.word	0x08003f47
 8003e64:	0800400b 	.word	0x0800400b
 8003e68:	0800400b 	.word	0x0800400b
 8003e6c:	0800400b 	.word	0x0800400b
 8003e70:	08003f89 	.word	0x08003f89
 8003e74:	0800400b 	.word	0x0800400b
 8003e78:	0800400b 	.word	0x0800400b
 8003e7c:	0800400b 	.word	0x0800400b
 8003e80:	08003fc9 	.word	0x08003fc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fa3a 	bl	8004304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6999      	ldr	r1, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	619a      	str	r2, [r3, #24]
      break;
 8003ec2:	e0a5      	b.n	8004010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 faaa 	bl	8004424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
      break;
 8003f04:	e084      	b.n	8004010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fb13 	bl	8004538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0208 	orr.w	r2, r2, #8
 8003f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0204 	bic.w	r2, r2, #4
 8003f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69d9      	ldr	r1, [r3, #28]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	61da      	str	r2, [r3, #28]
      break;
 8003f44:	e064      	b.n	8004010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fb7b 	bl	8004648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	021a      	lsls	r2, r3, #8
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	61da      	str	r2, [r3, #28]
      break;
 8003f86:	e043      	b.n	8004010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fbc4 	bl	800471c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0208 	orr.w	r2, r2, #8
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0204 	bic.w	r2, r2, #4
 8003fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fc6:	e023      	b.n	8004010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fc08 	bl	80047e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004008:	e002      	b.n	8004010 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
      break;
 800400e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004018:	7dfb      	ldrb	r3, [r7, #23]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop

08004024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_TIM_ConfigClockSource+0x1c>
 800403c:	2302      	movs	r3, #2
 800403e:	e0b6      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x18a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800405e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800406a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407c:	d03e      	beq.n	80040fc <HAL_TIM_ConfigClockSource+0xd8>
 800407e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004082:	f200 8087 	bhi.w	8004194 <HAL_TIM_ConfigClockSource+0x170>
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408a:	f000 8086 	beq.w	800419a <HAL_TIM_ConfigClockSource+0x176>
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004092:	d87f      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 8004094:	2b70      	cmp	r3, #112	@ 0x70
 8004096:	d01a      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0xaa>
 8004098:	2b70      	cmp	r3, #112	@ 0x70
 800409a:	d87b      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 800409c:	2b60      	cmp	r3, #96	@ 0x60
 800409e:	d050      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x11e>
 80040a0:	2b60      	cmp	r3, #96	@ 0x60
 80040a2:	d877      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040a4:	2b50      	cmp	r3, #80	@ 0x50
 80040a6:	d03c      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0xfe>
 80040a8:	2b50      	cmp	r3, #80	@ 0x50
 80040aa:	d873      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040ac:	2b40      	cmp	r3, #64	@ 0x40
 80040ae:	d058      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x13e>
 80040b0:	2b40      	cmp	r3, #64	@ 0x40
 80040b2:	d86f      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040b4:	2b30      	cmp	r3, #48	@ 0x30
 80040b6:	d064      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x15e>
 80040b8:	2b30      	cmp	r3, #48	@ 0x30
 80040ba:	d86b      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d060      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x15e>
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d867      	bhi.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d05c      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x15e>
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d05a      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x15e>
 80040cc:	e062      	b.n	8004194 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040de:	f000 fc61 	bl	80049a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	609a      	str	r2, [r3, #8]
      break;
 80040fa:	e04f      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800410c:	f000 fc4a 	bl	80049a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800411e:	609a      	str	r2, [r3, #8]
      break;
 8004120:	e03c      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412e:	461a      	mov	r2, r3
 8004130:	f000 fbbe 	bl	80048b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2150      	movs	r1, #80	@ 0x50
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fc17 	bl	800496e <TIM_ITRx_SetConfig>
      break;
 8004140:	e02c      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800414e:	461a      	mov	r2, r3
 8004150:	f000 fbdd 	bl	800490e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2160      	movs	r1, #96	@ 0x60
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fc07 	bl	800496e <TIM_ITRx_SetConfig>
      break;
 8004160:	e01c      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416e:	461a      	mov	r2, r3
 8004170:	f000 fb9e 	bl	80048b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2140      	movs	r1, #64	@ 0x40
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fbf7 	bl	800496e <TIM_ITRx_SetConfig>
      break;
 8004180:	e00c      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f000 fbee 	bl	800496e <TIM_ITRx_SetConfig>
      break;
 8004192:	e003      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      break;
 8004198:	e000      	b.n	800419c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800419a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a46      	ldr	r2, [pc, #280]	@ (80042e4 <TIM_Base_SetConfig+0x12c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d6:	d00f      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a43      	ldr	r2, [pc, #268]	@ (80042e8 <TIM_Base_SetConfig+0x130>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a42      	ldr	r2, [pc, #264]	@ (80042ec <TIM_Base_SetConfig+0x134>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a41      	ldr	r2, [pc, #260]	@ (80042f0 <TIM_Base_SetConfig+0x138>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a40      	ldr	r2, [pc, #256]	@ (80042f4 <TIM_Base_SetConfig+0x13c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a35      	ldr	r2, [pc, #212]	@ (80042e4 <TIM_Base_SetConfig+0x12c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01f      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004218:	d01b      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a32      	ldr	r2, [pc, #200]	@ (80042e8 <TIM_Base_SetConfig+0x130>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d017      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a31      	ldr	r2, [pc, #196]	@ (80042ec <TIM_Base_SetConfig+0x134>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a30      	ldr	r2, [pc, #192]	@ (80042f0 <TIM_Base_SetConfig+0x138>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2f      	ldr	r2, [pc, #188]	@ (80042f4 <TIM_Base_SetConfig+0x13c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2e      	ldr	r2, [pc, #184]	@ (80042f8 <TIM_Base_SetConfig+0x140>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2d      	ldr	r2, [pc, #180]	@ (80042fc <TIM_Base_SetConfig+0x144>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0x9a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2c      	ldr	r2, [pc, #176]	@ (8004300 <TIM_Base_SetConfig+0x148>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a16      	ldr	r2, [pc, #88]	@ (80042e4 <TIM_Base_SetConfig+0x12c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00f      	beq.n	80042b0 <TIM_Base_SetConfig+0xf8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <TIM_Base_SetConfig+0x13c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00b      	beq.n	80042b0 <TIM_Base_SetConfig+0xf8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a17      	ldr	r2, [pc, #92]	@ (80042f8 <TIM_Base_SetConfig+0x140>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <TIM_Base_SetConfig+0xf8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a16      	ldr	r2, [pc, #88]	@ (80042fc <TIM_Base_SetConfig+0x144>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_Base_SetConfig+0xf8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a15      	ldr	r2, [pc, #84]	@ (8004300 <TIM_Base_SetConfig+0x148>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d103      	bne.n	80042b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f023 0201 	bic.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	611a      	str	r2, [r3, #16]
  }
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	40013400 	.word	0x40013400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800

08004304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f023 0201 	bic.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 0302 	bic.w	r3, r3, #2
 8004350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a2c      	ldr	r2, [pc, #176]	@ (8004410 <TIM_OC1_SetConfig+0x10c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00f      	beq.n	8004384 <TIM_OC1_SetConfig+0x80>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a2b      	ldr	r2, [pc, #172]	@ (8004414 <TIM_OC1_SetConfig+0x110>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00b      	beq.n	8004384 <TIM_OC1_SetConfig+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a2a      	ldr	r2, [pc, #168]	@ (8004418 <TIM_OC1_SetConfig+0x114>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <TIM_OC1_SetConfig+0x80>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a29      	ldr	r2, [pc, #164]	@ (800441c <TIM_OC1_SetConfig+0x118>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_OC1_SetConfig+0x80>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a28      	ldr	r2, [pc, #160]	@ (8004420 <TIM_OC1_SetConfig+0x11c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10c      	bne.n	800439e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0308 	bic.w	r3, r3, #8
 800438a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004410 <TIM_OC1_SetConfig+0x10c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_OC1_SetConfig+0xc2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004414 <TIM_OC1_SetConfig+0x110>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_OC1_SetConfig+0xc2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a19      	ldr	r2, [pc, #100]	@ (8004418 <TIM_OC1_SetConfig+0x114>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_OC1_SetConfig+0xc2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a18      	ldr	r2, [pc, #96]	@ (800441c <TIM_OC1_SetConfig+0x118>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_OC1_SetConfig+0xc2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a17      	ldr	r2, [pc, #92]	@ (8004420 <TIM_OC1_SetConfig+0x11c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d111      	bne.n	80043ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40013400 	.word	0x40013400
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800

08004424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f023 0210 	bic.w	r2, r3, #16
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800445e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0320 	bic.w	r3, r3, #32
 8004472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a28      	ldr	r2, [pc, #160]	@ (8004524 <TIM_OC2_SetConfig+0x100>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_OC2_SetConfig+0x6c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a27      	ldr	r2, [pc, #156]	@ (8004528 <TIM_OC2_SetConfig+0x104>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10d      	bne.n	80044ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004524 <TIM_OC2_SetConfig+0x100>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00f      	beq.n	80044d4 <TIM_OC2_SetConfig+0xb0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004528 <TIM_OC2_SetConfig+0x104>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <TIM_OC2_SetConfig+0xb0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <TIM_OC2_SetConfig+0x108>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_OC2_SetConfig+0xb0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004530 <TIM_OC2_SetConfig+0x10c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_OC2_SetConfig+0xb0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a19      	ldr	r2, [pc, #100]	@ (8004534 <TIM_OC2_SetConfig+0x110>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d113      	bne.n	80044fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40013400 	.word	0x40013400
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800

08004538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a27      	ldr	r2, [pc, #156]	@ (8004634 <TIM_OC3_SetConfig+0xfc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_OC3_SetConfig+0x6a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a26      	ldr	r2, [pc, #152]	@ (8004638 <TIM_OC3_SetConfig+0x100>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10d      	bne.n	80045be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004634 <TIM_OC3_SetConfig+0xfc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00f      	beq.n	80045e6 <TIM_OC3_SetConfig+0xae>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004638 <TIM_OC3_SetConfig+0x100>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <TIM_OC3_SetConfig+0xae>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a1a      	ldr	r2, [pc, #104]	@ (800463c <TIM_OC3_SetConfig+0x104>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d007      	beq.n	80045e6 <TIM_OC3_SetConfig+0xae>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a19      	ldr	r2, [pc, #100]	@ (8004640 <TIM_OC3_SetConfig+0x108>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <TIM_OC3_SetConfig+0xae>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a18      	ldr	r2, [pc, #96]	@ (8004644 <TIM_OC3_SetConfig+0x10c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d113      	bne.n	800460e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	621a      	str	r2, [r3, #32]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40013400 	.word	0x40013400
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800

08004648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	031b      	lsls	r3, r3, #12
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <TIM_OC4_SetConfig+0xc0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00f      	beq.n	80046cc <TIM_OC4_SetConfig+0x84>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a17      	ldr	r2, [pc, #92]	@ (800470c <TIM_OC4_SetConfig+0xc4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00b      	beq.n	80046cc <TIM_OC4_SetConfig+0x84>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a16      	ldr	r2, [pc, #88]	@ (8004710 <TIM_OC4_SetConfig+0xc8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d007      	beq.n	80046cc <TIM_OC4_SetConfig+0x84>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <TIM_OC4_SetConfig+0xcc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_OC4_SetConfig+0x84>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a14      	ldr	r2, [pc, #80]	@ (8004718 <TIM_OC4_SetConfig+0xd0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d109      	bne.n	80046e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	019b      	lsls	r3, r3, #6
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40013400 	.word	0x40013400
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800

0800471c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004760:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <TIM_OC5_SetConfig+0xb4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <TIM_OC5_SetConfig+0x7a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a16      	ldr	r2, [pc, #88]	@ (80047d4 <TIM_OC5_SetConfig+0xb8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_OC5_SetConfig+0x7a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a15      	ldr	r2, [pc, #84]	@ (80047d8 <TIM_OC5_SetConfig+0xbc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <TIM_OC5_SetConfig+0x7a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <TIM_OC5_SetConfig+0xc0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_OC5_SetConfig+0x7a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a13      	ldr	r2, [pc, #76]	@ (80047e0 <TIM_OC5_SetConfig+0xc4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d109      	bne.n	80047aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	621a      	str	r2, [r3, #32]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40013400 	.word	0x40013400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800

080047e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800482a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	051b      	lsls	r3, r3, #20
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a18      	ldr	r2, [pc, #96]	@ (800489c <TIM_OC6_SetConfig+0xb8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00f      	beq.n	8004860 <TIM_OC6_SetConfig+0x7c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a17      	ldr	r2, [pc, #92]	@ (80048a0 <TIM_OC6_SetConfig+0xbc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00b      	beq.n	8004860 <TIM_OC6_SetConfig+0x7c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a16      	ldr	r2, [pc, #88]	@ (80048a4 <TIM_OC6_SetConfig+0xc0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <TIM_OC6_SetConfig+0x7c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a15      	ldr	r2, [pc, #84]	@ (80048a8 <TIM_OC6_SetConfig+0xc4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_OC6_SetConfig+0x7c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a14      	ldr	r2, [pc, #80]	@ (80048ac <TIM_OC6_SetConfig+0xc8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d109      	bne.n	8004874 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004866:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800

080048b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f023 0201 	bic.w	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 030a 	bic.w	r3, r3, #10
 80048ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	621a      	str	r2, [r3, #32]
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800490e:	b480      	push	{r7}
 8004910:	b087      	sub	sp, #28
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f023 0210 	bic.w	r2, r3, #16
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	031b      	lsls	r3, r3, #12
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800494a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	f043 0307 	orr.w	r3, r3, #7
 8004990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	609a      	str	r2, [r3, #8]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	021a      	lsls	r2, r3, #8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	609a      	str	r2, [r3, #8]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e068      	b.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2e      	ldr	r2, [pc, #184]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d108      	bne.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01d      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6e:	d018      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a13      	ldr	r2, [pc, #76]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	@ (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d10c      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40013400 	.word	0x40013400
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40014000 	.word	0x40014000

08004af4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e065      	b.n	8004bdc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a16      	ldr	r2, [pc, #88]	@ (8004be8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a14      	ldr	r2, [pc, #80]	@ (8004bec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d115      	bne.n	8004bca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	051b      	lsls	r3, r3, #20
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40013400 	.word	0x40013400

08004bf0 <__cvt>:
 8004bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	ec57 6b10 	vmov	r6, r7, d0
 8004bf8:	2f00      	cmp	r7, #0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	463b      	mov	r3, r7
 8004c00:	bfbb      	ittet	lt
 8004c02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c06:	461f      	movlt	r7, r3
 8004c08:	2300      	movge	r3, #0
 8004c0a:	232d      	movlt	r3, #45	@ 0x2d
 8004c0c:	700b      	strb	r3, [r1, #0]
 8004c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c14:	4691      	mov	r9, r2
 8004c16:	f023 0820 	bic.w	r8, r3, #32
 8004c1a:	bfbc      	itt	lt
 8004c1c:	4632      	movlt	r2, r6
 8004c1e:	4616      	movlt	r6, r2
 8004c20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c24:	d005      	beq.n	8004c32 <__cvt+0x42>
 8004c26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c2a:	d100      	bne.n	8004c2e <__cvt+0x3e>
 8004c2c:	3401      	adds	r4, #1
 8004c2e:	2102      	movs	r1, #2
 8004c30:	e000      	b.n	8004c34 <__cvt+0x44>
 8004c32:	2103      	movs	r1, #3
 8004c34:	ab03      	add	r3, sp, #12
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	ab02      	add	r3, sp, #8
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	ec47 6b10 	vmov	d0, r6, r7
 8004c40:	4653      	mov	r3, sl
 8004c42:	4622      	mov	r2, r4
 8004c44:	f001 f870 	bl	8005d28 <_dtoa_r>
 8004c48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	d119      	bne.n	8004c84 <__cvt+0x94>
 8004c50:	f019 0f01 	tst.w	r9, #1
 8004c54:	d00e      	beq.n	8004c74 <__cvt+0x84>
 8004c56:	eb00 0904 	add.w	r9, r0, r4
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4630      	mov	r0, r6
 8004c60:	4639      	mov	r1, r7
 8004c62:	f7fb ff49 	bl	8000af8 <__aeabi_dcmpeq>
 8004c66:	b108      	cbz	r0, 8004c6c <__cvt+0x7c>
 8004c68:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c6c:	2230      	movs	r2, #48	@ 0x30
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	454b      	cmp	r3, r9
 8004c72:	d31e      	bcc.n	8004cb2 <__cvt+0xc2>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c78:	1b5b      	subs	r3, r3, r5
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	b004      	add	sp, #16
 8004c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c88:	eb00 0904 	add.w	r9, r0, r4
 8004c8c:	d1e5      	bne.n	8004c5a <__cvt+0x6a>
 8004c8e:	7803      	ldrb	r3, [r0, #0]
 8004c90:	2b30      	cmp	r3, #48	@ 0x30
 8004c92:	d10a      	bne.n	8004caa <__cvt+0xba>
 8004c94:	2200      	movs	r2, #0
 8004c96:	2300      	movs	r3, #0
 8004c98:	4630      	mov	r0, r6
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	f7fb ff2c 	bl	8000af8 <__aeabi_dcmpeq>
 8004ca0:	b918      	cbnz	r0, 8004caa <__cvt+0xba>
 8004ca2:	f1c4 0401 	rsb	r4, r4, #1
 8004ca6:	f8ca 4000 	str.w	r4, [sl]
 8004caa:	f8da 3000 	ldr.w	r3, [sl]
 8004cae:	4499      	add	r9, r3
 8004cb0:	e7d3      	b.n	8004c5a <__cvt+0x6a>
 8004cb2:	1c59      	adds	r1, r3, #1
 8004cb4:	9103      	str	r1, [sp, #12]
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e7d9      	b.n	8004c6e <__cvt+0x7e>

08004cba <__exponent>:
 8004cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	bfba      	itte	lt
 8004cc0:	4249      	neglt	r1, r1
 8004cc2:	232d      	movlt	r3, #45	@ 0x2d
 8004cc4:	232b      	movge	r3, #43	@ 0x2b
 8004cc6:	2909      	cmp	r1, #9
 8004cc8:	7002      	strb	r2, [r0, #0]
 8004cca:	7043      	strb	r3, [r0, #1]
 8004ccc:	dd29      	ble.n	8004d22 <__exponent+0x68>
 8004cce:	f10d 0307 	add.w	r3, sp, #7
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	270a      	movs	r7, #10
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004cdc:	fb07 1416 	mls	r4, r7, r6, r1
 8004ce0:	3430      	adds	r4, #48	@ 0x30
 8004ce2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	2c63      	cmp	r4, #99	@ 0x63
 8004cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cee:	4631      	mov	r1, r6
 8004cf0:	dcf1      	bgt.n	8004cd6 <__exponent+0x1c>
 8004cf2:	3130      	adds	r1, #48	@ 0x30
 8004cf4:	1e94      	subs	r4, r2, #2
 8004cf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004cfa:	1c41      	adds	r1, r0, #1
 8004cfc:	4623      	mov	r3, r4
 8004cfe:	42ab      	cmp	r3, r5
 8004d00:	d30a      	bcc.n	8004d18 <__exponent+0x5e>
 8004d02:	f10d 0309 	add.w	r3, sp, #9
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	42ac      	cmp	r4, r5
 8004d0a:	bf88      	it	hi
 8004d0c:	2300      	movhi	r3, #0
 8004d0e:	3302      	adds	r3, #2
 8004d10:	4403      	add	r3, r0
 8004d12:	1a18      	subs	r0, r3, r0
 8004d14:	b003      	add	sp, #12
 8004d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d20:	e7ed      	b.n	8004cfe <__exponent+0x44>
 8004d22:	2330      	movs	r3, #48	@ 0x30
 8004d24:	3130      	adds	r1, #48	@ 0x30
 8004d26:	7083      	strb	r3, [r0, #2]
 8004d28:	70c1      	strb	r1, [r0, #3]
 8004d2a:	1d03      	adds	r3, r0, #4
 8004d2c:	e7f1      	b.n	8004d12 <__exponent+0x58>
	...

08004d30 <_printf_float>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	b08d      	sub	sp, #52	@ 0x34
 8004d36:	460c      	mov	r4, r1
 8004d38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	461f      	mov	r7, r3
 8004d40:	4605      	mov	r5, r0
 8004d42:	f000 fee9 	bl	8005b18 <_localeconv_r>
 8004d46:	6803      	ldr	r3, [r0, #0]
 8004d48:	9304      	str	r3, [sp, #16]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb faa8 	bl	80002a0 <strlen>
 8004d50:	2300      	movs	r3, #0
 8004d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d54:	f8d8 3000 	ldr.w	r3, [r8]
 8004d58:	9005      	str	r0, [sp, #20]
 8004d5a:	3307      	adds	r3, #7
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	f103 0208 	add.w	r2, r3, #8
 8004d64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d68:	f8d4 b000 	ldr.w	fp, [r4]
 8004d6c:	f8c8 2000 	str.w	r2, [r8]
 8004d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d78:	9307      	str	r3, [sp, #28]
 8004d7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d86:	4b9c      	ldr	r3, [pc, #624]	@ (8004ff8 <_printf_float+0x2c8>)
 8004d88:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8c:	f7fb fee6 	bl	8000b5c <__aeabi_dcmpun>
 8004d90:	bb70      	cbnz	r0, 8004df0 <_printf_float+0xc0>
 8004d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d96:	4b98      	ldr	r3, [pc, #608]	@ (8004ff8 <_printf_float+0x2c8>)
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9c:	f7fb fec0 	bl	8000b20 <__aeabi_dcmple>
 8004da0:	bb30      	cbnz	r0, 8004df0 <_printf_float+0xc0>
 8004da2:	2200      	movs	r2, #0
 8004da4:	2300      	movs	r3, #0
 8004da6:	4640      	mov	r0, r8
 8004da8:	4649      	mov	r1, r9
 8004daa:	f7fb feaf 	bl	8000b0c <__aeabi_dcmplt>
 8004dae:	b110      	cbz	r0, 8004db6 <_printf_float+0x86>
 8004db0:	232d      	movs	r3, #45	@ 0x2d
 8004db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004db6:	4a91      	ldr	r2, [pc, #580]	@ (8004ffc <_printf_float+0x2cc>)
 8004db8:	4b91      	ldr	r3, [pc, #580]	@ (8005000 <_printf_float+0x2d0>)
 8004dba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004dbe:	bf8c      	ite	hi
 8004dc0:	4690      	movhi	r8, r2
 8004dc2:	4698      	movls	r8, r3
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	6123      	str	r3, [r4, #16]
 8004dc8:	f02b 0304 	bic.w	r3, fp, #4
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	f04f 0900 	mov.w	r9, #0
 8004dd2:	9700      	str	r7, [sp, #0]
 8004dd4:	4633      	mov	r3, r6
 8004dd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 f9d2 	bl	8005184 <_printf_common>
 8004de0:	3001      	adds	r0, #1
 8004de2:	f040 808d 	bne.w	8004f00 <_printf_float+0x1d0>
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dea:	b00d      	add	sp, #52	@ 0x34
 8004dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	4649      	mov	r1, r9
 8004df8:	f7fb feb0 	bl	8000b5c <__aeabi_dcmpun>
 8004dfc:	b140      	cbz	r0, 8004e10 <_printf_float+0xe0>
 8004dfe:	464b      	mov	r3, r9
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfbc      	itt	lt
 8004e04:	232d      	movlt	r3, #45	@ 0x2d
 8004e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8005004 <_printf_float+0x2d4>)
 8004e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005008 <_printf_float+0x2d8>)
 8004e0e:	e7d4      	b.n	8004dba <_printf_float+0x8a>
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e16:	9206      	str	r2, [sp, #24]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	d13b      	bne.n	8004e94 <_printf_float+0x164>
 8004e1c:	2306      	movs	r3, #6
 8004e1e:	6063      	str	r3, [r4, #4]
 8004e20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e24:	2300      	movs	r3, #0
 8004e26:	6022      	str	r2, [r4, #0]
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e30:	ab09      	add	r3, sp, #36	@ 0x24
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	6861      	ldr	r1, [r4, #4]
 8004e36:	ec49 8b10 	vmov	d0, r8, r9
 8004e3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f7ff fed6 	bl	8004bf0 <__cvt>
 8004e44:	9b06      	ldr	r3, [sp, #24]
 8004e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e48:	2b47      	cmp	r3, #71	@ 0x47
 8004e4a:	4680      	mov	r8, r0
 8004e4c:	d129      	bne.n	8004ea2 <_printf_float+0x172>
 8004e4e:	1cc8      	adds	r0, r1, #3
 8004e50:	db02      	blt.n	8004e58 <_printf_float+0x128>
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	4299      	cmp	r1, r3
 8004e56:	dd41      	ble.n	8004edc <_printf_float+0x1ac>
 8004e58:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e5c:	fa5f fa8a 	uxtb.w	sl, sl
 8004e60:	3901      	subs	r1, #1
 8004e62:	4652      	mov	r2, sl
 8004e64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e68:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e6a:	f7ff ff26 	bl	8004cba <__exponent>
 8004e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e70:	1813      	adds	r3, r2, r0
 8004e72:	2a01      	cmp	r2, #1
 8004e74:	4681      	mov	r9, r0
 8004e76:	6123      	str	r3, [r4, #16]
 8004e78:	dc02      	bgt.n	8004e80 <_printf_float+0x150>
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	07d2      	lsls	r2, r2, #31
 8004e7e:	d501      	bpl.n	8004e84 <_printf_float+0x154>
 8004e80:	3301      	adds	r3, #1
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0a2      	beq.n	8004dd2 <_printf_float+0xa2>
 8004e8c:	232d      	movs	r3, #45	@ 0x2d
 8004e8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e92:	e79e      	b.n	8004dd2 <_printf_float+0xa2>
 8004e94:	9a06      	ldr	r2, [sp, #24]
 8004e96:	2a47      	cmp	r2, #71	@ 0x47
 8004e98:	d1c2      	bne.n	8004e20 <_printf_float+0xf0>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1c0      	bne.n	8004e20 <_printf_float+0xf0>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e7bd      	b.n	8004e1e <_printf_float+0xee>
 8004ea2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ea6:	d9db      	bls.n	8004e60 <_printf_float+0x130>
 8004ea8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004eac:	d118      	bne.n	8004ee0 <_printf_float+0x1b0>
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	6863      	ldr	r3, [r4, #4]
 8004eb2:	dd0b      	ble.n	8004ecc <_printf_float+0x19c>
 8004eb4:	6121      	str	r1, [r4, #16]
 8004eb6:	b913      	cbnz	r3, 8004ebe <_printf_float+0x18e>
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	07d0      	lsls	r0, r2, #31
 8004ebc:	d502      	bpl.n	8004ec4 <_printf_float+0x194>
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	440b      	add	r3, r1
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ec6:	f04f 0900 	mov.w	r9, #0
 8004eca:	e7db      	b.n	8004e84 <_printf_float+0x154>
 8004ecc:	b913      	cbnz	r3, 8004ed4 <_printf_float+0x1a4>
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	07d2      	lsls	r2, r2, #31
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_float+0x1a8>
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	e7f4      	b.n	8004ec2 <_printf_float+0x192>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e7f2      	b.n	8004ec2 <_printf_float+0x192>
 8004edc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ee2:	4299      	cmp	r1, r3
 8004ee4:	db05      	blt.n	8004ef2 <_printf_float+0x1c2>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	6121      	str	r1, [r4, #16]
 8004eea:	07d8      	lsls	r0, r3, #31
 8004eec:	d5ea      	bpl.n	8004ec4 <_printf_float+0x194>
 8004eee:	1c4b      	adds	r3, r1, #1
 8004ef0:	e7e7      	b.n	8004ec2 <_printf_float+0x192>
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	bfd4      	ite	le
 8004ef6:	f1c1 0202 	rsble	r2, r1, #2
 8004efa:	2201      	movgt	r2, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	e7e0      	b.n	8004ec2 <_printf_float+0x192>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	055a      	lsls	r2, r3, #21
 8004f04:	d407      	bmi.n	8004f16 <_printf_float+0x1e6>
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	4642      	mov	r2, r8
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	d12b      	bne.n	8004f6c <_printf_float+0x23c>
 8004f14:	e767      	b.n	8004de6 <_printf_float+0xb6>
 8004f16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f1a:	f240 80dd 	bls.w	80050d8 <_printf_float+0x3a8>
 8004f1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f22:	2200      	movs	r2, #0
 8004f24:	2300      	movs	r3, #0
 8004f26:	f7fb fde7 	bl	8000af8 <__aeabi_dcmpeq>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d033      	beq.n	8004f96 <_printf_float+0x266>
 8004f2e:	4a37      	ldr	r2, [pc, #220]	@ (800500c <_printf_float+0x2dc>)
 8004f30:	2301      	movs	r3, #1
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f43f af54 	beq.w	8004de6 <_printf_float+0xb6>
 8004f3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f42:	4543      	cmp	r3, r8
 8004f44:	db02      	blt.n	8004f4c <_printf_float+0x21c>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	07d8      	lsls	r0, r3, #31
 8004f4a:	d50f      	bpl.n	8004f6c <_printf_float+0x23c>
 8004f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	f43f af45 	beq.w	8004de6 <_printf_float+0xb6>
 8004f5c:	f04f 0900 	mov.w	r9, #0
 8004f60:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f64:	f104 0a1a 	add.w	sl, r4, #26
 8004f68:	45c8      	cmp	r8, r9
 8004f6a:	dc09      	bgt.n	8004f80 <_printf_float+0x250>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	079b      	lsls	r3, r3, #30
 8004f70:	f100 8103 	bmi.w	800517a <_printf_float+0x44a>
 8004f74:	68e0      	ldr	r0, [r4, #12]
 8004f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f78:	4298      	cmp	r0, r3
 8004f7a:	bfb8      	it	lt
 8004f7c:	4618      	movlt	r0, r3
 8004f7e:	e734      	b.n	8004dea <_printf_float+0xba>
 8004f80:	2301      	movs	r3, #1
 8004f82:	4652      	mov	r2, sl
 8004f84:	4631      	mov	r1, r6
 8004f86:	4628      	mov	r0, r5
 8004f88:	47b8      	blx	r7
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	f43f af2b 	beq.w	8004de6 <_printf_float+0xb6>
 8004f90:	f109 0901 	add.w	r9, r9, #1
 8004f94:	e7e8      	b.n	8004f68 <_printf_float+0x238>
 8004f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	dc39      	bgt.n	8005010 <_printf_float+0x2e0>
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800500c <_printf_float+0x2dc>)
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	47b8      	blx	r7
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	f43f af1d 	beq.w	8004de6 <_printf_float+0xb6>
 8004fac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004fb0:	ea59 0303 	orrs.w	r3, r9, r3
 8004fb4:	d102      	bne.n	8004fbc <_printf_float+0x28c>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	07d9      	lsls	r1, r3, #31
 8004fba:	d5d7      	bpl.n	8004f6c <_printf_float+0x23c>
 8004fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	f43f af0d 	beq.w	8004de6 <_printf_float+0xb6>
 8004fcc:	f04f 0a00 	mov.w	sl, #0
 8004fd0:	f104 0b1a 	add.w	fp, r4, #26
 8004fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd6:	425b      	negs	r3, r3
 8004fd8:	4553      	cmp	r3, sl
 8004fda:	dc01      	bgt.n	8004fe0 <_printf_float+0x2b0>
 8004fdc:	464b      	mov	r3, r9
 8004fde:	e793      	b.n	8004f08 <_printf_float+0x1d8>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	465a      	mov	r2, fp
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b8      	blx	r7
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f aefb 	beq.w	8004de6 <_printf_float+0xb6>
 8004ff0:	f10a 0a01 	add.w	sl, sl, #1
 8004ff4:	e7ee      	b.n	8004fd4 <_printf_float+0x2a4>
 8004ff6:	bf00      	nop
 8004ff8:	7fefffff 	.word	0x7fefffff
 8004ffc:	0800931c 	.word	0x0800931c
 8005000:	08009318 	.word	0x08009318
 8005004:	08009324 	.word	0x08009324
 8005008:	08009320 	.word	0x08009320
 800500c:	08009328 	.word	0x08009328
 8005010:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005012:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005016:	4553      	cmp	r3, sl
 8005018:	bfa8      	it	ge
 800501a:	4653      	movge	r3, sl
 800501c:	2b00      	cmp	r3, #0
 800501e:	4699      	mov	r9, r3
 8005020:	dc36      	bgt.n	8005090 <_printf_float+0x360>
 8005022:	f04f 0b00 	mov.w	fp, #0
 8005026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800502a:	f104 021a 	add.w	r2, r4, #26
 800502e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005030:	9306      	str	r3, [sp, #24]
 8005032:	eba3 0309 	sub.w	r3, r3, r9
 8005036:	455b      	cmp	r3, fp
 8005038:	dc31      	bgt.n	800509e <_printf_float+0x36e>
 800503a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503c:	459a      	cmp	sl, r3
 800503e:	dc3a      	bgt.n	80050b6 <_printf_float+0x386>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	07da      	lsls	r2, r3, #31
 8005044:	d437      	bmi.n	80050b6 <_printf_float+0x386>
 8005046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005048:	ebaa 0903 	sub.w	r9, sl, r3
 800504c:	9b06      	ldr	r3, [sp, #24]
 800504e:	ebaa 0303 	sub.w	r3, sl, r3
 8005052:	4599      	cmp	r9, r3
 8005054:	bfa8      	it	ge
 8005056:	4699      	movge	r9, r3
 8005058:	f1b9 0f00 	cmp.w	r9, #0
 800505c:	dc33      	bgt.n	80050c6 <_printf_float+0x396>
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005066:	f104 0b1a 	add.w	fp, r4, #26
 800506a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800506c:	ebaa 0303 	sub.w	r3, sl, r3
 8005070:	eba3 0309 	sub.w	r3, r3, r9
 8005074:	4543      	cmp	r3, r8
 8005076:	f77f af79 	ble.w	8004f6c <_printf_float+0x23c>
 800507a:	2301      	movs	r3, #1
 800507c:	465a      	mov	r2, fp
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f aeae 	beq.w	8004de6 <_printf_float+0xb6>
 800508a:	f108 0801 	add.w	r8, r8, #1
 800508e:	e7ec      	b.n	800506a <_printf_float+0x33a>
 8005090:	4642      	mov	r2, r8
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	d1c2      	bne.n	8005022 <_printf_float+0x2f2>
 800509c:	e6a3      	b.n	8004de6 <_printf_float+0xb6>
 800509e:	2301      	movs	r3, #1
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	9206      	str	r2, [sp, #24]
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f ae9c 	beq.w	8004de6 <_printf_float+0xb6>
 80050ae:	9a06      	ldr	r2, [sp, #24]
 80050b0:	f10b 0b01 	add.w	fp, fp, #1
 80050b4:	e7bb      	b.n	800502e <_printf_float+0x2fe>
 80050b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ba:	4631      	mov	r1, r6
 80050bc:	4628      	mov	r0, r5
 80050be:	47b8      	blx	r7
 80050c0:	3001      	adds	r0, #1
 80050c2:	d1c0      	bne.n	8005046 <_printf_float+0x316>
 80050c4:	e68f      	b.n	8004de6 <_printf_float+0xb6>
 80050c6:	9a06      	ldr	r2, [sp, #24]
 80050c8:	464b      	mov	r3, r9
 80050ca:	4442      	add	r2, r8
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	d1c3      	bne.n	800505e <_printf_float+0x32e>
 80050d6:	e686      	b.n	8004de6 <_printf_float+0xb6>
 80050d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050dc:	f1ba 0f01 	cmp.w	sl, #1
 80050e0:	dc01      	bgt.n	80050e6 <_printf_float+0x3b6>
 80050e2:	07db      	lsls	r3, r3, #31
 80050e4:	d536      	bpl.n	8005154 <_printf_float+0x424>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4642      	mov	r2, r8
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	f43f ae78 	beq.w	8004de6 <_printf_float+0xb6>
 80050f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f ae70 	beq.w	8004de6 <_printf_float+0xb6>
 8005106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800510a:	2200      	movs	r2, #0
 800510c:	2300      	movs	r3, #0
 800510e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005112:	f7fb fcf1 	bl	8000af8 <__aeabi_dcmpeq>
 8005116:	b9c0      	cbnz	r0, 800514a <_printf_float+0x41a>
 8005118:	4653      	mov	r3, sl
 800511a:	f108 0201 	add.w	r2, r8, #1
 800511e:	4631      	mov	r1, r6
 8005120:	4628      	mov	r0, r5
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	d10c      	bne.n	8005142 <_printf_float+0x412>
 8005128:	e65d      	b.n	8004de6 <_printf_float+0xb6>
 800512a:	2301      	movs	r3, #1
 800512c:	465a      	mov	r2, fp
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	f43f ae56 	beq.w	8004de6 <_printf_float+0xb6>
 800513a:	f108 0801 	add.w	r8, r8, #1
 800513e:	45d0      	cmp	r8, sl
 8005140:	dbf3      	blt.n	800512a <_printf_float+0x3fa>
 8005142:	464b      	mov	r3, r9
 8005144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005148:	e6df      	b.n	8004f0a <_printf_float+0x1da>
 800514a:	f04f 0800 	mov.w	r8, #0
 800514e:	f104 0b1a 	add.w	fp, r4, #26
 8005152:	e7f4      	b.n	800513e <_printf_float+0x40e>
 8005154:	2301      	movs	r3, #1
 8005156:	4642      	mov	r2, r8
 8005158:	e7e1      	b.n	800511e <_printf_float+0x3ee>
 800515a:	2301      	movs	r3, #1
 800515c:	464a      	mov	r2, r9
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	47b8      	blx	r7
 8005164:	3001      	adds	r0, #1
 8005166:	f43f ae3e 	beq.w	8004de6 <_printf_float+0xb6>
 800516a:	f108 0801 	add.w	r8, r8, #1
 800516e:	68e3      	ldr	r3, [r4, #12]
 8005170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005172:	1a5b      	subs	r3, r3, r1
 8005174:	4543      	cmp	r3, r8
 8005176:	dcf0      	bgt.n	800515a <_printf_float+0x42a>
 8005178:	e6fc      	b.n	8004f74 <_printf_float+0x244>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	f104 0919 	add.w	r9, r4, #25
 8005182:	e7f4      	b.n	800516e <_printf_float+0x43e>

08005184 <_printf_common>:
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	4616      	mov	r6, r2
 800518a:	4698      	mov	r8, r3
 800518c:	688a      	ldr	r2, [r1, #8]
 800518e:	690b      	ldr	r3, [r1, #16]
 8005190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005194:	4293      	cmp	r3, r2
 8005196:	bfb8      	it	lt
 8005198:	4613      	movlt	r3, r2
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051a0:	4607      	mov	r7, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	b10a      	cbz	r2, 80051aa <_printf_common+0x26>
 80051a6:	3301      	adds	r3, #1
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	0699      	lsls	r1, r3, #26
 80051ae:	bf42      	ittt	mi
 80051b0:	6833      	ldrmi	r3, [r6, #0]
 80051b2:	3302      	addmi	r3, #2
 80051b4:	6033      	strmi	r3, [r6, #0]
 80051b6:	6825      	ldr	r5, [r4, #0]
 80051b8:	f015 0506 	ands.w	r5, r5, #6
 80051bc:	d106      	bne.n	80051cc <_printf_common+0x48>
 80051be:	f104 0a19 	add.w	sl, r4, #25
 80051c2:	68e3      	ldr	r3, [r4, #12]
 80051c4:	6832      	ldr	r2, [r6, #0]
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	dc26      	bgt.n	800521a <_printf_common+0x96>
 80051cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051d0:	6822      	ldr	r2, [r4, #0]
 80051d2:	3b00      	subs	r3, #0
 80051d4:	bf18      	it	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	0692      	lsls	r2, r2, #26
 80051da:	d42b      	bmi.n	8005234 <_printf_common+0xb0>
 80051dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051e0:	4641      	mov	r1, r8
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c8      	blx	r9
 80051e6:	3001      	adds	r0, #1
 80051e8:	d01e      	beq.n	8005228 <_printf_common+0xa4>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	f003 0306 	and.w	r3, r3, #6
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	bf02      	ittt	eq
 80051f6:	68e5      	ldreq	r5, [r4, #12]
 80051f8:	6833      	ldreq	r3, [r6, #0]
 80051fa:	1aed      	subeq	r5, r5, r3
 80051fc:	68a3      	ldr	r3, [r4, #8]
 80051fe:	bf0c      	ite	eq
 8005200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005204:	2500      	movne	r5, #0
 8005206:	4293      	cmp	r3, r2
 8005208:	bfc4      	itt	gt
 800520a:	1a9b      	subgt	r3, r3, r2
 800520c:	18ed      	addgt	r5, r5, r3
 800520e:	2600      	movs	r6, #0
 8005210:	341a      	adds	r4, #26
 8005212:	42b5      	cmp	r5, r6
 8005214:	d11a      	bne.n	800524c <_printf_common+0xc8>
 8005216:	2000      	movs	r0, #0
 8005218:	e008      	b.n	800522c <_printf_common+0xa8>
 800521a:	2301      	movs	r3, #1
 800521c:	4652      	mov	r2, sl
 800521e:	4641      	mov	r1, r8
 8005220:	4638      	mov	r0, r7
 8005222:	47c8      	blx	r9
 8005224:	3001      	adds	r0, #1
 8005226:	d103      	bne.n	8005230 <_printf_common+0xac>
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005230:	3501      	adds	r5, #1
 8005232:	e7c6      	b.n	80051c2 <_printf_common+0x3e>
 8005234:	18e1      	adds	r1, r4, r3
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	2030      	movs	r0, #48	@ 0x30
 800523a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800523e:	4422      	add	r2, r4
 8005240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005248:	3302      	adds	r3, #2
 800524a:	e7c7      	b.n	80051dc <_printf_common+0x58>
 800524c:	2301      	movs	r3, #1
 800524e:	4622      	mov	r2, r4
 8005250:	4641      	mov	r1, r8
 8005252:	4638      	mov	r0, r7
 8005254:	47c8      	blx	r9
 8005256:	3001      	adds	r0, #1
 8005258:	d0e6      	beq.n	8005228 <_printf_common+0xa4>
 800525a:	3601      	adds	r6, #1
 800525c:	e7d9      	b.n	8005212 <_printf_common+0x8e>
	...

08005260 <_printf_i>:
 8005260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	7e0f      	ldrb	r7, [r1, #24]
 8005266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005268:	2f78      	cmp	r7, #120	@ 0x78
 800526a:	4691      	mov	r9, r2
 800526c:	4680      	mov	r8, r0
 800526e:	460c      	mov	r4, r1
 8005270:	469a      	mov	sl, r3
 8005272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005276:	d807      	bhi.n	8005288 <_printf_i+0x28>
 8005278:	2f62      	cmp	r7, #98	@ 0x62
 800527a:	d80a      	bhi.n	8005292 <_printf_i+0x32>
 800527c:	2f00      	cmp	r7, #0
 800527e:	f000 80d1 	beq.w	8005424 <_printf_i+0x1c4>
 8005282:	2f58      	cmp	r7, #88	@ 0x58
 8005284:	f000 80b8 	beq.w	80053f8 <_printf_i+0x198>
 8005288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800528c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005290:	e03a      	b.n	8005308 <_printf_i+0xa8>
 8005292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005296:	2b15      	cmp	r3, #21
 8005298:	d8f6      	bhi.n	8005288 <_printf_i+0x28>
 800529a:	a101      	add	r1, pc, #4	@ (adr r1, 80052a0 <_printf_i+0x40>)
 800529c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	0800530d 	.word	0x0800530d
 80052a8:	08005289 	.word	0x08005289
 80052ac:	08005289 	.word	0x08005289
 80052b0:	08005289 	.word	0x08005289
 80052b4:	08005289 	.word	0x08005289
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	08005289 	.word	0x08005289
 80052c0:	08005289 	.word	0x08005289
 80052c4:	08005289 	.word	0x08005289
 80052c8:	08005289 	.word	0x08005289
 80052cc:	0800540b 	.word	0x0800540b
 80052d0:	08005337 	.word	0x08005337
 80052d4:	080053c5 	.word	0x080053c5
 80052d8:	08005289 	.word	0x08005289
 80052dc:	08005289 	.word	0x08005289
 80052e0:	0800542d 	.word	0x0800542d
 80052e4:	08005289 	.word	0x08005289
 80052e8:	08005337 	.word	0x08005337
 80052ec:	08005289 	.word	0x08005289
 80052f0:	08005289 	.word	0x08005289
 80052f4:	080053cd 	.word	0x080053cd
 80052f8:	6833      	ldr	r3, [r6, #0]
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6032      	str	r2, [r6, #0]
 8005300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005308:	2301      	movs	r3, #1
 800530a:	e09c      	b.n	8005446 <_printf_i+0x1e6>
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	1d19      	adds	r1, r3, #4
 8005312:	6031      	str	r1, [r6, #0]
 8005314:	0606      	lsls	r6, r0, #24
 8005316:	d501      	bpl.n	800531c <_printf_i+0xbc>
 8005318:	681d      	ldr	r5, [r3, #0]
 800531a:	e003      	b.n	8005324 <_printf_i+0xc4>
 800531c:	0645      	lsls	r5, r0, #25
 800531e:	d5fb      	bpl.n	8005318 <_printf_i+0xb8>
 8005320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005324:	2d00      	cmp	r5, #0
 8005326:	da03      	bge.n	8005330 <_printf_i+0xd0>
 8005328:	232d      	movs	r3, #45	@ 0x2d
 800532a:	426d      	negs	r5, r5
 800532c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005330:	4858      	ldr	r0, [pc, #352]	@ (8005494 <_printf_i+0x234>)
 8005332:	230a      	movs	r3, #10
 8005334:	e011      	b.n	800535a <_printf_i+0xfa>
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	0608      	lsls	r0, r1, #24
 800533c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005340:	d402      	bmi.n	8005348 <_printf_i+0xe8>
 8005342:	0649      	lsls	r1, r1, #25
 8005344:	bf48      	it	mi
 8005346:	b2ad      	uxthmi	r5, r5
 8005348:	2f6f      	cmp	r7, #111	@ 0x6f
 800534a:	4852      	ldr	r0, [pc, #328]	@ (8005494 <_printf_i+0x234>)
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	bf14      	ite	ne
 8005350:	230a      	movne	r3, #10
 8005352:	2308      	moveq	r3, #8
 8005354:	2100      	movs	r1, #0
 8005356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800535a:	6866      	ldr	r6, [r4, #4]
 800535c:	60a6      	str	r6, [r4, #8]
 800535e:	2e00      	cmp	r6, #0
 8005360:	db05      	blt.n	800536e <_printf_i+0x10e>
 8005362:	6821      	ldr	r1, [r4, #0]
 8005364:	432e      	orrs	r6, r5
 8005366:	f021 0104 	bic.w	r1, r1, #4
 800536a:	6021      	str	r1, [r4, #0]
 800536c:	d04b      	beq.n	8005406 <_printf_i+0x1a6>
 800536e:	4616      	mov	r6, r2
 8005370:	fbb5 f1f3 	udiv	r1, r5, r3
 8005374:	fb03 5711 	mls	r7, r3, r1, r5
 8005378:	5dc7      	ldrb	r7, [r0, r7]
 800537a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800537e:	462f      	mov	r7, r5
 8005380:	42bb      	cmp	r3, r7
 8005382:	460d      	mov	r5, r1
 8005384:	d9f4      	bls.n	8005370 <_printf_i+0x110>
 8005386:	2b08      	cmp	r3, #8
 8005388:	d10b      	bne.n	80053a2 <_printf_i+0x142>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	07df      	lsls	r7, r3, #31
 800538e:	d508      	bpl.n	80053a2 <_printf_i+0x142>
 8005390:	6923      	ldr	r3, [r4, #16]
 8005392:	6861      	ldr	r1, [r4, #4]
 8005394:	4299      	cmp	r1, r3
 8005396:	bfde      	ittt	le
 8005398:	2330      	movle	r3, #48	@ 0x30
 800539a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800539e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053a2:	1b92      	subs	r2, r2, r6
 80053a4:	6122      	str	r2, [r4, #16]
 80053a6:	f8cd a000 	str.w	sl, [sp]
 80053aa:	464b      	mov	r3, r9
 80053ac:	aa03      	add	r2, sp, #12
 80053ae:	4621      	mov	r1, r4
 80053b0:	4640      	mov	r0, r8
 80053b2:	f7ff fee7 	bl	8005184 <_printf_common>
 80053b6:	3001      	adds	r0, #1
 80053b8:	d14a      	bne.n	8005450 <_printf_i+0x1f0>
 80053ba:	f04f 30ff 	mov.w	r0, #4294967295
 80053be:	b004      	add	sp, #16
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	f043 0320 	orr.w	r3, r3, #32
 80053ca:	6023      	str	r3, [r4, #0]
 80053cc:	4832      	ldr	r0, [pc, #200]	@ (8005498 <_printf_i+0x238>)
 80053ce:	2778      	movs	r7, #120	@ 0x78
 80053d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	6831      	ldr	r1, [r6, #0]
 80053d8:	061f      	lsls	r7, r3, #24
 80053da:	f851 5b04 	ldr.w	r5, [r1], #4
 80053de:	d402      	bmi.n	80053e6 <_printf_i+0x186>
 80053e0:	065f      	lsls	r7, r3, #25
 80053e2:	bf48      	it	mi
 80053e4:	b2ad      	uxthmi	r5, r5
 80053e6:	6031      	str	r1, [r6, #0]
 80053e8:	07d9      	lsls	r1, r3, #31
 80053ea:	bf44      	itt	mi
 80053ec:	f043 0320 	orrmi.w	r3, r3, #32
 80053f0:	6023      	strmi	r3, [r4, #0]
 80053f2:	b11d      	cbz	r5, 80053fc <_printf_i+0x19c>
 80053f4:	2310      	movs	r3, #16
 80053f6:	e7ad      	b.n	8005354 <_printf_i+0xf4>
 80053f8:	4826      	ldr	r0, [pc, #152]	@ (8005494 <_printf_i+0x234>)
 80053fa:	e7e9      	b.n	80053d0 <_printf_i+0x170>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	f023 0320 	bic.w	r3, r3, #32
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	e7f6      	b.n	80053f4 <_printf_i+0x194>
 8005406:	4616      	mov	r6, r2
 8005408:	e7bd      	b.n	8005386 <_printf_i+0x126>
 800540a:	6833      	ldr	r3, [r6, #0]
 800540c:	6825      	ldr	r5, [r4, #0]
 800540e:	6961      	ldr	r1, [r4, #20]
 8005410:	1d18      	adds	r0, r3, #4
 8005412:	6030      	str	r0, [r6, #0]
 8005414:	062e      	lsls	r6, r5, #24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	d501      	bpl.n	800541e <_printf_i+0x1be>
 800541a:	6019      	str	r1, [r3, #0]
 800541c:	e002      	b.n	8005424 <_printf_i+0x1c4>
 800541e:	0668      	lsls	r0, r5, #25
 8005420:	d5fb      	bpl.n	800541a <_printf_i+0x1ba>
 8005422:	8019      	strh	r1, [r3, #0]
 8005424:	2300      	movs	r3, #0
 8005426:	6123      	str	r3, [r4, #16]
 8005428:	4616      	mov	r6, r2
 800542a:	e7bc      	b.n	80053a6 <_printf_i+0x146>
 800542c:	6833      	ldr	r3, [r6, #0]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	6032      	str	r2, [r6, #0]
 8005432:	681e      	ldr	r6, [r3, #0]
 8005434:	6862      	ldr	r2, [r4, #4]
 8005436:	2100      	movs	r1, #0
 8005438:	4630      	mov	r0, r6
 800543a:	f7fa fee1 	bl	8000200 <memchr>
 800543e:	b108      	cbz	r0, 8005444 <_printf_i+0x1e4>
 8005440:	1b80      	subs	r0, r0, r6
 8005442:	6060      	str	r0, [r4, #4]
 8005444:	6863      	ldr	r3, [r4, #4]
 8005446:	6123      	str	r3, [r4, #16]
 8005448:	2300      	movs	r3, #0
 800544a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800544e:	e7aa      	b.n	80053a6 <_printf_i+0x146>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	4632      	mov	r2, r6
 8005454:	4649      	mov	r1, r9
 8005456:	4640      	mov	r0, r8
 8005458:	47d0      	blx	sl
 800545a:	3001      	adds	r0, #1
 800545c:	d0ad      	beq.n	80053ba <_printf_i+0x15a>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	079b      	lsls	r3, r3, #30
 8005462:	d413      	bmi.n	800548c <_printf_i+0x22c>
 8005464:	68e0      	ldr	r0, [r4, #12]
 8005466:	9b03      	ldr	r3, [sp, #12]
 8005468:	4298      	cmp	r0, r3
 800546a:	bfb8      	it	lt
 800546c:	4618      	movlt	r0, r3
 800546e:	e7a6      	b.n	80053be <_printf_i+0x15e>
 8005470:	2301      	movs	r3, #1
 8005472:	4632      	mov	r2, r6
 8005474:	4649      	mov	r1, r9
 8005476:	4640      	mov	r0, r8
 8005478:	47d0      	blx	sl
 800547a:	3001      	adds	r0, #1
 800547c:	d09d      	beq.n	80053ba <_printf_i+0x15a>
 800547e:	3501      	adds	r5, #1
 8005480:	68e3      	ldr	r3, [r4, #12]
 8005482:	9903      	ldr	r1, [sp, #12]
 8005484:	1a5b      	subs	r3, r3, r1
 8005486:	42ab      	cmp	r3, r5
 8005488:	dcf2      	bgt.n	8005470 <_printf_i+0x210>
 800548a:	e7eb      	b.n	8005464 <_printf_i+0x204>
 800548c:	2500      	movs	r5, #0
 800548e:	f104 0619 	add.w	r6, r4, #25
 8005492:	e7f5      	b.n	8005480 <_printf_i+0x220>
 8005494:	0800932a 	.word	0x0800932a
 8005498:	0800933b 	.word	0x0800933b

0800549c <_scanf_float>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	b087      	sub	sp, #28
 80054a2:	4691      	mov	r9, r2
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	688b      	ldr	r3, [r1, #8]
 80054a8:	1e5a      	subs	r2, r3, #1
 80054aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80054ae:	bf81      	itttt	hi
 80054b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80054b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80054b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80054bc:	608b      	strhi	r3, [r1, #8]
 80054be:	680b      	ldr	r3, [r1, #0]
 80054c0:	460a      	mov	r2, r1
 80054c2:	f04f 0500 	mov.w	r5, #0
 80054c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80054ca:	f842 3b1c 	str.w	r3, [r2], #28
 80054ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80054d2:	4680      	mov	r8, r0
 80054d4:	460c      	mov	r4, r1
 80054d6:	bf98      	it	ls
 80054d8:	f04f 0b00 	movls.w	fp, #0
 80054dc:	9201      	str	r2, [sp, #4]
 80054de:	4616      	mov	r6, r2
 80054e0:	46aa      	mov	sl, r5
 80054e2:	462f      	mov	r7, r5
 80054e4:	9502      	str	r5, [sp, #8]
 80054e6:	68a2      	ldr	r2, [r4, #8]
 80054e8:	b15a      	cbz	r2, 8005502 <_scanf_float+0x66>
 80054ea:	f8d9 3000 	ldr.w	r3, [r9]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80054f2:	d863      	bhi.n	80055bc <_scanf_float+0x120>
 80054f4:	2b40      	cmp	r3, #64	@ 0x40
 80054f6:	d83b      	bhi.n	8005570 <_scanf_float+0xd4>
 80054f8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80054fc:	b2c8      	uxtb	r0, r1
 80054fe:	280e      	cmp	r0, #14
 8005500:	d939      	bls.n	8005576 <_scanf_float+0xda>
 8005502:	b11f      	cbz	r7, 800550c <_scanf_float+0x70>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005510:	f1ba 0f01 	cmp.w	sl, #1
 8005514:	f200 8114 	bhi.w	8005740 <_scanf_float+0x2a4>
 8005518:	9b01      	ldr	r3, [sp, #4]
 800551a:	429e      	cmp	r6, r3
 800551c:	f200 8105 	bhi.w	800572a <_scanf_float+0x28e>
 8005520:	2001      	movs	r0, #1
 8005522:	b007      	add	sp, #28
 8005524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005528:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800552c:	2a0d      	cmp	r2, #13
 800552e:	d8e8      	bhi.n	8005502 <_scanf_float+0x66>
 8005530:	a101      	add	r1, pc, #4	@ (adr r1, 8005538 <_scanf_float+0x9c>)
 8005532:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005536:	bf00      	nop
 8005538:	08005681 	.word	0x08005681
 800553c:	08005503 	.word	0x08005503
 8005540:	08005503 	.word	0x08005503
 8005544:	08005503 	.word	0x08005503
 8005548:	080056dd 	.word	0x080056dd
 800554c:	080056b7 	.word	0x080056b7
 8005550:	08005503 	.word	0x08005503
 8005554:	08005503 	.word	0x08005503
 8005558:	0800568f 	.word	0x0800568f
 800555c:	08005503 	.word	0x08005503
 8005560:	08005503 	.word	0x08005503
 8005564:	08005503 	.word	0x08005503
 8005568:	08005503 	.word	0x08005503
 800556c:	0800564b 	.word	0x0800564b
 8005570:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005574:	e7da      	b.n	800552c <_scanf_float+0x90>
 8005576:	290e      	cmp	r1, #14
 8005578:	d8c3      	bhi.n	8005502 <_scanf_float+0x66>
 800557a:	a001      	add	r0, pc, #4	@ (adr r0, 8005580 <_scanf_float+0xe4>)
 800557c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005580:	0800563b 	.word	0x0800563b
 8005584:	08005503 	.word	0x08005503
 8005588:	0800563b 	.word	0x0800563b
 800558c:	080056cb 	.word	0x080056cb
 8005590:	08005503 	.word	0x08005503
 8005594:	080055dd 	.word	0x080055dd
 8005598:	08005621 	.word	0x08005621
 800559c:	08005621 	.word	0x08005621
 80055a0:	08005621 	.word	0x08005621
 80055a4:	08005621 	.word	0x08005621
 80055a8:	08005621 	.word	0x08005621
 80055ac:	08005621 	.word	0x08005621
 80055b0:	08005621 	.word	0x08005621
 80055b4:	08005621 	.word	0x08005621
 80055b8:	08005621 	.word	0x08005621
 80055bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80055be:	d809      	bhi.n	80055d4 <_scanf_float+0x138>
 80055c0:	2b60      	cmp	r3, #96	@ 0x60
 80055c2:	d8b1      	bhi.n	8005528 <_scanf_float+0x8c>
 80055c4:	2b54      	cmp	r3, #84	@ 0x54
 80055c6:	d07b      	beq.n	80056c0 <_scanf_float+0x224>
 80055c8:	2b59      	cmp	r3, #89	@ 0x59
 80055ca:	d19a      	bne.n	8005502 <_scanf_float+0x66>
 80055cc:	2d07      	cmp	r5, #7
 80055ce:	d198      	bne.n	8005502 <_scanf_float+0x66>
 80055d0:	2508      	movs	r5, #8
 80055d2:	e02f      	b.n	8005634 <_scanf_float+0x198>
 80055d4:	2b74      	cmp	r3, #116	@ 0x74
 80055d6:	d073      	beq.n	80056c0 <_scanf_float+0x224>
 80055d8:	2b79      	cmp	r3, #121	@ 0x79
 80055da:	e7f6      	b.n	80055ca <_scanf_float+0x12e>
 80055dc:	6821      	ldr	r1, [r4, #0]
 80055de:	05c8      	lsls	r0, r1, #23
 80055e0:	d51e      	bpl.n	8005620 <_scanf_float+0x184>
 80055e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80055e6:	6021      	str	r1, [r4, #0]
 80055e8:	3701      	adds	r7, #1
 80055ea:	f1bb 0f00 	cmp.w	fp, #0
 80055ee:	d003      	beq.n	80055f8 <_scanf_float+0x15c>
 80055f0:	3201      	adds	r2, #1
 80055f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055f6:	60a2      	str	r2, [r4, #8]
 80055f8:	68a3      	ldr	r3, [r4, #8]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	60a3      	str	r3, [r4, #8]
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	3301      	adds	r3, #1
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005608:	3b01      	subs	r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	f8c9 3004 	str.w	r3, [r9, #4]
 8005610:	f340 8082 	ble.w	8005718 <_scanf_float+0x27c>
 8005614:	f8d9 3000 	ldr.w	r3, [r9]
 8005618:	3301      	adds	r3, #1
 800561a:	f8c9 3000 	str.w	r3, [r9]
 800561e:	e762      	b.n	80054e6 <_scanf_float+0x4a>
 8005620:	eb1a 0105 	adds.w	r1, sl, r5
 8005624:	f47f af6d 	bne.w	8005502 <_scanf_float+0x66>
 8005628:	6822      	ldr	r2, [r4, #0]
 800562a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800562e:	6022      	str	r2, [r4, #0]
 8005630:	460d      	mov	r5, r1
 8005632:	468a      	mov	sl, r1
 8005634:	f806 3b01 	strb.w	r3, [r6], #1
 8005638:	e7de      	b.n	80055f8 <_scanf_float+0x15c>
 800563a:	6822      	ldr	r2, [r4, #0]
 800563c:	0610      	lsls	r0, r2, #24
 800563e:	f57f af60 	bpl.w	8005502 <_scanf_float+0x66>
 8005642:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005646:	6022      	str	r2, [r4, #0]
 8005648:	e7f4      	b.n	8005634 <_scanf_float+0x198>
 800564a:	f1ba 0f00 	cmp.w	sl, #0
 800564e:	d10c      	bne.n	800566a <_scanf_float+0x1ce>
 8005650:	b977      	cbnz	r7, 8005670 <_scanf_float+0x1d4>
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005658:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800565c:	d108      	bne.n	8005670 <_scanf_float+0x1d4>
 800565e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005662:	6022      	str	r2, [r4, #0]
 8005664:	f04f 0a01 	mov.w	sl, #1
 8005668:	e7e4      	b.n	8005634 <_scanf_float+0x198>
 800566a:	f1ba 0f02 	cmp.w	sl, #2
 800566e:	d050      	beq.n	8005712 <_scanf_float+0x276>
 8005670:	2d01      	cmp	r5, #1
 8005672:	d002      	beq.n	800567a <_scanf_float+0x1de>
 8005674:	2d04      	cmp	r5, #4
 8005676:	f47f af44 	bne.w	8005502 <_scanf_float+0x66>
 800567a:	3501      	adds	r5, #1
 800567c:	b2ed      	uxtb	r5, r5
 800567e:	e7d9      	b.n	8005634 <_scanf_float+0x198>
 8005680:	f1ba 0f01 	cmp.w	sl, #1
 8005684:	f47f af3d 	bne.w	8005502 <_scanf_float+0x66>
 8005688:	f04f 0a02 	mov.w	sl, #2
 800568c:	e7d2      	b.n	8005634 <_scanf_float+0x198>
 800568e:	b975      	cbnz	r5, 80056ae <_scanf_float+0x212>
 8005690:	2f00      	cmp	r7, #0
 8005692:	f47f af37 	bne.w	8005504 <_scanf_float+0x68>
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800569c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80056a0:	f040 8103 	bne.w	80058aa <_scanf_float+0x40e>
 80056a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	2501      	movs	r5, #1
 80056ac:	e7c2      	b.n	8005634 <_scanf_float+0x198>
 80056ae:	2d03      	cmp	r5, #3
 80056b0:	d0e3      	beq.n	800567a <_scanf_float+0x1de>
 80056b2:	2d05      	cmp	r5, #5
 80056b4:	e7df      	b.n	8005676 <_scanf_float+0x1da>
 80056b6:	2d02      	cmp	r5, #2
 80056b8:	f47f af23 	bne.w	8005502 <_scanf_float+0x66>
 80056bc:	2503      	movs	r5, #3
 80056be:	e7b9      	b.n	8005634 <_scanf_float+0x198>
 80056c0:	2d06      	cmp	r5, #6
 80056c2:	f47f af1e 	bne.w	8005502 <_scanf_float+0x66>
 80056c6:	2507      	movs	r5, #7
 80056c8:	e7b4      	b.n	8005634 <_scanf_float+0x198>
 80056ca:	6822      	ldr	r2, [r4, #0]
 80056cc:	0591      	lsls	r1, r2, #22
 80056ce:	f57f af18 	bpl.w	8005502 <_scanf_float+0x66>
 80056d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80056d6:	6022      	str	r2, [r4, #0]
 80056d8:	9702      	str	r7, [sp, #8]
 80056da:	e7ab      	b.n	8005634 <_scanf_float+0x198>
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80056e2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80056e6:	d005      	beq.n	80056f4 <_scanf_float+0x258>
 80056e8:	0550      	lsls	r0, r2, #21
 80056ea:	f57f af0a 	bpl.w	8005502 <_scanf_float+0x66>
 80056ee:	2f00      	cmp	r7, #0
 80056f0:	f000 80db 	beq.w	80058aa <_scanf_float+0x40e>
 80056f4:	0591      	lsls	r1, r2, #22
 80056f6:	bf58      	it	pl
 80056f8:	9902      	ldrpl	r1, [sp, #8]
 80056fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056fe:	bf58      	it	pl
 8005700:	1a79      	subpl	r1, r7, r1
 8005702:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005706:	bf58      	it	pl
 8005708:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800570c:	6022      	str	r2, [r4, #0]
 800570e:	2700      	movs	r7, #0
 8005710:	e790      	b.n	8005634 <_scanf_float+0x198>
 8005712:	f04f 0a03 	mov.w	sl, #3
 8005716:	e78d      	b.n	8005634 <_scanf_float+0x198>
 8005718:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800571c:	4649      	mov	r1, r9
 800571e:	4640      	mov	r0, r8
 8005720:	4798      	blx	r3
 8005722:	2800      	cmp	r0, #0
 8005724:	f43f aedf 	beq.w	80054e6 <_scanf_float+0x4a>
 8005728:	e6eb      	b.n	8005502 <_scanf_float+0x66>
 800572a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800572e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005732:	464a      	mov	r2, r9
 8005734:	4640      	mov	r0, r8
 8005736:	4798      	blx	r3
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	3b01      	subs	r3, #1
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	e6eb      	b.n	8005518 <_scanf_float+0x7c>
 8005740:	1e6b      	subs	r3, r5, #1
 8005742:	2b06      	cmp	r3, #6
 8005744:	d824      	bhi.n	8005790 <_scanf_float+0x2f4>
 8005746:	2d02      	cmp	r5, #2
 8005748:	d836      	bhi.n	80057b8 <_scanf_float+0x31c>
 800574a:	9b01      	ldr	r3, [sp, #4]
 800574c:	429e      	cmp	r6, r3
 800574e:	f67f aee7 	bls.w	8005520 <_scanf_float+0x84>
 8005752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800575a:	464a      	mov	r2, r9
 800575c:	4640      	mov	r0, r8
 800575e:	4798      	blx	r3
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	3b01      	subs	r3, #1
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	e7f0      	b.n	800574a <_scanf_float+0x2ae>
 8005768:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800576c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005770:	464a      	mov	r2, r9
 8005772:	4640      	mov	r0, r8
 8005774:	4798      	blx	r3
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	3b01      	subs	r3, #1
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005780:	fa5f fa8a 	uxtb.w	sl, sl
 8005784:	f1ba 0f02 	cmp.w	sl, #2
 8005788:	d1ee      	bne.n	8005768 <_scanf_float+0x2cc>
 800578a:	3d03      	subs	r5, #3
 800578c:	b2ed      	uxtb	r5, r5
 800578e:	1b76      	subs	r6, r6, r5
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	05da      	lsls	r2, r3, #23
 8005794:	d530      	bpl.n	80057f8 <_scanf_float+0x35c>
 8005796:	055b      	lsls	r3, r3, #21
 8005798:	d511      	bpl.n	80057be <_scanf_float+0x322>
 800579a:	9b01      	ldr	r3, [sp, #4]
 800579c:	429e      	cmp	r6, r3
 800579e:	f67f aebf 	bls.w	8005520 <_scanf_float+0x84>
 80057a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057aa:	464a      	mov	r2, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	4798      	blx	r3
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	e7f0      	b.n	800579a <_scanf_float+0x2fe>
 80057b8:	46aa      	mov	sl, r5
 80057ba:	46b3      	mov	fp, r6
 80057bc:	e7de      	b.n	800577c <_scanf_float+0x2e0>
 80057be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	2965      	cmp	r1, #101	@ 0x65
 80057c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80057ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80057ce:	6123      	str	r3, [r4, #16]
 80057d0:	d00c      	beq.n	80057ec <_scanf_float+0x350>
 80057d2:	2945      	cmp	r1, #69	@ 0x45
 80057d4:	d00a      	beq.n	80057ec <_scanf_float+0x350>
 80057d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057da:	464a      	mov	r2, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	4798      	blx	r3
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	1eb5      	subs	r5, r6, #2
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057f0:	464a      	mov	r2, r9
 80057f2:	4640      	mov	r0, r8
 80057f4:	4798      	blx	r3
 80057f6:	462e      	mov	r6, r5
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	f012 0210 	ands.w	r2, r2, #16
 80057fe:	d001      	beq.n	8005804 <_scanf_float+0x368>
 8005800:	2000      	movs	r0, #0
 8005802:	e68e      	b.n	8005522 <_scanf_float+0x86>
 8005804:	7032      	strb	r2, [r6, #0]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005810:	d125      	bne.n	800585e <_scanf_float+0x3c2>
 8005812:	9b02      	ldr	r3, [sp, #8]
 8005814:	429f      	cmp	r7, r3
 8005816:	d00a      	beq.n	800582e <_scanf_float+0x392>
 8005818:	1bda      	subs	r2, r3, r7
 800581a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800581e:	429e      	cmp	r6, r3
 8005820:	bf28      	it	cs
 8005822:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005826:	4922      	ldr	r1, [pc, #136]	@ (80058b0 <_scanf_float+0x414>)
 8005828:	4630      	mov	r0, r6
 800582a:	f000 f907 	bl	8005a3c <siprintf>
 800582e:	9901      	ldr	r1, [sp, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	4640      	mov	r0, r8
 8005834:	f002 fbf4 	bl	8008020 <_strtod_r>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	6821      	ldr	r1, [r4, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f011 0f02 	tst.w	r1, #2
 8005842:	ec57 6b10 	vmov	r6, r7, d0
 8005846:	f103 0204 	add.w	r2, r3, #4
 800584a:	d015      	beq.n	8005878 <_scanf_float+0x3dc>
 800584c:	9903      	ldr	r1, [sp, #12]
 800584e:	600a      	str	r2, [r1, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	e9c3 6700 	strd	r6, r7, [r3]
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60e3      	str	r3, [r4, #12]
 800585c:	e7d0      	b.n	8005800 <_scanf_float+0x364>
 800585e:	9b04      	ldr	r3, [sp, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0e4      	beq.n	800582e <_scanf_float+0x392>
 8005864:	9905      	ldr	r1, [sp, #20]
 8005866:	230a      	movs	r3, #10
 8005868:	3101      	adds	r1, #1
 800586a:	4640      	mov	r0, r8
 800586c:	f002 fc58 	bl	8008120 <_strtol_r>
 8005870:	9b04      	ldr	r3, [sp, #16]
 8005872:	9e05      	ldr	r6, [sp, #20]
 8005874:	1ac2      	subs	r2, r0, r3
 8005876:	e7d0      	b.n	800581a <_scanf_float+0x37e>
 8005878:	f011 0f04 	tst.w	r1, #4
 800587c:	9903      	ldr	r1, [sp, #12]
 800587e:	600a      	str	r2, [r1, #0]
 8005880:	d1e6      	bne.n	8005850 <_scanf_float+0x3b4>
 8005882:	681d      	ldr	r5, [r3, #0]
 8005884:	4632      	mov	r2, r6
 8005886:	463b      	mov	r3, r7
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f7fb f966 	bl	8000b5c <__aeabi_dcmpun>
 8005890:	b128      	cbz	r0, 800589e <_scanf_float+0x402>
 8005892:	4808      	ldr	r0, [pc, #32]	@ (80058b4 <_scanf_float+0x418>)
 8005894:	f000 f9b8 	bl	8005c08 <nanf>
 8005898:	ed85 0a00 	vstr	s0, [r5]
 800589c:	e7db      	b.n	8005856 <_scanf_float+0x3ba>
 800589e:	4630      	mov	r0, r6
 80058a0:	4639      	mov	r1, r7
 80058a2:	f7fb f9b9 	bl	8000c18 <__aeabi_d2f>
 80058a6:	6028      	str	r0, [r5, #0]
 80058a8:	e7d5      	b.n	8005856 <_scanf_float+0x3ba>
 80058aa:	2700      	movs	r7, #0
 80058ac:	e62e      	b.n	800550c <_scanf_float+0x70>
 80058ae:	bf00      	nop
 80058b0:	0800934c 	.word	0x0800934c
 80058b4:	0800948d 	.word	0x0800948d

080058b8 <std>:
 80058b8:	2300      	movs	r3, #0
 80058ba:	b510      	push	{r4, lr}
 80058bc:	4604      	mov	r4, r0
 80058be:	e9c0 3300 	strd	r3, r3, [r0]
 80058c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058c6:	6083      	str	r3, [r0, #8]
 80058c8:	8181      	strh	r1, [r0, #12]
 80058ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80058cc:	81c2      	strh	r2, [r0, #14]
 80058ce:	6183      	str	r3, [r0, #24]
 80058d0:	4619      	mov	r1, r3
 80058d2:	2208      	movs	r2, #8
 80058d4:	305c      	adds	r0, #92	@ 0x5c
 80058d6:	f000 f916 	bl	8005b06 <memset>
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <std+0x58>)
 80058dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <std+0x5c>)
 80058e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <std+0x60>)
 80058e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <std+0x64>)
 80058e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005920 <std+0x68>)
 80058ec:	6224      	str	r4, [r4, #32]
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d006      	beq.n	8005900 <std+0x48>
 80058f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058f6:	4294      	cmp	r4, r2
 80058f8:	d002      	beq.n	8005900 <std+0x48>
 80058fa:	33d0      	adds	r3, #208	@ 0xd0
 80058fc:	429c      	cmp	r4, r3
 80058fe:	d105      	bne.n	800590c <std+0x54>
 8005900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005908:	f000 b97a 	b.w	8005c00 <__retarget_lock_init_recursive>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	bf00      	nop
 8005910:	08005a81 	.word	0x08005a81
 8005914:	08005aa3 	.word	0x08005aa3
 8005918:	08005adb 	.word	0x08005adb
 800591c:	08005aff 	.word	0x08005aff
 8005920:	200402b0 	.word	0x200402b0

08005924 <stdio_exit_handler>:
 8005924:	4a02      	ldr	r2, [pc, #8]	@ (8005930 <stdio_exit_handler+0xc>)
 8005926:	4903      	ldr	r1, [pc, #12]	@ (8005934 <stdio_exit_handler+0x10>)
 8005928:	4803      	ldr	r0, [pc, #12]	@ (8005938 <stdio_exit_handler+0x14>)
 800592a:	f000 b869 	b.w	8005a00 <_fwalk_sglue>
 800592e:	bf00      	nop
 8005930:	2004000c 	.word	0x2004000c
 8005934:	080084dd 	.word	0x080084dd
 8005938:	2004001c 	.word	0x2004001c

0800593c <cleanup_stdio>:
 800593c:	6841      	ldr	r1, [r0, #4]
 800593e:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <cleanup_stdio+0x34>)
 8005940:	4299      	cmp	r1, r3
 8005942:	b510      	push	{r4, lr}
 8005944:	4604      	mov	r4, r0
 8005946:	d001      	beq.n	800594c <cleanup_stdio+0x10>
 8005948:	f002 fdc8 	bl	80084dc <_fflush_r>
 800594c:	68a1      	ldr	r1, [r4, #8]
 800594e:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <cleanup_stdio+0x38>)
 8005950:	4299      	cmp	r1, r3
 8005952:	d002      	beq.n	800595a <cleanup_stdio+0x1e>
 8005954:	4620      	mov	r0, r4
 8005956:	f002 fdc1 	bl	80084dc <_fflush_r>
 800595a:	68e1      	ldr	r1, [r4, #12]
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <cleanup_stdio+0x3c>)
 800595e:	4299      	cmp	r1, r3
 8005960:	d004      	beq.n	800596c <cleanup_stdio+0x30>
 8005962:	4620      	mov	r0, r4
 8005964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005968:	f002 bdb8 	b.w	80084dc <_fflush_r>
 800596c:	bd10      	pop	{r4, pc}
 800596e:	bf00      	nop
 8005970:	200402b0 	.word	0x200402b0
 8005974:	20040318 	.word	0x20040318
 8005978:	20040380 	.word	0x20040380

0800597c <global_stdio_init.part.0>:
 800597c:	b510      	push	{r4, lr}
 800597e:	4b0b      	ldr	r3, [pc, #44]	@ (80059ac <global_stdio_init.part.0+0x30>)
 8005980:	4c0b      	ldr	r4, [pc, #44]	@ (80059b0 <global_stdio_init.part.0+0x34>)
 8005982:	4a0c      	ldr	r2, [pc, #48]	@ (80059b4 <global_stdio_init.part.0+0x38>)
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	4620      	mov	r0, r4
 8005988:	2200      	movs	r2, #0
 800598a:	2104      	movs	r1, #4
 800598c:	f7ff ff94 	bl	80058b8 <std>
 8005990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005994:	2201      	movs	r2, #1
 8005996:	2109      	movs	r1, #9
 8005998:	f7ff ff8e 	bl	80058b8 <std>
 800599c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059a0:	2202      	movs	r2, #2
 80059a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a6:	2112      	movs	r1, #18
 80059a8:	f7ff bf86 	b.w	80058b8 <std>
 80059ac:	200403e8 	.word	0x200403e8
 80059b0:	200402b0 	.word	0x200402b0
 80059b4:	08005925 	.word	0x08005925

080059b8 <__sfp_lock_acquire>:
 80059b8:	4801      	ldr	r0, [pc, #4]	@ (80059c0 <__sfp_lock_acquire+0x8>)
 80059ba:	f000 b922 	b.w	8005c02 <__retarget_lock_acquire_recursive>
 80059be:	bf00      	nop
 80059c0:	200403f1 	.word	0x200403f1

080059c4 <__sfp_lock_release>:
 80059c4:	4801      	ldr	r0, [pc, #4]	@ (80059cc <__sfp_lock_release+0x8>)
 80059c6:	f000 b91d 	b.w	8005c04 <__retarget_lock_release_recursive>
 80059ca:	bf00      	nop
 80059cc:	200403f1 	.word	0x200403f1

080059d0 <__sinit>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	4604      	mov	r4, r0
 80059d4:	f7ff fff0 	bl	80059b8 <__sfp_lock_acquire>
 80059d8:	6a23      	ldr	r3, [r4, #32]
 80059da:	b11b      	cbz	r3, 80059e4 <__sinit+0x14>
 80059dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e0:	f7ff bff0 	b.w	80059c4 <__sfp_lock_release>
 80059e4:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <__sinit+0x28>)
 80059e6:	6223      	str	r3, [r4, #32]
 80059e8:	4b04      	ldr	r3, [pc, #16]	@ (80059fc <__sinit+0x2c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f5      	bne.n	80059dc <__sinit+0xc>
 80059f0:	f7ff ffc4 	bl	800597c <global_stdio_init.part.0>
 80059f4:	e7f2      	b.n	80059dc <__sinit+0xc>
 80059f6:	bf00      	nop
 80059f8:	0800593d 	.word	0x0800593d
 80059fc:	200403e8 	.word	0x200403e8

08005a00 <_fwalk_sglue>:
 8005a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a04:	4607      	mov	r7, r0
 8005a06:	4688      	mov	r8, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a10:	f1b9 0901 	subs.w	r9, r9, #1
 8005a14:	d505      	bpl.n	8005a22 <_fwalk_sglue+0x22>
 8005a16:	6824      	ldr	r4, [r4, #0]
 8005a18:	2c00      	cmp	r4, #0
 8005a1a:	d1f7      	bne.n	8005a0c <_fwalk_sglue+0xc>
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d907      	bls.n	8005a38 <_fwalk_sglue+0x38>
 8005a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	d003      	beq.n	8005a38 <_fwalk_sglue+0x38>
 8005a30:	4629      	mov	r1, r5
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c0      	blx	r8
 8005a36:	4306      	orrs	r6, r0
 8005a38:	3568      	adds	r5, #104	@ 0x68
 8005a3a:	e7e9      	b.n	8005a10 <_fwalk_sglue+0x10>

08005a3c <siprintf>:
 8005a3c:	b40e      	push	{r1, r2, r3}
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	b09d      	sub	sp, #116	@ 0x74
 8005a42:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005a44:	9002      	str	r0, [sp, #8]
 8005a46:	9006      	str	r0, [sp, #24]
 8005a48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a4c:	480a      	ldr	r0, [pc, #40]	@ (8005a78 <siprintf+0x3c>)
 8005a4e:	9107      	str	r1, [sp, #28]
 8005a50:	9104      	str	r1, [sp, #16]
 8005a52:	490a      	ldr	r1, [pc, #40]	@ (8005a7c <siprintf+0x40>)
 8005a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a58:	9105      	str	r1, [sp, #20]
 8005a5a:	2400      	movs	r4, #0
 8005a5c:	a902      	add	r1, sp, #8
 8005a5e:	6800      	ldr	r0, [r0, #0]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a64:	f002 fbba 	bl	80081dc <_svfiprintf_r>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	701c      	strb	r4, [r3, #0]
 8005a6c:	b01d      	add	sp, #116	@ 0x74
 8005a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a72:	b003      	add	sp, #12
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20040018 	.word	0x20040018
 8005a7c:	ffff0208 	.word	0xffff0208

08005a80 <__sread>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	460c      	mov	r4, r1
 8005a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a88:	f000 f86c 	bl	8005b64 <_read_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	bfab      	itete	ge
 8005a90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a92:	89a3      	ldrhlt	r3, [r4, #12]
 8005a94:	181b      	addge	r3, r3, r0
 8005a96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a9a:	bfac      	ite	ge
 8005a9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a9e:	81a3      	strhlt	r3, [r4, #12]
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <__swrite>:
 8005aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	898b      	ldrh	r3, [r1, #12]
 8005aaa:	05db      	lsls	r3, r3, #23
 8005aac:	4605      	mov	r5, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	d505      	bpl.n	8005ac0 <__swrite+0x1e>
 8005ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab8:	2302      	movs	r3, #2
 8005aba:	2200      	movs	r2, #0
 8005abc:	f000 f840 	bl	8005b40 <_lseek_r>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	4632      	mov	r2, r6
 8005ace:	463b      	mov	r3, r7
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad6:	f000 b857 	b.w	8005b88 <_write_r>

08005ada <__sseek>:
 8005ada:	b510      	push	{r4, lr}
 8005adc:	460c      	mov	r4, r1
 8005ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae2:	f000 f82d 	bl	8005b40 <_lseek_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	bf15      	itete	ne
 8005aec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005aee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005af2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005af6:	81a3      	strheq	r3, [r4, #12]
 8005af8:	bf18      	it	ne
 8005afa:	81a3      	strhne	r3, [r4, #12]
 8005afc:	bd10      	pop	{r4, pc}

08005afe <__sclose>:
 8005afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b02:	f000 b80d 	b.w	8005b20 <_close_r>

08005b06 <memset>:
 8005b06:	4402      	add	r2, r0
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d100      	bne.n	8005b10 <memset+0xa>
 8005b0e:	4770      	bx	lr
 8005b10:	f803 1b01 	strb.w	r1, [r3], #1
 8005b14:	e7f9      	b.n	8005b0a <memset+0x4>
	...

08005b18 <_localeconv_r>:
 8005b18:	4800      	ldr	r0, [pc, #0]	@ (8005b1c <_localeconv_r+0x4>)
 8005b1a:	4770      	bx	lr
 8005b1c:	20040158 	.word	0x20040158

08005b20 <_close_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	4d06      	ldr	r5, [pc, #24]	@ (8005b3c <_close_r+0x1c>)
 8005b24:	2300      	movs	r3, #0
 8005b26:	4604      	mov	r4, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f7fc f9ed 	bl	8001f0a <_close>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_close_r+0x1a>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_close_r+0x1a>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	200403ec 	.word	0x200403ec

08005b40 <_lseek_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d07      	ldr	r5, [pc, #28]	@ (8005b60 <_lseek_r+0x20>)
 8005b44:	4604      	mov	r4, r0
 8005b46:	4608      	mov	r0, r1
 8005b48:	4611      	mov	r1, r2
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	602a      	str	r2, [r5, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f7fc fa02 	bl	8001f58 <_lseek>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <_lseek_r+0x1e>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_lseek_r+0x1e>
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
 8005b60:	200403ec 	.word	0x200403ec

08005b64 <_read_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d07      	ldr	r5, [pc, #28]	@ (8005b84 <_read_r+0x20>)
 8005b68:	4604      	mov	r4, r0
 8005b6a:	4608      	mov	r0, r1
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	602a      	str	r2, [r5, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	f7fc f990 	bl	8001e98 <_read>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_read_r+0x1e>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_read_r+0x1e>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	200403ec 	.word	0x200403ec

08005b88 <_write_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ba8 <_write_r+0x20>)
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	4608      	mov	r0, r1
 8005b90:	4611      	mov	r1, r2
 8005b92:	2200      	movs	r2, #0
 8005b94:	602a      	str	r2, [r5, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f7fc f99b 	bl	8001ed2 <_write>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_write_r+0x1e>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_write_r+0x1e>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	200403ec 	.word	0x200403ec

08005bac <__errno>:
 8005bac:	4b01      	ldr	r3, [pc, #4]	@ (8005bb4 <__errno+0x8>)
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20040018 	.word	0x20040018

08005bb8 <__libc_init_array>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4d0d      	ldr	r5, [pc, #52]	@ (8005bf0 <__libc_init_array+0x38>)
 8005bbc:	4c0d      	ldr	r4, [pc, #52]	@ (8005bf4 <__libc_init_array+0x3c>)
 8005bbe:	1b64      	subs	r4, r4, r5
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	2600      	movs	r6, #0
 8005bc4:	42a6      	cmp	r6, r4
 8005bc6:	d109      	bne.n	8005bdc <__libc_init_array+0x24>
 8005bc8:	4d0b      	ldr	r5, [pc, #44]	@ (8005bf8 <__libc_init_array+0x40>)
 8005bca:	4c0c      	ldr	r4, [pc, #48]	@ (8005bfc <__libc_init_array+0x44>)
 8005bcc:	f003 fb76 	bl	80092bc <_init>
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	2600      	movs	r6, #0
 8005bd6:	42a6      	cmp	r6, r4
 8005bd8:	d105      	bne.n	8005be6 <__libc_init_array+0x2e>
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be0:	4798      	blx	r3
 8005be2:	3601      	adds	r6, #1
 8005be4:	e7ee      	b.n	8005bc4 <__libc_init_array+0xc>
 8005be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bea:	4798      	blx	r3
 8005bec:	3601      	adds	r6, #1
 8005bee:	e7f2      	b.n	8005bd6 <__libc_init_array+0x1e>
 8005bf0:	0800974c 	.word	0x0800974c
 8005bf4:	0800974c 	.word	0x0800974c
 8005bf8:	0800974c 	.word	0x0800974c
 8005bfc:	08009750 	.word	0x08009750

08005c00 <__retarget_lock_init_recursive>:
 8005c00:	4770      	bx	lr

08005c02 <__retarget_lock_acquire_recursive>:
 8005c02:	4770      	bx	lr

08005c04 <__retarget_lock_release_recursive>:
 8005c04:	4770      	bx	lr
	...

08005c08 <nanf>:
 8005c08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005c10 <nanf+0x8>
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	7fc00000 	.word	0x7fc00000

08005c14 <quorem>:
 8005c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	6903      	ldr	r3, [r0, #16]
 8005c1a:	690c      	ldr	r4, [r1, #16]
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	4607      	mov	r7, r0
 8005c20:	db7e      	blt.n	8005d20 <quorem+0x10c>
 8005c22:	3c01      	subs	r4, #1
 8005c24:	f101 0814 	add.w	r8, r1, #20
 8005c28:	00a3      	lsls	r3, r4, #2
 8005c2a:	f100 0514 	add.w	r5, r0, #20
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	429a      	cmp	r2, r3
 8005c42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c46:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c4a:	d32e      	bcc.n	8005caa <quorem+0x96>
 8005c4c:	f04f 0a00 	mov.w	sl, #0
 8005c50:	46c4      	mov	ip, r8
 8005c52:	46ae      	mov	lr, r5
 8005c54:	46d3      	mov	fp, sl
 8005c56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c5a:	b298      	uxth	r0, r3
 8005c5c:	fb06 a000 	mla	r0, r6, r0, sl
 8005c60:	0c02      	lsrs	r2, r0, #16
 8005c62:	0c1b      	lsrs	r3, r3, #16
 8005c64:	fb06 2303 	mla	r3, r6, r3, r2
 8005c68:	f8de 2000 	ldr.w	r2, [lr]
 8005c6c:	b280      	uxth	r0, r0
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	1a12      	subs	r2, r2, r0
 8005c72:	445a      	add	r2, fp
 8005c74:	f8de 0000 	ldr.w	r0, [lr]
 8005c78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c86:	b292      	uxth	r2, r2
 8005c88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c8c:	45e1      	cmp	r9, ip
 8005c8e:	f84e 2b04 	str.w	r2, [lr], #4
 8005c92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c96:	d2de      	bcs.n	8005c56 <quorem+0x42>
 8005c98:	9b00      	ldr	r3, [sp, #0]
 8005c9a:	58eb      	ldr	r3, [r5, r3]
 8005c9c:	b92b      	cbnz	r3, 8005caa <quorem+0x96>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	3b04      	subs	r3, #4
 8005ca2:	429d      	cmp	r5, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	d32f      	bcc.n	8005d08 <quorem+0xf4>
 8005ca8:	613c      	str	r4, [r7, #16]
 8005caa:	4638      	mov	r0, r7
 8005cac:	f001 f9c8 	bl	8007040 <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	db25      	blt.n	8005d00 <quorem+0xec>
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cbc:	f8d1 c000 	ldr.w	ip, [r1]
 8005cc0:	fa1f fe82 	uxth.w	lr, r2
 8005cc4:	fa1f f38c 	uxth.w	r3, ip
 8005cc8:	eba3 030e 	sub.w	r3, r3, lr
 8005ccc:	4403      	add	r3, r0
 8005cce:	0c12      	lsrs	r2, r2, #16
 8005cd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005cd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cde:	45c1      	cmp	r9, r8
 8005ce0:	f841 3b04 	str.w	r3, [r1], #4
 8005ce4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ce8:	d2e6      	bcs.n	8005cb8 <quorem+0xa4>
 8005cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf2:	b922      	cbnz	r2, 8005cfe <quorem+0xea>
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	429d      	cmp	r5, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	d30b      	bcc.n	8005d14 <quorem+0x100>
 8005cfc:	613c      	str	r4, [r7, #16]
 8005cfe:	3601      	adds	r6, #1
 8005d00:	4630      	mov	r0, r6
 8005d02:	b003      	add	sp, #12
 8005d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	3b04      	subs	r3, #4
 8005d0c:	2a00      	cmp	r2, #0
 8005d0e:	d1cb      	bne.n	8005ca8 <quorem+0x94>
 8005d10:	3c01      	subs	r4, #1
 8005d12:	e7c6      	b.n	8005ca2 <quorem+0x8e>
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	3b04      	subs	r3, #4
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	d1ef      	bne.n	8005cfc <quorem+0xe8>
 8005d1c:	3c01      	subs	r4, #1
 8005d1e:	e7ea      	b.n	8005cf6 <quorem+0xe2>
 8005d20:	2000      	movs	r0, #0
 8005d22:	e7ee      	b.n	8005d02 <quorem+0xee>
 8005d24:	0000      	movs	r0, r0
	...

08005d28 <_dtoa_r>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	69c7      	ldr	r7, [r0, #28]
 8005d2e:	b097      	sub	sp, #92	@ 0x5c
 8005d30:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005d34:	ec55 4b10 	vmov	r4, r5, d0
 8005d38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005d3a:	9107      	str	r1, [sp, #28]
 8005d3c:	4681      	mov	r9, r0
 8005d3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005d40:	9311      	str	r3, [sp, #68]	@ 0x44
 8005d42:	b97f      	cbnz	r7, 8005d64 <_dtoa_r+0x3c>
 8005d44:	2010      	movs	r0, #16
 8005d46:	f000 fe09 	bl	800695c <malloc>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005d50:	b920      	cbnz	r0, 8005d5c <_dtoa_r+0x34>
 8005d52:	4ba9      	ldr	r3, [pc, #676]	@ (8005ff8 <_dtoa_r+0x2d0>)
 8005d54:	21ef      	movs	r1, #239	@ 0xef
 8005d56:	48a9      	ldr	r0, [pc, #676]	@ (8005ffc <_dtoa_r+0x2d4>)
 8005d58:	f002 fc3a 	bl	80085d0 <__assert_func>
 8005d5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d60:	6007      	str	r7, [r0, #0]
 8005d62:	60c7      	str	r7, [r0, #12]
 8005d64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d68:	6819      	ldr	r1, [r3, #0]
 8005d6a:	b159      	cbz	r1, 8005d84 <_dtoa_r+0x5c>
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	604a      	str	r2, [r1, #4]
 8005d70:	2301      	movs	r3, #1
 8005d72:	4093      	lsls	r3, r2
 8005d74:	608b      	str	r3, [r1, #8]
 8005d76:	4648      	mov	r0, r9
 8005d78:	f000 fee6 	bl	8006b48 <_Bfree>
 8005d7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	1e2b      	subs	r3, r5, #0
 8005d86:	bfb9      	ittee	lt
 8005d88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d8c:	9305      	strlt	r3, [sp, #20]
 8005d8e:	2300      	movge	r3, #0
 8005d90:	6033      	strge	r3, [r6, #0]
 8005d92:	9f05      	ldr	r7, [sp, #20]
 8005d94:	4b9a      	ldr	r3, [pc, #616]	@ (8006000 <_dtoa_r+0x2d8>)
 8005d96:	bfbc      	itt	lt
 8005d98:	2201      	movlt	r2, #1
 8005d9a:	6032      	strlt	r2, [r6, #0]
 8005d9c:	43bb      	bics	r3, r7
 8005d9e:	d112      	bne.n	8005dc6 <_dtoa_r+0x9e>
 8005da0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005da2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005dac:	4323      	orrs	r3, r4
 8005dae:	f000 855a 	beq.w	8006866 <_dtoa_r+0xb3e>
 8005db2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005db4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006014 <_dtoa_r+0x2ec>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 855c 	beq.w	8006876 <_dtoa_r+0xb4e>
 8005dbe:	f10a 0303 	add.w	r3, sl, #3
 8005dc2:	f000 bd56 	b.w	8006872 <_dtoa_r+0xb4a>
 8005dc6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	ec51 0b17 	vmov	r0, r1, d7
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005dd6:	f7fa fe8f 	bl	8000af8 <__aeabi_dcmpeq>
 8005dda:	4680      	mov	r8, r0
 8005ddc:	b158      	cbz	r0, 8005df6 <_dtoa_r+0xce>
 8005dde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005de0:	2301      	movs	r3, #1
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005de6:	b113      	cbz	r3, 8005dee <_dtoa_r+0xc6>
 8005de8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005dea:	4b86      	ldr	r3, [pc, #536]	@ (8006004 <_dtoa_r+0x2dc>)
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006018 <_dtoa_r+0x2f0>
 8005df2:	f000 bd40 	b.w	8006876 <_dtoa_r+0xb4e>
 8005df6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005dfa:	aa14      	add	r2, sp, #80	@ 0x50
 8005dfc:	a915      	add	r1, sp, #84	@ 0x54
 8005dfe:	4648      	mov	r0, r9
 8005e00:	f001 fa3e 	bl	8007280 <__d2b>
 8005e04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e08:	9002      	str	r0, [sp, #8]
 8005e0a:	2e00      	cmp	r6, #0
 8005e0c:	d078      	beq.n	8005f00 <_dtoa_r+0x1d8>
 8005e0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e28:	4619      	mov	r1, r3
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4b76      	ldr	r3, [pc, #472]	@ (8006008 <_dtoa_r+0x2e0>)
 8005e2e:	f7fa fa43 	bl	80002b8 <__aeabi_dsub>
 8005e32:	a36b      	add	r3, pc, #428	@ (adr r3, 8005fe0 <_dtoa_r+0x2b8>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fbf6 	bl	8000628 <__aeabi_dmul>
 8005e3c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005fe8 <_dtoa_r+0x2c0>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f7fa fa3b 	bl	80002bc <__adddf3>
 8005e46:	4604      	mov	r4, r0
 8005e48:	4630      	mov	r0, r6
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	f7fa fb82 	bl	8000554 <__aeabi_i2d>
 8005e50:	a367      	add	r3, pc, #412	@ (adr r3, 8005ff0 <_dtoa_r+0x2c8>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f7fa fbe7 	bl	8000628 <__aeabi_dmul>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4620      	mov	r0, r4
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7fa fa2b 	bl	80002bc <__adddf3>
 8005e66:	4604      	mov	r4, r0
 8005e68:	460d      	mov	r5, r1
 8005e6a:	f7fa fe8d 	bl	8000b88 <__aeabi_d2iz>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4607      	mov	r7, r0
 8005e72:	2300      	movs	r3, #0
 8005e74:	4620      	mov	r0, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	f7fa fe48 	bl	8000b0c <__aeabi_dcmplt>
 8005e7c:	b140      	cbz	r0, 8005e90 <_dtoa_r+0x168>
 8005e7e:	4638      	mov	r0, r7
 8005e80:	f7fa fb68 	bl	8000554 <__aeabi_i2d>
 8005e84:	4622      	mov	r2, r4
 8005e86:	462b      	mov	r3, r5
 8005e88:	f7fa fe36 	bl	8000af8 <__aeabi_dcmpeq>
 8005e8c:	b900      	cbnz	r0, 8005e90 <_dtoa_r+0x168>
 8005e8e:	3f01      	subs	r7, #1
 8005e90:	2f16      	cmp	r7, #22
 8005e92:	d852      	bhi.n	8005f3a <_dtoa_r+0x212>
 8005e94:	4b5d      	ldr	r3, [pc, #372]	@ (800600c <_dtoa_r+0x2e4>)
 8005e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ea2:	f7fa fe33 	bl	8000b0c <__aeabi_dcmplt>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d049      	beq.n	8005f3e <_dtoa_r+0x216>
 8005eaa:	3f01      	subs	r7, #1
 8005eac:	2300      	movs	r3, #0
 8005eae:	9310      	str	r3, [sp, #64]	@ 0x40
 8005eb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005eb2:	1b9b      	subs	r3, r3, r6
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	bf45      	ittet	mi
 8005eb8:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ebc:	9300      	strmi	r3, [sp, #0]
 8005ebe:	2300      	movpl	r3, #0
 8005ec0:	2300      	movmi	r3, #0
 8005ec2:	9206      	str	r2, [sp, #24]
 8005ec4:	bf54      	ite	pl
 8005ec6:	9300      	strpl	r3, [sp, #0]
 8005ec8:	9306      	strmi	r3, [sp, #24]
 8005eca:	2f00      	cmp	r7, #0
 8005ecc:	db39      	blt.n	8005f42 <_dtoa_r+0x21a>
 8005ece:	9b06      	ldr	r3, [sp, #24]
 8005ed0:	970d      	str	r7, [sp, #52]	@ 0x34
 8005ed2:	443b      	add	r3, r7
 8005ed4:	9306      	str	r3, [sp, #24]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9308      	str	r3, [sp, #32]
 8005eda:	9b07      	ldr	r3, [sp, #28]
 8005edc:	2b09      	cmp	r3, #9
 8005ede:	d863      	bhi.n	8005fa8 <_dtoa_r+0x280>
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	bfc4      	itt	gt
 8005ee4:	3b04      	subgt	r3, #4
 8005ee6:	9307      	strgt	r3, [sp, #28]
 8005ee8:	9b07      	ldr	r3, [sp, #28]
 8005eea:	f1a3 0302 	sub.w	r3, r3, #2
 8005eee:	bfcc      	ite	gt
 8005ef0:	2400      	movgt	r4, #0
 8005ef2:	2401      	movle	r4, #1
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d863      	bhi.n	8005fc0 <_dtoa_r+0x298>
 8005ef8:	e8df f003 	tbb	[pc, r3]
 8005efc:	2b375452 	.word	0x2b375452
 8005f00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f04:	441e      	add	r6, r3
 8005f06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	bfc1      	itttt	gt
 8005f0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f12:	409f      	lslgt	r7, r3
 8005f14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f18:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f1c:	bfd6      	itet	le
 8005f1e:	f1c3 0320 	rsble	r3, r3, #32
 8005f22:	ea47 0003 	orrgt.w	r0, r7, r3
 8005f26:	fa04 f003 	lslle.w	r0, r4, r3
 8005f2a:	f7fa fb03 	bl	8000534 <__aeabi_ui2d>
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f34:	3e01      	subs	r6, #1
 8005f36:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f38:	e776      	b.n	8005e28 <_dtoa_r+0x100>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7b7      	b.n	8005eae <_dtoa_r+0x186>
 8005f3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005f40:	e7b6      	b.n	8005eb0 <_dtoa_r+0x188>
 8005f42:	9b00      	ldr	r3, [sp, #0]
 8005f44:	1bdb      	subs	r3, r3, r7
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	427b      	negs	r3, r7
 8005f4a:	9308      	str	r3, [sp, #32]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f50:	e7c3      	b.n	8005eda <_dtoa_r+0x1b2>
 8005f52:	2301      	movs	r3, #1
 8005f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f58:	eb07 0b03 	add.w	fp, r7, r3
 8005f5c:	f10b 0301 	add.w	r3, fp, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	9303      	str	r3, [sp, #12]
 8005f64:	bfb8      	it	lt
 8005f66:	2301      	movlt	r3, #1
 8005f68:	e006      	b.n	8005f78 <_dtoa_r+0x250>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dd28      	ble.n	8005fc6 <_dtoa_r+0x29e>
 8005f74:	469b      	mov	fp, r3
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	2204      	movs	r2, #4
 8005f80:	f102 0514 	add.w	r5, r2, #20
 8005f84:	429d      	cmp	r5, r3
 8005f86:	d926      	bls.n	8005fd6 <_dtoa_r+0x2ae>
 8005f88:	6041      	str	r1, [r0, #4]
 8005f8a:	4648      	mov	r0, r9
 8005f8c:	f000 fd9c 	bl	8006ac8 <_Balloc>
 8005f90:	4682      	mov	sl, r0
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d142      	bne.n	800601c <_dtoa_r+0x2f4>
 8005f96:	4b1e      	ldr	r3, [pc, #120]	@ (8006010 <_dtoa_r+0x2e8>)
 8005f98:	4602      	mov	r2, r0
 8005f9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f9e:	e6da      	b.n	8005d56 <_dtoa_r+0x2e>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e7e3      	b.n	8005f6c <_dtoa_r+0x244>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e7d5      	b.n	8005f54 <_dtoa_r+0x22c>
 8005fa8:	2401      	movs	r4, #1
 8005faa:	2300      	movs	r3, #0
 8005fac:	9307      	str	r3, [sp, #28]
 8005fae:	9409      	str	r4, [sp, #36]	@ 0x24
 8005fb0:	f04f 3bff 	mov.w	fp, #4294967295
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8cd b00c 	str.w	fp, [sp, #12]
 8005fba:	2312      	movs	r3, #18
 8005fbc:	920c      	str	r2, [sp, #48]	@ 0x30
 8005fbe:	e7db      	b.n	8005f78 <_dtoa_r+0x250>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc4:	e7f4      	b.n	8005fb0 <_dtoa_r+0x288>
 8005fc6:	f04f 0b01 	mov.w	fp, #1
 8005fca:	f8cd b00c 	str.w	fp, [sp, #12]
 8005fce:	465b      	mov	r3, fp
 8005fd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005fd4:	e7d0      	b.n	8005f78 <_dtoa_r+0x250>
 8005fd6:	3101      	adds	r1, #1
 8005fd8:	0052      	lsls	r2, r2, #1
 8005fda:	e7d1      	b.n	8005f80 <_dtoa_r+0x258>
 8005fdc:	f3af 8000 	nop.w
 8005fe0:	636f4361 	.word	0x636f4361
 8005fe4:	3fd287a7 	.word	0x3fd287a7
 8005fe8:	8b60c8b3 	.word	0x8b60c8b3
 8005fec:	3fc68a28 	.word	0x3fc68a28
 8005ff0:	509f79fb 	.word	0x509f79fb
 8005ff4:	3fd34413 	.word	0x3fd34413
 8005ff8:	0800935e 	.word	0x0800935e
 8005ffc:	08009375 	.word	0x08009375
 8006000:	7ff00000 	.word	0x7ff00000
 8006004:	08009329 	.word	0x08009329
 8006008:	3ff80000 	.word	0x3ff80000
 800600c:	08009528 	.word	0x08009528
 8006010:	080093cd 	.word	0x080093cd
 8006014:	0800935a 	.word	0x0800935a
 8006018:	08009328 	.word	0x08009328
 800601c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006020:	6018      	str	r0, [r3, #0]
 8006022:	9b03      	ldr	r3, [sp, #12]
 8006024:	2b0e      	cmp	r3, #14
 8006026:	f200 80a1 	bhi.w	800616c <_dtoa_r+0x444>
 800602a:	2c00      	cmp	r4, #0
 800602c:	f000 809e 	beq.w	800616c <_dtoa_r+0x444>
 8006030:	2f00      	cmp	r7, #0
 8006032:	dd33      	ble.n	800609c <_dtoa_r+0x374>
 8006034:	4b9c      	ldr	r3, [pc, #624]	@ (80062a8 <_dtoa_r+0x580>)
 8006036:	f007 020f 	and.w	r2, r7, #15
 800603a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800603e:	ed93 7b00 	vldr	d7, [r3]
 8006042:	05f8      	lsls	r0, r7, #23
 8006044:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006048:	ea4f 1427 	mov.w	r4, r7, asr #4
 800604c:	d516      	bpl.n	800607c <_dtoa_r+0x354>
 800604e:	4b97      	ldr	r3, [pc, #604]	@ (80062ac <_dtoa_r+0x584>)
 8006050:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006058:	f7fa fc10 	bl	800087c <__aeabi_ddiv>
 800605c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006060:	f004 040f 	and.w	r4, r4, #15
 8006064:	2603      	movs	r6, #3
 8006066:	4d91      	ldr	r5, [pc, #580]	@ (80062ac <_dtoa_r+0x584>)
 8006068:	b954      	cbnz	r4, 8006080 <_dtoa_r+0x358>
 800606a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800606e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006072:	f7fa fc03 	bl	800087c <__aeabi_ddiv>
 8006076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800607a:	e028      	b.n	80060ce <_dtoa_r+0x3a6>
 800607c:	2602      	movs	r6, #2
 800607e:	e7f2      	b.n	8006066 <_dtoa_r+0x33e>
 8006080:	07e1      	lsls	r1, r4, #31
 8006082:	d508      	bpl.n	8006096 <_dtoa_r+0x36e>
 8006084:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006088:	e9d5 2300 	ldrd	r2, r3, [r5]
 800608c:	f7fa facc 	bl	8000628 <__aeabi_dmul>
 8006090:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006094:	3601      	adds	r6, #1
 8006096:	1064      	asrs	r4, r4, #1
 8006098:	3508      	adds	r5, #8
 800609a:	e7e5      	b.n	8006068 <_dtoa_r+0x340>
 800609c:	f000 80af 	beq.w	80061fe <_dtoa_r+0x4d6>
 80060a0:	427c      	negs	r4, r7
 80060a2:	4b81      	ldr	r3, [pc, #516]	@ (80062a8 <_dtoa_r+0x580>)
 80060a4:	4d81      	ldr	r5, [pc, #516]	@ (80062ac <_dtoa_r+0x584>)
 80060a6:	f004 020f 	and.w	r2, r4, #15
 80060aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80060b6:	f7fa fab7 	bl	8000628 <__aeabi_dmul>
 80060ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060be:	1124      	asrs	r4, r4, #4
 80060c0:	2300      	movs	r3, #0
 80060c2:	2602      	movs	r6, #2
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	f040 808f 	bne.w	80061e8 <_dtoa_r+0x4c0>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1d3      	bne.n	8006076 <_dtoa_r+0x34e>
 80060ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80060d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8094 	beq.w	8006202 <_dtoa_r+0x4da>
 80060da:	4b75      	ldr	r3, [pc, #468]	@ (80062b0 <_dtoa_r+0x588>)
 80060dc:	2200      	movs	r2, #0
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa fd13 	bl	8000b0c <__aeabi_dcmplt>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f000 808b 	beq.w	8006202 <_dtoa_r+0x4da>
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 8087 	beq.w	8006202 <_dtoa_r+0x4da>
 80060f4:	f1bb 0f00 	cmp.w	fp, #0
 80060f8:	dd34      	ble.n	8006164 <_dtoa_r+0x43c>
 80060fa:	4620      	mov	r0, r4
 80060fc:	4b6d      	ldr	r3, [pc, #436]	@ (80062b4 <_dtoa_r+0x58c>)
 80060fe:	2200      	movs	r2, #0
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa fa91 	bl	8000628 <__aeabi_dmul>
 8006106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800610a:	f107 38ff 	add.w	r8, r7, #4294967295
 800610e:	3601      	adds	r6, #1
 8006110:	465c      	mov	r4, fp
 8006112:	4630      	mov	r0, r6
 8006114:	f7fa fa1e 	bl	8000554 <__aeabi_i2d>
 8006118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800611c:	f7fa fa84 	bl	8000628 <__aeabi_dmul>
 8006120:	4b65      	ldr	r3, [pc, #404]	@ (80062b8 <_dtoa_r+0x590>)
 8006122:	2200      	movs	r2, #0
 8006124:	f7fa f8ca 	bl	80002bc <__adddf3>
 8006128:	4605      	mov	r5, r0
 800612a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800612e:	2c00      	cmp	r4, #0
 8006130:	d16a      	bne.n	8006208 <_dtoa_r+0x4e0>
 8006132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006136:	4b61      	ldr	r3, [pc, #388]	@ (80062bc <_dtoa_r+0x594>)
 8006138:	2200      	movs	r2, #0
 800613a:	f7fa f8bd 	bl	80002b8 <__aeabi_dsub>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006146:	462a      	mov	r2, r5
 8006148:	4633      	mov	r3, r6
 800614a:	f7fa fcfd 	bl	8000b48 <__aeabi_dcmpgt>
 800614e:	2800      	cmp	r0, #0
 8006150:	f040 8298 	bne.w	8006684 <_dtoa_r+0x95c>
 8006154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006158:	462a      	mov	r2, r5
 800615a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800615e:	f7fa fcd5 	bl	8000b0c <__aeabi_dcmplt>
 8006162:	bb38      	cbnz	r0, 80061b4 <_dtoa_r+0x48c>
 8006164:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006168:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800616c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800616e:	2b00      	cmp	r3, #0
 8006170:	f2c0 8157 	blt.w	8006422 <_dtoa_r+0x6fa>
 8006174:	2f0e      	cmp	r7, #14
 8006176:	f300 8154 	bgt.w	8006422 <_dtoa_r+0x6fa>
 800617a:	4b4b      	ldr	r3, [pc, #300]	@ (80062a8 <_dtoa_r+0x580>)
 800617c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006180:	ed93 7b00 	vldr	d7, [r3]
 8006184:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006186:	2b00      	cmp	r3, #0
 8006188:	ed8d 7b00 	vstr	d7, [sp]
 800618c:	f280 80e5 	bge.w	800635a <_dtoa_r+0x632>
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f300 80e1 	bgt.w	800635a <_dtoa_r+0x632>
 8006198:	d10c      	bne.n	80061b4 <_dtoa_r+0x48c>
 800619a:	4b48      	ldr	r3, [pc, #288]	@ (80062bc <_dtoa_r+0x594>)
 800619c:	2200      	movs	r2, #0
 800619e:	ec51 0b17 	vmov	r0, r1, d7
 80061a2:	f7fa fa41 	bl	8000628 <__aeabi_dmul>
 80061a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061aa:	f7fa fcc3 	bl	8000b34 <__aeabi_dcmpge>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f000 8266 	beq.w	8006680 <_dtoa_r+0x958>
 80061b4:	2400      	movs	r4, #0
 80061b6:	4625      	mov	r5, r4
 80061b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061ba:	4656      	mov	r6, sl
 80061bc:	ea6f 0803 	mvn.w	r8, r3
 80061c0:	2700      	movs	r7, #0
 80061c2:	4621      	mov	r1, r4
 80061c4:	4648      	mov	r0, r9
 80061c6:	f000 fcbf 	bl	8006b48 <_Bfree>
 80061ca:	2d00      	cmp	r5, #0
 80061cc:	f000 80bd 	beq.w	800634a <_dtoa_r+0x622>
 80061d0:	b12f      	cbz	r7, 80061de <_dtoa_r+0x4b6>
 80061d2:	42af      	cmp	r7, r5
 80061d4:	d003      	beq.n	80061de <_dtoa_r+0x4b6>
 80061d6:	4639      	mov	r1, r7
 80061d8:	4648      	mov	r0, r9
 80061da:	f000 fcb5 	bl	8006b48 <_Bfree>
 80061de:	4629      	mov	r1, r5
 80061e0:	4648      	mov	r0, r9
 80061e2:	f000 fcb1 	bl	8006b48 <_Bfree>
 80061e6:	e0b0      	b.n	800634a <_dtoa_r+0x622>
 80061e8:	07e2      	lsls	r2, r4, #31
 80061ea:	d505      	bpl.n	80061f8 <_dtoa_r+0x4d0>
 80061ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061f0:	f7fa fa1a 	bl	8000628 <__aeabi_dmul>
 80061f4:	3601      	adds	r6, #1
 80061f6:	2301      	movs	r3, #1
 80061f8:	1064      	asrs	r4, r4, #1
 80061fa:	3508      	adds	r5, #8
 80061fc:	e762      	b.n	80060c4 <_dtoa_r+0x39c>
 80061fe:	2602      	movs	r6, #2
 8006200:	e765      	b.n	80060ce <_dtoa_r+0x3a6>
 8006202:	9c03      	ldr	r4, [sp, #12]
 8006204:	46b8      	mov	r8, r7
 8006206:	e784      	b.n	8006112 <_dtoa_r+0x3ea>
 8006208:	4b27      	ldr	r3, [pc, #156]	@ (80062a8 <_dtoa_r+0x580>)
 800620a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800620c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006210:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006214:	4454      	add	r4, sl
 8006216:	2900      	cmp	r1, #0
 8006218:	d054      	beq.n	80062c4 <_dtoa_r+0x59c>
 800621a:	4929      	ldr	r1, [pc, #164]	@ (80062c0 <_dtoa_r+0x598>)
 800621c:	2000      	movs	r0, #0
 800621e:	f7fa fb2d 	bl	800087c <__aeabi_ddiv>
 8006222:	4633      	mov	r3, r6
 8006224:	462a      	mov	r2, r5
 8006226:	f7fa f847 	bl	80002b8 <__aeabi_dsub>
 800622a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800622e:	4656      	mov	r6, sl
 8006230:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006234:	f7fa fca8 	bl	8000b88 <__aeabi_d2iz>
 8006238:	4605      	mov	r5, r0
 800623a:	f7fa f98b 	bl	8000554 <__aeabi_i2d>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006246:	f7fa f837 	bl	80002b8 <__aeabi_dsub>
 800624a:	3530      	adds	r5, #48	@ 0x30
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006254:	f806 5b01 	strb.w	r5, [r6], #1
 8006258:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800625c:	f7fa fc56 	bl	8000b0c <__aeabi_dcmplt>
 8006260:	2800      	cmp	r0, #0
 8006262:	d172      	bne.n	800634a <_dtoa_r+0x622>
 8006264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006268:	4911      	ldr	r1, [pc, #68]	@ (80062b0 <_dtoa_r+0x588>)
 800626a:	2000      	movs	r0, #0
 800626c:	f7fa f824 	bl	80002b8 <__aeabi_dsub>
 8006270:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006274:	f7fa fc4a 	bl	8000b0c <__aeabi_dcmplt>
 8006278:	2800      	cmp	r0, #0
 800627a:	f040 80b4 	bne.w	80063e6 <_dtoa_r+0x6be>
 800627e:	42a6      	cmp	r6, r4
 8006280:	f43f af70 	beq.w	8006164 <_dtoa_r+0x43c>
 8006284:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006288:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <_dtoa_r+0x58c>)
 800628a:	2200      	movs	r2, #0
 800628c:	f7fa f9cc 	bl	8000628 <__aeabi_dmul>
 8006290:	4b08      	ldr	r3, [pc, #32]	@ (80062b4 <_dtoa_r+0x58c>)
 8006292:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006296:	2200      	movs	r2, #0
 8006298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800629c:	f7fa f9c4 	bl	8000628 <__aeabi_dmul>
 80062a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062a4:	e7c4      	b.n	8006230 <_dtoa_r+0x508>
 80062a6:	bf00      	nop
 80062a8:	08009528 	.word	0x08009528
 80062ac:	08009500 	.word	0x08009500
 80062b0:	3ff00000 	.word	0x3ff00000
 80062b4:	40240000 	.word	0x40240000
 80062b8:	401c0000 	.word	0x401c0000
 80062bc:	40140000 	.word	0x40140000
 80062c0:	3fe00000 	.word	0x3fe00000
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7fa f9ae 	bl	8000628 <__aeabi_dmul>
 80062cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80062d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80062d2:	4656      	mov	r6, sl
 80062d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062d8:	f7fa fc56 	bl	8000b88 <__aeabi_d2iz>
 80062dc:	4605      	mov	r5, r0
 80062de:	f7fa f939 	bl	8000554 <__aeabi_i2d>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ea:	f7f9 ffe5 	bl	80002b8 <__aeabi_dsub>
 80062ee:	3530      	adds	r5, #48	@ 0x30
 80062f0:	f806 5b01 	strb.w	r5, [r6], #1
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	42a6      	cmp	r6, r4
 80062fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	d124      	bne.n	800634e <_dtoa_r+0x626>
 8006304:	4baf      	ldr	r3, [pc, #700]	@ (80065c4 <_dtoa_r+0x89c>)
 8006306:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800630a:	f7f9 ffd7 	bl	80002bc <__adddf3>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006316:	f7fa fc17 	bl	8000b48 <__aeabi_dcmpgt>
 800631a:	2800      	cmp	r0, #0
 800631c:	d163      	bne.n	80063e6 <_dtoa_r+0x6be>
 800631e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006322:	49a8      	ldr	r1, [pc, #672]	@ (80065c4 <_dtoa_r+0x89c>)
 8006324:	2000      	movs	r0, #0
 8006326:	f7f9 ffc7 	bl	80002b8 <__aeabi_dsub>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006332:	f7fa fbeb 	bl	8000b0c <__aeabi_dcmplt>
 8006336:	2800      	cmp	r0, #0
 8006338:	f43f af14 	beq.w	8006164 <_dtoa_r+0x43c>
 800633c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800633e:	1e73      	subs	r3, r6, #1
 8006340:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006342:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006346:	2b30      	cmp	r3, #48	@ 0x30
 8006348:	d0f8      	beq.n	800633c <_dtoa_r+0x614>
 800634a:	4647      	mov	r7, r8
 800634c:	e03b      	b.n	80063c6 <_dtoa_r+0x69e>
 800634e:	4b9e      	ldr	r3, [pc, #632]	@ (80065c8 <_dtoa_r+0x8a0>)
 8006350:	f7fa f96a 	bl	8000628 <__aeabi_dmul>
 8006354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006358:	e7bc      	b.n	80062d4 <_dtoa_r+0x5ac>
 800635a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800635e:	4656      	mov	r6, sl
 8006360:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006364:	4620      	mov	r0, r4
 8006366:	4629      	mov	r1, r5
 8006368:	f7fa fa88 	bl	800087c <__aeabi_ddiv>
 800636c:	f7fa fc0c 	bl	8000b88 <__aeabi_d2iz>
 8006370:	4680      	mov	r8, r0
 8006372:	f7fa f8ef 	bl	8000554 <__aeabi_i2d>
 8006376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800637a:	f7fa f955 	bl	8000628 <__aeabi_dmul>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800638a:	f7f9 ff95 	bl	80002b8 <__aeabi_dsub>
 800638e:	f806 4b01 	strb.w	r4, [r6], #1
 8006392:	9d03      	ldr	r5, [sp, #12]
 8006394:	eba6 040a 	sub.w	r4, r6, sl
 8006398:	42a5      	cmp	r5, r4
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	d133      	bne.n	8006408 <_dtoa_r+0x6e0>
 80063a0:	f7f9 ff8c 	bl	80002bc <__adddf3>
 80063a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063a8:	4604      	mov	r4, r0
 80063aa:	460d      	mov	r5, r1
 80063ac:	f7fa fbcc 	bl	8000b48 <__aeabi_dcmpgt>
 80063b0:	b9c0      	cbnz	r0, 80063e4 <_dtoa_r+0x6bc>
 80063b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b6:	4620      	mov	r0, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	f7fa fb9d 	bl	8000af8 <__aeabi_dcmpeq>
 80063be:	b110      	cbz	r0, 80063c6 <_dtoa_r+0x69e>
 80063c0:	f018 0f01 	tst.w	r8, #1
 80063c4:	d10e      	bne.n	80063e4 <_dtoa_r+0x6bc>
 80063c6:	9902      	ldr	r1, [sp, #8]
 80063c8:	4648      	mov	r0, r9
 80063ca:	f000 fbbd 	bl	8006b48 <_Bfree>
 80063ce:	2300      	movs	r3, #0
 80063d0:	7033      	strb	r3, [r6, #0]
 80063d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063d4:	3701      	adds	r7, #1
 80063d6:	601f      	str	r7, [r3, #0]
 80063d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 824b 	beq.w	8006876 <_dtoa_r+0xb4e>
 80063e0:	601e      	str	r6, [r3, #0]
 80063e2:	e248      	b.n	8006876 <_dtoa_r+0xb4e>
 80063e4:	46b8      	mov	r8, r7
 80063e6:	4633      	mov	r3, r6
 80063e8:	461e      	mov	r6, r3
 80063ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ee:	2a39      	cmp	r2, #57	@ 0x39
 80063f0:	d106      	bne.n	8006400 <_dtoa_r+0x6d8>
 80063f2:	459a      	cmp	sl, r3
 80063f4:	d1f8      	bne.n	80063e8 <_dtoa_r+0x6c0>
 80063f6:	2230      	movs	r2, #48	@ 0x30
 80063f8:	f108 0801 	add.w	r8, r8, #1
 80063fc:	f88a 2000 	strb.w	r2, [sl]
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	3201      	adds	r2, #1
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	e7a0      	b.n	800634a <_dtoa_r+0x622>
 8006408:	4b6f      	ldr	r3, [pc, #444]	@ (80065c8 <_dtoa_r+0x8a0>)
 800640a:	2200      	movs	r2, #0
 800640c:	f7fa f90c 	bl	8000628 <__aeabi_dmul>
 8006410:	2200      	movs	r2, #0
 8006412:	2300      	movs	r3, #0
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	f7fa fb6e 	bl	8000af8 <__aeabi_dcmpeq>
 800641c:	2800      	cmp	r0, #0
 800641e:	d09f      	beq.n	8006360 <_dtoa_r+0x638>
 8006420:	e7d1      	b.n	80063c6 <_dtoa_r+0x69e>
 8006422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006424:	2a00      	cmp	r2, #0
 8006426:	f000 80ea 	beq.w	80065fe <_dtoa_r+0x8d6>
 800642a:	9a07      	ldr	r2, [sp, #28]
 800642c:	2a01      	cmp	r2, #1
 800642e:	f300 80cd 	bgt.w	80065cc <_dtoa_r+0x8a4>
 8006432:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006434:	2a00      	cmp	r2, #0
 8006436:	f000 80c1 	beq.w	80065bc <_dtoa_r+0x894>
 800643a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800643e:	9c08      	ldr	r4, [sp, #32]
 8006440:	9e00      	ldr	r6, [sp, #0]
 8006442:	9a00      	ldr	r2, [sp, #0]
 8006444:	441a      	add	r2, r3
 8006446:	9200      	str	r2, [sp, #0]
 8006448:	9a06      	ldr	r2, [sp, #24]
 800644a:	2101      	movs	r1, #1
 800644c:	441a      	add	r2, r3
 800644e:	4648      	mov	r0, r9
 8006450:	9206      	str	r2, [sp, #24]
 8006452:	f000 fc77 	bl	8006d44 <__i2b>
 8006456:	4605      	mov	r5, r0
 8006458:	b166      	cbz	r6, 8006474 <_dtoa_r+0x74c>
 800645a:	9b06      	ldr	r3, [sp, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd09      	ble.n	8006474 <_dtoa_r+0x74c>
 8006460:	42b3      	cmp	r3, r6
 8006462:	9a00      	ldr	r2, [sp, #0]
 8006464:	bfa8      	it	ge
 8006466:	4633      	movge	r3, r6
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	9200      	str	r2, [sp, #0]
 800646c:	9a06      	ldr	r2, [sp, #24]
 800646e:	1af6      	subs	r6, r6, r3
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	9306      	str	r3, [sp, #24]
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	b30b      	cbz	r3, 80064bc <_dtoa_r+0x794>
 8006478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80c6 	beq.w	800660c <_dtoa_r+0x8e4>
 8006480:	2c00      	cmp	r4, #0
 8006482:	f000 80c0 	beq.w	8006606 <_dtoa_r+0x8de>
 8006486:	4629      	mov	r1, r5
 8006488:	4622      	mov	r2, r4
 800648a:	4648      	mov	r0, r9
 800648c:	f000 fd12 	bl	8006eb4 <__pow5mult>
 8006490:	9a02      	ldr	r2, [sp, #8]
 8006492:	4601      	mov	r1, r0
 8006494:	4605      	mov	r5, r0
 8006496:	4648      	mov	r0, r9
 8006498:	f000 fc6a 	bl	8006d70 <__multiply>
 800649c:	9902      	ldr	r1, [sp, #8]
 800649e:	4680      	mov	r8, r0
 80064a0:	4648      	mov	r0, r9
 80064a2:	f000 fb51 	bl	8006b48 <_Bfree>
 80064a6:	9b08      	ldr	r3, [sp, #32]
 80064a8:	1b1b      	subs	r3, r3, r4
 80064aa:	9308      	str	r3, [sp, #32]
 80064ac:	f000 80b1 	beq.w	8006612 <_dtoa_r+0x8ea>
 80064b0:	9a08      	ldr	r2, [sp, #32]
 80064b2:	4641      	mov	r1, r8
 80064b4:	4648      	mov	r0, r9
 80064b6:	f000 fcfd 	bl	8006eb4 <__pow5mult>
 80064ba:	9002      	str	r0, [sp, #8]
 80064bc:	2101      	movs	r1, #1
 80064be:	4648      	mov	r0, r9
 80064c0:	f000 fc40 	bl	8006d44 <__i2b>
 80064c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064c6:	4604      	mov	r4, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 81d8 	beq.w	800687e <_dtoa_r+0xb56>
 80064ce:	461a      	mov	r2, r3
 80064d0:	4601      	mov	r1, r0
 80064d2:	4648      	mov	r0, r9
 80064d4:	f000 fcee 	bl	8006eb4 <__pow5mult>
 80064d8:	9b07      	ldr	r3, [sp, #28]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	4604      	mov	r4, r0
 80064de:	f300 809f 	bgt.w	8006620 <_dtoa_r+0x8f8>
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 8097 	bne.w	8006618 <_dtoa_r+0x8f0>
 80064ea:	9b05      	ldr	r3, [sp, #20]
 80064ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 8093 	bne.w	800661c <_dtoa_r+0x8f4>
 80064f6:	9b05      	ldr	r3, [sp, #20]
 80064f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064fc:	0d1b      	lsrs	r3, r3, #20
 80064fe:	051b      	lsls	r3, r3, #20
 8006500:	b133      	cbz	r3, 8006510 <_dtoa_r+0x7e8>
 8006502:	9b00      	ldr	r3, [sp, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	9b06      	ldr	r3, [sp, #24]
 800650a:	3301      	adds	r3, #1
 800650c:	9306      	str	r3, [sp, #24]
 800650e:	2301      	movs	r3, #1
 8006510:	9308      	str	r3, [sp, #32]
 8006512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 81b8 	beq.w	800688a <_dtoa_r+0xb62>
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006520:	6918      	ldr	r0, [r3, #16]
 8006522:	f000 fbc3 	bl	8006cac <__hi0bits>
 8006526:	f1c0 0020 	rsb	r0, r0, #32
 800652a:	9b06      	ldr	r3, [sp, #24]
 800652c:	4418      	add	r0, r3
 800652e:	f010 001f 	ands.w	r0, r0, #31
 8006532:	f000 8082 	beq.w	800663a <_dtoa_r+0x912>
 8006536:	f1c0 0320 	rsb	r3, r0, #32
 800653a:	2b04      	cmp	r3, #4
 800653c:	dd73      	ble.n	8006626 <_dtoa_r+0x8fe>
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	f1c0 001c 	rsb	r0, r0, #28
 8006544:	4403      	add	r3, r0
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	9b06      	ldr	r3, [sp, #24]
 800654a:	4403      	add	r3, r0
 800654c:	4406      	add	r6, r0
 800654e:	9306      	str	r3, [sp, #24]
 8006550:	9b00      	ldr	r3, [sp, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	dd05      	ble.n	8006562 <_dtoa_r+0x83a>
 8006556:	9902      	ldr	r1, [sp, #8]
 8006558:	461a      	mov	r2, r3
 800655a:	4648      	mov	r0, r9
 800655c:	f000 fd04 	bl	8006f68 <__lshift>
 8006560:	9002      	str	r0, [sp, #8]
 8006562:	9b06      	ldr	r3, [sp, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd05      	ble.n	8006574 <_dtoa_r+0x84c>
 8006568:	4621      	mov	r1, r4
 800656a:	461a      	mov	r2, r3
 800656c:	4648      	mov	r0, r9
 800656e:	f000 fcfb 	bl	8006f68 <__lshift>
 8006572:	4604      	mov	r4, r0
 8006574:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d061      	beq.n	800663e <_dtoa_r+0x916>
 800657a:	9802      	ldr	r0, [sp, #8]
 800657c:	4621      	mov	r1, r4
 800657e:	f000 fd5f 	bl	8007040 <__mcmp>
 8006582:	2800      	cmp	r0, #0
 8006584:	da5b      	bge.n	800663e <_dtoa_r+0x916>
 8006586:	2300      	movs	r3, #0
 8006588:	9902      	ldr	r1, [sp, #8]
 800658a:	220a      	movs	r2, #10
 800658c:	4648      	mov	r0, r9
 800658e:	f000 fafd 	bl	8006b8c <__multadd>
 8006592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006594:	9002      	str	r0, [sp, #8]
 8006596:	f107 38ff 	add.w	r8, r7, #4294967295
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8177 	beq.w	800688e <_dtoa_r+0xb66>
 80065a0:	4629      	mov	r1, r5
 80065a2:	2300      	movs	r3, #0
 80065a4:	220a      	movs	r2, #10
 80065a6:	4648      	mov	r0, r9
 80065a8:	f000 faf0 	bl	8006b8c <__multadd>
 80065ac:	f1bb 0f00 	cmp.w	fp, #0
 80065b0:	4605      	mov	r5, r0
 80065b2:	dc6f      	bgt.n	8006694 <_dtoa_r+0x96c>
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	dc49      	bgt.n	800664e <_dtoa_r+0x926>
 80065ba:	e06b      	b.n	8006694 <_dtoa_r+0x96c>
 80065bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065c2:	e73c      	b.n	800643e <_dtoa_r+0x716>
 80065c4:	3fe00000 	.word	0x3fe00000
 80065c8:	40240000 	.word	0x40240000
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	1e5c      	subs	r4, r3, #1
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	db09      	blt.n	80065ea <_dtoa_r+0x8c2>
 80065d6:	1b1c      	subs	r4, r3, r4
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f6bf af30 	bge.w	8006440 <_dtoa_r+0x718>
 80065e0:	9b00      	ldr	r3, [sp, #0]
 80065e2:	9a03      	ldr	r2, [sp, #12]
 80065e4:	1a9e      	subs	r6, r3, r2
 80065e6:	2300      	movs	r3, #0
 80065e8:	e72b      	b.n	8006442 <_dtoa_r+0x71a>
 80065ea:	9b08      	ldr	r3, [sp, #32]
 80065ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065ee:	9408      	str	r4, [sp, #32]
 80065f0:	1ae3      	subs	r3, r4, r3
 80065f2:	441a      	add	r2, r3
 80065f4:	9e00      	ldr	r6, [sp, #0]
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80065fa:	2400      	movs	r4, #0
 80065fc:	e721      	b.n	8006442 <_dtoa_r+0x71a>
 80065fe:	9c08      	ldr	r4, [sp, #32]
 8006600:	9e00      	ldr	r6, [sp, #0]
 8006602:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006604:	e728      	b.n	8006458 <_dtoa_r+0x730>
 8006606:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800660a:	e751      	b.n	80064b0 <_dtoa_r+0x788>
 800660c:	9a08      	ldr	r2, [sp, #32]
 800660e:	9902      	ldr	r1, [sp, #8]
 8006610:	e750      	b.n	80064b4 <_dtoa_r+0x78c>
 8006612:	f8cd 8008 	str.w	r8, [sp, #8]
 8006616:	e751      	b.n	80064bc <_dtoa_r+0x794>
 8006618:	2300      	movs	r3, #0
 800661a:	e779      	b.n	8006510 <_dtoa_r+0x7e8>
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	e777      	b.n	8006510 <_dtoa_r+0x7e8>
 8006620:	2300      	movs	r3, #0
 8006622:	9308      	str	r3, [sp, #32]
 8006624:	e779      	b.n	800651a <_dtoa_r+0x7f2>
 8006626:	d093      	beq.n	8006550 <_dtoa_r+0x828>
 8006628:	9a00      	ldr	r2, [sp, #0]
 800662a:	331c      	adds	r3, #28
 800662c:	441a      	add	r2, r3
 800662e:	9200      	str	r2, [sp, #0]
 8006630:	9a06      	ldr	r2, [sp, #24]
 8006632:	441a      	add	r2, r3
 8006634:	441e      	add	r6, r3
 8006636:	9206      	str	r2, [sp, #24]
 8006638:	e78a      	b.n	8006550 <_dtoa_r+0x828>
 800663a:	4603      	mov	r3, r0
 800663c:	e7f4      	b.n	8006628 <_dtoa_r+0x900>
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	46b8      	mov	r8, r7
 8006644:	dc20      	bgt.n	8006688 <_dtoa_r+0x960>
 8006646:	469b      	mov	fp, r3
 8006648:	9b07      	ldr	r3, [sp, #28]
 800664a:	2b02      	cmp	r3, #2
 800664c:	dd1e      	ble.n	800668c <_dtoa_r+0x964>
 800664e:	f1bb 0f00 	cmp.w	fp, #0
 8006652:	f47f adb1 	bne.w	80061b8 <_dtoa_r+0x490>
 8006656:	4621      	mov	r1, r4
 8006658:	465b      	mov	r3, fp
 800665a:	2205      	movs	r2, #5
 800665c:	4648      	mov	r0, r9
 800665e:	f000 fa95 	bl	8006b8c <__multadd>
 8006662:	4601      	mov	r1, r0
 8006664:	4604      	mov	r4, r0
 8006666:	9802      	ldr	r0, [sp, #8]
 8006668:	f000 fcea 	bl	8007040 <__mcmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	f77f ada3 	ble.w	80061b8 <_dtoa_r+0x490>
 8006672:	4656      	mov	r6, sl
 8006674:	2331      	movs	r3, #49	@ 0x31
 8006676:	f806 3b01 	strb.w	r3, [r6], #1
 800667a:	f108 0801 	add.w	r8, r8, #1
 800667e:	e59f      	b.n	80061c0 <_dtoa_r+0x498>
 8006680:	9c03      	ldr	r4, [sp, #12]
 8006682:	46b8      	mov	r8, r7
 8006684:	4625      	mov	r5, r4
 8006686:	e7f4      	b.n	8006672 <_dtoa_r+0x94a>
 8006688:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800668c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8101 	beq.w	8006896 <_dtoa_r+0xb6e>
 8006694:	2e00      	cmp	r6, #0
 8006696:	dd05      	ble.n	80066a4 <_dtoa_r+0x97c>
 8006698:	4629      	mov	r1, r5
 800669a:	4632      	mov	r2, r6
 800669c:	4648      	mov	r0, r9
 800669e:	f000 fc63 	bl	8006f68 <__lshift>
 80066a2:	4605      	mov	r5, r0
 80066a4:	9b08      	ldr	r3, [sp, #32]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d05c      	beq.n	8006764 <_dtoa_r+0xa3c>
 80066aa:	6869      	ldr	r1, [r5, #4]
 80066ac:	4648      	mov	r0, r9
 80066ae:	f000 fa0b 	bl	8006ac8 <_Balloc>
 80066b2:	4606      	mov	r6, r0
 80066b4:	b928      	cbnz	r0, 80066c2 <_dtoa_r+0x99a>
 80066b6:	4b82      	ldr	r3, [pc, #520]	@ (80068c0 <_dtoa_r+0xb98>)
 80066b8:	4602      	mov	r2, r0
 80066ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066be:	f7ff bb4a 	b.w	8005d56 <_dtoa_r+0x2e>
 80066c2:	692a      	ldr	r2, [r5, #16]
 80066c4:	3202      	adds	r2, #2
 80066c6:	0092      	lsls	r2, r2, #2
 80066c8:	f105 010c 	add.w	r1, r5, #12
 80066cc:	300c      	adds	r0, #12
 80066ce:	f001 ff69 	bl	80085a4 <memcpy>
 80066d2:	2201      	movs	r2, #1
 80066d4:	4631      	mov	r1, r6
 80066d6:	4648      	mov	r0, r9
 80066d8:	f000 fc46 	bl	8006f68 <__lshift>
 80066dc:	f10a 0301 	add.w	r3, sl, #1
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	eb0a 030b 	add.w	r3, sl, fp
 80066e6:	9308      	str	r3, [sp, #32]
 80066e8:	9b04      	ldr	r3, [sp, #16]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	462f      	mov	r7, r5
 80066f0:	9306      	str	r3, [sp, #24]
 80066f2:	4605      	mov	r5, r0
 80066f4:	9b00      	ldr	r3, [sp, #0]
 80066f6:	9802      	ldr	r0, [sp, #8]
 80066f8:	4621      	mov	r1, r4
 80066fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80066fe:	f7ff fa89 	bl	8005c14 <quorem>
 8006702:	4603      	mov	r3, r0
 8006704:	3330      	adds	r3, #48	@ 0x30
 8006706:	9003      	str	r0, [sp, #12]
 8006708:	4639      	mov	r1, r7
 800670a:	9802      	ldr	r0, [sp, #8]
 800670c:	9309      	str	r3, [sp, #36]	@ 0x24
 800670e:	f000 fc97 	bl	8007040 <__mcmp>
 8006712:	462a      	mov	r2, r5
 8006714:	9004      	str	r0, [sp, #16]
 8006716:	4621      	mov	r1, r4
 8006718:	4648      	mov	r0, r9
 800671a:	f000 fcad 	bl	8007078 <__mdiff>
 800671e:	68c2      	ldr	r2, [r0, #12]
 8006720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006722:	4606      	mov	r6, r0
 8006724:	bb02      	cbnz	r2, 8006768 <_dtoa_r+0xa40>
 8006726:	4601      	mov	r1, r0
 8006728:	9802      	ldr	r0, [sp, #8]
 800672a:	f000 fc89 	bl	8007040 <__mcmp>
 800672e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006730:	4602      	mov	r2, r0
 8006732:	4631      	mov	r1, r6
 8006734:	4648      	mov	r0, r9
 8006736:	920c      	str	r2, [sp, #48]	@ 0x30
 8006738:	9309      	str	r3, [sp, #36]	@ 0x24
 800673a:	f000 fa05 	bl	8006b48 <_Bfree>
 800673e:	9b07      	ldr	r3, [sp, #28]
 8006740:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006742:	9e00      	ldr	r6, [sp, #0]
 8006744:	ea42 0103 	orr.w	r1, r2, r3
 8006748:	9b06      	ldr	r3, [sp, #24]
 800674a:	4319      	orrs	r1, r3
 800674c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674e:	d10d      	bne.n	800676c <_dtoa_r+0xa44>
 8006750:	2b39      	cmp	r3, #57	@ 0x39
 8006752:	d027      	beq.n	80067a4 <_dtoa_r+0xa7c>
 8006754:	9a04      	ldr	r2, [sp, #16]
 8006756:	2a00      	cmp	r2, #0
 8006758:	dd01      	ble.n	800675e <_dtoa_r+0xa36>
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	3331      	adds	r3, #49	@ 0x31
 800675e:	f88b 3000 	strb.w	r3, [fp]
 8006762:	e52e      	b.n	80061c2 <_dtoa_r+0x49a>
 8006764:	4628      	mov	r0, r5
 8006766:	e7b9      	b.n	80066dc <_dtoa_r+0x9b4>
 8006768:	2201      	movs	r2, #1
 800676a:	e7e2      	b.n	8006732 <_dtoa_r+0xa0a>
 800676c:	9904      	ldr	r1, [sp, #16]
 800676e:	2900      	cmp	r1, #0
 8006770:	db04      	blt.n	800677c <_dtoa_r+0xa54>
 8006772:	9807      	ldr	r0, [sp, #28]
 8006774:	4301      	orrs	r1, r0
 8006776:	9806      	ldr	r0, [sp, #24]
 8006778:	4301      	orrs	r1, r0
 800677a:	d120      	bne.n	80067be <_dtoa_r+0xa96>
 800677c:	2a00      	cmp	r2, #0
 800677e:	ddee      	ble.n	800675e <_dtoa_r+0xa36>
 8006780:	9902      	ldr	r1, [sp, #8]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	2201      	movs	r2, #1
 8006786:	4648      	mov	r0, r9
 8006788:	f000 fbee 	bl	8006f68 <__lshift>
 800678c:	4621      	mov	r1, r4
 800678e:	9002      	str	r0, [sp, #8]
 8006790:	f000 fc56 	bl	8007040 <__mcmp>
 8006794:	2800      	cmp	r0, #0
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	dc02      	bgt.n	80067a0 <_dtoa_r+0xa78>
 800679a:	d1e0      	bne.n	800675e <_dtoa_r+0xa36>
 800679c:	07da      	lsls	r2, r3, #31
 800679e:	d5de      	bpl.n	800675e <_dtoa_r+0xa36>
 80067a0:	2b39      	cmp	r3, #57	@ 0x39
 80067a2:	d1da      	bne.n	800675a <_dtoa_r+0xa32>
 80067a4:	2339      	movs	r3, #57	@ 0x39
 80067a6:	f88b 3000 	strb.w	r3, [fp]
 80067aa:	4633      	mov	r3, r6
 80067ac:	461e      	mov	r6, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067b4:	2a39      	cmp	r2, #57	@ 0x39
 80067b6:	d04e      	beq.n	8006856 <_dtoa_r+0xb2e>
 80067b8:	3201      	adds	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e501      	b.n	80061c2 <_dtoa_r+0x49a>
 80067be:	2a00      	cmp	r2, #0
 80067c0:	dd03      	ble.n	80067ca <_dtoa_r+0xaa2>
 80067c2:	2b39      	cmp	r3, #57	@ 0x39
 80067c4:	d0ee      	beq.n	80067a4 <_dtoa_r+0xa7c>
 80067c6:	3301      	adds	r3, #1
 80067c8:	e7c9      	b.n	800675e <_dtoa_r+0xa36>
 80067ca:	9a00      	ldr	r2, [sp, #0]
 80067cc:	9908      	ldr	r1, [sp, #32]
 80067ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067d2:	428a      	cmp	r2, r1
 80067d4:	d028      	beq.n	8006828 <_dtoa_r+0xb00>
 80067d6:	9902      	ldr	r1, [sp, #8]
 80067d8:	2300      	movs	r3, #0
 80067da:	220a      	movs	r2, #10
 80067dc:	4648      	mov	r0, r9
 80067de:	f000 f9d5 	bl	8006b8c <__multadd>
 80067e2:	42af      	cmp	r7, r5
 80067e4:	9002      	str	r0, [sp, #8]
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	f04f 020a 	mov.w	r2, #10
 80067ee:	4639      	mov	r1, r7
 80067f0:	4648      	mov	r0, r9
 80067f2:	d107      	bne.n	8006804 <_dtoa_r+0xadc>
 80067f4:	f000 f9ca 	bl	8006b8c <__multadd>
 80067f8:	4607      	mov	r7, r0
 80067fa:	4605      	mov	r5, r0
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	e777      	b.n	80066f4 <_dtoa_r+0x9cc>
 8006804:	f000 f9c2 	bl	8006b8c <__multadd>
 8006808:	4629      	mov	r1, r5
 800680a:	4607      	mov	r7, r0
 800680c:	2300      	movs	r3, #0
 800680e:	220a      	movs	r2, #10
 8006810:	4648      	mov	r0, r9
 8006812:	f000 f9bb 	bl	8006b8c <__multadd>
 8006816:	4605      	mov	r5, r0
 8006818:	e7f0      	b.n	80067fc <_dtoa_r+0xad4>
 800681a:	f1bb 0f00 	cmp.w	fp, #0
 800681e:	bfcc      	ite	gt
 8006820:	465e      	movgt	r6, fp
 8006822:	2601      	movle	r6, #1
 8006824:	4456      	add	r6, sl
 8006826:	2700      	movs	r7, #0
 8006828:	9902      	ldr	r1, [sp, #8]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	2201      	movs	r2, #1
 800682e:	4648      	mov	r0, r9
 8006830:	f000 fb9a 	bl	8006f68 <__lshift>
 8006834:	4621      	mov	r1, r4
 8006836:	9002      	str	r0, [sp, #8]
 8006838:	f000 fc02 	bl	8007040 <__mcmp>
 800683c:	2800      	cmp	r0, #0
 800683e:	dcb4      	bgt.n	80067aa <_dtoa_r+0xa82>
 8006840:	d102      	bne.n	8006848 <_dtoa_r+0xb20>
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	07db      	lsls	r3, r3, #31
 8006846:	d4b0      	bmi.n	80067aa <_dtoa_r+0xa82>
 8006848:	4633      	mov	r3, r6
 800684a:	461e      	mov	r6, r3
 800684c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006850:	2a30      	cmp	r2, #48	@ 0x30
 8006852:	d0fa      	beq.n	800684a <_dtoa_r+0xb22>
 8006854:	e4b5      	b.n	80061c2 <_dtoa_r+0x49a>
 8006856:	459a      	cmp	sl, r3
 8006858:	d1a8      	bne.n	80067ac <_dtoa_r+0xa84>
 800685a:	2331      	movs	r3, #49	@ 0x31
 800685c:	f108 0801 	add.w	r8, r8, #1
 8006860:	f88a 3000 	strb.w	r3, [sl]
 8006864:	e4ad      	b.n	80061c2 <_dtoa_r+0x49a>
 8006866:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006868:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80068c4 <_dtoa_r+0xb9c>
 800686c:	b11b      	cbz	r3, 8006876 <_dtoa_r+0xb4e>
 800686e:	f10a 0308 	add.w	r3, sl, #8
 8006872:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4650      	mov	r0, sl
 8006878:	b017      	add	sp, #92	@ 0x5c
 800687a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687e:	9b07      	ldr	r3, [sp, #28]
 8006880:	2b01      	cmp	r3, #1
 8006882:	f77f ae2e 	ble.w	80064e2 <_dtoa_r+0x7ba>
 8006886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006888:	9308      	str	r3, [sp, #32]
 800688a:	2001      	movs	r0, #1
 800688c:	e64d      	b.n	800652a <_dtoa_r+0x802>
 800688e:	f1bb 0f00 	cmp.w	fp, #0
 8006892:	f77f aed9 	ble.w	8006648 <_dtoa_r+0x920>
 8006896:	4656      	mov	r6, sl
 8006898:	9802      	ldr	r0, [sp, #8]
 800689a:	4621      	mov	r1, r4
 800689c:	f7ff f9ba 	bl	8005c14 <quorem>
 80068a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80068a4:	f806 3b01 	strb.w	r3, [r6], #1
 80068a8:	eba6 020a 	sub.w	r2, r6, sl
 80068ac:	4593      	cmp	fp, r2
 80068ae:	ddb4      	ble.n	800681a <_dtoa_r+0xaf2>
 80068b0:	9902      	ldr	r1, [sp, #8]
 80068b2:	2300      	movs	r3, #0
 80068b4:	220a      	movs	r2, #10
 80068b6:	4648      	mov	r0, r9
 80068b8:	f000 f968 	bl	8006b8c <__multadd>
 80068bc:	9002      	str	r0, [sp, #8]
 80068be:	e7eb      	b.n	8006898 <_dtoa_r+0xb70>
 80068c0:	080093cd 	.word	0x080093cd
 80068c4:	08009351 	.word	0x08009351

080068c8 <_free_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4605      	mov	r5, r0
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d041      	beq.n	8006954 <_free_r+0x8c>
 80068d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068d4:	1f0c      	subs	r4, r1, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfb8      	it	lt
 80068da:	18e4      	addlt	r4, r4, r3
 80068dc:	f000 f8e8 	bl	8006ab0 <__malloc_lock>
 80068e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <_free_r+0x90>)
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	b933      	cbnz	r3, 80068f4 <_free_r+0x2c>
 80068e6:	6063      	str	r3, [r4, #4]
 80068e8:	6014      	str	r4, [r2, #0]
 80068ea:	4628      	mov	r0, r5
 80068ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f0:	f000 b8e4 	b.w	8006abc <__malloc_unlock>
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	d908      	bls.n	800690a <_free_r+0x42>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	1821      	adds	r1, r4, r0
 80068fc:	428b      	cmp	r3, r1
 80068fe:	bf01      	itttt	eq
 8006900:	6819      	ldreq	r1, [r3, #0]
 8006902:	685b      	ldreq	r3, [r3, #4]
 8006904:	1809      	addeq	r1, r1, r0
 8006906:	6021      	streq	r1, [r4, #0]
 8006908:	e7ed      	b.n	80068e6 <_free_r+0x1e>
 800690a:	461a      	mov	r2, r3
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	b10b      	cbz	r3, 8006914 <_free_r+0x4c>
 8006910:	42a3      	cmp	r3, r4
 8006912:	d9fa      	bls.n	800690a <_free_r+0x42>
 8006914:	6811      	ldr	r1, [r2, #0]
 8006916:	1850      	adds	r0, r2, r1
 8006918:	42a0      	cmp	r0, r4
 800691a:	d10b      	bne.n	8006934 <_free_r+0x6c>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	4401      	add	r1, r0
 8006920:	1850      	adds	r0, r2, r1
 8006922:	4283      	cmp	r3, r0
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	d1e0      	bne.n	80068ea <_free_r+0x22>
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	6053      	str	r3, [r2, #4]
 800692e:	4408      	add	r0, r1
 8006930:	6010      	str	r0, [r2, #0]
 8006932:	e7da      	b.n	80068ea <_free_r+0x22>
 8006934:	d902      	bls.n	800693c <_free_r+0x74>
 8006936:	230c      	movs	r3, #12
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	e7d6      	b.n	80068ea <_free_r+0x22>
 800693c:	6820      	ldr	r0, [r4, #0]
 800693e:	1821      	adds	r1, r4, r0
 8006940:	428b      	cmp	r3, r1
 8006942:	bf04      	itt	eq
 8006944:	6819      	ldreq	r1, [r3, #0]
 8006946:	685b      	ldreq	r3, [r3, #4]
 8006948:	6063      	str	r3, [r4, #4]
 800694a:	bf04      	itt	eq
 800694c:	1809      	addeq	r1, r1, r0
 800694e:	6021      	streq	r1, [r4, #0]
 8006950:	6054      	str	r4, [r2, #4]
 8006952:	e7ca      	b.n	80068ea <_free_r+0x22>
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	bf00      	nop
 8006958:	200403f8 	.word	0x200403f8

0800695c <malloc>:
 800695c:	4b02      	ldr	r3, [pc, #8]	@ (8006968 <malloc+0xc>)
 800695e:	4601      	mov	r1, r0
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	f000 b825 	b.w	80069b0 <_malloc_r>
 8006966:	bf00      	nop
 8006968:	20040018 	.word	0x20040018

0800696c <sbrk_aligned>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	4e0f      	ldr	r6, [pc, #60]	@ (80069ac <sbrk_aligned+0x40>)
 8006970:	460c      	mov	r4, r1
 8006972:	6831      	ldr	r1, [r6, #0]
 8006974:	4605      	mov	r5, r0
 8006976:	b911      	cbnz	r1, 800697e <sbrk_aligned+0x12>
 8006978:	f001 fe04 	bl	8008584 <_sbrk_r>
 800697c:	6030      	str	r0, [r6, #0]
 800697e:	4621      	mov	r1, r4
 8006980:	4628      	mov	r0, r5
 8006982:	f001 fdff 	bl	8008584 <_sbrk_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d103      	bne.n	8006992 <sbrk_aligned+0x26>
 800698a:	f04f 34ff 	mov.w	r4, #4294967295
 800698e:	4620      	mov	r0, r4
 8006990:	bd70      	pop	{r4, r5, r6, pc}
 8006992:	1cc4      	adds	r4, r0, #3
 8006994:	f024 0403 	bic.w	r4, r4, #3
 8006998:	42a0      	cmp	r0, r4
 800699a:	d0f8      	beq.n	800698e <sbrk_aligned+0x22>
 800699c:	1a21      	subs	r1, r4, r0
 800699e:	4628      	mov	r0, r5
 80069a0:	f001 fdf0 	bl	8008584 <_sbrk_r>
 80069a4:	3001      	adds	r0, #1
 80069a6:	d1f2      	bne.n	800698e <sbrk_aligned+0x22>
 80069a8:	e7ef      	b.n	800698a <sbrk_aligned+0x1e>
 80069aa:	bf00      	nop
 80069ac:	200403f4 	.word	0x200403f4

080069b0 <_malloc_r>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	1ccd      	adds	r5, r1, #3
 80069b6:	f025 0503 	bic.w	r5, r5, #3
 80069ba:	3508      	adds	r5, #8
 80069bc:	2d0c      	cmp	r5, #12
 80069be:	bf38      	it	cc
 80069c0:	250c      	movcc	r5, #12
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	4606      	mov	r6, r0
 80069c6:	db01      	blt.n	80069cc <_malloc_r+0x1c>
 80069c8:	42a9      	cmp	r1, r5
 80069ca:	d904      	bls.n	80069d6 <_malloc_r+0x26>
 80069cc:	230c      	movs	r3, #12
 80069ce:	6033      	str	r3, [r6, #0]
 80069d0:	2000      	movs	r0, #0
 80069d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006aac <_malloc_r+0xfc>
 80069da:	f000 f869 	bl	8006ab0 <__malloc_lock>
 80069de:	f8d8 3000 	ldr.w	r3, [r8]
 80069e2:	461c      	mov	r4, r3
 80069e4:	bb44      	cbnz	r4, 8006a38 <_malloc_r+0x88>
 80069e6:	4629      	mov	r1, r5
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7ff ffbf 	bl	800696c <sbrk_aligned>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	4604      	mov	r4, r0
 80069f2:	d158      	bne.n	8006aa6 <_malloc_r+0xf6>
 80069f4:	f8d8 4000 	ldr.w	r4, [r8]
 80069f8:	4627      	mov	r7, r4
 80069fa:	2f00      	cmp	r7, #0
 80069fc:	d143      	bne.n	8006a86 <_malloc_r+0xd6>
 80069fe:	2c00      	cmp	r4, #0
 8006a00:	d04b      	beq.n	8006a9a <_malloc_r+0xea>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	4639      	mov	r1, r7
 8006a06:	4630      	mov	r0, r6
 8006a08:	eb04 0903 	add.w	r9, r4, r3
 8006a0c:	f001 fdba 	bl	8008584 <_sbrk_r>
 8006a10:	4581      	cmp	r9, r0
 8006a12:	d142      	bne.n	8006a9a <_malloc_r+0xea>
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	1a6d      	subs	r5, r5, r1
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f7ff ffa6 	bl	800696c <sbrk_aligned>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d03a      	beq.n	8006a9a <_malloc_r+0xea>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	442b      	add	r3, r5
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	bb62      	cbnz	r2, 8006a8c <_malloc_r+0xdc>
 8006a32:	f8c8 7000 	str.w	r7, [r8]
 8006a36:	e00f      	b.n	8006a58 <_malloc_r+0xa8>
 8006a38:	6822      	ldr	r2, [r4, #0]
 8006a3a:	1b52      	subs	r2, r2, r5
 8006a3c:	d420      	bmi.n	8006a80 <_malloc_r+0xd0>
 8006a3e:	2a0b      	cmp	r2, #11
 8006a40:	d917      	bls.n	8006a72 <_malloc_r+0xc2>
 8006a42:	1961      	adds	r1, r4, r5
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	6025      	str	r5, [r4, #0]
 8006a48:	bf18      	it	ne
 8006a4a:	6059      	strne	r1, [r3, #4]
 8006a4c:	6863      	ldr	r3, [r4, #4]
 8006a4e:	bf08      	it	eq
 8006a50:	f8c8 1000 	streq.w	r1, [r8]
 8006a54:	5162      	str	r2, [r4, r5]
 8006a56:	604b      	str	r3, [r1, #4]
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f000 f82f 	bl	8006abc <__malloc_unlock>
 8006a5e:	f104 000b 	add.w	r0, r4, #11
 8006a62:	1d23      	adds	r3, r4, #4
 8006a64:	f020 0007 	bic.w	r0, r0, #7
 8006a68:	1ac2      	subs	r2, r0, r3
 8006a6a:	bf1c      	itt	ne
 8006a6c:	1a1b      	subne	r3, r3, r0
 8006a6e:	50a3      	strne	r3, [r4, r2]
 8006a70:	e7af      	b.n	80069d2 <_malloc_r+0x22>
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	bf0c      	ite	eq
 8006a78:	f8c8 2000 	streq.w	r2, [r8]
 8006a7c:	605a      	strne	r2, [r3, #4]
 8006a7e:	e7eb      	b.n	8006a58 <_malloc_r+0xa8>
 8006a80:	4623      	mov	r3, r4
 8006a82:	6864      	ldr	r4, [r4, #4]
 8006a84:	e7ae      	b.n	80069e4 <_malloc_r+0x34>
 8006a86:	463c      	mov	r4, r7
 8006a88:	687f      	ldr	r7, [r7, #4]
 8006a8a:	e7b6      	b.n	80069fa <_malloc_r+0x4a>
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d1fb      	bne.n	8006a8c <_malloc_r+0xdc>
 8006a94:	2300      	movs	r3, #0
 8006a96:	6053      	str	r3, [r2, #4]
 8006a98:	e7de      	b.n	8006a58 <_malloc_r+0xa8>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	6033      	str	r3, [r6, #0]
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f000 f80c 	bl	8006abc <__malloc_unlock>
 8006aa4:	e794      	b.n	80069d0 <_malloc_r+0x20>
 8006aa6:	6005      	str	r5, [r0, #0]
 8006aa8:	e7d6      	b.n	8006a58 <_malloc_r+0xa8>
 8006aaa:	bf00      	nop
 8006aac:	200403f8 	.word	0x200403f8

08006ab0 <__malloc_lock>:
 8006ab0:	4801      	ldr	r0, [pc, #4]	@ (8006ab8 <__malloc_lock+0x8>)
 8006ab2:	f7ff b8a6 	b.w	8005c02 <__retarget_lock_acquire_recursive>
 8006ab6:	bf00      	nop
 8006ab8:	200403f0 	.word	0x200403f0

08006abc <__malloc_unlock>:
 8006abc:	4801      	ldr	r0, [pc, #4]	@ (8006ac4 <__malloc_unlock+0x8>)
 8006abe:	f7ff b8a1 	b.w	8005c04 <__retarget_lock_release_recursive>
 8006ac2:	bf00      	nop
 8006ac4:	200403f0 	.word	0x200403f0

08006ac8 <_Balloc>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	69c6      	ldr	r6, [r0, #28]
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	b976      	cbnz	r6, 8006af0 <_Balloc+0x28>
 8006ad2:	2010      	movs	r0, #16
 8006ad4:	f7ff ff42 	bl	800695c <malloc>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	61e0      	str	r0, [r4, #28]
 8006adc:	b920      	cbnz	r0, 8006ae8 <_Balloc+0x20>
 8006ade:	4b18      	ldr	r3, [pc, #96]	@ (8006b40 <_Balloc+0x78>)
 8006ae0:	4818      	ldr	r0, [pc, #96]	@ (8006b44 <_Balloc+0x7c>)
 8006ae2:	216b      	movs	r1, #107	@ 0x6b
 8006ae4:	f001 fd74 	bl	80085d0 <__assert_func>
 8006ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006aec:	6006      	str	r6, [r0, #0]
 8006aee:	60c6      	str	r6, [r0, #12]
 8006af0:	69e6      	ldr	r6, [r4, #28]
 8006af2:	68f3      	ldr	r3, [r6, #12]
 8006af4:	b183      	cbz	r3, 8006b18 <_Balloc+0x50>
 8006af6:	69e3      	ldr	r3, [r4, #28]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006afe:	b9b8      	cbnz	r0, 8006b30 <_Balloc+0x68>
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f605 	lsl.w	r6, r1, r5
 8006b06:	1d72      	adds	r2, r6, #5
 8006b08:	0092      	lsls	r2, r2, #2
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f001 fd7e 	bl	800860c <_calloc_r>
 8006b10:	b160      	cbz	r0, 8006b2c <_Balloc+0x64>
 8006b12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b16:	e00e      	b.n	8006b36 <_Balloc+0x6e>
 8006b18:	2221      	movs	r2, #33	@ 0x21
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f001 fd75 	bl	800860c <_calloc_r>
 8006b22:	69e3      	ldr	r3, [r4, #28]
 8006b24:	60f0      	str	r0, [r6, #12]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e4      	bne.n	8006af6 <_Balloc+0x2e>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	6802      	ldr	r2, [r0, #0]
 8006b32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b36:	2300      	movs	r3, #0
 8006b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b3c:	e7f7      	b.n	8006b2e <_Balloc+0x66>
 8006b3e:	bf00      	nop
 8006b40:	0800935e 	.word	0x0800935e
 8006b44:	080093de 	.word	0x080093de

08006b48 <_Bfree>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	69c6      	ldr	r6, [r0, #28]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	b976      	cbnz	r6, 8006b70 <_Bfree+0x28>
 8006b52:	2010      	movs	r0, #16
 8006b54:	f7ff ff02 	bl	800695c <malloc>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	61e8      	str	r0, [r5, #28]
 8006b5c:	b920      	cbnz	r0, 8006b68 <_Bfree+0x20>
 8006b5e:	4b09      	ldr	r3, [pc, #36]	@ (8006b84 <_Bfree+0x3c>)
 8006b60:	4809      	ldr	r0, [pc, #36]	@ (8006b88 <_Bfree+0x40>)
 8006b62:	218f      	movs	r1, #143	@ 0x8f
 8006b64:	f001 fd34 	bl	80085d0 <__assert_func>
 8006b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b6c:	6006      	str	r6, [r0, #0]
 8006b6e:	60c6      	str	r6, [r0, #12]
 8006b70:	b13c      	cbz	r4, 8006b82 <_Bfree+0x3a>
 8006b72:	69eb      	ldr	r3, [r5, #28]
 8006b74:	6862      	ldr	r2, [r4, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b7c:	6021      	str	r1, [r4, #0]
 8006b7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	0800935e 	.word	0x0800935e
 8006b88:	080093de 	.word	0x080093de

08006b8c <__multadd>:
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	690d      	ldr	r5, [r1, #16]
 8006b92:	4607      	mov	r7, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	461e      	mov	r6, r3
 8006b98:	f101 0c14 	add.w	ip, r1, #20
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006ba2:	b299      	uxth	r1, r3
 8006ba4:	fb02 6101 	mla	r1, r2, r1, r6
 8006ba8:	0c1e      	lsrs	r6, r3, #16
 8006baa:	0c0b      	lsrs	r3, r1, #16
 8006bac:	fb02 3306 	mla	r3, r2, r6, r3
 8006bb0:	b289      	uxth	r1, r1
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bb8:	4285      	cmp	r5, r0
 8006bba:	f84c 1b04 	str.w	r1, [ip], #4
 8006bbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bc2:	dcec      	bgt.n	8006b9e <__multadd+0x12>
 8006bc4:	b30e      	cbz	r6, 8006c0a <__multadd+0x7e>
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dc19      	bgt.n	8006c00 <__multadd+0x74>
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	4638      	mov	r0, r7
 8006bd0:	3101      	adds	r1, #1
 8006bd2:	f7ff ff79 	bl	8006ac8 <_Balloc>
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	b928      	cbnz	r0, 8006be6 <__multadd+0x5a>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c10 <__multadd+0x84>)
 8006bde:	480d      	ldr	r0, [pc, #52]	@ (8006c14 <__multadd+0x88>)
 8006be0:	21ba      	movs	r1, #186	@ 0xba
 8006be2:	f001 fcf5 	bl	80085d0 <__assert_func>
 8006be6:	6922      	ldr	r2, [r4, #16]
 8006be8:	3202      	adds	r2, #2
 8006bea:	f104 010c 	add.w	r1, r4, #12
 8006bee:	0092      	lsls	r2, r2, #2
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	f001 fcd7 	bl	80085a4 <memcpy>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff ffa5 	bl	8006b48 <_Bfree>
 8006bfe:	4644      	mov	r4, r8
 8006c00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c04:	3501      	adds	r5, #1
 8006c06:	615e      	str	r6, [r3, #20]
 8006c08:	6125      	str	r5, [r4, #16]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	080093cd 	.word	0x080093cd
 8006c14:	080093de 	.word	0x080093de

08006c18 <__s2b>:
 8006c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	4615      	mov	r5, r2
 8006c20:	461f      	mov	r7, r3
 8006c22:	2209      	movs	r2, #9
 8006c24:	3308      	adds	r3, #8
 8006c26:	4606      	mov	r6, r0
 8006c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	2201      	movs	r2, #1
 8006c30:	429a      	cmp	r2, r3
 8006c32:	db09      	blt.n	8006c48 <__s2b+0x30>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ff47 	bl	8006ac8 <_Balloc>
 8006c3a:	b940      	cbnz	r0, 8006c4e <__s2b+0x36>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4b19      	ldr	r3, [pc, #100]	@ (8006ca4 <__s2b+0x8c>)
 8006c40:	4819      	ldr	r0, [pc, #100]	@ (8006ca8 <__s2b+0x90>)
 8006c42:	21d3      	movs	r1, #211	@ 0xd3
 8006c44:	f001 fcc4 	bl	80085d0 <__assert_func>
 8006c48:	0052      	lsls	r2, r2, #1
 8006c4a:	3101      	adds	r1, #1
 8006c4c:	e7f0      	b.n	8006c30 <__s2b+0x18>
 8006c4e:	9b08      	ldr	r3, [sp, #32]
 8006c50:	6143      	str	r3, [r0, #20]
 8006c52:	2d09      	cmp	r5, #9
 8006c54:	f04f 0301 	mov.w	r3, #1
 8006c58:	6103      	str	r3, [r0, #16]
 8006c5a:	dd16      	ble.n	8006c8a <__s2b+0x72>
 8006c5c:	f104 0909 	add.w	r9, r4, #9
 8006c60:	46c8      	mov	r8, r9
 8006c62:	442c      	add	r4, r5
 8006c64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c68:	4601      	mov	r1, r0
 8006c6a:	3b30      	subs	r3, #48	@ 0x30
 8006c6c:	220a      	movs	r2, #10
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7ff ff8c 	bl	8006b8c <__multadd>
 8006c74:	45a0      	cmp	r8, r4
 8006c76:	d1f5      	bne.n	8006c64 <__s2b+0x4c>
 8006c78:	f1a5 0408 	sub.w	r4, r5, #8
 8006c7c:	444c      	add	r4, r9
 8006c7e:	1b2d      	subs	r5, r5, r4
 8006c80:	1963      	adds	r3, r4, r5
 8006c82:	42bb      	cmp	r3, r7
 8006c84:	db04      	blt.n	8006c90 <__s2b+0x78>
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	340a      	adds	r4, #10
 8006c8c:	2509      	movs	r5, #9
 8006c8e:	e7f6      	b.n	8006c7e <__s2b+0x66>
 8006c90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c94:	4601      	mov	r1, r0
 8006c96:	3b30      	subs	r3, #48	@ 0x30
 8006c98:	220a      	movs	r2, #10
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f7ff ff76 	bl	8006b8c <__multadd>
 8006ca0:	e7ee      	b.n	8006c80 <__s2b+0x68>
 8006ca2:	bf00      	nop
 8006ca4:	080093cd 	.word	0x080093cd
 8006ca8:	080093de 	.word	0x080093de

08006cac <__hi0bits>:
 8006cac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	bf36      	itet	cc
 8006cb4:	0403      	lslcc	r3, r0, #16
 8006cb6:	2000      	movcs	r0, #0
 8006cb8:	2010      	movcc	r0, #16
 8006cba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cbe:	bf3c      	itt	cc
 8006cc0:	021b      	lslcc	r3, r3, #8
 8006cc2:	3008      	addcc	r0, #8
 8006cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cc8:	bf3c      	itt	cc
 8006cca:	011b      	lslcc	r3, r3, #4
 8006ccc:	3004      	addcc	r0, #4
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd2:	bf3c      	itt	cc
 8006cd4:	009b      	lslcc	r3, r3, #2
 8006cd6:	3002      	addcc	r0, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	db05      	blt.n	8006ce8 <__hi0bits+0x3c>
 8006cdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ce0:	f100 0001 	add.w	r0, r0, #1
 8006ce4:	bf08      	it	eq
 8006ce6:	2020      	moveq	r0, #32
 8006ce8:	4770      	bx	lr

08006cea <__lo0bits>:
 8006cea:	6803      	ldr	r3, [r0, #0]
 8006cec:	4602      	mov	r2, r0
 8006cee:	f013 0007 	ands.w	r0, r3, #7
 8006cf2:	d00b      	beq.n	8006d0c <__lo0bits+0x22>
 8006cf4:	07d9      	lsls	r1, r3, #31
 8006cf6:	d421      	bmi.n	8006d3c <__lo0bits+0x52>
 8006cf8:	0798      	lsls	r0, r3, #30
 8006cfa:	bf49      	itett	mi
 8006cfc:	085b      	lsrmi	r3, r3, #1
 8006cfe:	089b      	lsrpl	r3, r3, #2
 8006d00:	2001      	movmi	r0, #1
 8006d02:	6013      	strmi	r3, [r2, #0]
 8006d04:	bf5c      	itt	pl
 8006d06:	6013      	strpl	r3, [r2, #0]
 8006d08:	2002      	movpl	r0, #2
 8006d0a:	4770      	bx	lr
 8006d0c:	b299      	uxth	r1, r3
 8006d0e:	b909      	cbnz	r1, 8006d14 <__lo0bits+0x2a>
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	2010      	movs	r0, #16
 8006d14:	b2d9      	uxtb	r1, r3
 8006d16:	b909      	cbnz	r1, 8006d1c <__lo0bits+0x32>
 8006d18:	3008      	adds	r0, #8
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	0719      	lsls	r1, r3, #28
 8006d1e:	bf04      	itt	eq
 8006d20:	091b      	lsreq	r3, r3, #4
 8006d22:	3004      	addeq	r0, #4
 8006d24:	0799      	lsls	r1, r3, #30
 8006d26:	bf04      	itt	eq
 8006d28:	089b      	lsreq	r3, r3, #2
 8006d2a:	3002      	addeq	r0, #2
 8006d2c:	07d9      	lsls	r1, r3, #31
 8006d2e:	d403      	bmi.n	8006d38 <__lo0bits+0x4e>
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	f100 0001 	add.w	r0, r0, #1
 8006d36:	d003      	beq.n	8006d40 <__lo0bits+0x56>
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	4770      	bx	lr
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	4770      	bx	lr
 8006d40:	2020      	movs	r0, #32
 8006d42:	4770      	bx	lr

08006d44 <__i2b>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	460c      	mov	r4, r1
 8006d48:	2101      	movs	r1, #1
 8006d4a:	f7ff febd 	bl	8006ac8 <_Balloc>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	b928      	cbnz	r0, 8006d5e <__i2b+0x1a>
 8006d52:	4b05      	ldr	r3, [pc, #20]	@ (8006d68 <__i2b+0x24>)
 8006d54:	4805      	ldr	r0, [pc, #20]	@ (8006d6c <__i2b+0x28>)
 8006d56:	f240 1145 	movw	r1, #325	@ 0x145
 8006d5a:	f001 fc39 	bl	80085d0 <__assert_func>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	6144      	str	r4, [r0, #20]
 8006d62:	6103      	str	r3, [r0, #16]
 8006d64:	bd10      	pop	{r4, pc}
 8006d66:	bf00      	nop
 8006d68:	080093cd 	.word	0x080093cd
 8006d6c:	080093de 	.word	0x080093de

08006d70 <__multiply>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	4617      	mov	r7, r2
 8006d76:	690a      	ldr	r2, [r1, #16]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	bfa8      	it	ge
 8006d7e:	463b      	movge	r3, r7
 8006d80:	4689      	mov	r9, r1
 8006d82:	bfa4      	itt	ge
 8006d84:	460f      	movge	r7, r1
 8006d86:	4699      	movge	r9, r3
 8006d88:	693d      	ldr	r5, [r7, #16]
 8006d8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	eb05 060a 	add.w	r6, r5, sl
 8006d96:	42b3      	cmp	r3, r6
 8006d98:	b085      	sub	sp, #20
 8006d9a:	bfb8      	it	lt
 8006d9c:	3101      	addlt	r1, #1
 8006d9e:	f7ff fe93 	bl	8006ac8 <_Balloc>
 8006da2:	b930      	cbnz	r0, 8006db2 <__multiply+0x42>
 8006da4:	4602      	mov	r2, r0
 8006da6:	4b41      	ldr	r3, [pc, #260]	@ (8006eac <__multiply+0x13c>)
 8006da8:	4841      	ldr	r0, [pc, #260]	@ (8006eb0 <__multiply+0x140>)
 8006daa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006dae:	f001 fc0f 	bl	80085d0 <__assert_func>
 8006db2:	f100 0414 	add.w	r4, r0, #20
 8006db6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006dba:	4623      	mov	r3, r4
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4573      	cmp	r3, lr
 8006dc0:	d320      	bcc.n	8006e04 <__multiply+0x94>
 8006dc2:	f107 0814 	add.w	r8, r7, #20
 8006dc6:	f109 0114 	add.w	r1, r9, #20
 8006dca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006dce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	1beb      	subs	r3, r5, r7
 8006dd6:	3b15      	subs	r3, #21
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	3304      	adds	r3, #4
 8006dde:	3715      	adds	r7, #21
 8006de0:	42bd      	cmp	r5, r7
 8006de2:	bf38      	it	cc
 8006de4:	2304      	movcc	r3, #4
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	9b02      	ldr	r3, [sp, #8]
 8006dea:	9103      	str	r1, [sp, #12]
 8006dec:	428b      	cmp	r3, r1
 8006dee:	d80c      	bhi.n	8006e0a <__multiply+0x9a>
 8006df0:	2e00      	cmp	r6, #0
 8006df2:	dd03      	ble.n	8006dfc <__multiply+0x8c>
 8006df4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d055      	beq.n	8006ea8 <__multiply+0x138>
 8006dfc:	6106      	str	r6, [r0, #16]
 8006dfe:	b005      	add	sp, #20
 8006e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e04:	f843 2b04 	str.w	r2, [r3], #4
 8006e08:	e7d9      	b.n	8006dbe <__multiply+0x4e>
 8006e0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e0e:	f1ba 0f00 	cmp.w	sl, #0
 8006e12:	d01f      	beq.n	8006e54 <__multiply+0xe4>
 8006e14:	46c4      	mov	ip, r8
 8006e16:	46a1      	mov	r9, r4
 8006e18:	2700      	movs	r7, #0
 8006e1a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e1e:	f8d9 3000 	ldr.w	r3, [r9]
 8006e22:	fa1f fb82 	uxth.w	fp, r2
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e2c:	443b      	add	r3, r7
 8006e2e:	f8d9 7000 	ldr.w	r7, [r9]
 8006e32:	0c12      	lsrs	r2, r2, #16
 8006e34:	0c3f      	lsrs	r7, r7, #16
 8006e36:	fb0a 7202 	mla	r2, sl, r2, r7
 8006e3a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e44:	4565      	cmp	r5, ip
 8006e46:	f849 3b04 	str.w	r3, [r9], #4
 8006e4a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006e4e:	d8e4      	bhi.n	8006e1a <__multiply+0xaa>
 8006e50:	9b01      	ldr	r3, [sp, #4]
 8006e52:	50e7      	str	r7, [r4, r3]
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e5a:	3104      	adds	r1, #4
 8006e5c:	f1b9 0f00 	cmp.w	r9, #0
 8006e60:	d020      	beq.n	8006ea4 <__multiply+0x134>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	4647      	mov	r7, r8
 8006e66:	46a4      	mov	ip, r4
 8006e68:	f04f 0a00 	mov.w	sl, #0
 8006e6c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006e70:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006e74:	fb09 220b 	mla	r2, r9, fp, r2
 8006e78:	4452      	add	r2, sl
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e80:	f84c 3b04 	str.w	r3, [ip], #4
 8006e84:	f857 3b04 	ldr.w	r3, [r7], #4
 8006e88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e8c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006e90:	fb09 330a 	mla	r3, r9, sl, r3
 8006e94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006e98:	42bd      	cmp	r5, r7
 8006e9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e9e:	d8e5      	bhi.n	8006e6c <__multiply+0xfc>
 8006ea0:	9a01      	ldr	r2, [sp, #4]
 8006ea2:	50a3      	str	r3, [r4, r2]
 8006ea4:	3404      	adds	r4, #4
 8006ea6:	e79f      	b.n	8006de8 <__multiply+0x78>
 8006ea8:	3e01      	subs	r6, #1
 8006eaa:	e7a1      	b.n	8006df0 <__multiply+0x80>
 8006eac:	080093cd 	.word	0x080093cd
 8006eb0:	080093de 	.word	0x080093de

08006eb4 <__pow5mult>:
 8006eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb8:	4615      	mov	r5, r2
 8006eba:	f012 0203 	ands.w	r2, r2, #3
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	460e      	mov	r6, r1
 8006ec2:	d007      	beq.n	8006ed4 <__pow5mult+0x20>
 8006ec4:	4c25      	ldr	r4, [pc, #148]	@ (8006f5c <__pow5mult+0xa8>)
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ece:	f7ff fe5d 	bl	8006b8c <__multadd>
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	10ad      	asrs	r5, r5, #2
 8006ed6:	d03d      	beq.n	8006f54 <__pow5mult+0xa0>
 8006ed8:	69fc      	ldr	r4, [r7, #28]
 8006eda:	b97c      	cbnz	r4, 8006efc <__pow5mult+0x48>
 8006edc:	2010      	movs	r0, #16
 8006ede:	f7ff fd3d 	bl	800695c <malloc>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	61f8      	str	r0, [r7, #28]
 8006ee6:	b928      	cbnz	r0, 8006ef4 <__pow5mult+0x40>
 8006ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f60 <__pow5mult+0xac>)
 8006eea:	481e      	ldr	r0, [pc, #120]	@ (8006f64 <__pow5mult+0xb0>)
 8006eec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ef0:	f001 fb6e 	bl	80085d0 <__assert_func>
 8006ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef8:	6004      	str	r4, [r0, #0]
 8006efa:	60c4      	str	r4, [r0, #12]
 8006efc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f04:	b94c      	cbnz	r4, 8006f1a <__pow5mult+0x66>
 8006f06:	f240 2171 	movw	r1, #625	@ 0x271
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f7ff ff1a 	bl	8006d44 <__i2b>
 8006f10:	2300      	movs	r3, #0
 8006f12:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f16:	4604      	mov	r4, r0
 8006f18:	6003      	str	r3, [r0, #0]
 8006f1a:	f04f 0900 	mov.w	r9, #0
 8006f1e:	07eb      	lsls	r3, r5, #31
 8006f20:	d50a      	bpl.n	8006f38 <__pow5mult+0x84>
 8006f22:	4631      	mov	r1, r6
 8006f24:	4622      	mov	r2, r4
 8006f26:	4638      	mov	r0, r7
 8006f28:	f7ff ff22 	bl	8006d70 <__multiply>
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4680      	mov	r8, r0
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff fe09 	bl	8006b48 <_Bfree>
 8006f36:	4646      	mov	r6, r8
 8006f38:	106d      	asrs	r5, r5, #1
 8006f3a:	d00b      	beq.n	8006f54 <__pow5mult+0xa0>
 8006f3c:	6820      	ldr	r0, [r4, #0]
 8006f3e:	b938      	cbnz	r0, 8006f50 <__pow5mult+0x9c>
 8006f40:	4622      	mov	r2, r4
 8006f42:	4621      	mov	r1, r4
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ff13 	bl	8006d70 <__multiply>
 8006f4a:	6020      	str	r0, [r4, #0]
 8006f4c:	f8c0 9000 	str.w	r9, [r0]
 8006f50:	4604      	mov	r4, r0
 8006f52:	e7e4      	b.n	8006f1e <__pow5mult+0x6a>
 8006f54:	4630      	mov	r0, r6
 8006f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5a:	bf00      	nop
 8006f5c:	080094f0 	.word	0x080094f0
 8006f60:	0800935e 	.word	0x0800935e
 8006f64:	080093de 	.word	0x080093de

08006f68 <__lshift>:
 8006f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	6849      	ldr	r1, [r1, #4]
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	4607      	mov	r7, r0
 8006f7a:	4691      	mov	r9, r2
 8006f7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f80:	f108 0601 	add.w	r6, r8, #1
 8006f84:	42b3      	cmp	r3, r6
 8006f86:	db0b      	blt.n	8006fa0 <__lshift+0x38>
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7ff fd9d 	bl	8006ac8 <_Balloc>
 8006f8e:	4605      	mov	r5, r0
 8006f90:	b948      	cbnz	r0, 8006fa6 <__lshift+0x3e>
 8006f92:	4602      	mov	r2, r0
 8006f94:	4b28      	ldr	r3, [pc, #160]	@ (8007038 <__lshift+0xd0>)
 8006f96:	4829      	ldr	r0, [pc, #164]	@ (800703c <__lshift+0xd4>)
 8006f98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f9c:	f001 fb18 	bl	80085d0 <__assert_func>
 8006fa0:	3101      	adds	r1, #1
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	e7ee      	b.n	8006f84 <__lshift+0x1c>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f100 0114 	add.w	r1, r0, #20
 8006fac:	f100 0210 	add.w	r2, r0, #16
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	4553      	cmp	r3, sl
 8006fb4:	db33      	blt.n	800701e <__lshift+0xb6>
 8006fb6:	6920      	ldr	r0, [r4, #16]
 8006fb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fbc:	f104 0314 	add.w	r3, r4, #20
 8006fc0:	f019 091f 	ands.w	r9, r9, #31
 8006fc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fcc:	d02b      	beq.n	8007026 <__lshift+0xbe>
 8006fce:	f1c9 0e20 	rsb	lr, r9, #32
 8006fd2:	468a      	mov	sl, r1
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	fa00 f009 	lsl.w	r0, r0, r9
 8006fdc:	4310      	orrs	r0, r2
 8006fde:	f84a 0b04 	str.w	r0, [sl], #4
 8006fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe6:	459c      	cmp	ip, r3
 8006fe8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fec:	d8f3      	bhi.n	8006fd6 <__lshift+0x6e>
 8006fee:	ebac 0304 	sub.w	r3, ip, r4
 8006ff2:	3b15      	subs	r3, #21
 8006ff4:	f023 0303 	bic.w	r3, r3, #3
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	f104 0015 	add.w	r0, r4, #21
 8006ffe:	4560      	cmp	r0, ip
 8007000:	bf88      	it	hi
 8007002:	2304      	movhi	r3, #4
 8007004:	50ca      	str	r2, [r1, r3]
 8007006:	b10a      	cbz	r2, 800700c <__lshift+0xa4>
 8007008:	f108 0602 	add.w	r6, r8, #2
 800700c:	3e01      	subs	r6, #1
 800700e:	4638      	mov	r0, r7
 8007010:	612e      	str	r6, [r5, #16]
 8007012:	4621      	mov	r1, r4
 8007014:	f7ff fd98 	bl	8006b48 <_Bfree>
 8007018:	4628      	mov	r0, r5
 800701a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007022:	3301      	adds	r3, #1
 8007024:	e7c5      	b.n	8006fb2 <__lshift+0x4a>
 8007026:	3904      	subs	r1, #4
 8007028:	f853 2b04 	ldr.w	r2, [r3], #4
 800702c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007030:	459c      	cmp	ip, r3
 8007032:	d8f9      	bhi.n	8007028 <__lshift+0xc0>
 8007034:	e7ea      	b.n	800700c <__lshift+0xa4>
 8007036:	bf00      	nop
 8007038:	080093cd 	.word	0x080093cd
 800703c:	080093de 	.word	0x080093de

08007040 <__mcmp>:
 8007040:	690a      	ldr	r2, [r1, #16]
 8007042:	4603      	mov	r3, r0
 8007044:	6900      	ldr	r0, [r0, #16]
 8007046:	1a80      	subs	r0, r0, r2
 8007048:	b530      	push	{r4, r5, lr}
 800704a:	d10e      	bne.n	800706a <__mcmp+0x2a>
 800704c:	3314      	adds	r3, #20
 800704e:	3114      	adds	r1, #20
 8007050:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007054:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007058:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800705c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007060:	4295      	cmp	r5, r2
 8007062:	d003      	beq.n	800706c <__mcmp+0x2c>
 8007064:	d205      	bcs.n	8007072 <__mcmp+0x32>
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	bd30      	pop	{r4, r5, pc}
 800706c:	42a3      	cmp	r3, r4
 800706e:	d3f3      	bcc.n	8007058 <__mcmp+0x18>
 8007070:	e7fb      	b.n	800706a <__mcmp+0x2a>
 8007072:	2001      	movs	r0, #1
 8007074:	e7f9      	b.n	800706a <__mcmp+0x2a>
	...

08007078 <__mdiff>:
 8007078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	4689      	mov	r9, r1
 800707e:	4606      	mov	r6, r0
 8007080:	4611      	mov	r1, r2
 8007082:	4648      	mov	r0, r9
 8007084:	4614      	mov	r4, r2
 8007086:	f7ff ffdb 	bl	8007040 <__mcmp>
 800708a:	1e05      	subs	r5, r0, #0
 800708c:	d112      	bne.n	80070b4 <__mdiff+0x3c>
 800708e:	4629      	mov	r1, r5
 8007090:	4630      	mov	r0, r6
 8007092:	f7ff fd19 	bl	8006ac8 <_Balloc>
 8007096:	4602      	mov	r2, r0
 8007098:	b928      	cbnz	r0, 80070a6 <__mdiff+0x2e>
 800709a:	4b3f      	ldr	r3, [pc, #252]	@ (8007198 <__mdiff+0x120>)
 800709c:	f240 2137 	movw	r1, #567	@ 0x237
 80070a0:	483e      	ldr	r0, [pc, #248]	@ (800719c <__mdiff+0x124>)
 80070a2:	f001 fa95 	bl	80085d0 <__assert_func>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070ac:	4610      	mov	r0, r2
 80070ae:	b003      	add	sp, #12
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	bfbc      	itt	lt
 80070b6:	464b      	movlt	r3, r9
 80070b8:	46a1      	movlt	r9, r4
 80070ba:	4630      	mov	r0, r6
 80070bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070c0:	bfba      	itte	lt
 80070c2:	461c      	movlt	r4, r3
 80070c4:	2501      	movlt	r5, #1
 80070c6:	2500      	movge	r5, #0
 80070c8:	f7ff fcfe 	bl	8006ac8 <_Balloc>
 80070cc:	4602      	mov	r2, r0
 80070ce:	b918      	cbnz	r0, 80070d8 <__mdiff+0x60>
 80070d0:	4b31      	ldr	r3, [pc, #196]	@ (8007198 <__mdiff+0x120>)
 80070d2:	f240 2145 	movw	r1, #581	@ 0x245
 80070d6:	e7e3      	b.n	80070a0 <__mdiff+0x28>
 80070d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070dc:	6926      	ldr	r6, [r4, #16]
 80070de:	60c5      	str	r5, [r0, #12]
 80070e0:	f109 0310 	add.w	r3, r9, #16
 80070e4:	f109 0514 	add.w	r5, r9, #20
 80070e8:	f104 0e14 	add.w	lr, r4, #20
 80070ec:	f100 0b14 	add.w	fp, r0, #20
 80070f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	46d9      	mov	r9, fp
 80070fc:	f04f 0c00 	mov.w	ip, #0
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007106:	f853 af04 	ldr.w	sl, [r3, #4]!
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	fa1f f38a 	uxth.w	r3, sl
 8007110:	4619      	mov	r1, r3
 8007112:	b283      	uxth	r3, r0
 8007114:	1acb      	subs	r3, r1, r3
 8007116:	0c00      	lsrs	r0, r0, #16
 8007118:	4463      	add	r3, ip
 800711a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800711e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007122:	b29b      	uxth	r3, r3
 8007124:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007128:	4576      	cmp	r6, lr
 800712a:	f849 3b04 	str.w	r3, [r9], #4
 800712e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007132:	d8e5      	bhi.n	8007100 <__mdiff+0x88>
 8007134:	1b33      	subs	r3, r6, r4
 8007136:	3b15      	subs	r3, #21
 8007138:	f023 0303 	bic.w	r3, r3, #3
 800713c:	3415      	adds	r4, #21
 800713e:	3304      	adds	r3, #4
 8007140:	42a6      	cmp	r6, r4
 8007142:	bf38      	it	cc
 8007144:	2304      	movcc	r3, #4
 8007146:	441d      	add	r5, r3
 8007148:	445b      	add	r3, fp
 800714a:	461e      	mov	r6, r3
 800714c:	462c      	mov	r4, r5
 800714e:	4544      	cmp	r4, r8
 8007150:	d30e      	bcc.n	8007170 <__mdiff+0xf8>
 8007152:	f108 0103 	add.w	r1, r8, #3
 8007156:	1b49      	subs	r1, r1, r5
 8007158:	f021 0103 	bic.w	r1, r1, #3
 800715c:	3d03      	subs	r5, #3
 800715e:	45a8      	cmp	r8, r5
 8007160:	bf38      	it	cc
 8007162:	2100      	movcc	r1, #0
 8007164:	440b      	add	r3, r1
 8007166:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800716a:	b191      	cbz	r1, 8007192 <__mdiff+0x11a>
 800716c:	6117      	str	r7, [r2, #16]
 800716e:	e79d      	b.n	80070ac <__mdiff+0x34>
 8007170:	f854 1b04 	ldr.w	r1, [r4], #4
 8007174:	46e6      	mov	lr, ip
 8007176:	0c08      	lsrs	r0, r1, #16
 8007178:	fa1c fc81 	uxtah	ip, ip, r1
 800717c:	4471      	add	r1, lr
 800717e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007182:	b289      	uxth	r1, r1
 8007184:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007188:	f846 1b04 	str.w	r1, [r6], #4
 800718c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007190:	e7dd      	b.n	800714e <__mdiff+0xd6>
 8007192:	3f01      	subs	r7, #1
 8007194:	e7e7      	b.n	8007166 <__mdiff+0xee>
 8007196:	bf00      	nop
 8007198:	080093cd 	.word	0x080093cd
 800719c:	080093de 	.word	0x080093de

080071a0 <__ulp>:
 80071a0:	b082      	sub	sp, #8
 80071a2:	ed8d 0b00 	vstr	d0, [sp]
 80071a6:	9a01      	ldr	r2, [sp, #4]
 80071a8:	4b0f      	ldr	r3, [pc, #60]	@ (80071e8 <__ulp+0x48>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dc08      	bgt.n	80071c6 <__ulp+0x26>
 80071b4:	425b      	negs	r3, r3
 80071b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80071ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071be:	da04      	bge.n	80071ca <__ulp+0x2a>
 80071c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80071c4:	4113      	asrs	r3, r2
 80071c6:	2200      	movs	r2, #0
 80071c8:	e008      	b.n	80071dc <__ulp+0x3c>
 80071ca:	f1a2 0314 	sub.w	r3, r2, #20
 80071ce:	2b1e      	cmp	r3, #30
 80071d0:	bfda      	itte	le
 80071d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80071d6:	40da      	lsrle	r2, r3
 80071d8:	2201      	movgt	r2, #1
 80071da:	2300      	movs	r3, #0
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	ec41 0b10 	vmov	d0, r0, r1
 80071e4:	b002      	add	sp, #8
 80071e6:	4770      	bx	lr
 80071e8:	7ff00000 	.word	0x7ff00000

080071ec <__b2d>:
 80071ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	6906      	ldr	r6, [r0, #16]
 80071f2:	f100 0814 	add.w	r8, r0, #20
 80071f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80071fa:	1f37      	subs	r7, r6, #4
 80071fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007200:	4610      	mov	r0, r2
 8007202:	f7ff fd53 	bl	8006cac <__hi0bits>
 8007206:	f1c0 0320 	rsb	r3, r0, #32
 800720a:	280a      	cmp	r0, #10
 800720c:	600b      	str	r3, [r1, #0]
 800720e:	491b      	ldr	r1, [pc, #108]	@ (800727c <__b2d+0x90>)
 8007210:	dc15      	bgt.n	800723e <__b2d+0x52>
 8007212:	f1c0 0c0b 	rsb	ip, r0, #11
 8007216:	fa22 f30c 	lsr.w	r3, r2, ip
 800721a:	45b8      	cmp	r8, r7
 800721c:	ea43 0501 	orr.w	r5, r3, r1
 8007220:	bf34      	ite	cc
 8007222:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007226:	2300      	movcs	r3, #0
 8007228:	3015      	adds	r0, #21
 800722a:	fa02 f000 	lsl.w	r0, r2, r0
 800722e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007232:	4303      	orrs	r3, r0
 8007234:	461c      	mov	r4, r3
 8007236:	ec45 4b10 	vmov	d0, r4, r5
 800723a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723e:	45b8      	cmp	r8, r7
 8007240:	bf3a      	itte	cc
 8007242:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007246:	f1a6 0708 	subcc.w	r7, r6, #8
 800724a:	2300      	movcs	r3, #0
 800724c:	380b      	subs	r0, #11
 800724e:	d012      	beq.n	8007276 <__b2d+0x8a>
 8007250:	f1c0 0120 	rsb	r1, r0, #32
 8007254:	fa23 f401 	lsr.w	r4, r3, r1
 8007258:	4082      	lsls	r2, r0
 800725a:	4322      	orrs	r2, r4
 800725c:	4547      	cmp	r7, r8
 800725e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007262:	bf8c      	ite	hi
 8007264:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007268:	2200      	movls	r2, #0
 800726a:	4083      	lsls	r3, r0
 800726c:	40ca      	lsrs	r2, r1
 800726e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007272:	4313      	orrs	r3, r2
 8007274:	e7de      	b.n	8007234 <__b2d+0x48>
 8007276:	ea42 0501 	orr.w	r5, r2, r1
 800727a:	e7db      	b.n	8007234 <__b2d+0x48>
 800727c:	3ff00000 	.word	0x3ff00000

08007280 <__d2b>:
 8007280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007284:	460f      	mov	r7, r1
 8007286:	2101      	movs	r1, #1
 8007288:	ec59 8b10 	vmov	r8, r9, d0
 800728c:	4616      	mov	r6, r2
 800728e:	f7ff fc1b 	bl	8006ac8 <_Balloc>
 8007292:	4604      	mov	r4, r0
 8007294:	b930      	cbnz	r0, 80072a4 <__d2b+0x24>
 8007296:	4602      	mov	r2, r0
 8007298:	4b23      	ldr	r3, [pc, #140]	@ (8007328 <__d2b+0xa8>)
 800729a:	4824      	ldr	r0, [pc, #144]	@ (800732c <__d2b+0xac>)
 800729c:	f240 310f 	movw	r1, #783	@ 0x30f
 80072a0:	f001 f996 	bl	80085d0 <__assert_func>
 80072a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072ac:	b10d      	cbz	r5, 80072b2 <__d2b+0x32>
 80072ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	f1b8 0300 	subs.w	r3, r8, #0
 80072b8:	d023      	beq.n	8007302 <__d2b+0x82>
 80072ba:	4668      	mov	r0, sp
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	f7ff fd14 	bl	8006cea <__lo0bits>
 80072c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072c6:	b1d0      	cbz	r0, 80072fe <__d2b+0x7e>
 80072c8:	f1c0 0320 	rsb	r3, r0, #32
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	430b      	orrs	r3, r1
 80072d2:	40c2      	lsrs	r2, r0
 80072d4:	6163      	str	r3, [r4, #20]
 80072d6:	9201      	str	r2, [sp, #4]
 80072d8:	9b01      	ldr	r3, [sp, #4]
 80072da:	61a3      	str	r3, [r4, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bf0c      	ite	eq
 80072e0:	2201      	moveq	r2, #1
 80072e2:	2202      	movne	r2, #2
 80072e4:	6122      	str	r2, [r4, #16]
 80072e6:	b1a5      	cbz	r5, 8007312 <__d2b+0x92>
 80072e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072ec:	4405      	add	r5, r0
 80072ee:	603d      	str	r5, [r7, #0]
 80072f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072f4:	6030      	str	r0, [r6, #0]
 80072f6:	4620      	mov	r0, r4
 80072f8:	b003      	add	sp, #12
 80072fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072fe:	6161      	str	r1, [r4, #20]
 8007300:	e7ea      	b.n	80072d8 <__d2b+0x58>
 8007302:	a801      	add	r0, sp, #4
 8007304:	f7ff fcf1 	bl	8006cea <__lo0bits>
 8007308:	9b01      	ldr	r3, [sp, #4]
 800730a:	6163      	str	r3, [r4, #20]
 800730c:	3020      	adds	r0, #32
 800730e:	2201      	movs	r2, #1
 8007310:	e7e8      	b.n	80072e4 <__d2b+0x64>
 8007312:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007316:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800731a:	6038      	str	r0, [r7, #0]
 800731c:	6918      	ldr	r0, [r3, #16]
 800731e:	f7ff fcc5 	bl	8006cac <__hi0bits>
 8007322:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007326:	e7e5      	b.n	80072f4 <__d2b+0x74>
 8007328:	080093cd 	.word	0x080093cd
 800732c:	080093de 	.word	0x080093de

08007330 <__ratio>:
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	b085      	sub	sp, #20
 8007336:	e9cd 1000 	strd	r1, r0, [sp]
 800733a:	a902      	add	r1, sp, #8
 800733c:	f7ff ff56 	bl	80071ec <__b2d>
 8007340:	9800      	ldr	r0, [sp, #0]
 8007342:	a903      	add	r1, sp, #12
 8007344:	ec55 4b10 	vmov	r4, r5, d0
 8007348:	f7ff ff50 	bl	80071ec <__b2d>
 800734c:	9b01      	ldr	r3, [sp, #4]
 800734e:	6919      	ldr	r1, [r3, #16]
 8007350:	9b00      	ldr	r3, [sp, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	1ac9      	subs	r1, r1, r3
 8007356:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	ec5b ab10 	vmov	sl, fp, d0
 8007360:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007364:	2b00      	cmp	r3, #0
 8007366:	bfce      	itee	gt
 8007368:	462a      	movgt	r2, r5
 800736a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800736e:	465a      	movle	r2, fp
 8007370:	462f      	mov	r7, r5
 8007372:	46d9      	mov	r9, fp
 8007374:	bfcc      	ite	gt
 8007376:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800737a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800737e:	464b      	mov	r3, r9
 8007380:	4652      	mov	r2, sl
 8007382:	4620      	mov	r0, r4
 8007384:	4639      	mov	r1, r7
 8007386:	f7f9 fa79 	bl	800087c <__aeabi_ddiv>
 800738a:	ec41 0b10 	vmov	d0, r0, r1
 800738e:	b005      	add	sp, #20
 8007390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007394 <__copybits>:
 8007394:	3901      	subs	r1, #1
 8007396:	b570      	push	{r4, r5, r6, lr}
 8007398:	1149      	asrs	r1, r1, #5
 800739a:	6914      	ldr	r4, [r2, #16]
 800739c:	3101      	adds	r1, #1
 800739e:	f102 0314 	add.w	r3, r2, #20
 80073a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073aa:	1f05      	subs	r5, r0, #4
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d30c      	bcc.n	80073ca <__copybits+0x36>
 80073b0:	1aa3      	subs	r3, r4, r2
 80073b2:	3b11      	subs	r3, #17
 80073b4:	f023 0303 	bic.w	r3, r3, #3
 80073b8:	3211      	adds	r2, #17
 80073ba:	42a2      	cmp	r2, r4
 80073bc:	bf88      	it	hi
 80073be:	2300      	movhi	r3, #0
 80073c0:	4418      	add	r0, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	4288      	cmp	r0, r1
 80073c6:	d305      	bcc.n	80073d4 <__copybits+0x40>
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
 80073ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80073ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80073d2:	e7eb      	b.n	80073ac <__copybits+0x18>
 80073d4:	f840 3b04 	str.w	r3, [r0], #4
 80073d8:	e7f4      	b.n	80073c4 <__copybits+0x30>

080073da <__any_on>:
 80073da:	f100 0214 	add.w	r2, r0, #20
 80073de:	6900      	ldr	r0, [r0, #16]
 80073e0:	114b      	asrs	r3, r1, #5
 80073e2:	4298      	cmp	r0, r3
 80073e4:	b510      	push	{r4, lr}
 80073e6:	db11      	blt.n	800740c <__any_on+0x32>
 80073e8:	dd0a      	ble.n	8007400 <__any_on+0x26>
 80073ea:	f011 011f 	ands.w	r1, r1, #31
 80073ee:	d007      	beq.n	8007400 <__any_on+0x26>
 80073f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073f4:	fa24 f001 	lsr.w	r0, r4, r1
 80073f8:	fa00 f101 	lsl.w	r1, r0, r1
 80073fc:	428c      	cmp	r4, r1
 80073fe:	d10b      	bne.n	8007418 <__any_on+0x3e>
 8007400:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007404:	4293      	cmp	r3, r2
 8007406:	d803      	bhi.n	8007410 <__any_on+0x36>
 8007408:	2000      	movs	r0, #0
 800740a:	bd10      	pop	{r4, pc}
 800740c:	4603      	mov	r3, r0
 800740e:	e7f7      	b.n	8007400 <__any_on+0x26>
 8007410:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007414:	2900      	cmp	r1, #0
 8007416:	d0f5      	beq.n	8007404 <__any_on+0x2a>
 8007418:	2001      	movs	r0, #1
 800741a:	e7f6      	b.n	800740a <__any_on+0x30>

0800741c <sulp>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	4604      	mov	r4, r0
 8007420:	460d      	mov	r5, r1
 8007422:	ec45 4b10 	vmov	d0, r4, r5
 8007426:	4616      	mov	r6, r2
 8007428:	f7ff feba 	bl	80071a0 <__ulp>
 800742c:	ec51 0b10 	vmov	r0, r1, d0
 8007430:	b17e      	cbz	r6, 8007452 <sulp+0x36>
 8007432:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007436:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800743a:	2b00      	cmp	r3, #0
 800743c:	dd09      	ble.n	8007452 <sulp+0x36>
 800743e:	051b      	lsls	r3, r3, #20
 8007440:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007444:	2400      	movs	r4, #0
 8007446:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800744a:	4622      	mov	r2, r4
 800744c:	462b      	mov	r3, r5
 800744e:	f7f9 f8eb 	bl	8000628 <__aeabi_dmul>
 8007452:	ec41 0b10 	vmov	d0, r0, r1
 8007456:	bd70      	pop	{r4, r5, r6, pc}

08007458 <_strtod_l>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	b09f      	sub	sp, #124	@ 0x7c
 800745e:	460c      	mov	r4, r1
 8007460:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007462:	2200      	movs	r2, #0
 8007464:	921a      	str	r2, [sp, #104]	@ 0x68
 8007466:	9005      	str	r0, [sp, #20]
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	f04f 0b00 	mov.w	fp, #0
 8007470:	460a      	mov	r2, r1
 8007472:	9219      	str	r2, [sp, #100]	@ 0x64
 8007474:	7811      	ldrb	r1, [r2, #0]
 8007476:	292b      	cmp	r1, #43	@ 0x2b
 8007478:	d04a      	beq.n	8007510 <_strtod_l+0xb8>
 800747a:	d838      	bhi.n	80074ee <_strtod_l+0x96>
 800747c:	290d      	cmp	r1, #13
 800747e:	d832      	bhi.n	80074e6 <_strtod_l+0x8e>
 8007480:	2908      	cmp	r1, #8
 8007482:	d832      	bhi.n	80074ea <_strtod_l+0x92>
 8007484:	2900      	cmp	r1, #0
 8007486:	d03b      	beq.n	8007500 <_strtod_l+0xa8>
 8007488:	2200      	movs	r2, #0
 800748a:	920e      	str	r2, [sp, #56]	@ 0x38
 800748c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800748e:	782a      	ldrb	r2, [r5, #0]
 8007490:	2a30      	cmp	r2, #48	@ 0x30
 8007492:	f040 80b2 	bne.w	80075fa <_strtod_l+0x1a2>
 8007496:	786a      	ldrb	r2, [r5, #1]
 8007498:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800749c:	2a58      	cmp	r2, #88	@ 0x58
 800749e:	d16e      	bne.n	800757e <_strtod_l+0x126>
 80074a0:	9302      	str	r3, [sp, #8]
 80074a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4a8f      	ldr	r2, [pc, #572]	@ (80076e8 <_strtod_l+0x290>)
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80074b0:	a919      	add	r1, sp, #100	@ 0x64
 80074b2:	f001 f927 	bl	8008704 <__gethex>
 80074b6:	f010 060f 	ands.w	r6, r0, #15
 80074ba:	4604      	mov	r4, r0
 80074bc:	d005      	beq.n	80074ca <_strtod_l+0x72>
 80074be:	2e06      	cmp	r6, #6
 80074c0:	d128      	bne.n	8007514 <_strtod_l+0xbc>
 80074c2:	3501      	adds	r5, #1
 80074c4:	2300      	movs	r3, #0
 80074c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80074c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80074ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f040 858e 	bne.w	8007fee <_strtod_l+0xb96>
 80074d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d4:	b1cb      	cbz	r3, 800750a <_strtod_l+0xb2>
 80074d6:	4652      	mov	r2, sl
 80074d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80074dc:	ec43 2b10 	vmov	d0, r2, r3
 80074e0:	b01f      	add	sp, #124	@ 0x7c
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	2920      	cmp	r1, #32
 80074e8:	d1ce      	bne.n	8007488 <_strtod_l+0x30>
 80074ea:	3201      	adds	r2, #1
 80074ec:	e7c1      	b.n	8007472 <_strtod_l+0x1a>
 80074ee:	292d      	cmp	r1, #45	@ 0x2d
 80074f0:	d1ca      	bne.n	8007488 <_strtod_l+0x30>
 80074f2:	2101      	movs	r1, #1
 80074f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80074f6:	1c51      	adds	r1, r2, #1
 80074f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80074fa:	7852      	ldrb	r2, [r2, #1]
 80074fc:	2a00      	cmp	r2, #0
 80074fe:	d1c5      	bne.n	800748c <_strtod_l+0x34>
 8007500:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007502:	9419      	str	r4, [sp, #100]	@ 0x64
 8007504:	2b00      	cmp	r3, #0
 8007506:	f040 8570 	bne.w	8007fea <_strtod_l+0xb92>
 800750a:	4652      	mov	r2, sl
 800750c:	465b      	mov	r3, fp
 800750e:	e7e5      	b.n	80074dc <_strtod_l+0x84>
 8007510:	2100      	movs	r1, #0
 8007512:	e7ef      	b.n	80074f4 <_strtod_l+0x9c>
 8007514:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007516:	b13a      	cbz	r2, 8007528 <_strtod_l+0xd0>
 8007518:	2135      	movs	r1, #53	@ 0x35
 800751a:	a81c      	add	r0, sp, #112	@ 0x70
 800751c:	f7ff ff3a 	bl	8007394 <__copybits>
 8007520:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007522:	9805      	ldr	r0, [sp, #20]
 8007524:	f7ff fb10 	bl	8006b48 <_Bfree>
 8007528:	3e01      	subs	r6, #1
 800752a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800752c:	2e04      	cmp	r6, #4
 800752e:	d806      	bhi.n	800753e <_strtod_l+0xe6>
 8007530:	e8df f006 	tbb	[pc, r6]
 8007534:	201d0314 	.word	0x201d0314
 8007538:	14          	.byte	0x14
 8007539:	00          	.byte	0x00
 800753a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800753e:	05e1      	lsls	r1, r4, #23
 8007540:	bf48      	it	mi
 8007542:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800754a:	0d1b      	lsrs	r3, r3, #20
 800754c:	051b      	lsls	r3, r3, #20
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1bb      	bne.n	80074ca <_strtod_l+0x72>
 8007552:	f7fe fb2b 	bl	8005bac <__errno>
 8007556:	2322      	movs	r3, #34	@ 0x22
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	e7b6      	b.n	80074ca <_strtod_l+0x72>
 800755c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007560:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007564:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007568:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800756c:	e7e7      	b.n	800753e <_strtod_l+0xe6>
 800756e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80076f0 <_strtod_l+0x298>
 8007572:	e7e4      	b.n	800753e <_strtod_l+0xe6>
 8007574:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007578:	f04f 3aff 	mov.w	sl, #4294967295
 800757c:	e7df      	b.n	800753e <_strtod_l+0xe6>
 800757e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	9219      	str	r2, [sp, #100]	@ 0x64
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b30      	cmp	r3, #48	@ 0x30
 8007588:	d0f9      	beq.n	800757e <_strtod_l+0x126>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d09d      	beq.n	80074ca <_strtod_l+0x72>
 800758e:	2301      	movs	r3, #1
 8007590:	2700      	movs	r7, #0
 8007592:	9308      	str	r3, [sp, #32]
 8007594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007596:	930c      	str	r3, [sp, #48]	@ 0x30
 8007598:	970b      	str	r7, [sp, #44]	@ 0x2c
 800759a:	46b9      	mov	r9, r7
 800759c:	220a      	movs	r2, #10
 800759e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80075a0:	7805      	ldrb	r5, [r0, #0]
 80075a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80075a6:	b2d9      	uxtb	r1, r3
 80075a8:	2909      	cmp	r1, #9
 80075aa:	d928      	bls.n	80075fe <_strtod_l+0x1a6>
 80075ac:	494f      	ldr	r1, [pc, #316]	@ (80076ec <_strtod_l+0x294>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	f000 ffd6 	bl	8008560 <strncmp>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d032      	beq.n	800761e <_strtod_l+0x1c6>
 80075b8:	2000      	movs	r0, #0
 80075ba:	462a      	mov	r2, r5
 80075bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80075be:	464d      	mov	r5, r9
 80075c0:	4603      	mov	r3, r0
 80075c2:	2a65      	cmp	r2, #101	@ 0x65
 80075c4:	d001      	beq.n	80075ca <_strtod_l+0x172>
 80075c6:	2a45      	cmp	r2, #69	@ 0x45
 80075c8:	d114      	bne.n	80075f4 <_strtod_l+0x19c>
 80075ca:	b91d      	cbnz	r5, 80075d4 <_strtod_l+0x17c>
 80075cc:	9a08      	ldr	r2, [sp, #32]
 80075ce:	4302      	orrs	r2, r0
 80075d0:	d096      	beq.n	8007500 <_strtod_l+0xa8>
 80075d2:	2500      	movs	r5, #0
 80075d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80075d6:	1c62      	adds	r2, r4, #1
 80075d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80075da:	7862      	ldrb	r2, [r4, #1]
 80075dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80075de:	d07a      	beq.n	80076d6 <_strtod_l+0x27e>
 80075e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80075e2:	d07e      	beq.n	80076e2 <_strtod_l+0x28a>
 80075e4:	f04f 0c00 	mov.w	ip, #0
 80075e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80075ec:	2909      	cmp	r1, #9
 80075ee:	f240 8085 	bls.w	80076fc <_strtod_l+0x2a4>
 80075f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80075f4:	f04f 0800 	mov.w	r8, #0
 80075f8:	e0a5      	b.n	8007746 <_strtod_l+0x2ee>
 80075fa:	2300      	movs	r3, #0
 80075fc:	e7c8      	b.n	8007590 <_strtod_l+0x138>
 80075fe:	f1b9 0f08 	cmp.w	r9, #8
 8007602:	bfd8      	it	le
 8007604:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007606:	f100 0001 	add.w	r0, r0, #1
 800760a:	bfda      	itte	le
 800760c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007610:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007612:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007616:	f109 0901 	add.w	r9, r9, #1
 800761a:	9019      	str	r0, [sp, #100]	@ 0x64
 800761c:	e7bf      	b.n	800759e <_strtod_l+0x146>
 800761e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	9219      	str	r2, [sp, #100]	@ 0x64
 8007624:	785a      	ldrb	r2, [r3, #1]
 8007626:	f1b9 0f00 	cmp.w	r9, #0
 800762a:	d03b      	beq.n	80076a4 <_strtod_l+0x24c>
 800762c:	900a      	str	r0, [sp, #40]	@ 0x28
 800762e:	464d      	mov	r5, r9
 8007630:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007634:	2b09      	cmp	r3, #9
 8007636:	d912      	bls.n	800765e <_strtod_l+0x206>
 8007638:	2301      	movs	r3, #1
 800763a:	e7c2      	b.n	80075c2 <_strtod_l+0x16a>
 800763c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	9219      	str	r2, [sp, #100]	@ 0x64
 8007642:	785a      	ldrb	r2, [r3, #1]
 8007644:	3001      	adds	r0, #1
 8007646:	2a30      	cmp	r2, #48	@ 0x30
 8007648:	d0f8      	beq.n	800763c <_strtod_l+0x1e4>
 800764a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800764e:	2b08      	cmp	r3, #8
 8007650:	f200 84d2 	bhi.w	8007ff8 <_strtod_l+0xba0>
 8007654:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007656:	900a      	str	r0, [sp, #40]	@ 0x28
 8007658:	2000      	movs	r0, #0
 800765a:	930c      	str	r3, [sp, #48]	@ 0x30
 800765c:	4605      	mov	r5, r0
 800765e:	3a30      	subs	r2, #48	@ 0x30
 8007660:	f100 0301 	add.w	r3, r0, #1
 8007664:	d018      	beq.n	8007698 <_strtod_l+0x240>
 8007666:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007668:	4419      	add	r1, r3
 800766a:	910a      	str	r1, [sp, #40]	@ 0x28
 800766c:	462e      	mov	r6, r5
 800766e:	f04f 0e0a 	mov.w	lr, #10
 8007672:	1c71      	adds	r1, r6, #1
 8007674:	eba1 0c05 	sub.w	ip, r1, r5
 8007678:	4563      	cmp	r3, ip
 800767a:	dc15      	bgt.n	80076a8 <_strtod_l+0x250>
 800767c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007680:	182b      	adds	r3, r5, r0
 8007682:	2b08      	cmp	r3, #8
 8007684:	f105 0501 	add.w	r5, r5, #1
 8007688:	4405      	add	r5, r0
 800768a:	dc1a      	bgt.n	80076c2 <_strtod_l+0x26a>
 800768c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800768e:	230a      	movs	r3, #10
 8007690:	fb03 2301 	mla	r3, r3, r1, r2
 8007694:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007696:	2300      	movs	r3, #0
 8007698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800769a:	1c51      	adds	r1, r2, #1
 800769c:	9119      	str	r1, [sp, #100]	@ 0x64
 800769e:	7852      	ldrb	r2, [r2, #1]
 80076a0:	4618      	mov	r0, r3
 80076a2:	e7c5      	b.n	8007630 <_strtod_l+0x1d8>
 80076a4:	4648      	mov	r0, r9
 80076a6:	e7ce      	b.n	8007646 <_strtod_l+0x1ee>
 80076a8:	2e08      	cmp	r6, #8
 80076aa:	dc05      	bgt.n	80076b8 <_strtod_l+0x260>
 80076ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80076ae:	fb0e f606 	mul.w	r6, lr, r6
 80076b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80076b4:	460e      	mov	r6, r1
 80076b6:	e7dc      	b.n	8007672 <_strtod_l+0x21a>
 80076b8:	2910      	cmp	r1, #16
 80076ba:	bfd8      	it	le
 80076bc:	fb0e f707 	mulle.w	r7, lr, r7
 80076c0:	e7f8      	b.n	80076b4 <_strtod_l+0x25c>
 80076c2:	2b0f      	cmp	r3, #15
 80076c4:	bfdc      	itt	le
 80076c6:	230a      	movle	r3, #10
 80076c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80076cc:	e7e3      	b.n	8007696 <_strtod_l+0x23e>
 80076ce:	2300      	movs	r3, #0
 80076d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80076d2:	2301      	movs	r3, #1
 80076d4:	e77a      	b.n	80075cc <_strtod_l+0x174>
 80076d6:	f04f 0c00 	mov.w	ip, #0
 80076da:	1ca2      	adds	r2, r4, #2
 80076dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80076de:	78a2      	ldrb	r2, [r4, #2]
 80076e0:	e782      	b.n	80075e8 <_strtod_l+0x190>
 80076e2:	f04f 0c01 	mov.w	ip, #1
 80076e6:	e7f8      	b.n	80076da <_strtod_l+0x282>
 80076e8:	08009604 	.word	0x08009604
 80076ec:	08009437 	.word	0x08009437
 80076f0:	7ff00000 	.word	0x7ff00000
 80076f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076f6:	1c51      	adds	r1, r2, #1
 80076f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80076fa:	7852      	ldrb	r2, [r2, #1]
 80076fc:	2a30      	cmp	r2, #48	@ 0x30
 80076fe:	d0f9      	beq.n	80076f4 <_strtod_l+0x29c>
 8007700:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007704:	2908      	cmp	r1, #8
 8007706:	f63f af75 	bhi.w	80075f4 <_strtod_l+0x19c>
 800770a:	3a30      	subs	r2, #48	@ 0x30
 800770c:	9209      	str	r2, [sp, #36]	@ 0x24
 800770e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007710:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007712:	f04f 080a 	mov.w	r8, #10
 8007716:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007718:	1c56      	adds	r6, r2, #1
 800771a:	9619      	str	r6, [sp, #100]	@ 0x64
 800771c:	7852      	ldrb	r2, [r2, #1]
 800771e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007722:	f1be 0f09 	cmp.w	lr, #9
 8007726:	d939      	bls.n	800779c <_strtod_l+0x344>
 8007728:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800772a:	1a76      	subs	r6, r6, r1
 800772c:	2e08      	cmp	r6, #8
 800772e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007732:	dc03      	bgt.n	800773c <_strtod_l+0x2e4>
 8007734:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007736:	4588      	cmp	r8, r1
 8007738:	bfa8      	it	ge
 800773a:	4688      	movge	r8, r1
 800773c:	f1bc 0f00 	cmp.w	ip, #0
 8007740:	d001      	beq.n	8007746 <_strtod_l+0x2ee>
 8007742:	f1c8 0800 	rsb	r8, r8, #0
 8007746:	2d00      	cmp	r5, #0
 8007748:	d14e      	bne.n	80077e8 <_strtod_l+0x390>
 800774a:	9908      	ldr	r1, [sp, #32]
 800774c:	4308      	orrs	r0, r1
 800774e:	f47f aebc 	bne.w	80074ca <_strtod_l+0x72>
 8007752:	2b00      	cmp	r3, #0
 8007754:	f47f aed4 	bne.w	8007500 <_strtod_l+0xa8>
 8007758:	2a69      	cmp	r2, #105	@ 0x69
 800775a:	d028      	beq.n	80077ae <_strtod_l+0x356>
 800775c:	dc25      	bgt.n	80077aa <_strtod_l+0x352>
 800775e:	2a49      	cmp	r2, #73	@ 0x49
 8007760:	d025      	beq.n	80077ae <_strtod_l+0x356>
 8007762:	2a4e      	cmp	r2, #78	@ 0x4e
 8007764:	f47f aecc 	bne.w	8007500 <_strtod_l+0xa8>
 8007768:	499a      	ldr	r1, [pc, #616]	@ (80079d4 <_strtod_l+0x57c>)
 800776a:	a819      	add	r0, sp, #100	@ 0x64
 800776c:	f001 f9ec 	bl	8008b48 <__match>
 8007770:	2800      	cmp	r0, #0
 8007772:	f43f aec5 	beq.w	8007500 <_strtod_l+0xa8>
 8007776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b28      	cmp	r3, #40	@ 0x28
 800777c:	d12e      	bne.n	80077dc <_strtod_l+0x384>
 800777e:	4996      	ldr	r1, [pc, #600]	@ (80079d8 <_strtod_l+0x580>)
 8007780:	aa1c      	add	r2, sp, #112	@ 0x70
 8007782:	a819      	add	r0, sp, #100	@ 0x64
 8007784:	f001 f9f4 	bl	8008b70 <__hexnan>
 8007788:	2805      	cmp	r0, #5
 800778a:	d127      	bne.n	80077dc <_strtod_l+0x384>
 800778c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800778e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007792:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007796:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800779a:	e696      	b.n	80074ca <_strtod_l+0x72>
 800779c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800779e:	fb08 2101 	mla	r1, r8, r1, r2
 80077a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80077a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80077a8:	e7b5      	b.n	8007716 <_strtod_l+0x2be>
 80077aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80077ac:	e7da      	b.n	8007764 <_strtod_l+0x30c>
 80077ae:	498b      	ldr	r1, [pc, #556]	@ (80079dc <_strtod_l+0x584>)
 80077b0:	a819      	add	r0, sp, #100	@ 0x64
 80077b2:	f001 f9c9 	bl	8008b48 <__match>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f43f aea2 	beq.w	8007500 <_strtod_l+0xa8>
 80077bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077be:	4988      	ldr	r1, [pc, #544]	@ (80079e0 <_strtod_l+0x588>)
 80077c0:	3b01      	subs	r3, #1
 80077c2:	a819      	add	r0, sp, #100	@ 0x64
 80077c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80077c6:	f001 f9bf 	bl	8008b48 <__match>
 80077ca:	b910      	cbnz	r0, 80077d2 <_strtod_l+0x37a>
 80077cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ce:	3301      	adds	r3, #1
 80077d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80077d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80079f0 <_strtod_l+0x598>
 80077d6:	f04f 0a00 	mov.w	sl, #0
 80077da:	e676      	b.n	80074ca <_strtod_l+0x72>
 80077dc:	4881      	ldr	r0, [pc, #516]	@ (80079e4 <_strtod_l+0x58c>)
 80077de:	f000 feef 	bl	80085c0 <nan>
 80077e2:	ec5b ab10 	vmov	sl, fp, d0
 80077e6:	e670      	b.n	80074ca <_strtod_l+0x72>
 80077e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80077ec:	eba8 0303 	sub.w	r3, r8, r3
 80077f0:	f1b9 0f00 	cmp.w	r9, #0
 80077f4:	bf08      	it	eq
 80077f6:	46a9      	moveq	r9, r5
 80077f8:	2d10      	cmp	r5, #16
 80077fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80077fc:	462c      	mov	r4, r5
 80077fe:	bfa8      	it	ge
 8007800:	2410      	movge	r4, #16
 8007802:	f7f8 fe97 	bl	8000534 <__aeabi_ui2d>
 8007806:	2d09      	cmp	r5, #9
 8007808:	4682      	mov	sl, r0
 800780a:	468b      	mov	fp, r1
 800780c:	dc13      	bgt.n	8007836 <_strtod_l+0x3de>
 800780e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	f43f ae5a 	beq.w	80074ca <_strtod_l+0x72>
 8007816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007818:	dd78      	ble.n	800790c <_strtod_l+0x4b4>
 800781a:	2b16      	cmp	r3, #22
 800781c:	dc5f      	bgt.n	80078de <_strtod_l+0x486>
 800781e:	4972      	ldr	r1, [pc, #456]	@ (80079e8 <_strtod_l+0x590>)
 8007820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007828:	4652      	mov	r2, sl
 800782a:	465b      	mov	r3, fp
 800782c:	f7f8 fefc 	bl	8000628 <__aeabi_dmul>
 8007830:	4682      	mov	sl, r0
 8007832:	468b      	mov	fp, r1
 8007834:	e649      	b.n	80074ca <_strtod_l+0x72>
 8007836:	4b6c      	ldr	r3, [pc, #432]	@ (80079e8 <_strtod_l+0x590>)
 8007838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800783c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007840:	f7f8 fef2 	bl	8000628 <__aeabi_dmul>
 8007844:	4682      	mov	sl, r0
 8007846:	4638      	mov	r0, r7
 8007848:	468b      	mov	fp, r1
 800784a:	f7f8 fe73 	bl	8000534 <__aeabi_ui2d>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4650      	mov	r0, sl
 8007854:	4659      	mov	r1, fp
 8007856:	f7f8 fd31 	bl	80002bc <__adddf3>
 800785a:	2d0f      	cmp	r5, #15
 800785c:	4682      	mov	sl, r0
 800785e:	468b      	mov	fp, r1
 8007860:	ddd5      	ble.n	800780e <_strtod_l+0x3b6>
 8007862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007864:	1b2c      	subs	r4, r5, r4
 8007866:	441c      	add	r4, r3
 8007868:	2c00      	cmp	r4, #0
 800786a:	f340 8093 	ble.w	8007994 <_strtod_l+0x53c>
 800786e:	f014 030f 	ands.w	r3, r4, #15
 8007872:	d00a      	beq.n	800788a <_strtod_l+0x432>
 8007874:	495c      	ldr	r1, [pc, #368]	@ (80079e8 <_strtod_l+0x590>)
 8007876:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800787a:	4652      	mov	r2, sl
 800787c:	465b      	mov	r3, fp
 800787e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007882:	f7f8 fed1 	bl	8000628 <__aeabi_dmul>
 8007886:	4682      	mov	sl, r0
 8007888:	468b      	mov	fp, r1
 800788a:	f034 040f 	bics.w	r4, r4, #15
 800788e:	d073      	beq.n	8007978 <_strtod_l+0x520>
 8007890:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007894:	dd49      	ble.n	800792a <_strtod_l+0x4d2>
 8007896:	2400      	movs	r4, #0
 8007898:	46a0      	mov	r8, r4
 800789a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800789c:	46a1      	mov	r9, r4
 800789e:	9a05      	ldr	r2, [sp, #20]
 80078a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80079f0 <_strtod_l+0x598>
 80078a4:	2322      	movs	r3, #34	@ 0x22
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	f04f 0a00 	mov.w	sl, #0
 80078ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f43f ae0b 	beq.w	80074ca <_strtod_l+0x72>
 80078b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078b6:	9805      	ldr	r0, [sp, #20]
 80078b8:	f7ff f946 	bl	8006b48 <_Bfree>
 80078bc:	9805      	ldr	r0, [sp, #20]
 80078be:	4649      	mov	r1, r9
 80078c0:	f7ff f942 	bl	8006b48 <_Bfree>
 80078c4:	9805      	ldr	r0, [sp, #20]
 80078c6:	4641      	mov	r1, r8
 80078c8:	f7ff f93e 	bl	8006b48 <_Bfree>
 80078cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078ce:	9805      	ldr	r0, [sp, #20]
 80078d0:	f7ff f93a 	bl	8006b48 <_Bfree>
 80078d4:	9805      	ldr	r0, [sp, #20]
 80078d6:	4621      	mov	r1, r4
 80078d8:	f7ff f936 	bl	8006b48 <_Bfree>
 80078dc:	e5f5      	b.n	80074ca <_strtod_l+0x72>
 80078de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80078e4:	4293      	cmp	r3, r2
 80078e6:	dbbc      	blt.n	8007862 <_strtod_l+0x40a>
 80078e8:	4c3f      	ldr	r4, [pc, #252]	@ (80079e8 <_strtod_l+0x590>)
 80078ea:	f1c5 050f 	rsb	r5, r5, #15
 80078ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078f2:	4652      	mov	r2, sl
 80078f4:	465b      	mov	r3, fp
 80078f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078fa:	f7f8 fe95 	bl	8000628 <__aeabi_dmul>
 80078fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007900:	1b5d      	subs	r5, r3, r5
 8007902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007906:	e9d4 2300 	ldrd	r2, r3, [r4]
 800790a:	e78f      	b.n	800782c <_strtod_l+0x3d4>
 800790c:	3316      	adds	r3, #22
 800790e:	dba8      	blt.n	8007862 <_strtod_l+0x40a>
 8007910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007912:	eba3 0808 	sub.w	r8, r3, r8
 8007916:	4b34      	ldr	r3, [pc, #208]	@ (80079e8 <_strtod_l+0x590>)
 8007918:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800791c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	f7f8 ffaa 	bl	800087c <__aeabi_ddiv>
 8007928:	e782      	b.n	8007830 <_strtod_l+0x3d8>
 800792a:	2300      	movs	r3, #0
 800792c:	4f2f      	ldr	r7, [pc, #188]	@ (80079ec <_strtod_l+0x594>)
 800792e:	1124      	asrs	r4, r4, #4
 8007930:	4650      	mov	r0, sl
 8007932:	4659      	mov	r1, fp
 8007934:	461e      	mov	r6, r3
 8007936:	2c01      	cmp	r4, #1
 8007938:	dc21      	bgt.n	800797e <_strtod_l+0x526>
 800793a:	b10b      	cbz	r3, 8007940 <_strtod_l+0x4e8>
 800793c:	4682      	mov	sl, r0
 800793e:	468b      	mov	fp, r1
 8007940:	492a      	ldr	r1, [pc, #168]	@ (80079ec <_strtod_l+0x594>)
 8007942:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007946:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800794a:	4652      	mov	r2, sl
 800794c:	465b      	mov	r3, fp
 800794e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007952:	f7f8 fe69 	bl	8000628 <__aeabi_dmul>
 8007956:	4b26      	ldr	r3, [pc, #152]	@ (80079f0 <_strtod_l+0x598>)
 8007958:	460a      	mov	r2, r1
 800795a:	400b      	ands	r3, r1
 800795c:	4925      	ldr	r1, [pc, #148]	@ (80079f4 <_strtod_l+0x59c>)
 800795e:	428b      	cmp	r3, r1
 8007960:	4682      	mov	sl, r0
 8007962:	d898      	bhi.n	8007896 <_strtod_l+0x43e>
 8007964:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007968:	428b      	cmp	r3, r1
 800796a:	bf86      	itte	hi
 800796c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80079f8 <_strtod_l+0x5a0>
 8007970:	f04f 3aff 	movhi.w	sl, #4294967295
 8007974:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007978:	2300      	movs	r3, #0
 800797a:	9308      	str	r3, [sp, #32]
 800797c:	e076      	b.n	8007a6c <_strtod_l+0x614>
 800797e:	07e2      	lsls	r2, r4, #31
 8007980:	d504      	bpl.n	800798c <_strtod_l+0x534>
 8007982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007986:	f7f8 fe4f 	bl	8000628 <__aeabi_dmul>
 800798a:	2301      	movs	r3, #1
 800798c:	3601      	adds	r6, #1
 800798e:	1064      	asrs	r4, r4, #1
 8007990:	3708      	adds	r7, #8
 8007992:	e7d0      	b.n	8007936 <_strtod_l+0x4de>
 8007994:	d0f0      	beq.n	8007978 <_strtod_l+0x520>
 8007996:	4264      	negs	r4, r4
 8007998:	f014 020f 	ands.w	r2, r4, #15
 800799c:	d00a      	beq.n	80079b4 <_strtod_l+0x55c>
 800799e:	4b12      	ldr	r3, [pc, #72]	@ (80079e8 <_strtod_l+0x590>)
 80079a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	4659      	mov	r1, fp
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f7f8 ff66 	bl	800087c <__aeabi_ddiv>
 80079b0:	4682      	mov	sl, r0
 80079b2:	468b      	mov	fp, r1
 80079b4:	1124      	asrs	r4, r4, #4
 80079b6:	d0df      	beq.n	8007978 <_strtod_l+0x520>
 80079b8:	2c1f      	cmp	r4, #31
 80079ba:	dd1f      	ble.n	80079fc <_strtod_l+0x5a4>
 80079bc:	2400      	movs	r4, #0
 80079be:	46a0      	mov	r8, r4
 80079c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079c2:	46a1      	mov	r9, r4
 80079c4:	9a05      	ldr	r2, [sp, #20]
 80079c6:	2322      	movs	r3, #34	@ 0x22
 80079c8:	f04f 0a00 	mov.w	sl, #0
 80079cc:	f04f 0b00 	mov.w	fp, #0
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e76b      	b.n	80078ac <_strtod_l+0x454>
 80079d4:	08009325 	.word	0x08009325
 80079d8:	080095f0 	.word	0x080095f0
 80079dc:	0800931d 	.word	0x0800931d
 80079e0:	08009354 	.word	0x08009354
 80079e4:	0800948d 	.word	0x0800948d
 80079e8:	08009528 	.word	0x08009528
 80079ec:	08009500 	.word	0x08009500
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	7ca00000 	.word	0x7ca00000
 80079f8:	7fefffff 	.word	0x7fefffff
 80079fc:	f014 0310 	ands.w	r3, r4, #16
 8007a00:	bf18      	it	ne
 8007a02:	236a      	movne	r3, #106	@ 0x6a
 8007a04:	4ea9      	ldr	r6, [pc, #676]	@ (8007cac <_strtod_l+0x854>)
 8007a06:	9308      	str	r3, [sp, #32]
 8007a08:	4650      	mov	r0, sl
 8007a0a:	4659      	mov	r1, fp
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	07e7      	lsls	r7, r4, #31
 8007a10:	d504      	bpl.n	8007a1c <_strtod_l+0x5c4>
 8007a12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a16:	f7f8 fe07 	bl	8000628 <__aeabi_dmul>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	1064      	asrs	r4, r4, #1
 8007a1e:	f106 0608 	add.w	r6, r6, #8
 8007a22:	d1f4      	bne.n	8007a0e <_strtod_l+0x5b6>
 8007a24:	b10b      	cbz	r3, 8007a2a <_strtod_l+0x5d2>
 8007a26:	4682      	mov	sl, r0
 8007a28:	468b      	mov	fp, r1
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	b1b3      	cbz	r3, 8007a5c <_strtod_l+0x604>
 8007a2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	4659      	mov	r1, fp
 8007a3a:	dd0f      	ble.n	8007a5c <_strtod_l+0x604>
 8007a3c:	2b1f      	cmp	r3, #31
 8007a3e:	dd56      	ble.n	8007aee <_strtod_l+0x696>
 8007a40:	2b34      	cmp	r3, #52	@ 0x34
 8007a42:	bfde      	ittt	le
 8007a44:	f04f 33ff 	movle.w	r3, #4294967295
 8007a48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007a4c:	4093      	lslle	r3, r2
 8007a4e:	f04f 0a00 	mov.w	sl, #0
 8007a52:	bfcc      	ite	gt
 8007a54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007a58:	ea03 0b01 	andle.w	fp, r3, r1
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4650      	mov	r0, sl
 8007a62:	4659      	mov	r1, fp
 8007a64:	f7f9 f848 	bl	8000af8 <__aeabi_dcmpeq>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d1a7      	bne.n	80079bc <_strtod_l+0x564>
 8007a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a72:	9805      	ldr	r0, [sp, #20]
 8007a74:	462b      	mov	r3, r5
 8007a76:	464a      	mov	r2, r9
 8007a78:	f7ff f8ce 	bl	8006c18 <__s2b>
 8007a7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f43f af09 	beq.w	8007896 <_strtod_l+0x43e>
 8007a84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	eba3 0308 	sub.w	r3, r3, r8
 8007a8e:	bfa8      	it	ge
 8007a90:	2300      	movge	r3, #0
 8007a92:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a94:	2400      	movs	r4, #0
 8007a96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007a9c:	46a0      	mov	r8, r4
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa0:	9805      	ldr	r0, [sp, #20]
 8007aa2:	6859      	ldr	r1, [r3, #4]
 8007aa4:	f7ff f810 	bl	8006ac8 <_Balloc>
 8007aa8:	4681      	mov	r9, r0
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f43f aef7 	beq.w	800789e <_strtod_l+0x446>
 8007ab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	3202      	adds	r2, #2
 8007ab6:	f103 010c 	add.w	r1, r3, #12
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	300c      	adds	r0, #12
 8007abe:	f000 fd71 	bl	80085a4 <memcpy>
 8007ac2:	ec4b ab10 	vmov	d0, sl, fp
 8007ac6:	9805      	ldr	r0, [sp, #20]
 8007ac8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007aca:	a91b      	add	r1, sp, #108	@ 0x6c
 8007acc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007ad0:	f7ff fbd6 	bl	8007280 <__d2b>
 8007ad4:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f43f aee1 	beq.w	800789e <_strtod_l+0x446>
 8007adc:	9805      	ldr	r0, [sp, #20]
 8007ade:	2101      	movs	r1, #1
 8007ae0:	f7ff f930 	bl	8006d44 <__i2b>
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	b948      	cbnz	r0, 8007afc <_strtod_l+0x6a4>
 8007ae8:	f04f 0800 	mov.w	r8, #0
 8007aec:	e6d7      	b.n	800789e <_strtod_l+0x446>
 8007aee:	f04f 32ff 	mov.w	r2, #4294967295
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	ea03 0a0a 	and.w	sl, r3, sl
 8007afa:	e7af      	b.n	8007a5c <_strtod_l+0x604>
 8007afc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007afe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	bfab      	itete	ge
 8007b04:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007b06:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007b08:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b0a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b0c:	bfac      	ite	ge
 8007b0e:	18ef      	addge	r7, r5, r3
 8007b10:	1b5e      	sublt	r6, r3, r5
 8007b12:	9b08      	ldr	r3, [sp, #32]
 8007b14:	1aed      	subs	r5, r5, r3
 8007b16:	4415      	add	r5, r2
 8007b18:	4b65      	ldr	r3, [pc, #404]	@ (8007cb0 <_strtod_l+0x858>)
 8007b1a:	3d01      	subs	r5, #1
 8007b1c:	429d      	cmp	r5, r3
 8007b1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007b22:	da50      	bge.n	8007bc6 <_strtod_l+0x76e>
 8007b24:	1b5b      	subs	r3, r3, r5
 8007b26:	2b1f      	cmp	r3, #31
 8007b28:	eba2 0203 	sub.w	r2, r2, r3
 8007b2c:	f04f 0101 	mov.w	r1, #1
 8007b30:	dc3d      	bgt.n	8007bae <_strtod_l+0x756>
 8007b32:	fa01 f303 	lsl.w	r3, r1, r3
 8007b36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b3c:	18bd      	adds	r5, r7, r2
 8007b3e:	9b08      	ldr	r3, [sp, #32]
 8007b40:	42af      	cmp	r7, r5
 8007b42:	4416      	add	r6, r2
 8007b44:	441e      	add	r6, r3
 8007b46:	463b      	mov	r3, r7
 8007b48:	bfa8      	it	ge
 8007b4a:	462b      	movge	r3, r5
 8007b4c:	42b3      	cmp	r3, r6
 8007b4e:	bfa8      	it	ge
 8007b50:	4633      	movge	r3, r6
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfc2      	ittt	gt
 8007b56:	1aed      	subgt	r5, r5, r3
 8007b58:	1af6      	subgt	r6, r6, r3
 8007b5a:	1aff      	subgt	r7, r7, r3
 8007b5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dd16      	ble.n	8007b90 <_strtod_l+0x738>
 8007b62:	4641      	mov	r1, r8
 8007b64:	9805      	ldr	r0, [sp, #20]
 8007b66:	461a      	mov	r2, r3
 8007b68:	f7ff f9a4 	bl	8006eb4 <__pow5mult>
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d0ba      	beq.n	8007ae8 <_strtod_l+0x690>
 8007b72:	4601      	mov	r1, r0
 8007b74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b76:	9805      	ldr	r0, [sp, #20]
 8007b78:	f7ff f8fa 	bl	8006d70 <__multiply>
 8007b7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f43f ae8d 	beq.w	800789e <_strtod_l+0x446>
 8007b84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b86:	9805      	ldr	r0, [sp, #20]
 8007b88:	f7fe ffde 	bl	8006b48 <_Bfree>
 8007b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	dc1d      	bgt.n	8007bd0 <_strtod_l+0x778>
 8007b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dd23      	ble.n	8007be2 <_strtod_l+0x78a>
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007b9e:	9805      	ldr	r0, [sp, #20]
 8007ba0:	f7ff f988 	bl	8006eb4 <__pow5mult>
 8007ba4:	4681      	mov	r9, r0
 8007ba6:	b9e0      	cbnz	r0, 8007be2 <_strtod_l+0x78a>
 8007ba8:	f04f 0900 	mov.w	r9, #0
 8007bac:	e677      	b.n	800789e <_strtod_l+0x446>
 8007bae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007bb2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007bb6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007bba:	35e2      	adds	r5, #226	@ 0xe2
 8007bbc:	fa01 f305 	lsl.w	r3, r1, r5
 8007bc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007bc4:	e7ba      	b.n	8007b3c <_strtod_l+0x6e4>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bca:	2301      	movs	r3, #1
 8007bcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bce:	e7b5      	b.n	8007b3c <_strtod_l+0x6e4>
 8007bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bd2:	9805      	ldr	r0, [sp, #20]
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	f7ff f9c7 	bl	8006f68 <__lshift>
 8007bda:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d1d9      	bne.n	8007b94 <_strtod_l+0x73c>
 8007be0:	e65d      	b.n	800789e <_strtod_l+0x446>
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	dd07      	ble.n	8007bf6 <_strtod_l+0x79e>
 8007be6:	4649      	mov	r1, r9
 8007be8:	9805      	ldr	r0, [sp, #20]
 8007bea:	4632      	mov	r2, r6
 8007bec:	f7ff f9bc 	bl	8006f68 <__lshift>
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d0d8      	beq.n	8007ba8 <_strtod_l+0x750>
 8007bf6:	2f00      	cmp	r7, #0
 8007bf8:	dd08      	ble.n	8007c0c <_strtod_l+0x7b4>
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	9805      	ldr	r0, [sp, #20]
 8007bfe:	463a      	mov	r2, r7
 8007c00:	f7ff f9b2 	bl	8006f68 <__lshift>
 8007c04:	4680      	mov	r8, r0
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f43f ae49 	beq.w	800789e <_strtod_l+0x446>
 8007c0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c0e:	9805      	ldr	r0, [sp, #20]
 8007c10:	464a      	mov	r2, r9
 8007c12:	f7ff fa31 	bl	8007078 <__mdiff>
 8007c16:	4604      	mov	r4, r0
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f43f ae40 	beq.w	800789e <_strtod_l+0x446>
 8007c1e:	68c3      	ldr	r3, [r0, #12]
 8007c20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c22:	2300      	movs	r3, #0
 8007c24:	60c3      	str	r3, [r0, #12]
 8007c26:	4641      	mov	r1, r8
 8007c28:	f7ff fa0a 	bl	8007040 <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	da45      	bge.n	8007cbc <_strtod_l+0x864>
 8007c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c32:	ea53 030a 	orrs.w	r3, r3, sl
 8007c36:	d16b      	bne.n	8007d10 <_strtod_l+0x8b8>
 8007c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d167      	bne.n	8007d10 <_strtod_l+0x8b8>
 8007c40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c44:	0d1b      	lsrs	r3, r3, #20
 8007c46:	051b      	lsls	r3, r3, #20
 8007c48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c4c:	d960      	bls.n	8007d10 <_strtod_l+0x8b8>
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	b913      	cbnz	r3, 8007c58 <_strtod_l+0x800>
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	dd5b      	ble.n	8007d10 <_strtod_l+0x8b8>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	9805      	ldr	r0, [sp, #20]
 8007c5e:	f7ff f983 	bl	8006f68 <__lshift>
 8007c62:	4641      	mov	r1, r8
 8007c64:	4604      	mov	r4, r0
 8007c66:	f7ff f9eb 	bl	8007040 <__mcmp>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	dd50      	ble.n	8007d10 <_strtod_l+0x8b8>
 8007c6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c72:	9a08      	ldr	r2, [sp, #32]
 8007c74:	0d1b      	lsrs	r3, r3, #20
 8007c76:	051b      	lsls	r3, r3, #20
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	d06a      	beq.n	8007d52 <_strtod_l+0x8fa>
 8007c7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c80:	d867      	bhi.n	8007d52 <_strtod_l+0x8fa>
 8007c82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007c86:	f67f ae9d 	bls.w	80079c4 <_strtod_l+0x56c>
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <_strtod_l+0x85c>)
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	4659      	mov	r1, fp
 8007c90:	2200      	movs	r2, #0
 8007c92:	f7f8 fcc9 	bl	8000628 <__aeabi_dmul>
 8007c96:	4b08      	ldr	r3, [pc, #32]	@ (8007cb8 <_strtod_l+0x860>)
 8007c98:	400b      	ands	r3, r1
 8007c9a:	4682      	mov	sl, r0
 8007c9c:	468b      	mov	fp, r1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f47f ae08 	bne.w	80078b4 <_strtod_l+0x45c>
 8007ca4:	9a05      	ldr	r2, [sp, #20]
 8007ca6:	2322      	movs	r3, #34	@ 0x22
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	e603      	b.n	80078b4 <_strtod_l+0x45c>
 8007cac:	08009618 	.word	0x08009618
 8007cb0:	fffffc02 	.word	0xfffffc02
 8007cb4:	39500000 	.word	0x39500000
 8007cb8:	7ff00000 	.word	0x7ff00000
 8007cbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007cc0:	d165      	bne.n	8007d8e <_strtod_l+0x936>
 8007cc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007cc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cc8:	b35a      	cbz	r2, 8007d22 <_strtod_l+0x8ca>
 8007cca:	4a9f      	ldr	r2, [pc, #636]	@ (8007f48 <_strtod_l+0xaf0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d12b      	bne.n	8007d28 <_strtod_l+0x8d0>
 8007cd0:	9b08      	ldr	r3, [sp, #32]
 8007cd2:	4651      	mov	r1, sl
 8007cd4:	b303      	cbz	r3, 8007d18 <_strtod_l+0x8c0>
 8007cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8007f4c <_strtod_l+0xaf4>)
 8007cd8:	465a      	mov	r2, fp
 8007cda:	4013      	ands	r3, r2
 8007cdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	d81b      	bhi.n	8007d1e <_strtod_l+0x8c6>
 8007ce6:	0d1b      	lsrs	r3, r3, #20
 8007ce8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	4299      	cmp	r1, r3
 8007cf2:	d119      	bne.n	8007d28 <_strtod_l+0x8d0>
 8007cf4:	4b96      	ldr	r3, [pc, #600]	@ (8007f50 <_strtod_l+0xaf8>)
 8007cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d102      	bne.n	8007d02 <_strtod_l+0x8aa>
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	f43f adce 	beq.w	800789e <_strtod_l+0x446>
 8007d02:	4b92      	ldr	r3, [pc, #584]	@ (8007f4c <_strtod_l+0xaf4>)
 8007d04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d06:	401a      	ands	r2, r3
 8007d08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d0c:	f04f 0a00 	mov.w	sl, #0
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1b9      	bne.n	8007c8a <_strtod_l+0x832>
 8007d16:	e5cd      	b.n	80078b4 <_strtod_l+0x45c>
 8007d18:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1c:	e7e8      	b.n	8007cf0 <_strtod_l+0x898>
 8007d1e:	4613      	mov	r3, r2
 8007d20:	e7e6      	b.n	8007cf0 <_strtod_l+0x898>
 8007d22:	ea53 030a 	orrs.w	r3, r3, sl
 8007d26:	d0a2      	beq.n	8007c6e <_strtod_l+0x816>
 8007d28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d2a:	b1db      	cbz	r3, 8007d64 <_strtod_l+0x90c>
 8007d2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d2e:	4213      	tst	r3, r2
 8007d30:	d0ee      	beq.n	8007d10 <_strtod_l+0x8b8>
 8007d32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d34:	9a08      	ldr	r2, [sp, #32]
 8007d36:	4650      	mov	r0, sl
 8007d38:	4659      	mov	r1, fp
 8007d3a:	b1bb      	cbz	r3, 8007d6c <_strtod_l+0x914>
 8007d3c:	f7ff fb6e 	bl	800741c <sulp>
 8007d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d44:	ec53 2b10 	vmov	r2, r3, d0
 8007d48:	f7f8 fab8 	bl	80002bc <__adddf3>
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	468b      	mov	fp, r1
 8007d50:	e7de      	b.n	8007d10 <_strtod_l+0x8b8>
 8007d52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007d56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d5e:	f04f 3aff 	mov.w	sl, #4294967295
 8007d62:	e7d5      	b.n	8007d10 <_strtod_l+0x8b8>
 8007d64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d66:	ea13 0f0a 	tst.w	r3, sl
 8007d6a:	e7e1      	b.n	8007d30 <_strtod_l+0x8d8>
 8007d6c:	f7ff fb56 	bl	800741c <sulp>
 8007d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d74:	ec53 2b10 	vmov	r2, r3, d0
 8007d78:	f7f8 fa9e 	bl	80002b8 <__aeabi_dsub>
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4682      	mov	sl, r0
 8007d82:	468b      	mov	fp, r1
 8007d84:	f7f8 feb8 	bl	8000af8 <__aeabi_dcmpeq>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d0c1      	beq.n	8007d10 <_strtod_l+0x8b8>
 8007d8c:	e61a      	b.n	80079c4 <_strtod_l+0x56c>
 8007d8e:	4641      	mov	r1, r8
 8007d90:	4620      	mov	r0, r4
 8007d92:	f7ff facd 	bl	8007330 <__ratio>
 8007d96:	ec57 6b10 	vmov	r6, r7, d0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
 8007da4:	f7f8 febc 	bl	8000b20 <__aeabi_dcmple>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d06f      	beq.n	8007e8c <_strtod_l+0xa34>
 8007dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d17a      	bne.n	8007ea8 <_strtod_l+0xa50>
 8007db2:	f1ba 0f00 	cmp.w	sl, #0
 8007db6:	d158      	bne.n	8007e6a <_strtod_l+0xa12>
 8007db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d15a      	bne.n	8007e78 <_strtod_l+0xa20>
 8007dc2:	4b64      	ldr	r3, [pc, #400]	@ (8007f54 <_strtod_l+0xafc>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7f8 fe9f 	bl	8000b0c <__aeabi_dcmplt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d159      	bne.n	8007e86 <_strtod_l+0xa2e>
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	4b60      	ldr	r3, [pc, #384]	@ (8007f58 <_strtod_l+0xb00>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f7f8 fc25 	bl	8000628 <__aeabi_dmul>
 8007dde:	4606      	mov	r6, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007de6:	9606      	str	r6, [sp, #24]
 8007de8:	9307      	str	r3, [sp, #28]
 8007dea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dee:	4d57      	ldr	r5, [pc, #348]	@ (8007f4c <_strtod_l+0xaf4>)
 8007df0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007df6:	401d      	ands	r5, r3
 8007df8:	4b58      	ldr	r3, [pc, #352]	@ (8007f5c <_strtod_l+0xb04>)
 8007dfa:	429d      	cmp	r5, r3
 8007dfc:	f040 80b2 	bne.w	8007f64 <_strtod_l+0xb0c>
 8007e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007e06:	ec4b ab10 	vmov	d0, sl, fp
 8007e0a:	f7ff f9c9 	bl	80071a0 <__ulp>
 8007e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e12:	ec51 0b10 	vmov	r0, r1, d0
 8007e16:	f7f8 fc07 	bl	8000628 <__aeabi_dmul>
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	f7f8 fa4d 	bl	80002bc <__adddf3>
 8007e22:	460b      	mov	r3, r1
 8007e24:	4949      	ldr	r1, [pc, #292]	@ (8007f4c <_strtod_l+0xaf4>)
 8007e26:	4a4e      	ldr	r2, [pc, #312]	@ (8007f60 <_strtod_l+0xb08>)
 8007e28:	4019      	ands	r1, r3
 8007e2a:	4291      	cmp	r1, r2
 8007e2c:	4682      	mov	sl, r0
 8007e2e:	d942      	bls.n	8007eb6 <_strtod_l+0xa5e>
 8007e30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e32:	4b47      	ldr	r3, [pc, #284]	@ (8007f50 <_strtod_l+0xaf8>)
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d103      	bne.n	8007e40 <_strtod_l+0x9e8>
 8007e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f43f ad2f 	beq.w	800789e <_strtod_l+0x446>
 8007e40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007f50 <_strtod_l+0xaf8>
 8007e44:	f04f 3aff 	mov.w	sl, #4294967295
 8007e48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e4a:	9805      	ldr	r0, [sp, #20]
 8007e4c:	f7fe fe7c 	bl	8006b48 <_Bfree>
 8007e50:	9805      	ldr	r0, [sp, #20]
 8007e52:	4649      	mov	r1, r9
 8007e54:	f7fe fe78 	bl	8006b48 <_Bfree>
 8007e58:	9805      	ldr	r0, [sp, #20]
 8007e5a:	4641      	mov	r1, r8
 8007e5c:	f7fe fe74 	bl	8006b48 <_Bfree>
 8007e60:	9805      	ldr	r0, [sp, #20]
 8007e62:	4621      	mov	r1, r4
 8007e64:	f7fe fe70 	bl	8006b48 <_Bfree>
 8007e68:	e619      	b.n	8007a9e <_strtod_l+0x646>
 8007e6a:	f1ba 0f01 	cmp.w	sl, #1
 8007e6e:	d103      	bne.n	8007e78 <_strtod_l+0xa20>
 8007e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f43f ada6 	beq.w	80079c4 <_strtod_l+0x56c>
 8007e78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007f28 <_strtod_l+0xad0>
 8007e7c:	4f35      	ldr	r7, [pc, #212]	@ (8007f54 <_strtod_l+0xafc>)
 8007e7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e82:	2600      	movs	r6, #0
 8007e84:	e7b1      	b.n	8007dea <_strtod_l+0x992>
 8007e86:	4f34      	ldr	r7, [pc, #208]	@ (8007f58 <_strtod_l+0xb00>)
 8007e88:	2600      	movs	r6, #0
 8007e8a:	e7aa      	b.n	8007de2 <_strtod_l+0x98a>
 8007e8c:	4b32      	ldr	r3, [pc, #200]	@ (8007f58 <_strtod_l+0xb00>)
 8007e8e:	4630      	mov	r0, r6
 8007e90:	4639      	mov	r1, r7
 8007e92:	2200      	movs	r2, #0
 8007e94:	f7f8 fbc8 	bl	8000628 <__aeabi_dmul>
 8007e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d09f      	beq.n	8007de2 <_strtod_l+0x98a>
 8007ea2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ea6:	e7a0      	b.n	8007dea <_strtod_l+0x992>
 8007ea8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007f30 <_strtod_l+0xad8>
 8007eac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007eb0:	ec57 6b17 	vmov	r6, r7, d7
 8007eb4:	e799      	b.n	8007dea <_strtod_l+0x992>
 8007eb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007eba:	9b08      	ldr	r3, [sp, #32]
 8007ebc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1c1      	bne.n	8007e48 <_strtod_l+0x9f0>
 8007ec4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ec8:	0d1b      	lsrs	r3, r3, #20
 8007eca:	051b      	lsls	r3, r3, #20
 8007ecc:	429d      	cmp	r5, r3
 8007ece:	d1bb      	bne.n	8007e48 <_strtod_l+0x9f0>
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 fef0 	bl	8000cb8 <__aeabi_d2lz>
 8007ed8:	f7f8 fb78 	bl	80005cc <__aeabi_l2d>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	f7f8 f9e8 	bl	80002b8 <__aeabi_dsub>
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4602      	mov	r2, r0
 8007eec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ef0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ef6:	ea46 060a 	orr.w	r6, r6, sl
 8007efa:	431e      	orrs	r6, r3
 8007efc:	d06f      	beq.n	8007fde <_strtod_l+0xb86>
 8007efe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f38 <_strtod_l+0xae0>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f7f8 fe02 	bl	8000b0c <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f47f acd3 	bne.w	80078b4 <_strtod_l+0x45c>
 8007f0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007f40 <_strtod_l+0xae8>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f18:	f7f8 fe16 	bl	8000b48 <__aeabi_dcmpgt>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d093      	beq.n	8007e48 <_strtod_l+0x9f0>
 8007f20:	e4c8      	b.n	80078b4 <_strtod_l+0x45c>
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	00000000 	.word	0x00000000
 8007f2c:	bff00000 	.word	0xbff00000
 8007f30:	00000000 	.word	0x00000000
 8007f34:	3ff00000 	.word	0x3ff00000
 8007f38:	94a03595 	.word	0x94a03595
 8007f3c:	3fdfffff 	.word	0x3fdfffff
 8007f40:	35afe535 	.word	0x35afe535
 8007f44:	3fe00000 	.word	0x3fe00000
 8007f48:	000fffff 	.word	0x000fffff
 8007f4c:	7ff00000 	.word	0x7ff00000
 8007f50:	7fefffff 	.word	0x7fefffff
 8007f54:	3ff00000 	.word	0x3ff00000
 8007f58:	3fe00000 	.word	0x3fe00000
 8007f5c:	7fe00000 	.word	0x7fe00000
 8007f60:	7c9fffff 	.word	0x7c9fffff
 8007f64:	9b08      	ldr	r3, [sp, #32]
 8007f66:	b323      	cbz	r3, 8007fb2 <_strtod_l+0xb5a>
 8007f68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007f6c:	d821      	bhi.n	8007fb2 <_strtod_l+0xb5a>
 8007f6e:	a328      	add	r3, pc, #160	@ (adr r3, 8008010 <_strtod_l+0xbb8>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fdd2 	bl	8000b20 <__aeabi_dcmple>
 8007f7c:	b1a0      	cbz	r0, 8007fa8 <_strtod_l+0xb50>
 8007f7e:	4639      	mov	r1, r7
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7f8 fe29 	bl	8000bd8 <__aeabi_d2uiz>
 8007f86:	2801      	cmp	r0, #1
 8007f88:	bf38      	it	cc
 8007f8a:	2001      	movcc	r0, #1
 8007f8c:	f7f8 fad2 	bl	8000534 <__aeabi_ui2d>
 8007f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	b9fb      	cbnz	r3, 8007fd8 <_strtod_l+0xb80>
 8007f98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007f9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007fa0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007fa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007fa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007faa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007fae:	1b5b      	subs	r3, r3, r5
 8007fb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007fb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007fb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007fba:	f7ff f8f1 	bl	80071a0 <__ulp>
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	ec53 2b10 	vmov	r2, r3, d0
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	f7f8 fb2f 	bl	8000628 <__aeabi_dmul>
 8007fca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fce:	f7f8 f975 	bl	80002bc <__adddf3>
 8007fd2:	4682      	mov	sl, r0
 8007fd4:	468b      	mov	fp, r1
 8007fd6:	e770      	b.n	8007eba <_strtod_l+0xa62>
 8007fd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007fdc:	e7e0      	b.n	8007fa0 <_strtod_l+0xb48>
 8007fde:	a30e      	add	r3, pc, #56	@ (adr r3, 8008018 <_strtod_l+0xbc0>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f7f8 fd92 	bl	8000b0c <__aeabi_dcmplt>
 8007fe8:	e798      	b.n	8007f1c <_strtod_l+0xac4>
 8007fea:	2300      	movs	r3, #0
 8007fec:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	f7ff ba6d 	b.w	80074d2 <_strtod_l+0x7a>
 8007ff8:	2a65      	cmp	r2, #101	@ 0x65
 8007ffa:	f43f ab68 	beq.w	80076ce <_strtod_l+0x276>
 8007ffe:	2a45      	cmp	r2, #69	@ 0x45
 8008000:	f43f ab65 	beq.w	80076ce <_strtod_l+0x276>
 8008004:	2301      	movs	r3, #1
 8008006:	f7ff bba0 	b.w	800774a <_strtod_l+0x2f2>
 800800a:	bf00      	nop
 800800c:	f3af 8000 	nop.w
 8008010:	ffc00000 	.word	0xffc00000
 8008014:	41dfffff 	.word	0x41dfffff
 8008018:	94a03595 	.word	0x94a03595
 800801c:	3fcfffff 	.word	0x3fcfffff

08008020 <_strtod_r>:
 8008020:	4b01      	ldr	r3, [pc, #4]	@ (8008028 <_strtod_r+0x8>)
 8008022:	f7ff ba19 	b.w	8007458 <_strtod_l>
 8008026:	bf00      	nop
 8008028:	20040068 	.word	0x20040068

0800802c <_strtol_l.isra.0>:
 800802c:	2b24      	cmp	r3, #36	@ 0x24
 800802e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008032:	4686      	mov	lr, r0
 8008034:	4690      	mov	r8, r2
 8008036:	d801      	bhi.n	800803c <_strtol_l.isra.0+0x10>
 8008038:	2b01      	cmp	r3, #1
 800803a:	d106      	bne.n	800804a <_strtol_l.isra.0+0x1e>
 800803c:	f7fd fdb6 	bl	8005bac <__errno>
 8008040:	2316      	movs	r3, #22
 8008042:	6003      	str	r3, [r0, #0]
 8008044:	2000      	movs	r0, #0
 8008046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804a:	4834      	ldr	r0, [pc, #208]	@ (800811c <_strtol_l.isra.0+0xf0>)
 800804c:	460d      	mov	r5, r1
 800804e:	462a      	mov	r2, r5
 8008050:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008054:	5d06      	ldrb	r6, [r0, r4]
 8008056:	f016 0608 	ands.w	r6, r6, #8
 800805a:	d1f8      	bne.n	800804e <_strtol_l.isra.0+0x22>
 800805c:	2c2d      	cmp	r4, #45	@ 0x2d
 800805e:	d110      	bne.n	8008082 <_strtol_l.isra.0+0x56>
 8008060:	782c      	ldrb	r4, [r5, #0]
 8008062:	2601      	movs	r6, #1
 8008064:	1c95      	adds	r5, r2, #2
 8008066:	f033 0210 	bics.w	r2, r3, #16
 800806a:	d115      	bne.n	8008098 <_strtol_l.isra.0+0x6c>
 800806c:	2c30      	cmp	r4, #48	@ 0x30
 800806e:	d10d      	bne.n	800808c <_strtol_l.isra.0+0x60>
 8008070:	782a      	ldrb	r2, [r5, #0]
 8008072:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008076:	2a58      	cmp	r2, #88	@ 0x58
 8008078:	d108      	bne.n	800808c <_strtol_l.isra.0+0x60>
 800807a:	786c      	ldrb	r4, [r5, #1]
 800807c:	3502      	adds	r5, #2
 800807e:	2310      	movs	r3, #16
 8008080:	e00a      	b.n	8008098 <_strtol_l.isra.0+0x6c>
 8008082:	2c2b      	cmp	r4, #43	@ 0x2b
 8008084:	bf04      	itt	eq
 8008086:	782c      	ldrbeq	r4, [r5, #0]
 8008088:	1c95      	addeq	r5, r2, #2
 800808a:	e7ec      	b.n	8008066 <_strtol_l.isra.0+0x3a>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f6      	bne.n	800807e <_strtol_l.isra.0+0x52>
 8008090:	2c30      	cmp	r4, #48	@ 0x30
 8008092:	bf14      	ite	ne
 8008094:	230a      	movne	r3, #10
 8008096:	2308      	moveq	r3, #8
 8008098:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800809c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80080a0:	2200      	movs	r2, #0
 80080a2:	fbbc f9f3 	udiv	r9, ip, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80080ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80080b0:	2f09      	cmp	r7, #9
 80080b2:	d80f      	bhi.n	80080d4 <_strtol_l.isra.0+0xa8>
 80080b4:	463c      	mov	r4, r7
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	dd1b      	ble.n	80080f2 <_strtol_l.isra.0+0xc6>
 80080ba:	1c57      	adds	r7, r2, #1
 80080bc:	d007      	beq.n	80080ce <_strtol_l.isra.0+0xa2>
 80080be:	4581      	cmp	r9, r0
 80080c0:	d314      	bcc.n	80080ec <_strtol_l.isra.0+0xc0>
 80080c2:	d101      	bne.n	80080c8 <_strtol_l.isra.0+0x9c>
 80080c4:	45a2      	cmp	sl, r4
 80080c6:	db11      	blt.n	80080ec <_strtol_l.isra.0+0xc0>
 80080c8:	fb00 4003 	mla	r0, r0, r3, r4
 80080cc:	2201      	movs	r2, #1
 80080ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080d2:	e7eb      	b.n	80080ac <_strtol_l.isra.0+0x80>
 80080d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080d8:	2f19      	cmp	r7, #25
 80080da:	d801      	bhi.n	80080e0 <_strtol_l.isra.0+0xb4>
 80080dc:	3c37      	subs	r4, #55	@ 0x37
 80080de:	e7ea      	b.n	80080b6 <_strtol_l.isra.0+0x8a>
 80080e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080e4:	2f19      	cmp	r7, #25
 80080e6:	d804      	bhi.n	80080f2 <_strtol_l.isra.0+0xc6>
 80080e8:	3c57      	subs	r4, #87	@ 0x57
 80080ea:	e7e4      	b.n	80080b6 <_strtol_l.isra.0+0x8a>
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	e7ed      	b.n	80080ce <_strtol_l.isra.0+0xa2>
 80080f2:	1c53      	adds	r3, r2, #1
 80080f4:	d108      	bne.n	8008108 <_strtol_l.isra.0+0xdc>
 80080f6:	2322      	movs	r3, #34	@ 0x22
 80080f8:	f8ce 3000 	str.w	r3, [lr]
 80080fc:	4660      	mov	r0, ip
 80080fe:	f1b8 0f00 	cmp.w	r8, #0
 8008102:	d0a0      	beq.n	8008046 <_strtol_l.isra.0+0x1a>
 8008104:	1e69      	subs	r1, r5, #1
 8008106:	e006      	b.n	8008116 <_strtol_l.isra.0+0xea>
 8008108:	b106      	cbz	r6, 800810c <_strtol_l.isra.0+0xe0>
 800810a:	4240      	negs	r0, r0
 800810c:	f1b8 0f00 	cmp.w	r8, #0
 8008110:	d099      	beq.n	8008046 <_strtol_l.isra.0+0x1a>
 8008112:	2a00      	cmp	r2, #0
 8008114:	d1f6      	bne.n	8008104 <_strtol_l.isra.0+0xd8>
 8008116:	f8c8 1000 	str.w	r1, [r8]
 800811a:	e794      	b.n	8008046 <_strtol_l.isra.0+0x1a>
 800811c:	08009641 	.word	0x08009641

08008120 <_strtol_r>:
 8008120:	f7ff bf84 	b.w	800802c <_strtol_l.isra.0>

08008124 <__ssputs_r>:
 8008124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	688e      	ldr	r6, [r1, #8]
 800812a:	461f      	mov	r7, r3
 800812c:	42be      	cmp	r6, r7
 800812e:	680b      	ldr	r3, [r1, #0]
 8008130:	4682      	mov	sl, r0
 8008132:	460c      	mov	r4, r1
 8008134:	4690      	mov	r8, r2
 8008136:	d82d      	bhi.n	8008194 <__ssputs_r+0x70>
 8008138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800813c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008140:	d026      	beq.n	8008190 <__ssputs_r+0x6c>
 8008142:	6965      	ldr	r5, [r4, #20]
 8008144:	6909      	ldr	r1, [r1, #16]
 8008146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800814a:	eba3 0901 	sub.w	r9, r3, r1
 800814e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008152:	1c7b      	adds	r3, r7, #1
 8008154:	444b      	add	r3, r9
 8008156:	106d      	asrs	r5, r5, #1
 8008158:	429d      	cmp	r5, r3
 800815a:	bf38      	it	cc
 800815c:	461d      	movcc	r5, r3
 800815e:	0553      	lsls	r3, r2, #21
 8008160:	d527      	bpl.n	80081b2 <__ssputs_r+0x8e>
 8008162:	4629      	mov	r1, r5
 8008164:	f7fe fc24 	bl	80069b0 <_malloc_r>
 8008168:	4606      	mov	r6, r0
 800816a:	b360      	cbz	r0, 80081c6 <__ssputs_r+0xa2>
 800816c:	6921      	ldr	r1, [r4, #16]
 800816e:	464a      	mov	r2, r9
 8008170:	f000 fa18 	bl	80085a4 <memcpy>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800817a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800817e:	81a3      	strh	r3, [r4, #12]
 8008180:	6126      	str	r6, [r4, #16]
 8008182:	6165      	str	r5, [r4, #20]
 8008184:	444e      	add	r6, r9
 8008186:	eba5 0509 	sub.w	r5, r5, r9
 800818a:	6026      	str	r6, [r4, #0]
 800818c:	60a5      	str	r5, [r4, #8]
 800818e:	463e      	mov	r6, r7
 8008190:	42be      	cmp	r6, r7
 8008192:	d900      	bls.n	8008196 <__ssputs_r+0x72>
 8008194:	463e      	mov	r6, r7
 8008196:	6820      	ldr	r0, [r4, #0]
 8008198:	4632      	mov	r2, r6
 800819a:	4641      	mov	r1, r8
 800819c:	f000 f9c6 	bl	800852c <memmove>
 80081a0:	68a3      	ldr	r3, [r4, #8]
 80081a2:	1b9b      	subs	r3, r3, r6
 80081a4:	60a3      	str	r3, [r4, #8]
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	4433      	add	r3, r6
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	2000      	movs	r0, #0
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	462a      	mov	r2, r5
 80081b4:	f000 fd89 	bl	8008cca <_realloc_r>
 80081b8:	4606      	mov	r6, r0
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d1e0      	bne.n	8008180 <__ssputs_r+0x5c>
 80081be:	6921      	ldr	r1, [r4, #16]
 80081c0:	4650      	mov	r0, sl
 80081c2:	f7fe fb81 	bl	80068c8 <_free_r>
 80081c6:	230c      	movs	r3, #12
 80081c8:	f8ca 3000 	str.w	r3, [sl]
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	f04f 30ff 	mov.w	r0, #4294967295
 80081d8:	e7e9      	b.n	80081ae <__ssputs_r+0x8a>
	...

080081dc <_svfiprintf_r>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	4698      	mov	r8, r3
 80081e2:	898b      	ldrh	r3, [r1, #12]
 80081e4:	061b      	lsls	r3, r3, #24
 80081e6:	b09d      	sub	sp, #116	@ 0x74
 80081e8:	4607      	mov	r7, r0
 80081ea:	460d      	mov	r5, r1
 80081ec:	4614      	mov	r4, r2
 80081ee:	d510      	bpl.n	8008212 <_svfiprintf_r+0x36>
 80081f0:	690b      	ldr	r3, [r1, #16]
 80081f2:	b973      	cbnz	r3, 8008212 <_svfiprintf_r+0x36>
 80081f4:	2140      	movs	r1, #64	@ 0x40
 80081f6:	f7fe fbdb 	bl	80069b0 <_malloc_r>
 80081fa:	6028      	str	r0, [r5, #0]
 80081fc:	6128      	str	r0, [r5, #16]
 80081fe:	b930      	cbnz	r0, 800820e <_svfiprintf_r+0x32>
 8008200:	230c      	movs	r3, #12
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	b01d      	add	sp, #116	@ 0x74
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	2340      	movs	r3, #64	@ 0x40
 8008210:	616b      	str	r3, [r5, #20]
 8008212:	2300      	movs	r3, #0
 8008214:	9309      	str	r3, [sp, #36]	@ 0x24
 8008216:	2320      	movs	r3, #32
 8008218:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800821c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008220:	2330      	movs	r3, #48	@ 0x30
 8008222:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083c0 <_svfiprintf_r+0x1e4>
 8008226:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800822a:	f04f 0901 	mov.w	r9, #1
 800822e:	4623      	mov	r3, r4
 8008230:	469a      	mov	sl, r3
 8008232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008236:	b10a      	cbz	r2, 800823c <_svfiprintf_r+0x60>
 8008238:	2a25      	cmp	r2, #37	@ 0x25
 800823a:	d1f9      	bne.n	8008230 <_svfiprintf_r+0x54>
 800823c:	ebba 0b04 	subs.w	fp, sl, r4
 8008240:	d00b      	beq.n	800825a <_svfiprintf_r+0x7e>
 8008242:	465b      	mov	r3, fp
 8008244:	4622      	mov	r2, r4
 8008246:	4629      	mov	r1, r5
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ff6b 	bl	8008124 <__ssputs_r>
 800824e:	3001      	adds	r0, #1
 8008250:	f000 80a7 	beq.w	80083a2 <_svfiprintf_r+0x1c6>
 8008254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008256:	445a      	add	r2, fp
 8008258:	9209      	str	r2, [sp, #36]	@ 0x24
 800825a:	f89a 3000 	ldrb.w	r3, [sl]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 809f 	beq.w	80083a2 <_svfiprintf_r+0x1c6>
 8008264:	2300      	movs	r3, #0
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800826e:	f10a 0a01 	add.w	sl, sl, #1
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	9307      	str	r3, [sp, #28]
 8008276:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800827a:	931a      	str	r3, [sp, #104]	@ 0x68
 800827c:	4654      	mov	r4, sl
 800827e:	2205      	movs	r2, #5
 8008280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008284:	484e      	ldr	r0, [pc, #312]	@ (80083c0 <_svfiprintf_r+0x1e4>)
 8008286:	f7f7 ffbb 	bl	8000200 <memchr>
 800828a:	9a04      	ldr	r2, [sp, #16]
 800828c:	b9d8      	cbnz	r0, 80082c6 <_svfiprintf_r+0xea>
 800828e:	06d0      	lsls	r0, r2, #27
 8008290:	bf44      	itt	mi
 8008292:	2320      	movmi	r3, #32
 8008294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008298:	0711      	lsls	r1, r2, #28
 800829a:	bf44      	itt	mi
 800829c:	232b      	movmi	r3, #43	@ 0x2b
 800829e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a2:	f89a 3000 	ldrb.w	r3, [sl]
 80082a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a8:	d015      	beq.n	80082d6 <_svfiprintf_r+0xfa>
 80082aa:	9a07      	ldr	r2, [sp, #28]
 80082ac:	4654      	mov	r4, sl
 80082ae:	2000      	movs	r0, #0
 80082b0:	f04f 0c0a 	mov.w	ip, #10
 80082b4:	4621      	mov	r1, r4
 80082b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ba:	3b30      	subs	r3, #48	@ 0x30
 80082bc:	2b09      	cmp	r3, #9
 80082be:	d94b      	bls.n	8008358 <_svfiprintf_r+0x17c>
 80082c0:	b1b0      	cbz	r0, 80082f0 <_svfiprintf_r+0x114>
 80082c2:	9207      	str	r2, [sp, #28]
 80082c4:	e014      	b.n	80082f0 <_svfiprintf_r+0x114>
 80082c6:	eba0 0308 	sub.w	r3, r0, r8
 80082ca:	fa09 f303 	lsl.w	r3, r9, r3
 80082ce:	4313      	orrs	r3, r2
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	46a2      	mov	sl, r4
 80082d4:	e7d2      	b.n	800827c <_svfiprintf_r+0xa0>
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	1d19      	adds	r1, r3, #4
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	9103      	str	r1, [sp, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfbb      	ittet	lt
 80082e2:	425b      	neglt	r3, r3
 80082e4:	f042 0202 	orrlt.w	r2, r2, #2
 80082e8:	9307      	strge	r3, [sp, #28]
 80082ea:	9307      	strlt	r3, [sp, #28]
 80082ec:	bfb8      	it	lt
 80082ee:	9204      	strlt	r2, [sp, #16]
 80082f0:	7823      	ldrb	r3, [r4, #0]
 80082f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80082f4:	d10a      	bne.n	800830c <_svfiprintf_r+0x130>
 80082f6:	7863      	ldrb	r3, [r4, #1]
 80082f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80082fa:	d132      	bne.n	8008362 <_svfiprintf_r+0x186>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	9203      	str	r2, [sp, #12]
 8008304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008308:	3402      	adds	r4, #2
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083d0 <_svfiprintf_r+0x1f4>
 8008310:	7821      	ldrb	r1, [r4, #0]
 8008312:	2203      	movs	r2, #3
 8008314:	4650      	mov	r0, sl
 8008316:	f7f7 ff73 	bl	8000200 <memchr>
 800831a:	b138      	cbz	r0, 800832c <_svfiprintf_r+0x150>
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	eba0 000a 	sub.w	r0, r0, sl
 8008322:	2240      	movs	r2, #64	@ 0x40
 8008324:	4082      	lsls	r2, r0
 8008326:	4313      	orrs	r3, r2
 8008328:	3401      	adds	r4, #1
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	4824      	ldr	r0, [pc, #144]	@ (80083c4 <_svfiprintf_r+0x1e8>)
 8008332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008336:	2206      	movs	r2, #6
 8008338:	f7f7 ff62 	bl	8000200 <memchr>
 800833c:	2800      	cmp	r0, #0
 800833e:	d036      	beq.n	80083ae <_svfiprintf_r+0x1d2>
 8008340:	4b21      	ldr	r3, [pc, #132]	@ (80083c8 <_svfiprintf_r+0x1ec>)
 8008342:	bb1b      	cbnz	r3, 800838c <_svfiprintf_r+0x1b0>
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	3307      	adds	r3, #7
 8008348:	f023 0307 	bic.w	r3, r3, #7
 800834c:	3308      	adds	r3, #8
 800834e:	9303      	str	r3, [sp, #12]
 8008350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008352:	4433      	add	r3, r6
 8008354:	9309      	str	r3, [sp, #36]	@ 0x24
 8008356:	e76a      	b.n	800822e <_svfiprintf_r+0x52>
 8008358:	fb0c 3202 	mla	r2, ip, r2, r3
 800835c:	460c      	mov	r4, r1
 800835e:	2001      	movs	r0, #1
 8008360:	e7a8      	b.n	80082b4 <_svfiprintf_r+0xd8>
 8008362:	2300      	movs	r3, #0
 8008364:	3401      	adds	r4, #1
 8008366:	9305      	str	r3, [sp, #20]
 8008368:	4619      	mov	r1, r3
 800836a:	f04f 0c0a 	mov.w	ip, #10
 800836e:	4620      	mov	r0, r4
 8008370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008374:	3a30      	subs	r2, #48	@ 0x30
 8008376:	2a09      	cmp	r2, #9
 8008378:	d903      	bls.n	8008382 <_svfiprintf_r+0x1a6>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0c6      	beq.n	800830c <_svfiprintf_r+0x130>
 800837e:	9105      	str	r1, [sp, #20]
 8008380:	e7c4      	b.n	800830c <_svfiprintf_r+0x130>
 8008382:	fb0c 2101 	mla	r1, ip, r1, r2
 8008386:	4604      	mov	r4, r0
 8008388:	2301      	movs	r3, #1
 800838a:	e7f0      	b.n	800836e <_svfiprintf_r+0x192>
 800838c:	ab03      	add	r3, sp, #12
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	462a      	mov	r2, r5
 8008392:	4b0e      	ldr	r3, [pc, #56]	@ (80083cc <_svfiprintf_r+0x1f0>)
 8008394:	a904      	add	r1, sp, #16
 8008396:	4638      	mov	r0, r7
 8008398:	f7fc fcca 	bl	8004d30 <_printf_float>
 800839c:	1c42      	adds	r2, r0, #1
 800839e:	4606      	mov	r6, r0
 80083a0:	d1d6      	bne.n	8008350 <_svfiprintf_r+0x174>
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	065b      	lsls	r3, r3, #25
 80083a6:	f53f af2d 	bmi.w	8008204 <_svfiprintf_r+0x28>
 80083aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ac:	e72c      	b.n	8008208 <_svfiprintf_r+0x2c>
 80083ae:	ab03      	add	r3, sp, #12
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	462a      	mov	r2, r5
 80083b4:	4b05      	ldr	r3, [pc, #20]	@ (80083cc <_svfiprintf_r+0x1f0>)
 80083b6:	a904      	add	r1, sp, #16
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7fc ff51 	bl	8005260 <_printf_i>
 80083be:	e7ed      	b.n	800839c <_svfiprintf_r+0x1c0>
 80083c0:	08009439 	.word	0x08009439
 80083c4:	08009443 	.word	0x08009443
 80083c8:	08004d31 	.word	0x08004d31
 80083cc:	08008125 	.word	0x08008125
 80083d0:	0800943f 	.word	0x0800943f

080083d4 <__sflush_r>:
 80083d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083dc:	0716      	lsls	r6, r2, #28
 80083de:	4605      	mov	r5, r0
 80083e0:	460c      	mov	r4, r1
 80083e2:	d454      	bmi.n	800848e <__sflush_r+0xba>
 80083e4:	684b      	ldr	r3, [r1, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dc02      	bgt.n	80083f0 <__sflush_r+0x1c>
 80083ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dd48      	ble.n	8008482 <__sflush_r+0xae>
 80083f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083f2:	2e00      	cmp	r6, #0
 80083f4:	d045      	beq.n	8008482 <__sflush_r+0xae>
 80083f6:	2300      	movs	r3, #0
 80083f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083fc:	682f      	ldr	r7, [r5, #0]
 80083fe:	6a21      	ldr	r1, [r4, #32]
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	d030      	beq.n	8008466 <__sflush_r+0x92>
 8008404:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	0759      	lsls	r1, r3, #29
 800840a:	d505      	bpl.n	8008418 <__sflush_r+0x44>
 800840c:	6863      	ldr	r3, [r4, #4]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008412:	b10b      	cbz	r3, 8008418 <__sflush_r+0x44>
 8008414:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008416:	1ad2      	subs	r2, r2, r3
 8008418:	2300      	movs	r3, #0
 800841a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800841c:	6a21      	ldr	r1, [r4, #32]
 800841e:	4628      	mov	r0, r5
 8008420:	47b0      	blx	r6
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	d106      	bne.n	8008436 <__sflush_r+0x62>
 8008428:	6829      	ldr	r1, [r5, #0]
 800842a:	291d      	cmp	r1, #29
 800842c:	d82b      	bhi.n	8008486 <__sflush_r+0xb2>
 800842e:	4a2a      	ldr	r2, [pc, #168]	@ (80084d8 <__sflush_r+0x104>)
 8008430:	40ca      	lsrs	r2, r1
 8008432:	07d6      	lsls	r6, r2, #31
 8008434:	d527      	bpl.n	8008486 <__sflush_r+0xb2>
 8008436:	2200      	movs	r2, #0
 8008438:	6062      	str	r2, [r4, #4]
 800843a:	04d9      	lsls	r1, r3, #19
 800843c:	6922      	ldr	r2, [r4, #16]
 800843e:	6022      	str	r2, [r4, #0]
 8008440:	d504      	bpl.n	800844c <__sflush_r+0x78>
 8008442:	1c42      	adds	r2, r0, #1
 8008444:	d101      	bne.n	800844a <__sflush_r+0x76>
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	b903      	cbnz	r3, 800844c <__sflush_r+0x78>
 800844a:	6560      	str	r0, [r4, #84]	@ 0x54
 800844c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800844e:	602f      	str	r7, [r5, #0]
 8008450:	b1b9      	cbz	r1, 8008482 <__sflush_r+0xae>
 8008452:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008456:	4299      	cmp	r1, r3
 8008458:	d002      	beq.n	8008460 <__sflush_r+0x8c>
 800845a:	4628      	mov	r0, r5
 800845c:	f7fe fa34 	bl	80068c8 <_free_r>
 8008460:	2300      	movs	r3, #0
 8008462:	6363      	str	r3, [r4, #52]	@ 0x34
 8008464:	e00d      	b.n	8008482 <__sflush_r+0xae>
 8008466:	2301      	movs	r3, #1
 8008468:	4628      	mov	r0, r5
 800846a:	47b0      	blx	r6
 800846c:	4602      	mov	r2, r0
 800846e:	1c50      	adds	r0, r2, #1
 8008470:	d1c9      	bne.n	8008406 <__sflush_r+0x32>
 8008472:	682b      	ldr	r3, [r5, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0c6      	beq.n	8008406 <__sflush_r+0x32>
 8008478:	2b1d      	cmp	r3, #29
 800847a:	d001      	beq.n	8008480 <__sflush_r+0xac>
 800847c:	2b16      	cmp	r3, #22
 800847e:	d11e      	bne.n	80084be <__sflush_r+0xea>
 8008480:	602f      	str	r7, [r5, #0]
 8008482:	2000      	movs	r0, #0
 8008484:	e022      	b.n	80084cc <__sflush_r+0xf8>
 8008486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800848a:	b21b      	sxth	r3, r3
 800848c:	e01b      	b.n	80084c6 <__sflush_r+0xf2>
 800848e:	690f      	ldr	r7, [r1, #16]
 8008490:	2f00      	cmp	r7, #0
 8008492:	d0f6      	beq.n	8008482 <__sflush_r+0xae>
 8008494:	0793      	lsls	r3, r2, #30
 8008496:	680e      	ldr	r6, [r1, #0]
 8008498:	bf08      	it	eq
 800849a:	694b      	ldreq	r3, [r1, #20]
 800849c:	600f      	str	r7, [r1, #0]
 800849e:	bf18      	it	ne
 80084a0:	2300      	movne	r3, #0
 80084a2:	eba6 0807 	sub.w	r8, r6, r7
 80084a6:	608b      	str	r3, [r1, #8]
 80084a8:	f1b8 0f00 	cmp.w	r8, #0
 80084ac:	dde9      	ble.n	8008482 <__sflush_r+0xae>
 80084ae:	6a21      	ldr	r1, [r4, #32]
 80084b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084b2:	4643      	mov	r3, r8
 80084b4:	463a      	mov	r2, r7
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b0      	blx	r6
 80084ba:	2800      	cmp	r0, #0
 80084bc:	dc08      	bgt.n	80084d0 <__sflush_r+0xfc>
 80084be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d0:	4407      	add	r7, r0
 80084d2:	eba8 0800 	sub.w	r8, r8, r0
 80084d6:	e7e7      	b.n	80084a8 <__sflush_r+0xd4>
 80084d8:	20400001 	.word	0x20400001

080084dc <_fflush_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	690b      	ldr	r3, [r1, #16]
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	b913      	cbnz	r3, 80084ec <_fflush_r+0x10>
 80084e6:	2500      	movs	r5, #0
 80084e8:	4628      	mov	r0, r5
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	b118      	cbz	r0, 80084f6 <_fflush_r+0x1a>
 80084ee:	6a03      	ldr	r3, [r0, #32]
 80084f0:	b90b      	cbnz	r3, 80084f6 <_fflush_r+0x1a>
 80084f2:	f7fd fa6d 	bl	80059d0 <__sinit>
 80084f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f3      	beq.n	80084e6 <_fflush_r+0xa>
 80084fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008500:	07d0      	lsls	r0, r2, #31
 8008502:	d404      	bmi.n	800850e <_fflush_r+0x32>
 8008504:	0599      	lsls	r1, r3, #22
 8008506:	d402      	bmi.n	800850e <_fflush_r+0x32>
 8008508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800850a:	f7fd fb7a 	bl	8005c02 <__retarget_lock_acquire_recursive>
 800850e:	4628      	mov	r0, r5
 8008510:	4621      	mov	r1, r4
 8008512:	f7ff ff5f 	bl	80083d4 <__sflush_r>
 8008516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008518:	07da      	lsls	r2, r3, #31
 800851a:	4605      	mov	r5, r0
 800851c:	d4e4      	bmi.n	80084e8 <_fflush_r+0xc>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	059b      	lsls	r3, r3, #22
 8008522:	d4e1      	bmi.n	80084e8 <_fflush_r+0xc>
 8008524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008526:	f7fd fb6d 	bl	8005c04 <__retarget_lock_release_recursive>
 800852a:	e7dd      	b.n	80084e8 <_fflush_r+0xc>

0800852c <memmove>:
 800852c:	4288      	cmp	r0, r1
 800852e:	b510      	push	{r4, lr}
 8008530:	eb01 0402 	add.w	r4, r1, r2
 8008534:	d902      	bls.n	800853c <memmove+0x10>
 8008536:	4284      	cmp	r4, r0
 8008538:	4623      	mov	r3, r4
 800853a:	d807      	bhi.n	800854c <memmove+0x20>
 800853c:	1e43      	subs	r3, r0, #1
 800853e:	42a1      	cmp	r1, r4
 8008540:	d008      	beq.n	8008554 <memmove+0x28>
 8008542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800854a:	e7f8      	b.n	800853e <memmove+0x12>
 800854c:	4402      	add	r2, r0
 800854e:	4601      	mov	r1, r0
 8008550:	428a      	cmp	r2, r1
 8008552:	d100      	bne.n	8008556 <memmove+0x2a>
 8008554:	bd10      	pop	{r4, pc}
 8008556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800855a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800855e:	e7f7      	b.n	8008550 <memmove+0x24>

08008560 <strncmp>:
 8008560:	b510      	push	{r4, lr}
 8008562:	b16a      	cbz	r2, 8008580 <strncmp+0x20>
 8008564:	3901      	subs	r1, #1
 8008566:	1884      	adds	r4, r0, r2
 8008568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800856c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008570:	429a      	cmp	r2, r3
 8008572:	d103      	bne.n	800857c <strncmp+0x1c>
 8008574:	42a0      	cmp	r0, r4
 8008576:	d001      	beq.n	800857c <strncmp+0x1c>
 8008578:	2a00      	cmp	r2, #0
 800857a:	d1f5      	bne.n	8008568 <strncmp+0x8>
 800857c:	1ad0      	subs	r0, r2, r3
 800857e:	bd10      	pop	{r4, pc}
 8008580:	4610      	mov	r0, r2
 8008582:	e7fc      	b.n	800857e <strncmp+0x1e>

08008584 <_sbrk_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d06      	ldr	r5, [pc, #24]	@ (80085a0 <_sbrk_r+0x1c>)
 8008588:	2300      	movs	r3, #0
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	602b      	str	r3, [r5, #0]
 8008590:	f7f9 fcf0 	bl	8001f74 <_sbrk>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d102      	bne.n	800859e <_sbrk_r+0x1a>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	b103      	cbz	r3, 800859e <_sbrk_r+0x1a>
 800859c:	6023      	str	r3, [r4, #0]
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	200403ec 	.word	0x200403ec

080085a4 <memcpy>:
 80085a4:	440a      	add	r2, r1
 80085a6:	4291      	cmp	r1, r2
 80085a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085ac:	d100      	bne.n	80085b0 <memcpy+0xc>
 80085ae:	4770      	bx	lr
 80085b0:	b510      	push	{r4, lr}
 80085b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ba:	4291      	cmp	r1, r2
 80085bc:	d1f9      	bne.n	80085b2 <memcpy+0xe>
 80085be:	bd10      	pop	{r4, pc}

080085c0 <nan>:
 80085c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80085c8 <nan+0x8>
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	00000000 	.word	0x00000000
 80085cc:	7ff80000 	.word	0x7ff80000

080085d0 <__assert_func>:
 80085d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085d2:	4614      	mov	r4, r2
 80085d4:	461a      	mov	r2, r3
 80085d6:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <__assert_func+0x2c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4605      	mov	r5, r0
 80085dc:	68d8      	ldr	r0, [r3, #12]
 80085de:	b14c      	cbz	r4, 80085f4 <__assert_func+0x24>
 80085e0:	4b07      	ldr	r3, [pc, #28]	@ (8008600 <__assert_func+0x30>)
 80085e2:	9100      	str	r1, [sp, #0]
 80085e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085e8:	4906      	ldr	r1, [pc, #24]	@ (8008604 <__assert_func+0x34>)
 80085ea:	462b      	mov	r3, r5
 80085ec:	f000 fba8 	bl	8008d40 <fiprintf>
 80085f0:	f000 fbb8 	bl	8008d64 <abort>
 80085f4:	4b04      	ldr	r3, [pc, #16]	@ (8008608 <__assert_func+0x38>)
 80085f6:	461c      	mov	r4, r3
 80085f8:	e7f3      	b.n	80085e2 <__assert_func+0x12>
 80085fa:	bf00      	nop
 80085fc:	20040018 	.word	0x20040018
 8008600:	08009452 	.word	0x08009452
 8008604:	0800945f 	.word	0x0800945f
 8008608:	0800948d 	.word	0x0800948d

0800860c <_calloc_r>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	fba1 5402 	umull	r5, r4, r1, r2
 8008612:	b934      	cbnz	r4, 8008622 <_calloc_r+0x16>
 8008614:	4629      	mov	r1, r5
 8008616:	f7fe f9cb 	bl	80069b0 <_malloc_r>
 800861a:	4606      	mov	r6, r0
 800861c:	b928      	cbnz	r0, 800862a <_calloc_r+0x1e>
 800861e:	4630      	mov	r0, r6
 8008620:	bd70      	pop	{r4, r5, r6, pc}
 8008622:	220c      	movs	r2, #12
 8008624:	6002      	str	r2, [r0, #0]
 8008626:	2600      	movs	r6, #0
 8008628:	e7f9      	b.n	800861e <_calloc_r+0x12>
 800862a:	462a      	mov	r2, r5
 800862c:	4621      	mov	r1, r4
 800862e:	f7fd fa6a 	bl	8005b06 <memset>
 8008632:	e7f4      	b.n	800861e <_calloc_r+0x12>

08008634 <rshift>:
 8008634:	6903      	ldr	r3, [r0, #16]
 8008636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800863a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800863e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008642:	f100 0414 	add.w	r4, r0, #20
 8008646:	dd45      	ble.n	80086d4 <rshift+0xa0>
 8008648:	f011 011f 	ands.w	r1, r1, #31
 800864c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008654:	d10c      	bne.n	8008670 <rshift+0x3c>
 8008656:	f100 0710 	add.w	r7, r0, #16
 800865a:	4629      	mov	r1, r5
 800865c:	42b1      	cmp	r1, r6
 800865e:	d334      	bcc.n	80086ca <rshift+0x96>
 8008660:	1a9b      	subs	r3, r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	1eea      	subs	r2, r5, #3
 8008666:	4296      	cmp	r6, r2
 8008668:	bf38      	it	cc
 800866a:	2300      	movcc	r3, #0
 800866c:	4423      	add	r3, r4
 800866e:	e015      	b.n	800869c <rshift+0x68>
 8008670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008674:	f1c1 0820 	rsb	r8, r1, #32
 8008678:	40cf      	lsrs	r7, r1
 800867a:	f105 0e04 	add.w	lr, r5, #4
 800867e:	46a1      	mov	r9, r4
 8008680:	4576      	cmp	r6, lr
 8008682:	46f4      	mov	ip, lr
 8008684:	d815      	bhi.n	80086b2 <rshift+0x7e>
 8008686:	1a9a      	subs	r2, r3, r2
 8008688:	0092      	lsls	r2, r2, #2
 800868a:	3a04      	subs	r2, #4
 800868c:	3501      	adds	r5, #1
 800868e:	42ae      	cmp	r6, r5
 8008690:	bf38      	it	cc
 8008692:	2200      	movcc	r2, #0
 8008694:	18a3      	adds	r3, r4, r2
 8008696:	50a7      	str	r7, [r4, r2]
 8008698:	b107      	cbz	r7, 800869c <rshift+0x68>
 800869a:	3304      	adds	r3, #4
 800869c:	1b1a      	subs	r2, r3, r4
 800869e:	42a3      	cmp	r3, r4
 80086a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086a4:	bf08      	it	eq
 80086a6:	2300      	moveq	r3, #0
 80086a8:	6102      	str	r2, [r0, #16]
 80086aa:	bf08      	it	eq
 80086ac:	6143      	streq	r3, [r0, #20]
 80086ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086b2:	f8dc c000 	ldr.w	ip, [ip]
 80086b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80086ba:	ea4c 0707 	orr.w	r7, ip, r7
 80086be:	f849 7b04 	str.w	r7, [r9], #4
 80086c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086c6:	40cf      	lsrs	r7, r1
 80086c8:	e7da      	b.n	8008680 <rshift+0x4c>
 80086ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80086ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80086d2:	e7c3      	b.n	800865c <rshift+0x28>
 80086d4:	4623      	mov	r3, r4
 80086d6:	e7e1      	b.n	800869c <rshift+0x68>

080086d8 <__hexdig_fun>:
 80086d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d802      	bhi.n	80086e6 <__hexdig_fun+0xe>
 80086e0:	3820      	subs	r0, #32
 80086e2:	b2c0      	uxtb	r0, r0
 80086e4:	4770      	bx	lr
 80086e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d801      	bhi.n	80086f2 <__hexdig_fun+0x1a>
 80086ee:	3847      	subs	r0, #71	@ 0x47
 80086f0:	e7f7      	b.n	80086e2 <__hexdig_fun+0xa>
 80086f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	d801      	bhi.n	80086fe <__hexdig_fun+0x26>
 80086fa:	3827      	subs	r0, #39	@ 0x27
 80086fc:	e7f1      	b.n	80086e2 <__hexdig_fun+0xa>
 80086fe:	2000      	movs	r0, #0
 8008700:	4770      	bx	lr
	...

08008704 <__gethex>:
 8008704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	b085      	sub	sp, #20
 800870a:	468a      	mov	sl, r1
 800870c:	9302      	str	r3, [sp, #8]
 800870e:	680b      	ldr	r3, [r1, #0]
 8008710:	9001      	str	r0, [sp, #4]
 8008712:	4690      	mov	r8, r2
 8008714:	1c9c      	adds	r4, r3, #2
 8008716:	46a1      	mov	r9, r4
 8008718:	f814 0b01 	ldrb.w	r0, [r4], #1
 800871c:	2830      	cmp	r0, #48	@ 0x30
 800871e:	d0fa      	beq.n	8008716 <__gethex+0x12>
 8008720:	eba9 0303 	sub.w	r3, r9, r3
 8008724:	f1a3 0b02 	sub.w	fp, r3, #2
 8008728:	f7ff ffd6 	bl	80086d8 <__hexdig_fun>
 800872c:	4605      	mov	r5, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	d168      	bne.n	8008804 <__gethex+0x100>
 8008732:	49a0      	ldr	r1, [pc, #640]	@ (80089b4 <__gethex+0x2b0>)
 8008734:	2201      	movs	r2, #1
 8008736:	4648      	mov	r0, r9
 8008738:	f7ff ff12 	bl	8008560 <strncmp>
 800873c:	4607      	mov	r7, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d167      	bne.n	8008812 <__gethex+0x10e>
 8008742:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008746:	4626      	mov	r6, r4
 8008748:	f7ff ffc6 	bl	80086d8 <__hexdig_fun>
 800874c:	2800      	cmp	r0, #0
 800874e:	d062      	beq.n	8008816 <__gethex+0x112>
 8008750:	4623      	mov	r3, r4
 8008752:	7818      	ldrb	r0, [r3, #0]
 8008754:	2830      	cmp	r0, #48	@ 0x30
 8008756:	4699      	mov	r9, r3
 8008758:	f103 0301 	add.w	r3, r3, #1
 800875c:	d0f9      	beq.n	8008752 <__gethex+0x4e>
 800875e:	f7ff ffbb 	bl	80086d8 <__hexdig_fun>
 8008762:	fab0 f580 	clz	r5, r0
 8008766:	096d      	lsrs	r5, r5, #5
 8008768:	f04f 0b01 	mov.w	fp, #1
 800876c:	464a      	mov	r2, r9
 800876e:	4616      	mov	r6, r2
 8008770:	3201      	adds	r2, #1
 8008772:	7830      	ldrb	r0, [r6, #0]
 8008774:	f7ff ffb0 	bl	80086d8 <__hexdig_fun>
 8008778:	2800      	cmp	r0, #0
 800877a:	d1f8      	bne.n	800876e <__gethex+0x6a>
 800877c:	498d      	ldr	r1, [pc, #564]	@ (80089b4 <__gethex+0x2b0>)
 800877e:	2201      	movs	r2, #1
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff feed 	bl	8008560 <strncmp>
 8008786:	2800      	cmp	r0, #0
 8008788:	d13f      	bne.n	800880a <__gethex+0x106>
 800878a:	b944      	cbnz	r4, 800879e <__gethex+0x9a>
 800878c:	1c74      	adds	r4, r6, #1
 800878e:	4622      	mov	r2, r4
 8008790:	4616      	mov	r6, r2
 8008792:	3201      	adds	r2, #1
 8008794:	7830      	ldrb	r0, [r6, #0]
 8008796:	f7ff ff9f 	bl	80086d8 <__hexdig_fun>
 800879a:	2800      	cmp	r0, #0
 800879c:	d1f8      	bne.n	8008790 <__gethex+0x8c>
 800879e:	1ba4      	subs	r4, r4, r6
 80087a0:	00a7      	lsls	r7, r4, #2
 80087a2:	7833      	ldrb	r3, [r6, #0]
 80087a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80087a8:	2b50      	cmp	r3, #80	@ 0x50
 80087aa:	d13e      	bne.n	800882a <__gethex+0x126>
 80087ac:	7873      	ldrb	r3, [r6, #1]
 80087ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80087b0:	d033      	beq.n	800881a <__gethex+0x116>
 80087b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80087b4:	d034      	beq.n	8008820 <__gethex+0x11c>
 80087b6:	1c71      	adds	r1, r6, #1
 80087b8:	2400      	movs	r4, #0
 80087ba:	7808      	ldrb	r0, [r1, #0]
 80087bc:	f7ff ff8c 	bl	80086d8 <__hexdig_fun>
 80087c0:	1e43      	subs	r3, r0, #1
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b18      	cmp	r3, #24
 80087c6:	d830      	bhi.n	800882a <__gethex+0x126>
 80087c8:	f1a0 0210 	sub.w	r2, r0, #16
 80087cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087d0:	f7ff ff82 	bl	80086d8 <__hexdig_fun>
 80087d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80087d8:	fa5f fc8c 	uxtb.w	ip, ip
 80087dc:	f1bc 0f18 	cmp.w	ip, #24
 80087e0:	f04f 030a 	mov.w	r3, #10
 80087e4:	d91e      	bls.n	8008824 <__gethex+0x120>
 80087e6:	b104      	cbz	r4, 80087ea <__gethex+0xe6>
 80087e8:	4252      	negs	r2, r2
 80087ea:	4417      	add	r7, r2
 80087ec:	f8ca 1000 	str.w	r1, [sl]
 80087f0:	b1ed      	cbz	r5, 800882e <__gethex+0x12a>
 80087f2:	f1bb 0f00 	cmp.w	fp, #0
 80087f6:	bf0c      	ite	eq
 80087f8:	2506      	moveq	r5, #6
 80087fa:	2500      	movne	r5, #0
 80087fc:	4628      	mov	r0, r5
 80087fe:	b005      	add	sp, #20
 8008800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	2500      	movs	r5, #0
 8008806:	462c      	mov	r4, r5
 8008808:	e7b0      	b.n	800876c <__gethex+0x68>
 800880a:	2c00      	cmp	r4, #0
 800880c:	d1c7      	bne.n	800879e <__gethex+0x9a>
 800880e:	4627      	mov	r7, r4
 8008810:	e7c7      	b.n	80087a2 <__gethex+0x9e>
 8008812:	464e      	mov	r6, r9
 8008814:	462f      	mov	r7, r5
 8008816:	2501      	movs	r5, #1
 8008818:	e7c3      	b.n	80087a2 <__gethex+0x9e>
 800881a:	2400      	movs	r4, #0
 800881c:	1cb1      	adds	r1, r6, #2
 800881e:	e7cc      	b.n	80087ba <__gethex+0xb6>
 8008820:	2401      	movs	r4, #1
 8008822:	e7fb      	b.n	800881c <__gethex+0x118>
 8008824:	fb03 0002 	mla	r0, r3, r2, r0
 8008828:	e7ce      	b.n	80087c8 <__gethex+0xc4>
 800882a:	4631      	mov	r1, r6
 800882c:	e7de      	b.n	80087ec <__gethex+0xe8>
 800882e:	eba6 0309 	sub.w	r3, r6, r9
 8008832:	3b01      	subs	r3, #1
 8008834:	4629      	mov	r1, r5
 8008836:	2b07      	cmp	r3, #7
 8008838:	dc0a      	bgt.n	8008850 <__gethex+0x14c>
 800883a:	9801      	ldr	r0, [sp, #4]
 800883c:	f7fe f944 	bl	8006ac8 <_Balloc>
 8008840:	4604      	mov	r4, r0
 8008842:	b940      	cbnz	r0, 8008856 <__gethex+0x152>
 8008844:	4b5c      	ldr	r3, [pc, #368]	@ (80089b8 <__gethex+0x2b4>)
 8008846:	4602      	mov	r2, r0
 8008848:	21e4      	movs	r1, #228	@ 0xe4
 800884a:	485c      	ldr	r0, [pc, #368]	@ (80089bc <__gethex+0x2b8>)
 800884c:	f7ff fec0 	bl	80085d0 <__assert_func>
 8008850:	3101      	adds	r1, #1
 8008852:	105b      	asrs	r3, r3, #1
 8008854:	e7ef      	b.n	8008836 <__gethex+0x132>
 8008856:	f100 0a14 	add.w	sl, r0, #20
 800885a:	2300      	movs	r3, #0
 800885c:	4655      	mov	r5, sl
 800885e:	469b      	mov	fp, r3
 8008860:	45b1      	cmp	r9, r6
 8008862:	d337      	bcc.n	80088d4 <__gethex+0x1d0>
 8008864:	f845 bb04 	str.w	fp, [r5], #4
 8008868:	eba5 050a 	sub.w	r5, r5, sl
 800886c:	10ad      	asrs	r5, r5, #2
 800886e:	6125      	str	r5, [r4, #16]
 8008870:	4658      	mov	r0, fp
 8008872:	f7fe fa1b 	bl	8006cac <__hi0bits>
 8008876:	016d      	lsls	r5, r5, #5
 8008878:	f8d8 6000 	ldr.w	r6, [r8]
 800887c:	1a2d      	subs	r5, r5, r0
 800887e:	42b5      	cmp	r5, r6
 8008880:	dd54      	ble.n	800892c <__gethex+0x228>
 8008882:	1bad      	subs	r5, r5, r6
 8008884:	4629      	mov	r1, r5
 8008886:	4620      	mov	r0, r4
 8008888:	f7fe fda7 	bl	80073da <__any_on>
 800888c:	4681      	mov	r9, r0
 800888e:	b178      	cbz	r0, 80088b0 <__gethex+0x1ac>
 8008890:	1e6b      	subs	r3, r5, #1
 8008892:	1159      	asrs	r1, r3, #5
 8008894:	f003 021f 	and.w	r2, r3, #31
 8008898:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800889c:	f04f 0901 	mov.w	r9, #1
 80088a0:	fa09 f202 	lsl.w	r2, r9, r2
 80088a4:	420a      	tst	r2, r1
 80088a6:	d003      	beq.n	80088b0 <__gethex+0x1ac>
 80088a8:	454b      	cmp	r3, r9
 80088aa:	dc36      	bgt.n	800891a <__gethex+0x216>
 80088ac:	f04f 0902 	mov.w	r9, #2
 80088b0:	4629      	mov	r1, r5
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff febe 	bl	8008634 <rshift>
 80088b8:	442f      	add	r7, r5
 80088ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088be:	42bb      	cmp	r3, r7
 80088c0:	da42      	bge.n	8008948 <__gethex+0x244>
 80088c2:	9801      	ldr	r0, [sp, #4]
 80088c4:	4621      	mov	r1, r4
 80088c6:	f7fe f93f 	bl	8006b48 <_Bfree>
 80088ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088cc:	2300      	movs	r3, #0
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	25a3      	movs	r5, #163	@ 0xa3
 80088d2:	e793      	b.n	80087fc <__gethex+0xf8>
 80088d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80088d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80088da:	d012      	beq.n	8008902 <__gethex+0x1fe>
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d104      	bne.n	80088ea <__gethex+0x1e6>
 80088e0:	f845 bb04 	str.w	fp, [r5], #4
 80088e4:	f04f 0b00 	mov.w	fp, #0
 80088e8:	465b      	mov	r3, fp
 80088ea:	7830      	ldrb	r0, [r6, #0]
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	f7ff fef3 	bl	80086d8 <__hexdig_fun>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	f000 000f 	and.w	r0, r0, #15
 80088f8:	4098      	lsls	r0, r3
 80088fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80088fe:	3304      	adds	r3, #4
 8008900:	e7ae      	b.n	8008860 <__gethex+0x15c>
 8008902:	45b1      	cmp	r9, r6
 8008904:	d8ea      	bhi.n	80088dc <__gethex+0x1d8>
 8008906:	492b      	ldr	r1, [pc, #172]	@ (80089b4 <__gethex+0x2b0>)
 8008908:	9303      	str	r3, [sp, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	4630      	mov	r0, r6
 800890e:	f7ff fe27 	bl	8008560 <strncmp>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	2800      	cmp	r0, #0
 8008916:	d1e1      	bne.n	80088dc <__gethex+0x1d8>
 8008918:	e7a2      	b.n	8008860 <__gethex+0x15c>
 800891a:	1ea9      	subs	r1, r5, #2
 800891c:	4620      	mov	r0, r4
 800891e:	f7fe fd5c 	bl	80073da <__any_on>
 8008922:	2800      	cmp	r0, #0
 8008924:	d0c2      	beq.n	80088ac <__gethex+0x1a8>
 8008926:	f04f 0903 	mov.w	r9, #3
 800892a:	e7c1      	b.n	80088b0 <__gethex+0x1ac>
 800892c:	da09      	bge.n	8008942 <__gethex+0x23e>
 800892e:	1b75      	subs	r5, r6, r5
 8008930:	4621      	mov	r1, r4
 8008932:	9801      	ldr	r0, [sp, #4]
 8008934:	462a      	mov	r2, r5
 8008936:	f7fe fb17 	bl	8006f68 <__lshift>
 800893a:	1b7f      	subs	r7, r7, r5
 800893c:	4604      	mov	r4, r0
 800893e:	f100 0a14 	add.w	sl, r0, #20
 8008942:	f04f 0900 	mov.w	r9, #0
 8008946:	e7b8      	b.n	80088ba <__gethex+0x1b6>
 8008948:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800894c:	42bd      	cmp	r5, r7
 800894e:	dd6f      	ble.n	8008a30 <__gethex+0x32c>
 8008950:	1bed      	subs	r5, r5, r7
 8008952:	42ae      	cmp	r6, r5
 8008954:	dc34      	bgt.n	80089c0 <__gethex+0x2bc>
 8008956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d022      	beq.n	80089a4 <__gethex+0x2a0>
 800895e:	2b03      	cmp	r3, #3
 8008960:	d024      	beq.n	80089ac <__gethex+0x2a8>
 8008962:	2b01      	cmp	r3, #1
 8008964:	d115      	bne.n	8008992 <__gethex+0x28e>
 8008966:	42ae      	cmp	r6, r5
 8008968:	d113      	bne.n	8008992 <__gethex+0x28e>
 800896a:	2e01      	cmp	r6, #1
 800896c:	d10b      	bne.n	8008986 <__gethex+0x282>
 800896e:	9a02      	ldr	r2, [sp, #8]
 8008970:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	2301      	movs	r3, #1
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	f8ca 3000 	str.w	r3, [sl]
 800897e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008980:	2562      	movs	r5, #98	@ 0x62
 8008982:	601c      	str	r4, [r3, #0]
 8008984:	e73a      	b.n	80087fc <__gethex+0xf8>
 8008986:	1e71      	subs	r1, r6, #1
 8008988:	4620      	mov	r0, r4
 800898a:	f7fe fd26 	bl	80073da <__any_on>
 800898e:	2800      	cmp	r0, #0
 8008990:	d1ed      	bne.n	800896e <__gethex+0x26a>
 8008992:	9801      	ldr	r0, [sp, #4]
 8008994:	4621      	mov	r1, r4
 8008996:	f7fe f8d7 	bl	8006b48 <_Bfree>
 800899a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800899c:	2300      	movs	r3, #0
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	2550      	movs	r5, #80	@ 0x50
 80089a2:	e72b      	b.n	80087fc <__gethex+0xf8>
 80089a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f3      	bne.n	8008992 <__gethex+0x28e>
 80089aa:	e7e0      	b.n	800896e <__gethex+0x26a>
 80089ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1dd      	bne.n	800896e <__gethex+0x26a>
 80089b2:	e7ee      	b.n	8008992 <__gethex+0x28e>
 80089b4:	08009437 	.word	0x08009437
 80089b8:	080093cd 	.word	0x080093cd
 80089bc:	0800948e 	.word	0x0800948e
 80089c0:	1e6f      	subs	r7, r5, #1
 80089c2:	f1b9 0f00 	cmp.w	r9, #0
 80089c6:	d130      	bne.n	8008a2a <__gethex+0x326>
 80089c8:	b127      	cbz	r7, 80089d4 <__gethex+0x2d0>
 80089ca:	4639      	mov	r1, r7
 80089cc:	4620      	mov	r0, r4
 80089ce:	f7fe fd04 	bl	80073da <__any_on>
 80089d2:	4681      	mov	r9, r0
 80089d4:	117a      	asrs	r2, r7, #5
 80089d6:	2301      	movs	r3, #1
 80089d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80089dc:	f007 071f 	and.w	r7, r7, #31
 80089e0:	40bb      	lsls	r3, r7
 80089e2:	4213      	tst	r3, r2
 80089e4:	4629      	mov	r1, r5
 80089e6:	4620      	mov	r0, r4
 80089e8:	bf18      	it	ne
 80089ea:	f049 0902 	orrne.w	r9, r9, #2
 80089ee:	f7ff fe21 	bl	8008634 <rshift>
 80089f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80089f6:	1b76      	subs	r6, r6, r5
 80089f8:	2502      	movs	r5, #2
 80089fa:	f1b9 0f00 	cmp.w	r9, #0
 80089fe:	d047      	beq.n	8008a90 <__gethex+0x38c>
 8008a00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d015      	beq.n	8008a34 <__gethex+0x330>
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d017      	beq.n	8008a3c <__gethex+0x338>
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d109      	bne.n	8008a24 <__gethex+0x320>
 8008a10:	f019 0f02 	tst.w	r9, #2
 8008a14:	d006      	beq.n	8008a24 <__gethex+0x320>
 8008a16:	f8da 3000 	ldr.w	r3, [sl]
 8008a1a:	ea49 0903 	orr.w	r9, r9, r3
 8008a1e:	f019 0f01 	tst.w	r9, #1
 8008a22:	d10e      	bne.n	8008a42 <__gethex+0x33e>
 8008a24:	f045 0510 	orr.w	r5, r5, #16
 8008a28:	e032      	b.n	8008a90 <__gethex+0x38c>
 8008a2a:	f04f 0901 	mov.w	r9, #1
 8008a2e:	e7d1      	b.n	80089d4 <__gethex+0x2d0>
 8008a30:	2501      	movs	r5, #1
 8008a32:	e7e2      	b.n	80089fa <__gethex+0x2f6>
 8008a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a36:	f1c3 0301 	rsb	r3, r3, #1
 8008a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <__gethex+0x320>
 8008a42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a46:	f104 0314 	add.w	r3, r4, #20
 8008a4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a52:	f04f 0c00 	mov.w	ip, #0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a60:	d01b      	beq.n	8008a9a <__gethex+0x396>
 8008a62:	3201      	adds	r2, #1
 8008a64:	6002      	str	r2, [r0, #0]
 8008a66:	2d02      	cmp	r5, #2
 8008a68:	f104 0314 	add.w	r3, r4, #20
 8008a6c:	d13c      	bne.n	8008ae8 <__gethex+0x3e4>
 8008a6e:	f8d8 2000 	ldr.w	r2, [r8]
 8008a72:	3a01      	subs	r2, #1
 8008a74:	42b2      	cmp	r2, r6
 8008a76:	d109      	bne.n	8008a8c <__gethex+0x388>
 8008a78:	1171      	asrs	r1, r6, #5
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a80:	f006 061f 	and.w	r6, r6, #31
 8008a84:	fa02 f606 	lsl.w	r6, r2, r6
 8008a88:	421e      	tst	r6, r3
 8008a8a:	d13a      	bne.n	8008b02 <__gethex+0x3fe>
 8008a8c:	f045 0520 	orr.w	r5, r5, #32
 8008a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a92:	601c      	str	r4, [r3, #0]
 8008a94:	9b02      	ldr	r3, [sp, #8]
 8008a96:	601f      	str	r7, [r3, #0]
 8008a98:	e6b0      	b.n	80087fc <__gethex+0xf8>
 8008a9a:	4299      	cmp	r1, r3
 8008a9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008aa0:	d8d9      	bhi.n	8008a56 <__gethex+0x352>
 8008aa2:	68a3      	ldr	r3, [r4, #8]
 8008aa4:	459b      	cmp	fp, r3
 8008aa6:	db17      	blt.n	8008ad8 <__gethex+0x3d4>
 8008aa8:	6861      	ldr	r1, [r4, #4]
 8008aaa:	9801      	ldr	r0, [sp, #4]
 8008aac:	3101      	adds	r1, #1
 8008aae:	f7fe f80b 	bl	8006ac8 <_Balloc>
 8008ab2:	4681      	mov	r9, r0
 8008ab4:	b918      	cbnz	r0, 8008abe <__gethex+0x3ba>
 8008ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8008b20 <__gethex+0x41c>)
 8008ab8:	4602      	mov	r2, r0
 8008aba:	2184      	movs	r1, #132	@ 0x84
 8008abc:	e6c5      	b.n	800884a <__gethex+0x146>
 8008abe:	6922      	ldr	r2, [r4, #16]
 8008ac0:	3202      	adds	r2, #2
 8008ac2:	f104 010c 	add.w	r1, r4, #12
 8008ac6:	0092      	lsls	r2, r2, #2
 8008ac8:	300c      	adds	r0, #12
 8008aca:	f7ff fd6b 	bl	80085a4 <memcpy>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	9801      	ldr	r0, [sp, #4]
 8008ad2:	f7fe f839 	bl	8006b48 <_Bfree>
 8008ad6:	464c      	mov	r4, r9
 8008ad8:	6923      	ldr	r3, [r4, #16]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ae0:	6122      	str	r2, [r4, #16]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	615a      	str	r2, [r3, #20]
 8008ae6:	e7be      	b.n	8008a66 <__gethex+0x362>
 8008ae8:	6922      	ldr	r2, [r4, #16]
 8008aea:	455a      	cmp	r2, fp
 8008aec:	dd0b      	ble.n	8008b06 <__gethex+0x402>
 8008aee:	2101      	movs	r1, #1
 8008af0:	4620      	mov	r0, r4
 8008af2:	f7ff fd9f 	bl	8008634 <rshift>
 8008af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008afa:	3701      	adds	r7, #1
 8008afc:	42bb      	cmp	r3, r7
 8008afe:	f6ff aee0 	blt.w	80088c2 <__gethex+0x1be>
 8008b02:	2501      	movs	r5, #1
 8008b04:	e7c2      	b.n	8008a8c <__gethex+0x388>
 8008b06:	f016 061f 	ands.w	r6, r6, #31
 8008b0a:	d0fa      	beq.n	8008b02 <__gethex+0x3fe>
 8008b0c:	4453      	add	r3, sl
 8008b0e:	f1c6 0620 	rsb	r6, r6, #32
 8008b12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008b16:	f7fe f8c9 	bl	8006cac <__hi0bits>
 8008b1a:	42b0      	cmp	r0, r6
 8008b1c:	dbe7      	blt.n	8008aee <__gethex+0x3ea>
 8008b1e:	e7f0      	b.n	8008b02 <__gethex+0x3fe>
 8008b20:	080093cd 	.word	0x080093cd

08008b24 <L_shift>:
 8008b24:	f1c2 0208 	rsb	r2, r2, #8
 8008b28:	0092      	lsls	r2, r2, #2
 8008b2a:	b570      	push	{r4, r5, r6, lr}
 8008b2c:	f1c2 0620 	rsb	r6, r2, #32
 8008b30:	6843      	ldr	r3, [r0, #4]
 8008b32:	6804      	ldr	r4, [r0, #0]
 8008b34:	fa03 f506 	lsl.w	r5, r3, r6
 8008b38:	432c      	orrs	r4, r5
 8008b3a:	40d3      	lsrs	r3, r2
 8008b3c:	6004      	str	r4, [r0, #0]
 8008b3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b42:	4288      	cmp	r0, r1
 8008b44:	d3f4      	bcc.n	8008b30 <L_shift+0xc>
 8008b46:	bd70      	pop	{r4, r5, r6, pc}

08008b48 <__match>:
 8008b48:	b530      	push	{r4, r5, lr}
 8008b4a:	6803      	ldr	r3, [r0, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b52:	b914      	cbnz	r4, 8008b5a <__match+0x12>
 8008b54:	6003      	str	r3, [r0, #0]
 8008b56:	2001      	movs	r0, #1
 8008b58:	bd30      	pop	{r4, r5, pc}
 8008b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008b62:	2d19      	cmp	r5, #25
 8008b64:	bf98      	it	ls
 8008b66:	3220      	addls	r2, #32
 8008b68:	42a2      	cmp	r2, r4
 8008b6a:	d0f0      	beq.n	8008b4e <__match+0x6>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e7f3      	b.n	8008b58 <__match+0x10>

08008b70 <__hexnan>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	680b      	ldr	r3, [r1, #0]
 8008b76:	6801      	ldr	r1, [r0, #0]
 8008b78:	115e      	asrs	r6, r3, #5
 8008b7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b7e:	f013 031f 	ands.w	r3, r3, #31
 8008b82:	b087      	sub	sp, #28
 8008b84:	bf18      	it	ne
 8008b86:	3604      	addne	r6, #4
 8008b88:	2500      	movs	r5, #0
 8008b8a:	1f37      	subs	r7, r6, #4
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	4690      	mov	r8, r2
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b96:	46b9      	mov	r9, r7
 8008b98:	463c      	mov	r4, r7
 8008b9a:	9502      	str	r5, [sp, #8]
 8008b9c:	46ab      	mov	fp, r5
 8008b9e:	784a      	ldrb	r2, [r1, #1]
 8008ba0:	1c4b      	adds	r3, r1, #1
 8008ba2:	9303      	str	r3, [sp, #12]
 8008ba4:	b342      	cbz	r2, 8008bf8 <__hexnan+0x88>
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	9105      	str	r1, [sp, #20]
 8008baa:	9204      	str	r2, [sp, #16]
 8008bac:	f7ff fd94 	bl	80086d8 <__hexdig_fun>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d151      	bne.n	8008c58 <__hexnan+0xe8>
 8008bb4:	9a04      	ldr	r2, [sp, #16]
 8008bb6:	9905      	ldr	r1, [sp, #20]
 8008bb8:	2a20      	cmp	r2, #32
 8008bba:	d818      	bhi.n	8008bee <__hexnan+0x7e>
 8008bbc:	9b02      	ldr	r3, [sp, #8]
 8008bbe:	459b      	cmp	fp, r3
 8008bc0:	dd13      	ble.n	8008bea <__hexnan+0x7a>
 8008bc2:	454c      	cmp	r4, r9
 8008bc4:	d206      	bcs.n	8008bd4 <__hexnan+0x64>
 8008bc6:	2d07      	cmp	r5, #7
 8008bc8:	dc04      	bgt.n	8008bd4 <__hexnan+0x64>
 8008bca:	462a      	mov	r2, r5
 8008bcc:	4649      	mov	r1, r9
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f7ff ffa8 	bl	8008b24 <L_shift>
 8008bd4:	4544      	cmp	r4, r8
 8008bd6:	d952      	bls.n	8008c7e <__hexnan+0x10e>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f1a4 0904 	sub.w	r9, r4, #4
 8008bde:	f844 3c04 	str.w	r3, [r4, #-4]
 8008be2:	f8cd b008 	str.w	fp, [sp, #8]
 8008be6:	464c      	mov	r4, r9
 8008be8:	461d      	mov	r5, r3
 8008bea:	9903      	ldr	r1, [sp, #12]
 8008bec:	e7d7      	b.n	8008b9e <__hexnan+0x2e>
 8008bee:	2a29      	cmp	r2, #41	@ 0x29
 8008bf0:	d157      	bne.n	8008ca2 <__hexnan+0x132>
 8008bf2:	3102      	adds	r1, #2
 8008bf4:	f8ca 1000 	str.w	r1, [sl]
 8008bf8:	f1bb 0f00 	cmp.w	fp, #0
 8008bfc:	d051      	beq.n	8008ca2 <__hexnan+0x132>
 8008bfe:	454c      	cmp	r4, r9
 8008c00:	d206      	bcs.n	8008c10 <__hexnan+0xa0>
 8008c02:	2d07      	cmp	r5, #7
 8008c04:	dc04      	bgt.n	8008c10 <__hexnan+0xa0>
 8008c06:	462a      	mov	r2, r5
 8008c08:	4649      	mov	r1, r9
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff ff8a 	bl	8008b24 <L_shift>
 8008c10:	4544      	cmp	r4, r8
 8008c12:	d936      	bls.n	8008c82 <__hexnan+0x112>
 8008c14:	f1a8 0204 	sub.w	r2, r8, #4
 8008c18:	4623      	mov	r3, r4
 8008c1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c22:	429f      	cmp	r7, r3
 8008c24:	d2f9      	bcs.n	8008c1a <__hexnan+0xaa>
 8008c26:	1b3b      	subs	r3, r7, r4
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	3401      	adds	r4, #1
 8008c30:	3e03      	subs	r6, #3
 8008c32:	42b4      	cmp	r4, r6
 8008c34:	bf88      	it	hi
 8008c36:	2304      	movhi	r3, #4
 8008c38:	4443      	add	r3, r8
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f843 2b04 	str.w	r2, [r3], #4
 8008c40:	429f      	cmp	r7, r3
 8008c42:	d2fb      	bcs.n	8008c3c <__hexnan+0xcc>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	b91b      	cbnz	r3, 8008c50 <__hexnan+0xe0>
 8008c48:	4547      	cmp	r7, r8
 8008c4a:	d128      	bne.n	8008c9e <__hexnan+0x12e>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	2005      	movs	r0, #5
 8008c52:	b007      	add	sp, #28
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	3501      	adds	r5, #1
 8008c5a:	2d08      	cmp	r5, #8
 8008c5c:	f10b 0b01 	add.w	fp, fp, #1
 8008c60:	dd06      	ble.n	8008c70 <__hexnan+0x100>
 8008c62:	4544      	cmp	r4, r8
 8008c64:	d9c1      	bls.n	8008bea <__hexnan+0x7a>
 8008c66:	2300      	movs	r3, #0
 8008c68:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c6c:	2501      	movs	r5, #1
 8008c6e:	3c04      	subs	r4, #4
 8008c70:	6822      	ldr	r2, [r4, #0]
 8008c72:	f000 000f 	and.w	r0, r0, #15
 8008c76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c7a:	6020      	str	r0, [r4, #0]
 8008c7c:	e7b5      	b.n	8008bea <__hexnan+0x7a>
 8008c7e:	2508      	movs	r5, #8
 8008c80:	e7b3      	b.n	8008bea <__hexnan+0x7a>
 8008c82:	9b01      	ldr	r3, [sp, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0dd      	beq.n	8008c44 <__hexnan+0xd4>
 8008c88:	f1c3 0320 	rsb	r3, r3, #32
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	40da      	lsrs	r2, r3
 8008c92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c96:	4013      	ands	r3, r2
 8008c98:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c9c:	e7d2      	b.n	8008c44 <__hexnan+0xd4>
 8008c9e:	3f04      	subs	r7, #4
 8008ca0:	e7d0      	b.n	8008c44 <__hexnan+0xd4>
 8008ca2:	2004      	movs	r0, #4
 8008ca4:	e7d5      	b.n	8008c52 <__hexnan+0xe2>

08008ca6 <__ascii_mbtowc>:
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	b901      	cbnz	r1, 8008cac <__ascii_mbtowc+0x6>
 8008caa:	a901      	add	r1, sp, #4
 8008cac:	b142      	cbz	r2, 8008cc0 <__ascii_mbtowc+0x1a>
 8008cae:	b14b      	cbz	r3, 8008cc4 <__ascii_mbtowc+0x1e>
 8008cb0:	7813      	ldrb	r3, [r2, #0]
 8008cb2:	600b      	str	r3, [r1, #0]
 8008cb4:	7812      	ldrb	r2, [r2, #0]
 8008cb6:	1e10      	subs	r0, r2, #0
 8008cb8:	bf18      	it	ne
 8008cba:	2001      	movne	r0, #1
 8008cbc:	b002      	add	sp, #8
 8008cbe:	4770      	bx	lr
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	e7fb      	b.n	8008cbc <__ascii_mbtowc+0x16>
 8008cc4:	f06f 0001 	mvn.w	r0, #1
 8008cc8:	e7f8      	b.n	8008cbc <__ascii_mbtowc+0x16>

08008cca <_realloc_r>:
 8008cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cce:	4607      	mov	r7, r0
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	460d      	mov	r5, r1
 8008cd4:	b921      	cbnz	r1, 8008ce0 <_realloc_r+0x16>
 8008cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cda:	4611      	mov	r1, r2
 8008cdc:	f7fd be68 	b.w	80069b0 <_malloc_r>
 8008ce0:	b92a      	cbnz	r2, 8008cee <_realloc_r+0x24>
 8008ce2:	f7fd fdf1 	bl	80068c8 <_free_r>
 8008ce6:	4625      	mov	r5, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cee:	f000 f840 	bl	8008d72 <_malloc_usable_size_r>
 8008cf2:	4284      	cmp	r4, r0
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	d802      	bhi.n	8008cfe <_realloc_r+0x34>
 8008cf8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cfc:	d8f4      	bhi.n	8008ce8 <_realloc_r+0x1e>
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7fd fe55 	bl	80069b0 <_malloc_r>
 8008d06:	4680      	mov	r8, r0
 8008d08:	b908      	cbnz	r0, 8008d0e <_realloc_r+0x44>
 8008d0a:	4645      	mov	r5, r8
 8008d0c:	e7ec      	b.n	8008ce8 <_realloc_r+0x1e>
 8008d0e:	42b4      	cmp	r4, r6
 8008d10:	4622      	mov	r2, r4
 8008d12:	4629      	mov	r1, r5
 8008d14:	bf28      	it	cs
 8008d16:	4632      	movcs	r2, r6
 8008d18:	f7ff fc44 	bl	80085a4 <memcpy>
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4638      	mov	r0, r7
 8008d20:	f7fd fdd2 	bl	80068c8 <_free_r>
 8008d24:	e7f1      	b.n	8008d0a <_realloc_r+0x40>

08008d26 <__ascii_wctomb>:
 8008d26:	4603      	mov	r3, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	b141      	cbz	r1, 8008d3e <__ascii_wctomb+0x18>
 8008d2c:	2aff      	cmp	r2, #255	@ 0xff
 8008d2e:	d904      	bls.n	8008d3a <__ascii_wctomb+0x14>
 8008d30:	228a      	movs	r2, #138	@ 0x8a
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	4770      	bx	lr
 8008d3a:	700a      	strb	r2, [r1, #0]
 8008d3c:	2001      	movs	r0, #1
 8008d3e:	4770      	bx	lr

08008d40 <fiprintf>:
 8008d40:	b40e      	push	{r1, r2, r3}
 8008d42:	b503      	push	{r0, r1, lr}
 8008d44:	4601      	mov	r1, r0
 8008d46:	ab03      	add	r3, sp, #12
 8008d48:	4805      	ldr	r0, [pc, #20]	@ (8008d60 <fiprintf+0x20>)
 8008d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d4e:	6800      	ldr	r0, [r0, #0]
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	f000 f83f 	bl	8008dd4 <_vfiprintf_r>
 8008d56:	b002      	add	sp, #8
 8008d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d5c:	b003      	add	sp, #12
 8008d5e:	4770      	bx	lr
 8008d60:	20040018 	.word	0x20040018

08008d64 <abort>:
 8008d64:	b508      	push	{r3, lr}
 8008d66:	2006      	movs	r0, #6
 8008d68:	f000 fa08 	bl	800917c <raise>
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f7f9 f888 	bl	8001e82 <_exit>

08008d72 <_malloc_usable_size_r>:
 8008d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d76:	1f18      	subs	r0, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfbc      	itt	lt
 8008d7c:	580b      	ldrlt	r3, [r1, r0]
 8008d7e:	18c0      	addlt	r0, r0, r3
 8008d80:	4770      	bx	lr

08008d82 <__sfputc_r>:
 8008d82:	6893      	ldr	r3, [r2, #8]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	b410      	push	{r4}
 8008d8a:	6093      	str	r3, [r2, #8]
 8008d8c:	da08      	bge.n	8008da0 <__sfputc_r+0x1e>
 8008d8e:	6994      	ldr	r4, [r2, #24]
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	db01      	blt.n	8008d98 <__sfputc_r+0x16>
 8008d94:	290a      	cmp	r1, #10
 8008d96:	d103      	bne.n	8008da0 <__sfputc_r+0x1e>
 8008d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9c:	f000 b932 	b.w	8009004 <__swbuf_r>
 8008da0:	6813      	ldr	r3, [r2, #0]
 8008da2:	1c58      	adds	r0, r3, #1
 8008da4:	6010      	str	r0, [r2, #0]
 8008da6:	7019      	strb	r1, [r3, #0]
 8008da8:	4608      	mov	r0, r1
 8008daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <__sfputs_r>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	4606      	mov	r6, r0
 8008db4:	460f      	mov	r7, r1
 8008db6:	4614      	mov	r4, r2
 8008db8:	18d5      	adds	r5, r2, r3
 8008dba:	42ac      	cmp	r4, r5
 8008dbc:	d101      	bne.n	8008dc2 <__sfputs_r+0x12>
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	e007      	b.n	8008dd2 <__sfputs_r+0x22>
 8008dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc6:	463a      	mov	r2, r7
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7ff ffda 	bl	8008d82 <__sfputc_r>
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	d1f3      	bne.n	8008dba <__sfputs_r+0xa>
 8008dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008dd4 <_vfiprintf_r>:
 8008dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd8:	460d      	mov	r5, r1
 8008dda:	b09d      	sub	sp, #116	@ 0x74
 8008ddc:	4614      	mov	r4, r2
 8008dde:	4698      	mov	r8, r3
 8008de0:	4606      	mov	r6, r0
 8008de2:	b118      	cbz	r0, 8008dec <_vfiprintf_r+0x18>
 8008de4:	6a03      	ldr	r3, [r0, #32]
 8008de6:	b90b      	cbnz	r3, 8008dec <_vfiprintf_r+0x18>
 8008de8:	f7fc fdf2 	bl	80059d0 <__sinit>
 8008dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dee:	07d9      	lsls	r1, r3, #31
 8008df0:	d405      	bmi.n	8008dfe <_vfiprintf_r+0x2a>
 8008df2:	89ab      	ldrh	r3, [r5, #12]
 8008df4:	059a      	lsls	r2, r3, #22
 8008df6:	d402      	bmi.n	8008dfe <_vfiprintf_r+0x2a>
 8008df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dfa:	f7fc ff02 	bl	8005c02 <__retarget_lock_acquire_recursive>
 8008dfe:	89ab      	ldrh	r3, [r5, #12]
 8008e00:	071b      	lsls	r3, r3, #28
 8008e02:	d501      	bpl.n	8008e08 <_vfiprintf_r+0x34>
 8008e04:	692b      	ldr	r3, [r5, #16]
 8008e06:	b99b      	cbnz	r3, 8008e30 <_vfiprintf_r+0x5c>
 8008e08:	4629      	mov	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f000 f938 	bl	8009080 <__swsetup_r>
 8008e10:	b170      	cbz	r0, 8008e30 <_vfiprintf_r+0x5c>
 8008e12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e14:	07dc      	lsls	r4, r3, #31
 8008e16:	d504      	bpl.n	8008e22 <_vfiprintf_r+0x4e>
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	b01d      	add	sp, #116	@ 0x74
 8008e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	0598      	lsls	r0, r3, #22
 8008e26:	d4f7      	bmi.n	8008e18 <_vfiprintf_r+0x44>
 8008e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e2a:	f7fc feeb 	bl	8005c04 <__retarget_lock_release_recursive>
 8008e2e:	e7f3      	b.n	8008e18 <_vfiprintf_r+0x44>
 8008e30:	2300      	movs	r3, #0
 8008e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e34:	2320      	movs	r3, #32
 8008e36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e3e:	2330      	movs	r3, #48	@ 0x30
 8008e40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ff0 <_vfiprintf_r+0x21c>
 8008e44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e48:	f04f 0901 	mov.w	r9, #1
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	469a      	mov	sl, r3
 8008e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e54:	b10a      	cbz	r2, 8008e5a <_vfiprintf_r+0x86>
 8008e56:	2a25      	cmp	r2, #37	@ 0x25
 8008e58:	d1f9      	bne.n	8008e4e <_vfiprintf_r+0x7a>
 8008e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e5e:	d00b      	beq.n	8008e78 <_vfiprintf_r+0xa4>
 8008e60:	465b      	mov	r3, fp
 8008e62:	4622      	mov	r2, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7ff ffa2 	bl	8008db0 <__sfputs_r>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	f000 80a7 	beq.w	8008fc0 <_vfiprintf_r+0x1ec>
 8008e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e74:	445a      	add	r2, fp
 8008e76:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e78:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 809f 	beq.w	8008fc0 <_vfiprintf_r+0x1ec>
 8008e82:	2300      	movs	r3, #0
 8008e84:	f04f 32ff 	mov.w	r2, #4294967295
 8008e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e8c:	f10a 0a01 	add.w	sl, sl, #1
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	9307      	str	r3, [sp, #28]
 8008e94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e98:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e9a:	4654      	mov	r4, sl
 8008e9c:	2205      	movs	r2, #5
 8008e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea2:	4853      	ldr	r0, [pc, #332]	@ (8008ff0 <_vfiprintf_r+0x21c>)
 8008ea4:	f7f7 f9ac 	bl	8000200 <memchr>
 8008ea8:	9a04      	ldr	r2, [sp, #16]
 8008eaa:	b9d8      	cbnz	r0, 8008ee4 <_vfiprintf_r+0x110>
 8008eac:	06d1      	lsls	r1, r2, #27
 8008eae:	bf44      	itt	mi
 8008eb0:	2320      	movmi	r3, #32
 8008eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008eb6:	0713      	lsls	r3, r2, #28
 8008eb8:	bf44      	itt	mi
 8008eba:	232b      	movmi	r3, #43	@ 0x2b
 8008ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ec6:	d015      	beq.n	8008ef4 <_vfiprintf_r+0x120>
 8008ec8:	9a07      	ldr	r2, [sp, #28]
 8008eca:	4654      	mov	r4, sl
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f04f 0c0a 	mov.w	ip, #10
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ed8:	3b30      	subs	r3, #48	@ 0x30
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	d94b      	bls.n	8008f76 <_vfiprintf_r+0x1a2>
 8008ede:	b1b0      	cbz	r0, 8008f0e <_vfiprintf_r+0x13a>
 8008ee0:	9207      	str	r2, [sp, #28]
 8008ee2:	e014      	b.n	8008f0e <_vfiprintf_r+0x13a>
 8008ee4:	eba0 0308 	sub.w	r3, r0, r8
 8008ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8008eec:	4313      	orrs	r3, r2
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	46a2      	mov	sl, r4
 8008ef2:	e7d2      	b.n	8008e9a <_vfiprintf_r+0xc6>
 8008ef4:	9b03      	ldr	r3, [sp, #12]
 8008ef6:	1d19      	adds	r1, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	9103      	str	r1, [sp, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bfbb      	ittet	lt
 8008f00:	425b      	neglt	r3, r3
 8008f02:	f042 0202 	orrlt.w	r2, r2, #2
 8008f06:	9307      	strge	r3, [sp, #28]
 8008f08:	9307      	strlt	r3, [sp, #28]
 8008f0a:	bfb8      	it	lt
 8008f0c:	9204      	strlt	r2, [sp, #16]
 8008f0e:	7823      	ldrb	r3, [r4, #0]
 8008f10:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f12:	d10a      	bne.n	8008f2a <_vfiprintf_r+0x156>
 8008f14:	7863      	ldrb	r3, [r4, #1]
 8008f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f18:	d132      	bne.n	8008f80 <_vfiprintf_r+0x1ac>
 8008f1a:	9b03      	ldr	r3, [sp, #12]
 8008f1c:	1d1a      	adds	r2, r3, #4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	9203      	str	r2, [sp, #12]
 8008f22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f26:	3402      	adds	r4, #2
 8008f28:	9305      	str	r3, [sp, #20]
 8008f2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009000 <_vfiprintf_r+0x22c>
 8008f2e:	7821      	ldrb	r1, [r4, #0]
 8008f30:	2203      	movs	r2, #3
 8008f32:	4650      	mov	r0, sl
 8008f34:	f7f7 f964 	bl	8000200 <memchr>
 8008f38:	b138      	cbz	r0, 8008f4a <_vfiprintf_r+0x176>
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	eba0 000a 	sub.w	r0, r0, sl
 8008f40:	2240      	movs	r2, #64	@ 0x40
 8008f42:	4082      	lsls	r2, r0
 8008f44:	4313      	orrs	r3, r2
 8008f46:	3401      	adds	r4, #1
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4e:	4829      	ldr	r0, [pc, #164]	@ (8008ff4 <_vfiprintf_r+0x220>)
 8008f50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f54:	2206      	movs	r2, #6
 8008f56:	f7f7 f953 	bl	8000200 <memchr>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d03f      	beq.n	8008fde <_vfiprintf_r+0x20a>
 8008f5e:	4b26      	ldr	r3, [pc, #152]	@ (8008ff8 <_vfiprintf_r+0x224>)
 8008f60:	bb1b      	cbnz	r3, 8008faa <_vfiprintf_r+0x1d6>
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	3307      	adds	r3, #7
 8008f66:	f023 0307 	bic.w	r3, r3, #7
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	9303      	str	r3, [sp, #12]
 8008f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f70:	443b      	add	r3, r7
 8008f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f74:	e76a      	b.n	8008e4c <_vfiprintf_r+0x78>
 8008f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	e7a8      	b.n	8008ed2 <_vfiprintf_r+0xfe>
 8008f80:	2300      	movs	r3, #0
 8008f82:	3401      	adds	r4, #1
 8008f84:	9305      	str	r3, [sp, #20]
 8008f86:	4619      	mov	r1, r3
 8008f88:	f04f 0c0a 	mov.w	ip, #10
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f92:	3a30      	subs	r2, #48	@ 0x30
 8008f94:	2a09      	cmp	r2, #9
 8008f96:	d903      	bls.n	8008fa0 <_vfiprintf_r+0x1cc>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d0c6      	beq.n	8008f2a <_vfiprintf_r+0x156>
 8008f9c:	9105      	str	r1, [sp, #20]
 8008f9e:	e7c4      	b.n	8008f2a <_vfiprintf_r+0x156>
 8008fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e7f0      	b.n	8008f8c <_vfiprintf_r+0x1b8>
 8008faa:	ab03      	add	r3, sp, #12
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	462a      	mov	r2, r5
 8008fb0:	4b12      	ldr	r3, [pc, #72]	@ (8008ffc <_vfiprintf_r+0x228>)
 8008fb2:	a904      	add	r1, sp, #16
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f7fb febb 	bl	8004d30 <_printf_float>
 8008fba:	4607      	mov	r7, r0
 8008fbc:	1c78      	adds	r0, r7, #1
 8008fbe:	d1d6      	bne.n	8008f6e <_vfiprintf_r+0x19a>
 8008fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fc2:	07d9      	lsls	r1, r3, #31
 8008fc4:	d405      	bmi.n	8008fd2 <_vfiprintf_r+0x1fe>
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	059a      	lsls	r2, r3, #22
 8008fca:	d402      	bmi.n	8008fd2 <_vfiprintf_r+0x1fe>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fce:	f7fc fe19 	bl	8005c04 <__retarget_lock_release_recursive>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	065b      	lsls	r3, r3, #25
 8008fd6:	f53f af1f 	bmi.w	8008e18 <_vfiprintf_r+0x44>
 8008fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fdc:	e71e      	b.n	8008e1c <_vfiprintf_r+0x48>
 8008fde:	ab03      	add	r3, sp, #12
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <_vfiprintf_r+0x228>)
 8008fe6:	a904      	add	r1, sp, #16
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7fc f939 	bl	8005260 <_printf_i>
 8008fee:	e7e4      	b.n	8008fba <_vfiprintf_r+0x1e6>
 8008ff0:	08009439 	.word	0x08009439
 8008ff4:	08009443 	.word	0x08009443
 8008ff8:	08004d31 	.word	0x08004d31
 8008ffc:	08008db1 	.word	0x08008db1
 8009000:	0800943f 	.word	0x0800943f

08009004 <__swbuf_r>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	460e      	mov	r6, r1
 8009008:	4614      	mov	r4, r2
 800900a:	4605      	mov	r5, r0
 800900c:	b118      	cbz	r0, 8009016 <__swbuf_r+0x12>
 800900e:	6a03      	ldr	r3, [r0, #32]
 8009010:	b90b      	cbnz	r3, 8009016 <__swbuf_r+0x12>
 8009012:	f7fc fcdd 	bl	80059d0 <__sinit>
 8009016:	69a3      	ldr	r3, [r4, #24]
 8009018:	60a3      	str	r3, [r4, #8]
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	071a      	lsls	r2, r3, #28
 800901e:	d501      	bpl.n	8009024 <__swbuf_r+0x20>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	b943      	cbnz	r3, 8009036 <__swbuf_r+0x32>
 8009024:	4621      	mov	r1, r4
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f82a 	bl	8009080 <__swsetup_r>
 800902c:	b118      	cbz	r0, 8009036 <__swbuf_r+0x32>
 800902e:	f04f 37ff 	mov.w	r7, #4294967295
 8009032:	4638      	mov	r0, r7
 8009034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	6922      	ldr	r2, [r4, #16]
 800903a:	1a98      	subs	r0, r3, r2
 800903c:	6963      	ldr	r3, [r4, #20]
 800903e:	b2f6      	uxtb	r6, r6
 8009040:	4283      	cmp	r3, r0
 8009042:	4637      	mov	r7, r6
 8009044:	dc05      	bgt.n	8009052 <__swbuf_r+0x4e>
 8009046:	4621      	mov	r1, r4
 8009048:	4628      	mov	r0, r5
 800904a:	f7ff fa47 	bl	80084dc <_fflush_r>
 800904e:	2800      	cmp	r0, #0
 8009050:	d1ed      	bne.n	800902e <__swbuf_r+0x2a>
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	3b01      	subs	r3, #1
 8009056:	60a3      	str	r3, [r4, #8]
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	6022      	str	r2, [r4, #0]
 800905e:	701e      	strb	r6, [r3, #0]
 8009060:	6962      	ldr	r2, [r4, #20]
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	429a      	cmp	r2, r3
 8009066:	d004      	beq.n	8009072 <__swbuf_r+0x6e>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	07db      	lsls	r3, r3, #31
 800906c:	d5e1      	bpl.n	8009032 <__swbuf_r+0x2e>
 800906e:	2e0a      	cmp	r6, #10
 8009070:	d1df      	bne.n	8009032 <__swbuf_r+0x2e>
 8009072:	4621      	mov	r1, r4
 8009074:	4628      	mov	r0, r5
 8009076:	f7ff fa31 	bl	80084dc <_fflush_r>
 800907a:	2800      	cmp	r0, #0
 800907c:	d0d9      	beq.n	8009032 <__swbuf_r+0x2e>
 800907e:	e7d6      	b.n	800902e <__swbuf_r+0x2a>

08009080 <__swsetup_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4b29      	ldr	r3, [pc, #164]	@ (8009128 <__swsetup_r+0xa8>)
 8009084:	4605      	mov	r5, r0
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	460c      	mov	r4, r1
 800908a:	b118      	cbz	r0, 8009094 <__swsetup_r+0x14>
 800908c:	6a03      	ldr	r3, [r0, #32]
 800908e:	b90b      	cbnz	r3, 8009094 <__swsetup_r+0x14>
 8009090:	f7fc fc9e 	bl	80059d0 <__sinit>
 8009094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009098:	0719      	lsls	r1, r3, #28
 800909a:	d422      	bmi.n	80090e2 <__swsetup_r+0x62>
 800909c:	06da      	lsls	r2, r3, #27
 800909e:	d407      	bmi.n	80090b0 <__swsetup_r+0x30>
 80090a0:	2209      	movs	r2, #9
 80090a2:	602a      	str	r2, [r5, #0]
 80090a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090a8:	81a3      	strh	r3, [r4, #12]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	e033      	b.n	8009118 <__swsetup_r+0x98>
 80090b0:	0758      	lsls	r0, r3, #29
 80090b2:	d512      	bpl.n	80090da <__swsetup_r+0x5a>
 80090b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090b6:	b141      	cbz	r1, 80090ca <__swsetup_r+0x4a>
 80090b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090bc:	4299      	cmp	r1, r3
 80090be:	d002      	beq.n	80090c6 <__swsetup_r+0x46>
 80090c0:	4628      	mov	r0, r5
 80090c2:	f7fd fc01 	bl	80068c8 <_free_r>
 80090c6:	2300      	movs	r3, #0
 80090c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	2300      	movs	r3, #0
 80090d4:	6063      	str	r3, [r4, #4]
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	f043 0308 	orr.w	r3, r3, #8
 80090e0:	81a3      	strh	r3, [r4, #12]
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	b94b      	cbnz	r3, 80090fa <__swsetup_r+0x7a>
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090f0:	d003      	beq.n	80090fa <__swsetup_r+0x7a>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 f883 	bl	8009200 <__smakebuf_r>
 80090fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fe:	f013 0201 	ands.w	r2, r3, #1
 8009102:	d00a      	beq.n	800911a <__swsetup_r+0x9a>
 8009104:	2200      	movs	r2, #0
 8009106:	60a2      	str	r2, [r4, #8]
 8009108:	6962      	ldr	r2, [r4, #20]
 800910a:	4252      	negs	r2, r2
 800910c:	61a2      	str	r2, [r4, #24]
 800910e:	6922      	ldr	r2, [r4, #16]
 8009110:	b942      	cbnz	r2, 8009124 <__swsetup_r+0xa4>
 8009112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009116:	d1c5      	bne.n	80090a4 <__swsetup_r+0x24>
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	0799      	lsls	r1, r3, #30
 800911c:	bf58      	it	pl
 800911e:	6962      	ldrpl	r2, [r4, #20]
 8009120:	60a2      	str	r2, [r4, #8]
 8009122:	e7f4      	b.n	800910e <__swsetup_r+0x8e>
 8009124:	2000      	movs	r0, #0
 8009126:	e7f7      	b.n	8009118 <__swsetup_r+0x98>
 8009128:	20040018 	.word	0x20040018

0800912c <_raise_r>:
 800912c:	291f      	cmp	r1, #31
 800912e:	b538      	push	{r3, r4, r5, lr}
 8009130:	4605      	mov	r5, r0
 8009132:	460c      	mov	r4, r1
 8009134:	d904      	bls.n	8009140 <_raise_r+0x14>
 8009136:	2316      	movs	r3, #22
 8009138:	6003      	str	r3, [r0, #0]
 800913a:	f04f 30ff 	mov.w	r0, #4294967295
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009142:	b112      	cbz	r2, 800914a <_raise_r+0x1e>
 8009144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009148:	b94b      	cbnz	r3, 800915e <_raise_r+0x32>
 800914a:	4628      	mov	r0, r5
 800914c:	f000 f830 	bl	80091b0 <_getpid_r>
 8009150:	4622      	mov	r2, r4
 8009152:	4601      	mov	r1, r0
 8009154:	4628      	mov	r0, r5
 8009156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800915a:	f000 b817 	b.w	800918c <_kill_r>
 800915e:	2b01      	cmp	r3, #1
 8009160:	d00a      	beq.n	8009178 <_raise_r+0x4c>
 8009162:	1c59      	adds	r1, r3, #1
 8009164:	d103      	bne.n	800916e <_raise_r+0x42>
 8009166:	2316      	movs	r3, #22
 8009168:	6003      	str	r3, [r0, #0]
 800916a:	2001      	movs	r0, #1
 800916c:	e7e7      	b.n	800913e <_raise_r+0x12>
 800916e:	2100      	movs	r1, #0
 8009170:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009174:	4620      	mov	r0, r4
 8009176:	4798      	blx	r3
 8009178:	2000      	movs	r0, #0
 800917a:	e7e0      	b.n	800913e <_raise_r+0x12>

0800917c <raise>:
 800917c:	4b02      	ldr	r3, [pc, #8]	@ (8009188 <raise+0xc>)
 800917e:	4601      	mov	r1, r0
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f7ff bfd3 	b.w	800912c <_raise_r>
 8009186:	bf00      	nop
 8009188:	20040018 	.word	0x20040018

0800918c <_kill_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d07      	ldr	r5, [pc, #28]	@ (80091ac <_kill_r+0x20>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	4611      	mov	r1, r2
 8009198:	602b      	str	r3, [r5, #0]
 800919a:	f7f8 fe62 	bl	8001e62 <_kill>
 800919e:	1c43      	adds	r3, r0, #1
 80091a0:	d102      	bne.n	80091a8 <_kill_r+0x1c>
 80091a2:	682b      	ldr	r3, [r5, #0]
 80091a4:	b103      	cbz	r3, 80091a8 <_kill_r+0x1c>
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	bd38      	pop	{r3, r4, r5, pc}
 80091aa:	bf00      	nop
 80091ac:	200403ec 	.word	0x200403ec

080091b0 <_getpid_r>:
 80091b0:	f7f8 be4f 	b.w	8001e52 <_getpid>

080091b4 <__swhatbuf_r>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	460c      	mov	r4, r1
 80091b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091bc:	2900      	cmp	r1, #0
 80091be:	b096      	sub	sp, #88	@ 0x58
 80091c0:	4615      	mov	r5, r2
 80091c2:	461e      	mov	r6, r3
 80091c4:	da0d      	bge.n	80091e2 <__swhatbuf_r+0x2e>
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091cc:	f04f 0100 	mov.w	r1, #0
 80091d0:	bf14      	ite	ne
 80091d2:	2340      	movne	r3, #64	@ 0x40
 80091d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091d8:	2000      	movs	r0, #0
 80091da:	6031      	str	r1, [r6, #0]
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	b016      	add	sp, #88	@ 0x58
 80091e0:	bd70      	pop	{r4, r5, r6, pc}
 80091e2:	466a      	mov	r2, sp
 80091e4:	f000 f848 	bl	8009278 <_fstat_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	dbec      	blt.n	80091c6 <__swhatbuf_r+0x12>
 80091ec:	9901      	ldr	r1, [sp, #4]
 80091ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091f6:	4259      	negs	r1, r3
 80091f8:	4159      	adcs	r1, r3
 80091fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091fe:	e7eb      	b.n	80091d8 <__swhatbuf_r+0x24>

08009200 <__smakebuf_r>:
 8009200:	898b      	ldrh	r3, [r1, #12]
 8009202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009204:	079d      	lsls	r5, r3, #30
 8009206:	4606      	mov	r6, r0
 8009208:	460c      	mov	r4, r1
 800920a:	d507      	bpl.n	800921c <__smakebuf_r+0x1c>
 800920c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	2301      	movs	r3, #1
 8009216:	6163      	str	r3, [r4, #20]
 8009218:	b003      	add	sp, #12
 800921a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800921c:	ab01      	add	r3, sp, #4
 800921e:	466a      	mov	r2, sp
 8009220:	f7ff ffc8 	bl	80091b4 <__swhatbuf_r>
 8009224:	9f00      	ldr	r7, [sp, #0]
 8009226:	4605      	mov	r5, r0
 8009228:	4639      	mov	r1, r7
 800922a:	4630      	mov	r0, r6
 800922c:	f7fd fbc0 	bl	80069b0 <_malloc_r>
 8009230:	b948      	cbnz	r0, 8009246 <__smakebuf_r+0x46>
 8009232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009236:	059a      	lsls	r2, r3, #22
 8009238:	d4ee      	bmi.n	8009218 <__smakebuf_r+0x18>
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	f043 0302 	orr.w	r3, r3, #2
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	e7e2      	b.n	800920c <__smakebuf_r+0xc>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	6020      	str	r0, [r4, #0]
 800924a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009256:	b15b      	cbz	r3, 8009270 <__smakebuf_r+0x70>
 8009258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800925c:	4630      	mov	r0, r6
 800925e:	f000 f81d 	bl	800929c <_isatty_r>
 8009262:	b128      	cbz	r0, 8009270 <__smakebuf_r+0x70>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f023 0303 	bic.w	r3, r3, #3
 800926a:	f043 0301 	orr.w	r3, r3, #1
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	431d      	orrs	r5, r3
 8009274:	81a5      	strh	r5, [r4, #12]
 8009276:	e7cf      	b.n	8009218 <__smakebuf_r+0x18>

08009278 <_fstat_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d07      	ldr	r5, [pc, #28]	@ (8009298 <_fstat_r+0x20>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	4611      	mov	r1, r2
 8009284:	602b      	str	r3, [r5, #0]
 8009286:	f7f8 fe4c 	bl	8001f22 <_fstat>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	d102      	bne.n	8009294 <_fstat_r+0x1c>
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	b103      	cbz	r3, 8009294 <_fstat_r+0x1c>
 8009292:	6023      	str	r3, [r4, #0]
 8009294:	bd38      	pop	{r3, r4, r5, pc}
 8009296:	bf00      	nop
 8009298:	200403ec 	.word	0x200403ec

0800929c <_isatty_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d06      	ldr	r5, [pc, #24]	@ (80092b8 <_isatty_r+0x1c>)
 80092a0:	2300      	movs	r3, #0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4608      	mov	r0, r1
 80092a6:	602b      	str	r3, [r5, #0]
 80092a8:	f7f8 fe4b 	bl	8001f42 <_isatty>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d102      	bne.n	80092b6 <_isatty_r+0x1a>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	b103      	cbz	r3, 80092b6 <_isatty_r+0x1a>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	200403ec 	.word	0x200403ec

080092bc <_init>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr

080092c8 <_fini>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	bf00      	nop
 80092cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ce:	bc08      	pop	{r3}
 80092d0:	469e      	mov	lr, r3
 80092d2:	4770      	bx	lr
