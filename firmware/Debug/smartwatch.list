
smartwatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b54  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013fec  08009d18  08009d18  0000ad18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dd04  0801dd04  0001f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801dd04  0801dd04  0001ed04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dd0c  0801dd0c  0001f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dd0c  0801dd0c  0001ed0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801dd10  0801dd10  0001ed10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20040000  0801dd14  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c498  200401d4  0801dee8  0001f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005c66c  0801dee8  0001f66c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e588  00000000  00000000  0001f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d7  00000000  00000000  0002d78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0002f968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be2  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a741  00000000  00000000  000314b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011079  00000000  00000000  0005bbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001066e4  00000000  00000000  0006cc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000564c  00000000  00000000  00173394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001789e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200401d4 	.word	0x200401d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009cfc 	.word	0x08009cfc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200401d8 	.word	0x200401d8
 80001fc:	08009cfc 	.word	0x08009cfc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <Paint_NewImage>:
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	4611      	mov	r1, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	4623      	mov	r3, r4
 8000d34:	80fb      	strh	r3, [r7, #6]
 8000d36:	4603      	mov	r3, r0
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	807b      	strh	r3, [r7, #2]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	803b      	strh	r3, [r7, #0]
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	8113      	strh	r3, [r2, #8]
 8000d48:	4a1a      	ldr	r2, [pc, #104]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	8153      	strh	r3, [r2, #10]
 8000d4e:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d50:	883b      	ldrh	r3, [r7, #0]
 8000d52:	8193      	strh	r3, [r2, #12]
 8000d54:	4a17      	ldr	r2, [pc, #92]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	8253      	strh	r3, [r2, #18]
 8000d5a:	4a16      	ldr	r2, [pc, #88]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d5c:	88bb      	ldrh	r3, [r7, #4]
 8000d5e:	8293      	strh	r3, [r2, #20]
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d62:	8a5b      	ldrh	r3, [r3, #18]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d6a:	8a9b      	ldrh	r3, [r3, #20]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <Paint_NewImage+0x94>)
 8000d72:	f005 fbc5 	bl	8006500 <iprintf>
 8000d76:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	81d3      	strh	r3, [r2, #14]
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	821a      	strh	r2, [r3, #16]
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <Paint_NewImage+0x6a>
 8000d88:	887b      	ldrh	r3, [r7, #2]
 8000d8a:	2bb4      	cmp	r3, #180	@ 0xb4
 8000d8c:	d106      	bne.n	8000d9c <Paint_NewImage+0x78>
 8000d8e:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	8093      	strh	r3, [r2, #4]
 8000d94:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	80d3      	strh	r3, [r2, #6]
 8000d9a:	e006      	b.n	8000daa <Paint_NewImage+0x86>
 8000d9c:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d9e:	88bb      	ldrh	r3, [r7, #4]
 8000da0:	8093      	strh	r3, [r2, #4]
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <Paint_NewImage+0x90>)
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	80d3      	strh	r3, [r2, #6]
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200401f0 	.word	0x200401f0
 8000db8:	08009d18 	.word	0x08009d18

08000dbc <Paint_SetDisplayFunction>:
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <Paint_SetDisplayFunction+0x1c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20040208 	.word	0x20040208

08000ddc <Paint_SetPixel>:
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	460b      	mov	r3, r1
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	807b      	strh	r3, [r7, #2]
 8000dee:	4b50      	ldr	r3, [pc, #320]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000df0:	889b      	ldrh	r3, [r3, #4]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	88fa      	ldrh	r2, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d805      	bhi.n	8000e06 <Paint_SetPixel+0x2a>
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000dfc:	88db      	ldrh	r3, [r3, #6]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	88ba      	ldrh	r2, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d903      	bls.n	8000e0e <Paint_SetPixel+0x32>
 8000e06:	484b      	ldr	r0, [pc, #300]	@ (8000f34 <Paint_SetPixel+0x158>)
 8000e08:	f005 fbe2 	bl	80065d0 <puts>
 8000e0c:	e08c      	b.n	8000f28 <Paint_SetPixel+0x14c>
 8000e0e:	4b48      	ldr	r3, [pc, #288]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000e10:	89db      	ldrh	r3, [r3, #14]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000e18:	d02d      	beq.n	8000e76 <Paint_SetPixel+0x9a>
 8000e1a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000e1e:	f300 8080 	bgt.w	8000f22 <Paint_SetPixel+0x146>
 8000e22:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e24:	d016      	beq.n	8000e54 <Paint_SetPixel+0x78>
 8000e26:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e28:	dc7b      	bgt.n	8000f22 <Paint_SetPixel+0x146>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <Paint_SetPixel+0x58>
 8000e2e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000e30:	d005      	beq.n	8000e3e <Paint_SetPixel+0x62>
 8000e32:	e076      	b.n	8000f22 <Paint_SetPixel+0x146>
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	81fb      	strh	r3, [r7, #14]
 8000e38:	88bb      	ldrh	r3, [r7, #4]
 8000e3a:	81bb      	strh	r3, [r7, #12]
 8000e3c:	e026      	b.n	8000e8c <Paint_SetPixel+0xb0>
 8000e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000e40:	891b      	ldrh	r3, [r3, #8]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	81fb      	strh	r3, [r7, #14]
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	81bb      	strh	r3, [r7, #12]
 8000e52:	e01b      	b.n	8000e8c <Paint_SetPixel+0xb0>
 8000e54:	4b36      	ldr	r3, [pc, #216]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000e56:	891b      	ldrh	r3, [r3, #8]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	3b01      	subs	r3, #1
 8000e62:	81fb      	strh	r3, [r7, #14]
 8000e64:	4b32      	ldr	r3, [pc, #200]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000e66:	895b      	ldrh	r3, [r3, #10]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	88bb      	ldrh	r3, [r7, #4]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3b01      	subs	r3, #1
 8000e72:	81bb      	strh	r3, [r7, #12]
 8000e74:	e00a      	b.n	8000e8c <Paint_SetPixel+0xb0>
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000e7c:	895b      	ldrh	r3, [r3, #10]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	3b01      	subs	r3, #1
 8000e88:	81bb      	strh	r3, [r7, #12]
 8000e8a:	bf00      	nop
 8000e8c:	4b28      	ldr	r3, [pc, #160]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000e8e:	8a1b      	ldrh	r3, [r3, #16]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d847      	bhi.n	8000f26 <Paint_SetPixel+0x14a>
 8000e96:	a201      	add	r2, pc, #4	@ (adr r2, 8000e9c <Paint_SetPixel+0xc0>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000ef3 	.word	0x08000ef3
 8000ea0:	08000ead 	.word	0x08000ead
 8000ea4:	08000ebf 	.word	0x08000ebf
 8000ea8:	08000ed1 	.word	0x08000ed1
 8000eac:	4b20      	ldr	r3, [pc, #128]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000eae:	891b      	ldrh	r3, [r3, #8]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	89fb      	ldrh	r3, [r7, #14]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	81fb      	strh	r3, [r7, #14]
 8000ebc:	e01a      	b.n	8000ef4 <Paint_SetPixel+0x118>
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000ec0:	895b      	ldrh	r3, [r3, #10]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	89bb      	ldrh	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	81bb      	strh	r3, [r7, #12]
 8000ece:	e011      	b.n	8000ef4 <Paint_SetPixel+0x118>
 8000ed0:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000ed2:	891b      	ldrh	r3, [r3, #8]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3b01      	subs	r3, #1
 8000ede:	81fb      	strh	r3, [r7, #14]
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000ee2:	895b      	ldrh	r3, [r3, #10]
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	89bb      	ldrh	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3b01      	subs	r3, #1
 8000eee:	81bb      	strh	r3, [r7, #12]
 8000ef0:	e000      	b.n	8000ef4 <Paint_SetPixel+0x118>
 8000ef2:	bf00      	nop
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000ef6:	891b      	ldrh	r3, [r3, #8]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	89fa      	ldrh	r2, [r7, #14]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d805      	bhi.n	8000f0c <Paint_SetPixel+0x130>
 8000f00:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <Paint_SetPixel+0x154>)
 8000f02:	895b      	ldrh	r3, [r3, #10]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	89ba      	ldrh	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d903      	bls.n	8000f14 <Paint_SetPixel+0x138>
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <Paint_SetPixel+0x158>)
 8000f0e:	f005 fb5f 	bl	80065d0 <puts>
 8000f12:	e009      	b.n	8000f28 <Paint_SetPixel+0x14c>
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <Paint_SetPixel+0x15c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	887a      	ldrh	r2, [r7, #2]
 8000f1a:	89b9      	ldrh	r1, [r7, #12]
 8000f1c:	89f8      	ldrh	r0, [r7, #14]
 8000f1e:	4798      	blx	r3
 8000f20:	e002      	b.n	8000f28 <Paint_SetPixel+0x14c>
 8000f22:	bf00      	nop
 8000f24:	e000      	b.n	8000f28 <Paint_SetPixel+0x14c>
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200401f0 	.word	0x200401f0
 8000f34:	08009e18 	.word	0x08009e18
 8000f38:	20040208 	.word	0x20040208

08000f3c <draw_img_c>:
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	f107 0c20 	add.w	ip, r7, #32
 8000f48:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	460b      	mov	r3, r1
 8000f52:	71bb      	strb	r3, [r7, #6]
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e02b      	b.n	8000fb2 <draw_img_c+0x76>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	e020      	b.n	8000fa2 <draw_img_c+0x66>
 8000f60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	fb12 f303 	smulbb	r3, r2, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	81fb      	strh	r3, [r7, #14]
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b298      	uxth	r0, r3
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	6a3a      	ldr	r2, [r7, #32]
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f7ff ff20 	bl	8000ddc <Paint_SetPixel>
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	dbd9      	blt.n	8000f60 <draw_img_c+0x24>
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dbce      	blt.n	8000f5a <draw_img_c+0x1e>
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc8:	b002      	add	sp, #8
 8000fca:	4770      	bx	lr

08000fcc <LCD_1IN28_SendCommand>:
uint16_t dt_y_min;
uint16_t dt_y_max;

uint16_t pixels[LCD_1IN28_HEIGHT][LCD_1IN28_WIDTH] = {};

static void LCD_1IN28_SendCommand(uint8_t reg) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	SET_DC_LOW;
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2120      	movs	r1, #32
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f001 fdd5 	bl	8002b8c <HAL_GPIO_WritePin>
	SET_CS_LOW;
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	480b      	ldr	r0, [pc, #44]	@ (8001018 <LCD_1IN28_SendCommand+0x4c>)
 8000fea:	f001 fdcf 	bl	8002b8c <HAL_GPIO_WritePin>
	uint8_t buf[1] = { reg };
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 500);
 8000ff2:	f107 010c 	add.w	r1, r7, #12
 8000ff6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4807      	ldr	r0, [pc, #28]	@ (800101c <LCD_1IN28_SendCommand+0x50>)
 8000ffe:	f002 fdf4 	bl	8003bea <HAL_SPI_Transmit>
	SET_CS_HIGH;
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <LCD_1IN28_SendCommand+0x4c>)
 800100a:	f001 fdbf 	bl	8002b8c <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	48000400 	.word	0x48000400
 800101c:	2005c41c 	.word	0x2005c41c

08001020 <LCD_1IN28_SendData_8Bit>:
/******************************************************************************
 function :	send data
 parameter:
 Data : Write data
 ******************************************************************************/
static void LCD_1IN28_SendData_8Bit(uint8_t data) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	SET_DC_HIGH;
 800102a:	2201      	movs	r2, #1
 800102c:	2120      	movs	r1, #32
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f001 fdab 	bl	8002b8c <HAL_GPIO_WritePin>
	SET_CS_LOW;
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <LCD_1IN28_SendData_8Bit+0x4c>)
 800103e:	f001 fda5 	bl	8002b8c <HAL_GPIO_WritePin>
	uint8_t buf[1] = { data };
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 500);
 8001046:	f107 010c 	add.w	r1, r7, #12
 800104a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800104e:	2201      	movs	r2, #1
 8001050:	4807      	ldr	r0, [pc, #28]	@ (8001070 <LCD_1IN28_SendData_8Bit+0x50>)
 8001052:	f002 fdca 	bl	8003bea <HAL_SPI_Transmit>
	SET_CS_HIGH;
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800105c:	4803      	ldr	r0, [pc, #12]	@ (800106c <LCD_1IN28_SendData_8Bit+0x4c>)
 800105e:	f001 fd95 	bl	8002b8c <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	48000400 	.word	0x48000400
 8001070:	2005c41c 	.word	0x2005c41c

08001074 <screen_set_windows>:

static void screen_set_windows(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend) {
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4623      	mov	r3, r4
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	4603      	mov	r3, r0
 8001088:	71bb      	strb	r3, [r7, #6]
 800108a:	460b      	mov	r3, r1
 800108c:	717b      	strb	r3, [r7, #5]
 800108e:	4613      	mov	r3, r2
 8001090:	713b      	strb	r3, [r7, #4]
	//set the X coordinates
	LCD_1IN28_SendCommand(0x2A);
 8001092:	202a      	movs	r0, #42	@ 0x2a
 8001094:	f7ff ff9a 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ffc1 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Xstart);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffbd 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff ffba 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Xend);
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffb6 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	//set the Y coordinates
	LCD_1IN28_SendCommand(0x2B);
 80010b4:	202b      	movs	r0, #43	@ 0x2b
 80010b6:	f7ff ff89 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ffb0 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Ystart);
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ffac 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff ffa9 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Yend);
 80010ce:	793b      	ldrb	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ffa5 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0X2C);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f7ff ff78 	bl	8000fcc <LCD_1IN28_SendCommand>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <_update_delta>:

static void _update_delta(uint16_t min_x, uint16_t min_y, uint16_t max_x, uint16_t max_y) {
 80010e4:	b490      	push	{r4, r7}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4623      	mov	r3, r4
 80010f4:	80fb      	strh	r3, [r7, #6]
 80010f6:	4603      	mov	r3, r0
 80010f8:	80bb      	strh	r3, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	807b      	strh	r3, [r7, #2]
 80010fe:	4613      	mov	r3, r2
 8001100:	803b      	strh	r3, [r7, #0]
	if (!delta_modified || min_x < dt_x_min) dt_x_min = min_x;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <_update_delta+0x90>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <_update_delta+0x30>
 800110a:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <_update_delta+0x94>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	429a      	cmp	r2, r3
 8001112:	d202      	bcs.n	800111a <_update_delta+0x36>
 8001114:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <_update_delta+0x94>)
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	8013      	strh	r3, [r2, #0]
	if (!delta_modified || max_x > dt_x_max) dt_x_max = max_x;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <_update_delta+0x90>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <_update_delta+0x48>
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <_update_delta+0x98>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	429a      	cmp	r2, r3
 800112a:	d902      	bls.n	8001132 <_update_delta+0x4e>
 800112c:	4a13      	ldr	r2, [pc, #76]	@ (800117c <_update_delta+0x98>)
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	8013      	strh	r3, [r2, #0]
	if (!delta_modified || min_y < dt_y_min) dt_y_min = min_y;
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <_update_delta+0x90>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <_update_delta+0x60>
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <_update_delta+0x9c>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	88ba      	ldrh	r2, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	d202      	bcs.n	800114a <_update_delta+0x66>
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <_update_delta+0x9c>)
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	8013      	strh	r3, [r2, #0]
	if (!delta_modified || max_y > dt_y_max) dt_y_max = max_y;
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <_update_delta+0x90>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <_update_delta+0x78>
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <_update_delta+0xa0>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	883a      	ldrh	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d902      	bls.n	8001162 <_update_delta+0x7e>
 800115c:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <_update_delta+0xa0>)
 800115e:	883b      	ldrh	r3, [r7, #0]
 8001160:	8013      	strh	r3, [r2, #0]
	delta_modified = 1;
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <_update_delta+0x90>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bc90      	pop	{r4, r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20040212 	.word	0x20040212
 8001178:	20040214 	.word	0x20040214
 800117c:	20040216 	.word	0x20040216
 8001180:	20040218 	.word	0x20040218
 8001184:	2004021a 	.word	0x2004021a

08001188 <screen_render>:

void screen_render() {
 8001188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118c:	b08a      	sub	sp, #40	@ 0x28
 800118e:	af00      	add	r7, sp, #0
 8001190:	466b      	mov	r3, sp
 8001192:	4698      	mov	r8, r3
	uint8_t y_diff = dt_y_max - dt_y_min + 1;
 8001194:	4b67      	ldr	r3, [pc, #412]	@ (8001334 <screen_render+0x1ac>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b67      	ldr	r3, [pc, #412]	@ (8001338 <screen_render+0x1b0>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3301      	adds	r3, #1
 80011a6:	74fb      	strb	r3, [r7, #19]
	uint8_t x_diff = dt_x_max - dt_x_min + 1;
 80011a8:	4b64      	ldr	r3, [pc, #400]	@ (800133c <screen_render+0x1b4>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b64      	ldr	r3, [pc, #400]	@ (8001340 <screen_render+0x1b8>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	3301      	adds	r3, #1
 80011ba:	74bb      	strb	r3, [r7, #18]
	uint32_t n_pix = y_diff * x_diff;
 80011bc:	7cfb      	ldrb	r3, [r7, #19]
 80011be:	7cba      	ldrb	r2, [r7, #18]
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	60fb      	str	r3, [r7, #12]

	int index = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t buf[n_pix] = {};
 80011ca:	68fe      	ldr	r6, [r7, #12]
 80011cc:	4633      	mov	r3, r6
 80011ce:	3b01      	subs	r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	2300      	movs	r3, #0
 80011d4:	4634      	mov	r4, r6
 80011d6:	461d      	mov	r5, r3
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	012b      	lsls	r3, r5, #4
 80011e2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80011e6:	0122      	lsls	r2, r4, #4
 80011e8:	0074      	lsls	r4, r6, #1
 80011ea:	2300      	movs	r3, #0
 80011ec:	4630      	mov	r0, r6
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	010b      	lsls	r3, r1, #4
 80011fa:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80011fe:	0102      	lsls	r2, r0, #4
 8001200:	0073      	lsls	r3, r6, #1
 8001202:	3307      	adds	r3, #7
 8001204:	08db      	lsrs	r3, r3, #3
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	ebad 0d03 	sub.w	sp, sp, r3
 800120c:	466b      	mov	r3, sp
 800120e:	3301      	adds	r3, #1
 8001210:	085b      	lsrs	r3, r3, #1
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4622      	mov	r2, r4
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f005 fad9 	bl	80067d4 <memset>
	for (int i = dt_y_max; i > dt_y_min; i--) {
 8001222:	4b44      	ldr	r3, [pc, #272]	@ (8001334 <screen_render+0x1ac>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	623b      	str	r3, [r7, #32]
 8001228:	e01f      	b.n	800126a <screen_render+0xe2>
		for (int j = dt_x_min; j <= dt_x_max; j++) buf[index++] = pixels[i][j];
 800122a:	4b45      	ldr	r3, [pc, #276]	@ (8001340 <screen_render+0x1b8>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	e012      	b.n	8001258 <screen_render+0xd0>
 8001232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001234:	1c53      	adds	r3, r2, #1
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
 8001238:	4842      	ldr	r0, [pc, #264]	@ (8001344 <screen_render+0x1bc>)
 800123a:	6a39      	ldr	r1, [r7, #32]
 800123c:	460b      	mov	r3, r1
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	1a5b      	subs	r3, r3, r1
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	69f9      	ldr	r1, [r7, #28]
 8001246:	440b      	add	r3, r1
 8001248:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	4b38      	ldr	r3, [pc, #224]	@ (800133c <screen_render+0x1b4>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	4293      	cmp	r3, r2
 8001262:	dde6      	ble.n	8001232 <screen_render+0xaa>
	for (int i = dt_y_max; i > dt_y_min; i--) {
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	3b01      	subs	r3, #1
 8001268:	623b      	str	r3, [r7, #32]
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <screen_render+0x1b0>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	4293      	cmp	r3, r2
 8001274:	dcd9      	bgt.n	800122a <screen_render+0xa2>
	}

	screen_set_windows(dt_x_min, dt_y_min, dt_x_max, dt_y_max);
 8001276:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <screen_render+0x1b8>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	b2d8      	uxtb	r0, r3
 800127c:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <screen_render+0x1b0>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	b2d9      	uxtb	r1, r3
 8001282:	4b2e      	ldr	r3, [pc, #184]	@ (800133c <screen_render+0x1b4>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <screen_render+0x1ac>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f7ff fef1 	bl	8001074 <screen_set_windows>
    SET_DC_HIGH;
 8001292:	2201      	movs	r2, #1
 8001294:	2120      	movs	r1, #32
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f001 fc77 	bl	8002b8c <HAL_GPIO_WritePin>
    SET_CS_LOW;
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012a4:	4828      	ldr	r0, [pc, #160]	@ (8001348 <screen_render+0x1c0>)
 80012a6:	f001 fc71 	bl	8002b8c <HAL_GPIO_WritePin>
	uint32_t bytes_remaining = n_pix * 2;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
	uint32_t offset = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
	while (bytes_remaining > 0) {
 80012b4:	e025      	b.n	8001302 <screen_render+0x17a>
		if (bytes_remaining > 65000) {
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80012bc:	4293      	cmp	r3, r2
 80012be:	d914      	bls.n	80012ea <screen_render+0x162>
			HAL_SPI_Transmit(&hspi1, (uint8_t*) buf + offset, 65000, HAL_MAX_DELAY);
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	18d1      	adds	r1, r2, r3
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80012ce:	481f      	ldr	r0, [pc, #124]	@ (800134c <screen_render+0x1c4>)
 80012d0:	f002 fc8b 	bl	8003bea <HAL_SPI_Transmit>
			offset += 65000;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 80012da:	33e8      	adds	r3, #232	@ 0xe8
 80012dc:	617b      	str	r3, [r7, #20]
			bytes_remaining -= 65000;
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
 80012e4:	3be8      	subs	r3, #232	@ 0xe8
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e00b      	b.n	8001302 <screen_render+0x17a>
		} else {
			HAL_SPI_Transmit(&hspi1, (uint8_t*) buf + offset, bytes_remaining, HAL_MAX_DELAY);
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	18d1      	adds	r1, r2, r3
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	4814      	ldr	r0, [pc, #80]	@ (800134c <screen_render+0x1c4>)
 80012fa:	f002 fc76 	bl	8003bea <HAL_SPI_Transmit>
			bytes_remaining = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
	while (bytes_remaining > 0) {
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1d6      	bne.n	80012b6 <screen_render+0x12e>
		}
	}
    SET_DC_LOW;
 8001308:	2200      	movs	r2, #0
 800130a:	2120      	movs	r1, #32
 800130c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001310:	f001 fc3c 	bl	8002b8c <HAL_GPIO_WritePin>
    SET_CS_HIGH;
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800131a:	480b      	ldr	r0, [pc, #44]	@ (8001348 <screen_render+0x1c0>)
 800131c:	f001 fc36 	bl	8002b8c <HAL_GPIO_WritePin>


	delta_modified = 0;
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <screen_render+0x1c8>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	46c5      	mov	sp, r8
}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001332:	bf00      	nop
 8001334:	2004021a 	.word	0x2004021a
 8001338:	20040218 	.word	0x20040218
 800133c:	20040216 	.word	0x20040216
 8001340:	20040214 	.word	0x20040214
 8001344:	2004021c 	.word	0x2004021c
 8001348:	48000400 	.word	0x48000400
 800134c:	2005c41c 	.word	0x2005c41c
 8001350:	20040212 	.word	0x20040212

08001354 <screen_reset>:
/******************************************************************************
 function :	Hardware reset
 parameter:
 ******************************************************************************/
static void screen_reset(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	SET_RST_HIGH;
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <screen_reset+0x40>)
 8001360:	f001 fc14 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001364:	2064      	movs	r0, #100	@ 0x64
 8001366:	f001 f975 	bl	8002654 <HAL_Delay>
	SET_RST_LOW;
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <screen_reset+0x40>)
 8001372:	f001 fc0b 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001376:	2064      	movs	r0, #100	@ 0x64
 8001378:	f001 f96c 	bl	8002654 <HAL_Delay>
	SET_RST_HIGH;
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001382:	4804      	ldr	r0, [pc, #16]	@ (8001394 <screen_reset+0x40>)
 8001384:	f001 fc02 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001388:	2064      	movs	r0, #100	@ 0x64
 800138a:	f001 f963 	bl	8002654 <HAL_Delay>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	48000400 	.word	0x48000400

08001398 <LCD_1IN28_InitReg>:

/******************************************************************************
 function :	Initialize the lcd register
 parameter:
 ******************************************************************************/
static void LCD_1IN28_InitReg(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	LCD_1IN28_SendCommand(0x11);
 800139c:	2011      	movs	r0, #17
 800139e:	f7ff fe15 	bl	8000fcc <LCD_1IN28_SendCommand>
	HAL_Delay(120);
 80013a2:	2078      	movs	r0, #120	@ 0x78
 80013a4:	f001 f956 	bl	8002654 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 80013a8:	2029      	movs	r0, #41	@ 0x29
 80013aa:	f7ff fe0f 	bl	8000fcc <LCD_1IN28_SendCommand>
	HAL_Delay(20);
 80013ae:	2014      	movs	r0, #20
 80013b0:	f001 f950 	bl	8002654 <HAL_Delay>

	LCD_1IN28_SendCommand(0xFE);
 80013b4:	20fe      	movs	r0, #254	@ 0xfe
 80013b6:	f7ff fe09 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF);
 80013ba:	20ef      	movs	r0, #239	@ 0xef
 80013bc:	f7ff fe06 	bl	8000fcc <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xB6);
 80013c0:	20b6      	movs	r0, #182	@ 0xb6
 80013c2:	f7ff fe03 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fe2a 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 80013cc:	2020      	movs	r0, #32
 80013ce:	f7ff fe27 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 80013d2:	2036      	movs	r0, #54	@ 0x36
 80013d4:	f7ff fdfa 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08); //Set as vertical screen
 80013d8:	2008      	movs	r0, #8
 80013da:	f7ff fe21 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);
 80013de:	203a      	movs	r0, #58	@ 0x3a
 80013e0:	f7ff fdf4 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05);
 80013e4:	2005      	movs	r0, #5
 80013e6:	f7ff fe1b 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);
 80013ea:	20c3      	movs	r0, #195	@ 0xc3
 80013ec:	f7ff fdee 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80013f0:	2013      	movs	r0, #19
 80013f2:	f7ff fe15 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC4);
 80013f6:	20c4      	movs	r0, #196	@ 0xc4
 80013f8:	f7ff fde8 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80013fc:	2013      	movs	r0, #19
 80013fe:	f7ff fe0f 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);
 8001402:	20c9      	movs	r0, #201	@ 0xc9
 8001404:	f7ff fde2 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001408:	2022      	movs	r0, #34	@ 0x22
 800140a:	f7ff fe09 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);
 800140e:	20f0      	movs	r0, #240	@ 0xf0
 8001410:	f7ff fddc 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001414:	2045      	movs	r0, #69	@ 0x45
 8001416:	f7ff fe03 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 800141a:	2009      	movs	r0, #9
 800141c:	f7ff fe00 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001420:	2008      	movs	r0, #8
 8001422:	f7ff fdfd 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001426:	2008      	movs	r0, #8
 8001428:	f7ff fdfa 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 800142c:	2026      	movs	r0, #38	@ 0x26
 800142e:	f7ff fdf7 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x2A);
 8001432:	202a      	movs	r0, #42	@ 0x2a
 8001434:	f7ff fdf4 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF1);
 8001438:	20f1      	movs	r0, #241	@ 0xf1
 800143a:	f7ff fdc7 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x43);
 800143e:	2043      	movs	r0, #67	@ 0x43
 8001440:	f7ff fdee 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001444:	2070      	movs	r0, #112	@ 0x70
 8001446:	f7ff fdeb 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x72);
 800144a:	2072      	movs	r0, #114	@ 0x72
 800144c:	f7ff fde8 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x36);
 8001450:	2036      	movs	r0, #54	@ 0x36
 8001452:	f7ff fde5 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x37);
 8001456:	2037      	movs	r0, #55	@ 0x37
 8001458:	f7ff fde2 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x6F);
 800145c:	206f      	movs	r0, #111	@ 0x6f
 800145e:	f7ff fddf 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF2);
 8001462:	20f2      	movs	r0, #242	@ 0xf2
 8001464:	f7ff fdb2 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001468:	2045      	movs	r0, #69	@ 0x45
 800146a:	f7ff fdd9 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 800146e:	2009      	movs	r0, #9
 8001470:	f7ff fdd6 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001474:	2008      	movs	r0, #8
 8001476:	f7ff fdd3 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800147a:	2008      	movs	r0, #8
 800147c:	f7ff fdd0 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8001480:	2026      	movs	r0, #38	@ 0x26
 8001482:	f7ff fdcd 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x2A);
 8001486:	202a      	movs	r0, #42	@ 0x2a
 8001488:	f7ff fdca 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF3);
 800148c:	20f3      	movs	r0, #243	@ 0xf3
 800148e:	f7ff fd9d 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x43);
 8001492:	2043      	movs	r0, #67	@ 0x43
 8001494:	f7ff fdc4 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001498:	2070      	movs	r0, #112	@ 0x70
 800149a:	f7ff fdc1 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x72);
 800149e:	2072      	movs	r0, #114	@ 0x72
 80014a0:	f7ff fdbe 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x36);
 80014a4:	2036      	movs	r0, #54	@ 0x36
 80014a6:	f7ff fdbb 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x37);
 80014aa:	2037      	movs	r0, #55	@ 0x37
 80014ac:	f7ff fdb8 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x6F);
 80014b0:	206f      	movs	r0, #111	@ 0x6f
 80014b2:	f7ff fdb5 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xCD);
 80014b6:	20cd      	movs	r0, #205	@ 0xcd
 80014b8:	f7ff fd88 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);
 80014bc:	2063      	movs	r0, #99	@ 0x63
 80014be:	f7ff fdaf 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x70);
 80014c2:	2070      	movs	r0, #112	@ 0x70
 80014c4:	f7ff fd82 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 80014c8:	2007      	movs	r0, #7
 80014ca:	f7ff fda9 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80014ce:	2007      	movs	r0, #7
 80014d0:	f7ff fda6 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 80014d4:	2004      	movs	r0, #4
 80014d6:	f7ff fda3 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 80014da:	200e      	movs	r0, #14
 80014dc:	f7ff fda0 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 80014e0:	200f      	movs	r0, #15
 80014e2:	f7ff fd9d 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80014e6:	2009      	movs	r0, #9
 80014e8:	f7ff fd9a 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80014ec:	2007      	movs	r0, #7
 80014ee:	f7ff fd97 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80014f2:	2008      	movs	r0, #8
 80014f4:	f7ff fd94 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f7ff fd91 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);
 80014fe:	20e8      	movs	r0, #232	@ 0xe8
 8001500:	f7ff fd64 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001504:	2034      	movs	r0, #52	@ 0x34
 8001506:	f7ff fd8b 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);
 800150a:	2062      	movs	r0, #98	@ 0x62
 800150c:	f7ff fd5e 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001510:	2018      	movs	r0, #24
 8001512:	f7ff fd85 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8001516:	200d      	movs	r0, #13
 8001518:	f7ff fd82 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800151c:	2071      	movs	r0, #113	@ 0x71
 800151e:	f7ff fd7f 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001522:	20ed      	movs	r0, #237	@ 0xed
 8001524:	f7ff fd7c 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001528:	2070      	movs	r0, #112	@ 0x70
 800152a:	f7ff fd79 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800152e:	2070      	movs	r0, #112	@ 0x70
 8001530:	f7ff fd76 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001534:	2018      	movs	r0, #24
 8001536:	f7ff fd73 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 800153a:	200f      	movs	r0, #15
 800153c:	f7ff fd70 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001540:	2071      	movs	r0, #113	@ 0x71
 8001542:	f7ff fd6d 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001546:	20ef      	movs	r0, #239	@ 0xef
 8001548:	f7ff fd6a 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800154c:	2070      	movs	r0, #112	@ 0x70
 800154e:	f7ff fd67 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001552:	2070      	movs	r0, #112	@ 0x70
 8001554:	f7ff fd64 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);
 8001558:	2063      	movs	r0, #99	@ 0x63
 800155a:	f7ff fd37 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800155e:	2018      	movs	r0, #24
 8001560:	f7ff fd5e 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001564:	2011      	movs	r0, #17
 8001566:	f7ff fd5b 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800156a:	2071      	movs	r0, #113	@ 0x71
 800156c:	f7ff fd58 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001570:	20f1      	movs	r0, #241	@ 0xf1
 8001572:	f7ff fd55 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001576:	2070      	movs	r0, #112	@ 0x70
 8001578:	f7ff fd52 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800157c:	2070      	movs	r0, #112	@ 0x70
 800157e:	f7ff fd4f 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001582:	2018      	movs	r0, #24
 8001584:	f7ff fd4c 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8001588:	2013      	movs	r0, #19
 800158a:	f7ff fd49 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800158e:	2071      	movs	r0, #113	@ 0x71
 8001590:	f7ff fd46 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001594:	20f3      	movs	r0, #243	@ 0xf3
 8001596:	f7ff fd43 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800159a:	2070      	movs	r0, #112	@ 0x70
 800159c:	f7ff fd40 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80015a0:	2070      	movs	r0, #112	@ 0x70
 80015a2:	f7ff fd3d 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);
 80015a6:	2064      	movs	r0, #100	@ 0x64
 80015a8:	f7ff fd10 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 80015ac:	2028      	movs	r0, #40	@ 0x28
 80015ae:	f7ff fd37 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 80015b2:	2029      	movs	r0, #41	@ 0x29
 80015b4:	f7ff fd34 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80015b8:	20f1      	movs	r0, #241	@ 0xf1
 80015ba:	f7ff fd31 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fd2e 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80015c4:	20f1      	movs	r0, #241	@ 0xf1
 80015c6:	f7ff fd2b 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fd28 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80015d0:	2007      	movs	r0, #7
 80015d2:	f7ff fd25 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);
 80015d6:	2066      	movs	r0, #102	@ 0x66
 80015d8:	f7ff fcf8 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 80015dc:	203c      	movs	r0, #60	@ 0x3c
 80015de:	f7ff fd1f 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fd1c 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 80015e8:	20cd      	movs	r0, #205	@ 0xcd
 80015ea:	f7ff fd19 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 80015ee:	2067      	movs	r0, #103	@ 0x67
 80015f0:	f7ff fd16 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80015f4:	2045      	movs	r0, #69	@ 0x45
 80015f6:	f7ff fd13 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80015fa:	2045      	movs	r0, #69	@ 0x45
 80015fc:	f7ff fd10 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001600:	2010      	movs	r0, #16
 8001602:	f7ff fd0d 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff fd0a 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fd07 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fd04 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);
 8001618:	2067      	movs	r0, #103	@ 0x67
 800161a:	f7ff fcd7 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fcfe 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001624:	203c      	movs	r0, #60	@ 0x3c
 8001626:	f7ff fcfb 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fcf8 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fcf5 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fcf2 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff fcef 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001642:	2054      	movs	r0, #84	@ 0x54
 8001644:	f7ff fcec 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001648:	2010      	movs	r0, #16
 800164a:	f7ff fce9 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 800164e:	2032      	movs	r0, #50	@ 0x32
 8001650:	f7ff fce6 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001654:	2098      	movs	r0, #152	@ 0x98
 8001656:	f7ff fce3 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);
 800165a:	2074      	movs	r0, #116	@ 0x74
 800165c:	f7ff fcb6 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001660:	2010      	movs	r0, #16
 8001662:	f7ff fcdd 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);
 8001666:	2085      	movs	r0, #133	@ 0x85
 8001668:	f7ff fcda 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 800166c:	2080      	movs	r0, #128	@ 0x80
 800166e:	f7ff fcd7 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff fcd4 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fcd1 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 800167e:	204e      	movs	r0, #78	@ 0x4e
 8001680:	f7ff fcce 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fccb 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x98);
 800168a:	2098      	movs	r0, #152	@ 0x98
 800168c:	f7ff fc9e 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8001690:	203e      	movs	r0, #62	@ 0x3e
 8001692:	f7ff fcc5 	bl	8001020 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001696:	2007      	movs	r0, #7
 8001698:	f7ff fcc2 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);
 800169c:	2035      	movs	r0, #53	@ 0x35
 800169e:	f7ff fc95 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 80016a2:	2021      	movs	r0, #33	@ 0x21
 80016a4:	f7ff fc92 	bl	8000fcc <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xF6);
 80016a8:	20f6      	movs	r0, #246	@ 0xf6
 80016aa:	f7ff fc8f 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0b11001000);
 80016ae:	20c8      	movs	r0, #200	@ 0xc8
 80016b0:	f7ff fcb6 	bl	8001020 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xB0);
 80016b4:	20b0      	movs	r0, #176	@ 0xb0
 80016b6:	f7ff fc89 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0b01100001);
 80016ba:	2061      	movs	r0, #97	@ 0x61
 80016bc:	f7ff fcb0 	bl	8001020 <LCD_1IN28_SendData_8Bit>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <LCD_1IN28_SetAttributes>:
/********************************************************************************
 function:	Set the resolution and scanning method of the screen
 parameter:
 Scan_dir:   Scan direction
 ********************************************************************************/
static void LCD_1IN28_SetAttributes(uint8_t scan_dir) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	LCD_1IN28.SCAN_DIR = scan_dir;
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <LCD_1IN28_SetAttributes+0x54>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	7113      	strb	r3, [r2, #4]
	uint8_t MemoryAccessReg = 0x08;
 80016d4:	2308      	movs	r3, #8
 80016d6:	73fb      	strb	r3, [r7, #15]

	//Get GRAM and LCD width and height
	if (scan_dir == HORIZONTAL) {
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d108      	bne.n	80016f0 <LCD_1IN28_SetAttributes+0x2c>
		LCD_1IN28.HEIGHT = LCD_1IN28_HEIGHT;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <LCD_1IN28_SetAttributes+0x54>)
 80016e0:	22f0      	movs	r2, #240	@ 0xf0
 80016e2:	805a      	strh	r2, [r3, #2]
		LCD_1IN28.WIDTH = LCD_1IN28_WIDTH;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <LCD_1IN28_SetAttributes+0x54>)
 80016e6:	22f0      	movs	r2, #240	@ 0xf0
 80016e8:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0XC8;
 80016ea:	23c8      	movs	r3, #200	@ 0xc8
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	e007      	b.n	8001700 <LCD_1IN28_SetAttributes+0x3c>
	} else {
		LCD_1IN28.HEIGHT = LCD_1IN28_WIDTH;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <LCD_1IN28_SetAttributes+0x54>)
 80016f2:	22f0      	movs	r2, #240	@ 0xf0
 80016f4:	805a      	strh	r2, [r3, #2]
		LCD_1IN28.WIDTH = LCD_1IN28_HEIGHT;
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <LCD_1IN28_SetAttributes+0x54>)
 80016f8:	22f0      	movs	r2, #240	@ 0xf0
 80016fa:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0X68;
 80016fc:	2368      	movs	r3, #104	@ 0x68
 80016fe:	73fb      	strb	r3, [r7, #15]
	}

	// Set the read / write scan direction of the frame memory
	LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8001700:	2036      	movs	r0, #54	@ 0x36
 8001702:	f7ff fc63 	bl	8000fcc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fc89 	bl	8001020 <LCD_1IN28_SendData_8Bit>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2004020c 	.word	0x2004020c

0800171c <screen_init>:

/********************************************************************************
 function :	Initialize the lcd
 parameter:
 ********************************************************************************/
void screen_init(uint8_t scan_dir) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	SET_DC_HIGH;
 8001726:	2201      	movs	r2, #1
 8001728:	2120      	movs	r1, #32
 800172a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172e:	f001 fa2d 	bl	8002b8c <HAL_GPIO_WritePin>
	SET_CS_HIGH;
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001738:	480a      	ldr	r0, [pc, #40]	@ (8001764 <screen_init+0x48>)
 800173a:	f001 fa27 	bl	8002b8c <HAL_GPIO_WritePin>
	SET_RST_HIGH;
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001744:	4807      	ldr	r0, [pc, #28]	@ (8001764 <screen_init+0x48>)
 8001746:	f001 fa21 	bl	8002b8c <HAL_GPIO_WritePin>
	//Hardware reset
	screen_reset();
 800174a:	f7ff fe03 	bl	8001354 <screen_reset>
	//Set the resolution and scanning method of the screen
	LCD_1IN28_SetAttributes(scan_dir);
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ffb7 	bl	80016c4 <LCD_1IN28_SetAttributes>
	//Set the initialization register
	LCD_1IN28_InitReg();
 8001756:	f7ff fe1f 	bl	8001398 <LCD_1IN28_InitReg>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	48000400 	.word	0x48000400

08001768 <screen_clear>:

/******************************************************************************
 function :	Clear screen
 parameter:
 ******************************************************************************/
void screen_clear(uint16_t color) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 240; i++) {
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e016      	b.n	80017a6 <screen_clear+0x3e>
		for (int j = 0; j < 240; j++) {
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	e00d      	b.n	800179a <screen_clear+0x32>
			pixels[i][j] = color;
 800177e:	4910      	ldr	r1, [pc, #64]	@ (80017c0 <screen_clear+0x58>)
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4613      	mov	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4413      	add	r3, r2
 800178e:	88fa      	ldrh	r2, [r7, #6]
 8001790:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < 240; j++) {
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	3301      	adds	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2bef      	cmp	r3, #239	@ 0xef
 800179e:	ddee      	ble.n	800177e <screen_clear+0x16>
    for (int i = 0; i < 240; i++) {
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2bef      	cmp	r3, #239	@ 0xef
 80017aa:	dde5      	ble.n	8001778 <screen_clear+0x10>
		}
	}
	_update_delta(0, 0, 239, 239);
 80017ac:	23ef      	movs	r3, #239	@ 0xef
 80017ae:	22ef      	movs	r2, #239	@ 0xef
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fc96 	bl	80010e4 <_update_delta>
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2004021c 	.word	0x2004021c

080017c4 <screen_set_point>:

void screen_set_point(uint16_t x, uint16_t y, uint16_t color) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
 80017ce:	460b      	mov	r3, r1
 80017d0:	80bb      	strh	r3, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	807b      	strh	r3, [r7, #2]
	pixels[y][x] = color;
 80017d6:	88ba      	ldrh	r2, [r7, #4]
 80017d8:	88f9      	ldrh	r1, [r7, #6]
 80017da:	4809      	ldr	r0, [pc, #36]	@ (8001800 <screen_set_point+0x3c>)
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	440b      	add	r3, r1
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	_update_delta(x, y, x, y);
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	88fa      	ldrh	r2, [r7, #6]
 80017f0:	88b9      	ldrh	r1, [r7, #4]
 80017f2:	88f8      	ldrh	r0, [r7, #6]
 80017f4:	f7ff fc76 	bl	80010e4 <_update_delta>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2004021c 	.word	0x2004021c

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180a:	f000 feae 	bl	800256a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180e:	f000 f829 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001812:	f000 f9d7 	bl	8001bc4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001816:	f000 f8b5 	bl	8001984 <MX_TIM1_Init>
  MX_SPI1_Init();
 800181a:	f000 f875 	bl	8001908 <MX_SPI1_Init>
  MX_TIM4_Init();
 800181e:	f000 f95f 	bl	8001ae0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Paint_SetDisplayFunction(&screen_set_point);
 8001822:	480e      	ldr	r0, [pc, #56]	@ (800185c <main+0x58>)
 8001824:	f7ff faca 	bl	8000dbc <Paint_SetDisplayFunction>
  Paint_NewImage(240, 240, 0, 0);
 8001828:	2300      	movs	r3, #0
 800182a:	2200      	movs	r2, #0
 800182c:	21f0      	movs	r1, #240	@ 0xf0
 800182e:	20f0      	movs	r0, #240	@ 0xf0
 8001830:	f7ff fa78 	bl	8000d24 <Paint_NewImage>
  screen_init(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff ff71 	bl	800171c <screen_init>
  screen_clear(0xFFFF);
 800183a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800183e:	f7ff ff93 	bl	8001768 <screen_clear>
  draw_img_c(30, 30, austin);
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <main+0x5c>)
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	9200      	str	r2, [sp, #0]
 8001848:	cb0c      	ldmia	r3, {r2, r3}
 800184a:	211e      	movs	r1, #30
 800184c:	201e      	movs	r0, #30
 800184e:	f7ff fb75 	bl	8000f3c <draw_img_c>
  screen_render();
 8001852:	f7ff fc99 	bl	8001188 <screen_render>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001856:	bf00      	nop
 8001858:	e7fd      	b.n	8001856 <main+0x52>
 800185a:	bf00      	nop
 800185c:	080017c5 	.word	0x080017c5
 8001860:	0801d88c 	.word	0x0801d88c

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b096      	sub	sp, #88	@ 0x58
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2244      	movs	r2, #68	@ 0x44
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f004 ffae 	bl	80067d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001886:	2000      	movs	r0, #0
 8001888:	f001 f9b8 	bl	8002bfc <HAL_PWREx_ControlVoltageScaling>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001892:	f000 fbb5 	bl	8002000 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001896:	2310      	movs	r3, #16
 8001898:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800189a:	2301      	movs	r3, #1
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80018a2:	23b0      	movs	r3, #176	@ 0xb0
 80018a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018aa:	2301      	movs	r3, #1
 80018ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 80018ae:	2303      	movs	r3, #3
 80018b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 80018b2:	230f      	movs	r3, #15
 80018b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018be:	2302      	movs	r3, #2
 80018c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 fa4c 	bl	8002d64 <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018d2:	f000 fb95 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2303      	movs	r3, #3
 80018dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	2105      	movs	r1, #5
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fe52 	bl	8003598 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018fa:	f000 fb81 	bl	8002000 <Error_Handler>
  }
}
 80018fe:	bf00      	nop
 8001900:	3758      	adds	r7, #88	@ 0x58
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_SPI1_Init+0x74>)
 800190e:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <MX_SPI1_Init+0x78>)
 8001910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <MX_SPI1_Init+0x74>)
 8001914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_SPI1_Init+0x74>)
 800191c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001920:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001922:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_SPI1_Init+0x74>)
 8001924:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001928:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_SPI1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <MX_SPI1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_SPI1_Init+0x74>)
 8001938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001944:	4b0d      	ldr	r3, [pc, #52]	@ (800197c <MX_SPI1_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_SPI1_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001950:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <MX_SPI1_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_SPI1_Init+0x74>)
 8001958:	2207      	movs	r2, #7
 800195a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800195c:	4b07      	ldr	r3, [pc, #28]	@ (800197c <MX_SPI1_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_SPI1_Init+0x74>)
 8001964:	2208      	movs	r2, #8
 8001966:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_SPI1_Init+0x74>)
 800196a:	f002 f89b 	bl	8003aa4 <HAL_SPI_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001974:	f000 fb44 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2005c41c 	.word	0x2005c41c
 8001980:	40013000 	.word	0x40013000

08001984 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b09a      	sub	sp, #104	@ 0x68
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	222c      	movs	r2, #44	@ 0x2c
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 ff08 	bl	80067d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019c4:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 80019c6:	4a45      	ldr	r2, [pc, #276]	@ (8001adc <MX_TIM1_Init+0x158>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 299;
 80019ca:	4b43      	ldr	r3, [pc, #268]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 80019cc:	f240 122b 	movw	r2, #299	@ 0x12b
 80019d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 80019da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019e6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ec:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019f2:	4839      	ldr	r0, [pc, #228]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 80019f4:	f002 fbd4 	bl	80041a0 <HAL_TIM_Base_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80019fe:	f000 faff 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a06:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4832      	ldr	r0, [pc, #200]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 8001a10:	f002 fe90 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001a1a:	f000 faf1 	bl	8002000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a1e:	482e      	ldr	r0, [pc, #184]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 8001a20:	f002 fc15 	bl	800424e <HAL_TIM_PWM_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001a2a:	f000 fae9 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a3a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4825      	ldr	r0, [pc, #148]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 8001a42:	f003 fc7b 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001a4c:	f000 fad8 	bl	8002000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a50:	2360      	movs	r3, #96	@ 0x60
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a70:	2200      	movs	r2, #0
 8001a72:	4619      	mov	r1, r3
 8001a74:	4818      	ldr	r0, [pc, #96]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 8001a76:	f002 fd49 	bl	800450c <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001a80:	f000 fabe 	bl	8002000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4807      	ldr	r0, [pc, #28]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 8001aba:	f003 fcc7 	bl	800544c <HAL_TIMEx_ConfigBreakDeadTime>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001ac4:	f000 fa9c 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ac8:	4803      	ldr	r0, [pc, #12]	@ (8001ad8 <MX_TIM1_Init+0x154>)
 8001aca:	f000 fbc7 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001ace:	bf00      	nop
 8001ad0:	3768      	adds	r7, #104	@ 0x68
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2005c480 	.word	0x2005c480
 8001adc:	40012c00 	.word	0x40012c00

08001ae0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	@ 0x30
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001bc0 <MX_TIM4_Init+0xe0>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b12:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b32:	4822      	ldr	r0, [pc, #136]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b34:	f002 fb34 	bl	80041a0 <HAL_TIM_Base_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001b3e:	f000 fa5f 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b46:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	481b      	ldr	r0, [pc, #108]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b50:	f002 fdf0 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b5a:	f000 fa51 	bl	8002000 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b5e:	4817      	ldr	r0, [pc, #92]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b60:	f002 fbd6 	bl	8004310 <HAL_TIM_IC_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001b6a:	f000 fa49 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480f      	ldr	r0, [pc, #60]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001b7e:	f003 fbdd 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001b88:	f000 fa3a 	bl	8002000 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b90:	2301      	movs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <MX_TIM4_Init+0xdc>)
 8001ba4:	f002 fc15 	bl	80043d2 <HAL_TIM_IC_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001bae:	f000 fa27 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	@ 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2005c4cc 	.word	0x2005c4cc
 8001bc0:	40000800 	.word	0x40000800

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	@ 0x38
 8001bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bda:	4bb4      	ldr	r3, [pc, #720]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4ab3      	ldr	r2, [pc, #716]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4bb1      	ldr	r3, [pc, #708]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	4bae      	ldr	r3, [pc, #696]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4aad      	ldr	r2, [pc, #692]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4bab      	ldr	r3, [pc, #684]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0a:	4ba8      	ldr	r3, [pc, #672]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	4aa7      	ldr	r2, [pc, #668]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c10:	f043 0320 	orr.w	r3, r3, #32
 8001c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c16:	4ba5      	ldr	r3, [pc, #660]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c22:	4ba2      	ldr	r3, [pc, #648]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	4aa1      	ldr	r2, [pc, #644]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2e:	4b9f      	ldr	r3, [pc, #636]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b9c      	ldr	r3, [pc, #624]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	4a9b      	ldr	r2, [pc, #620]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c46:	4b99      	ldr	r3, [pc, #612]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b96      	ldr	r3, [pc, #600]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	4a95      	ldr	r2, [pc, #596]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5e:	4b93      	ldr	r3, [pc, #588]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6a:	4b90      	ldr	r3, [pc, #576]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	4a8f      	ldr	r2, [pc, #572]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c76:	4b8d      	ldr	r3, [pc, #564]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c82:	4b8a      	ldr	r3, [pc, #552]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	4a89      	ldr	r2, [pc, #548]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8e:	4b87      	ldr	r3, [pc, #540]	@ (8001eac <MX_GPIO_Init+0x2e8>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001c9a:	f001 f853 	bl	8002d44 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCRN_DC_Pin|RST_Screen_Pin|DC_Screen_Pin|CS_S_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 6162 	mov.w	r1, #3616	@ 0xe20
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca8:	f000 ff70 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_Shutdown_GPIO_Port, ACC_Shutdown_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2104      	movs	r1, #4
 8001cb0:	487f      	ldr	r0, [pc, #508]	@ (8001eb0 <MX_GPIO_Init+0x2ec>)
 8001cb2:	f000 ff6b 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCRN_CS_Pin|SCRN_RST_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001cbc:	487d      	ldr	r0, [pc, #500]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001cbe:	f000 ff65 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001cd2:	230d      	movs	r3, #13
 8001cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4876      	ldr	r0, [pc, #472]	@ (8001eb8 <MX_GPIO_Init+0x2f4>)
 8001cde:	f000 fdc3 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	486f      	ldr	r0, [pc, #444]	@ (8001ebc <MX_GPIO_Init+0x2f8>)
 8001cfe:	f000 fdb3 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d12:	230d      	movs	r3, #13
 8001d14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4867      	ldr	r0, [pc, #412]	@ (8001ebc <MX_GPIO_Init+0x2f8>)
 8001d1e:	f000 fda3 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d22:	230f      	movs	r3, #15
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d26:	230b      	movs	r3, #11
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d32:	4619      	mov	r1, r3
 8001d34:	4862      	ldr	r0, [pc, #392]	@ (8001ec0 <MX_GPIO_Init+0x2fc>)
 8001d36:	f000 fd97 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_Haptic_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_Haptic_Pin;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TIM2_CH1_Haptic_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d58:	f000 fd86 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d60:	230b      	movs	r3, #11
 8001d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d72:	f000 fd79 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCRN_DC_Pin RST_Screen_Pin DC_Screen_Pin CS_S_Pin */
  GPIO_InitStruct.Pin = SCRN_DC_Pin|RST_Screen_Pin|DC_Screen_Pin|CS_S_Pin;
 8001d76:	f44f 6362 	mov.w	r3, #3616	@ 0xe20
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d92:	f000 fd69 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d96:	2330      	movs	r3, #48	@ 0x30
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001da6:	2307      	movs	r3, #7
 8001da8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	4843      	ldr	r0, [pc, #268]	@ (8001ec0 <MX_GPIO_Init+0x2fc>)
 8001db2:	f000 fd59 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db6:	2301      	movs	r3, #1
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4838      	ldr	r0, [pc, #224]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001dd2:	f000 fd49 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dda:	230b      	movs	r3, #11
 8001ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	4832      	ldr	r0, [pc, #200]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001dea:	f000 fd3d 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dee:	2304      	movs	r3, #4
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df2:	2303      	movs	r3, #3
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfe:	4619      	mov	r1, r3
 8001e00:	482c      	ldr	r0, [pc, #176]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001e02:	f000 fd31 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4824      	ldr	r0, [pc, #144]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001e24:	f000 fd20 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001e28:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e3a:	230d      	movs	r3, #13
 8001e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e42:	4619      	mov	r1, r3
 8001e44:	481b      	ldr	r0, [pc, #108]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001e46:	f000 fd0f 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001e5c:	230e      	movs	r3, #14
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4813      	ldr	r0, [pc, #76]	@ (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001e68:	f000 fcfe 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e6c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <MX_GPIO_Init+0x300>)
 8001e8a:	f000 fced 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e8e:	2340      	movs	r3, #64	@ 0x40
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e9e:	230d      	movs	r3, #13
 8001ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	e00e      	b.n	8001ec8 <MX_GPIO_Init+0x304>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	48000c00 	.word	0x48000c00
 8001eb4:	48000400 	.word	0x48000400
 8001eb8:	48001000 	.word	0x48001000
 8001ebc:	48001400 	.word	0x48001400
 8001ec0:	48000800 	.word	0x48000800
 8001ec4:	48001800 	.word	0x48001800
 8001ec8:	484a      	ldr	r0, [pc, #296]	@ (8001ff4 <MX_GPIO_Init+0x430>)
 8001eca:	f000 fccd 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4842      	ldr	r0, [pc, #264]	@ (8001ff4 <MX_GPIO_Init+0x430>)
 8001eea:	f000 fcbd 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8001eee:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f00:	230c      	movs	r3, #12
 8001f02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	483a      	ldr	r0, [pc, #232]	@ (8001ff4 <MX_GPIO_Init+0x430>)
 8001f0c:	f000 fcac 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001f10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f22:	2306      	movs	r3, #6
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4831      	ldr	r0, [pc, #196]	@ (8001ff4 <MX_GPIO_Init+0x430>)
 8001f2e:	f000 fc9b 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f32:	2301      	movs	r3, #1
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f42:	2309      	movs	r3, #9
 8001f44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	482a      	ldr	r0, [pc, #168]	@ (8001ff8 <MX_GPIO_Init+0x434>)
 8001f4e:	f000 fc8b 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_Shutdown_Pin */
  GPIO_InitStruct.Pin = ACC_Shutdown_Pin;
 8001f52:	2304      	movs	r3, #4
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACC_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f66:	4619      	mov	r1, r3
 8001f68:	4823      	ldr	r0, [pc, #140]	@ (8001ff8 <MX_GPIO_Init+0x434>)
 8001f6a:	f000 fc7d 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001f6e:	2328      	movs	r3, #40	@ 0x28
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	481b      	ldr	r0, [pc, #108]	@ (8001ff8 <MX_GPIO_Init+0x434>)
 8001f8a:	f000 fc6d 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f8e:	2310      	movs	r3, #16
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f9e:	2306      	movs	r3, #6
 8001fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4814      	ldr	r0, [pc, #80]	@ (8001ffc <MX_GPIO_Init+0x438>)
 8001faa:	f000 fc5d 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fae:	23c0      	movs	r3, #192	@ 0xc0
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <MX_GPIO_Init+0x438>)
 8001fca:	f000 fc4d 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCRN_CS_Pin SCRN_RST_Pin */
  GPIO_InitStruct.Pin = SCRN_CS_Pin|SCRN_RST_Pin;
 8001fce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <MX_GPIO_Init+0x438>)
 8001fe8:	f000 fc3e 	bl	8002868 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001fec:	bf00      	nop
 8001fee:	3738      	adds	r7, #56	@ 0x38
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	48000800 	.word	0x48000800
 8001ff8:	48000c00 	.word	0x48000c00
 8001ffc:	48000400 	.word	0x48000400

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <Error_Handler+0x8>

0800200c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <HAL_MspInit+0x44>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002016:	4a0e      	ldr	r2, [pc, #56]	@ (8002050 <HAL_MspInit+0x44>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6613      	str	r3, [r2, #96]	@ 0x60
 800201e:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_MspInit+0x44>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <HAL_MspInit+0x44>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	4a08      	ldr	r2, [pc, #32]	@ (8002050 <HAL_MspInit+0x44>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	6593      	str	r3, [r2, #88]	@ 0x58
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_MspInit+0x44>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	@ 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a25      	ldr	r2, [pc, #148]	@ (8002108 <HAL_SPI_MspInit+0xb4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d144      	bne.n	8002100 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002076:	4b25      	ldr	r3, [pc, #148]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207a:	4a24      	ldr	r2, [pc, #144]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 800207c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002080:	6613      	str	r3, [r2, #96]	@ 0x60
 8002082:	4b22      	ldr	r3, [pc, #136]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a1e      	ldr	r2, [pc, #120]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4a18      	ldr	r2, [pc, #96]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <HAL_SPI_MspInit+0xb8>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80020be:	2350      	movs	r3, #80	@ 0x50
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ce:	2305      	movs	r3, #5
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020dc:	f000 fbc4 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80020e0:	2328      	movs	r3, #40	@ 0x28
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020f0:	2305      	movs	r3, #5
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4805      	ldr	r0, [pc, #20]	@ (8002110 <HAL_SPI_MspInit+0xbc>)
 80020fc:	f000 fbb4 	bl	8002868 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	@ 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40013000 	.word	0x40013000
 800210c:	40021000 	.word	0x40021000
 8002110:	48000400 	.word	0x48000400

08002114 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	@ 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a45      	ldr	r2, [pc, #276]	@ (8002248 <HAL_TIM_Base_MspInit+0x134>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d13a      	bne.n	80021ac <HAL_TIM_Base_MspInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002136:	4b45      	ldr	r3, [pc, #276]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213a:	4a44      	ldr	r2, [pc, #272]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 800213c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002140:	6613      	str	r3, [r2, #96]	@ 0x60
 8002142:	4b42      	ldr	r3, [pc, #264]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800214e:	4b3f      	ldr	r3, [pc, #252]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	4a3e      	ldr	r2, [pc, #248]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215a:	4b3c      	ldr	r3, [pc, #240]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697b      	ldr	r3, [r7, #20]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8002166:	f44f 5322 	mov.w	r3, #10368	@ 0x2880
 800216a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002178:	2301      	movs	r3, #1
 800217a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	4619      	mov	r1, r3
 8002182:	4833      	ldr	r0, [pc, #204]	@ (8002250 <HAL_TIM_Base_MspInit+0x13c>)
 8002184:	f000 fb70 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002188:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800219a:	2303      	movs	r3, #3
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	482a      	ldr	r0, [pc, #168]	@ (8002250 <HAL_TIM_Base_MspInit+0x13c>)
 80021a6:	f000 fb5f 	bl	8002868 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021aa:	e049      	b.n	8002240 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM4)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a28      	ldr	r2, [pc, #160]	@ (8002254 <HAL_TIM_Base_MspInit+0x140>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d144      	bne.n	8002240 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021b6:	4b25      	ldr	r3, [pc, #148]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ba:	4a24      	ldr	r2, [pc, #144]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ce:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021d4:	f043 0308 	orr.w	r3, r3, #8
 80021d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021da:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	4a18      	ldr	r2, [pc, #96]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_TIM_Base_MspInit+0x138>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80021fe:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002210:	2302      	movs	r3, #2
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	480f      	ldr	r0, [pc, #60]	@ (8002258 <HAL_TIM_Base_MspInit+0x144>)
 800221c:	f000 fb24 	bl	8002868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002220:	2301      	movs	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002230:	2302      	movs	r3, #2
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4805      	ldr	r0, [pc, #20]	@ (8002250 <HAL_TIM_Base_MspInit+0x13c>)
 800223c:	f000 fb14 	bl	8002868 <HAL_GPIO_Init>
}
 8002240:	bf00      	nop
 8002242:	3730      	adds	r7, #48	@ 0x30
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40021000 	.word	0x40021000
 8002250:	48001000 	.word	0x48001000
 8002254:	40000800 	.word	0x40000800
 8002258:	48000c00 	.word	0x48000c00

0800225c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	@ 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a20      	ldr	r2, [pc, #128]	@ (80022fc <HAL_TIM_MspPostInit+0xa0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d13a      	bne.n	80022f4 <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800227e:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <HAL_TIM_MspPostInit+0xa4>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	4a1f      	ldr	r2, [pc, #124]	@ (8002300 <HAL_TIM_MspPostInit+0xa4>)
 8002284:	f043 0310 	orr.w	r3, r3, #16
 8002288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_TIM_MspPostInit+0xa4>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <HAL_TIM_MspPostInit+0xa4>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <HAL_TIM_MspPostInit+0xa4>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a2:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_TIM_MspPostInit+0xa4>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 80022ae:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	480e      	ldr	r0, [pc, #56]	@ (8002304 <HAL_TIM_MspPostInit+0xa8>)
 80022cc:	f000 facc 	bl	8002868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f0:	f000 faba 	bl	8002868 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	@ 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40021000 	.word	0x40021000
 8002304:	48001000 	.word	0x48001000

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <NMI_Handler+0x4>

08002310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <MemManage_Handler+0x4>

08002320 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <UsageFault_Handler+0x4>

08002330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235e:	f000 f959 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}

08002366 <_getpid>:
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
 800236a:	2301      	movs	r3, #1
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_kill>:
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
 8002380:	f004 fa8a 	bl	8006898 <__errno>
 8002384:	4603      	mov	r3, r0
 8002386:	2216      	movs	r2, #22
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_exit>:
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	f04f 31ff 	mov.w	r1, #4294967295
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ffe7 	bl	8002376 <_kill>
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <_exit+0x12>

080023ac <_read>:
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e00a      	b.n	80023d4 <_read+0x28>
 80023be:	f3af 8000 	nop.w
 80023c2:	4601      	mov	r1, r0
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbf0      	blt.n	80023be <_read+0x12>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_write>:
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e009      	b.n	800240c <_write+0x26>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	60ba      	str	r2, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f3af 8000 	nop.w
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	dbf1      	blt.n	80023f8 <_write+0x12>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_close>:
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_fstat>:
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	2300      	movs	r3, #0
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_isatty>:
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	2301      	movs	r3, #1
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_lseek>:
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	2300      	movs	r3, #0
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <_sbrk>:
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	4a14      	ldr	r2, [pc, #80]	@ (80024e4 <_sbrk+0x5c>)
 8002492:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <_sbrk+0x60>)
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x22>
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <_sbrk+0x64>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	@ (80024f0 <_sbrk+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <_sbrk+0x40>
 80024b8:	f004 f9ee 	bl	8006898 <__errno>
 80024bc:	4603      	mov	r3, r0
 80024be:	220c      	movs	r2, #12
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	e009      	b.n	80024dc <_sbrk+0x54>
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <_sbrk+0x64>)
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200a0000 	.word	0x200a0000
 80024e8:	00000400 	.word	0x00000400
 80024ec:	2005c518 	.word	0x2005c518
 80024f0:	2005c670 	.word	0x2005c670

080024f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <SystemInit+0x20>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <SystemInit+0x20>)
 8002500:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002504:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <Reset_Handler>:
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002550 <LoopForever+0x2>
 800251c:	f7ff ffea 	bl	80024f4 <SystemInit>
 8002520:	480c      	ldr	r0, [pc, #48]	@ (8002554 <LoopForever+0x6>)
 8002522:	490d      	ldr	r1, [pc, #52]	@ (8002558 <LoopForever+0xa>)
 8002524:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <LoopForever+0xe>)
 8002526:	2300      	movs	r3, #0
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:
 800252a:	58d4      	ldr	r4, [r2, r3]
 800252c:	50c4      	str	r4, [r0, r3]
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:
 8002530:	18c4      	adds	r4, r0, r3
 8002532:	428c      	cmp	r4, r1
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
 8002536:	4a0a      	ldr	r2, [pc, #40]	@ (8002560 <LoopForever+0x12>)
 8002538:	4c0a      	ldr	r4, [pc, #40]	@ (8002564 <LoopForever+0x16>)
 800253a:	2300      	movs	r3, #0
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:
 8002542:	42a2      	cmp	r2, r4
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>
 8002546:	f004 f9ad 	bl	80068a4 <__libc_init_array>
 800254a:	f7ff f95b 	bl	8001804 <main>

0800254e <LoopForever>:
 800254e:	e7fe      	b.n	800254e <LoopForever>
 8002550:	200a0000 	.word	0x200a0000
 8002554:	20040000 	.word	0x20040000
 8002558:	200401d4 	.word	0x200401d4
 800255c:	0801dd14 	.word	0x0801dd14
 8002560:	200401d4 	.word	0x200401d4
 8002564:	2005c66c 	.word	0x2005c66c

08002568 <ADC1_IRQHandler>:
 8002568:	e7fe      	b.n	8002568 <ADC1_IRQHandler>

0800256a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002574:	2003      	movs	r0, #3
 8002576:	f000 f943 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800257a:	2000      	movs	r0, #0
 800257c:	f000 f80e 	bl	800259c <HAL_InitTick>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	71fb      	strb	r3, [r7, #7]
 800258a:	e001      	b.n	8002590 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800258c:	f7ff fd3e 	bl	800200c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002590:	79fb      	ldrb	r3, [r7, #7]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <HAL_InitTick+0x6c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d023      	beq.n	80025f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025b0:	4b16      	ldr	r3, [pc, #88]	@ (800260c <HAL_InitTick+0x70>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_InitTick+0x6c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025be:	fbb3 f3f1 	udiv	r3, r3, r1
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f941 	bl	800284e <HAL_SYSTICK_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d809      	bhi.n	80025ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d8:	2200      	movs	r2, #0
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f000 f919 	bl	8002816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <HAL_InitTick+0x74>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e007      	b.n	80025fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e004      	b.n	80025fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e001      	b.n	80025fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20040008 	.word	0x20040008
 800260c:	20040000 	.word	0x20040000
 8002610:	20040004 	.word	0x20040004

08002614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_IncTick+0x20>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_IncTick+0x24>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_IncTick+0x24>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20040008 	.word	0x20040008
 8002638:	2005c51c 	.word	0x2005c51c

0800263c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b03      	ldr	r3, [pc, #12]	@ (8002650 <HAL_GetTick+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	2005c51c 	.word	0x2005c51c

08002654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff ffee 	bl	800263c <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d005      	beq.n	800267a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_Delay+0x44>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267a:	bf00      	nop
 800267c:	f7ff ffde 	bl	800263c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d8f7      	bhi.n	800267c <HAL_Delay+0x28>
  {
  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20040008 	.word	0x20040008

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	@ (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff8e 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff47 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff5c 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff8e 	bl	8002754 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5d 	bl	8002700 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffb0 	bl	80027bc <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002876:	e166      	b.n	8002b46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	4013      	ands	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8158 	beq.w	8002b40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d005      	beq.n	80028a8 <HAL_GPIO_Init+0x40>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d130      	bne.n	800290a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028de:	2201      	movs	r2, #1
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 0201 	and.w	r2, r3, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b03      	cmp	r3, #3
 8002914:	d017      	beq.n	8002946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d123      	bne.n	800299a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	08da      	lsrs	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3208      	adds	r2, #8
 8002994:	6939      	ldr	r1, [r7, #16]
 8002996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80b2 	beq.w	8002b40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029dc:	4b61      	ldr	r3, [pc, #388]	@ (8002b64 <HAL_GPIO_Init+0x2fc>)
 80029de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e0:	4a60      	ldr	r2, [pc, #384]	@ (8002b64 <HAL_GPIO_Init+0x2fc>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80029e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b64 <HAL_GPIO_Init+0x2fc>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002b68 <HAL_GPIO_Init+0x300>)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a1e:	d02b      	beq.n	8002a78 <HAL_GPIO_Init+0x210>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a52      	ldr	r2, [pc, #328]	@ (8002b6c <HAL_GPIO_Init+0x304>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d025      	beq.n	8002a74 <HAL_GPIO_Init+0x20c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a51      	ldr	r2, [pc, #324]	@ (8002b70 <HAL_GPIO_Init+0x308>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d01f      	beq.n	8002a70 <HAL_GPIO_Init+0x208>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a50      	ldr	r2, [pc, #320]	@ (8002b74 <HAL_GPIO_Init+0x30c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d019      	beq.n	8002a6c <HAL_GPIO_Init+0x204>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002b78 <HAL_GPIO_Init+0x310>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_GPIO_Init+0x200>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a4e      	ldr	r2, [pc, #312]	@ (8002b7c <HAL_GPIO_Init+0x314>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00d      	beq.n	8002a64 <HAL_GPIO_Init+0x1fc>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b80 <HAL_GPIO_Init+0x318>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <HAL_GPIO_Init+0x1f8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a4c      	ldr	r2, [pc, #304]	@ (8002b84 <HAL_GPIO_Init+0x31c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_GPIO_Init+0x1f4>
 8002a58:	2307      	movs	r3, #7
 8002a5a:	e00e      	b.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	e00c      	b.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a60:	2306      	movs	r3, #6
 8002a62:	e00a      	b.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a64:	2305      	movs	r3, #5
 8002a66:	e008      	b.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e006      	b.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e004      	b.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e002      	b.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4093      	lsls	r3, r2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a8a:	4937      	ldr	r1, [pc, #220]	@ (8002b68 <HAL_GPIO_Init+0x300>)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a98:	4b3b      	ldr	r3, [pc, #236]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002abc:	4a32      	ldr	r2, [pc, #200]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ac2:	4b31      	ldr	r3, [pc, #196]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ae6:	4a28      	ldr	r2, [pc, #160]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aec:	4b26      	ldr	r3, [pc, #152]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b10:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b16:	4b1c      	ldr	r3, [pc, #112]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b3a:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <HAL_GPIO_Init+0x320>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f47f ae91 	bne.w	8002878 <HAL_GPIO_Init+0x10>
  }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	48000400 	.word	0x48000400
 8002b70:	48000800 	.word	0x48000800
 8002b74:	48000c00 	.word	0x48000c00
 8002b78:	48001000 	.word	0x48001000
 8002b7c:	48001400 	.word	0x48001400
 8002b80:	48001800 	.word	0x48001800
 8002b84:	48001c00 	.word	0x48001c00
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bcc:	d102      	bne.n	8002bd4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bd2:	e00b      	b.n	8002bec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be2:	d102      	bne.n	8002bea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be8:	e000      	b.n	8002bec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002bea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40007000 	.word	0x40007000

08002bfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d141      	bne.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c16:	d131      	bne.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c18:	4b47      	ldr	r3, [pc, #284]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c1e:	4a46      	ldr	r2, [pc, #280]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c28:	4b43      	ldr	r3, [pc, #268]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c30:	4a41      	ldr	r2, [pc, #260]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c38:	4b40      	ldr	r3, [pc, #256]	@ (8002d3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2232      	movs	r2, #50	@ 0x32
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	4a3f      	ldr	r2, [pc, #252]	@ (8002d40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	0c9b      	lsrs	r3, r3, #18
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c4e:	e002      	b.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c56:	4b38      	ldr	r3, [pc, #224]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c62:	d102      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f2      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c6a:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c76:	d158      	bne.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e057      	b.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c82:	4a2d      	ldr	r2, [pc, #180]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c8c:	e04d      	b.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c94:	d141      	bne.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c96:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca2:	d131      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca4:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002caa:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb4:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2232      	movs	r2, #50	@ 0x32
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	4a1c      	ldr	r2, [pc, #112]	@ (8002d40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	0c9b      	lsrs	r3, r3, #18
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cda:	e002      	b.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ce2:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cee:	d102      	bne.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f2      	bne.n	8002cdc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d02:	d112      	bne.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e011      	b.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d18:	e007      	b.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d1a:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d22:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d28:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	20040000 	.word	0x20040000
 8002d40:	431bde83 	.word	0x431bde83

08002d44 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d48:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a04      	ldr	r2, [pc, #16]	@ (8002d60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d52:	6053      	str	r3, [r2, #4]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40007000 	.word	0x40007000

08002d64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f000 bc08 	b.w	8003588 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d78:	4b96      	ldr	r3, [pc, #600]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d82:	4b94      	ldr	r3, [pc, #592]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80e4 	beq.w	8002f62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_RCC_OscConfig+0x4c>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	f040 808b 	bne.w	8002ebe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	f040 8087 	bne.w	8002ebe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002db0:	4b88      	ldr	r3, [pc, #544]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x64>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e3df      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1a      	ldr	r2, [r3, #32]
 8002dcc:	4b81      	ldr	r3, [pc, #516]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_RCC_OscConfig+0x7e>
 8002dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de0:	e005      	b.n	8002dee <HAL_RCC_OscConfig+0x8a>
 8002de2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d223      	bcs.n	8002e3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fd94 	bl	8003924 <RCC_SetFlashLatencyFromMSIRange>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e3c0      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e06:	4b73      	ldr	r3, [pc, #460]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a72      	ldr	r2, [pc, #456]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b70      	ldr	r3, [pc, #448]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	496d      	ldr	r1, [pc, #436]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e24:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	4968      	ldr	r1, [pc, #416]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
 8002e38:	e025      	b.n	8002e86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3a:	4b66      	ldr	r3, [pc, #408]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a65      	ldr	r2, [pc, #404]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e40:	f043 0308 	orr.w	r3, r3, #8
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b63      	ldr	r3, [pc, #396]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4960      	ldr	r1, [pc, #384]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e58:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	495b      	ldr	r1, [pc, #364]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fd54 	bl	8003924 <RCC_SetFlashLatencyFromMSIRange>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e380      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e86:	f000 fcc1 	bl	800380c <HAL_RCC_GetSysClockFreq>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	4b51      	ldr	r3, [pc, #324]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	4950      	ldr	r1, [pc, #320]	@ (8002fd8 <HAL_RCC_OscConfig+0x274>)
 8002e98:	5ccb      	ldrb	r3, [r1, r3]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a4e      	ldr	r2, [pc, #312]	@ (8002fdc <HAL_RCC_OscConfig+0x278>)
 8002ea4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe0 <HAL_RCC_OscConfig+0x27c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fb76 	bl	800259c <HAL_InitTick>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d052      	beq.n	8002f60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	e364      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d032      	beq.n	8002f2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec6:	4b43      	ldr	r3, [pc, #268]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a42      	ldr	r2, [pc, #264]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed2:	f7ff fbb3 	bl	800263c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eda:	f7ff fbaf 	bl	800263c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e34d      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eec:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef8:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a35      	ldr	r2, [pc, #212]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002efe:	f043 0308 	orr.w	r3, r3, #8
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4930      	ldr	r1, [pc, #192]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f16:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	492b      	ldr	r1, [pc, #172]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
 8002f2a:	e01a      	b.n	8002f62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f2c:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a28      	ldr	r2, [pc, #160]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f38:	f7ff fb80 	bl	800263c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f40:	f7ff fb7c 	bl	800263c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e31a      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f52:	4b20      	ldr	r3, [pc, #128]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1dc>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d073      	beq.n	8003056 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_OscConfig+0x21c>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d10e      	bne.n	8002f98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d10b      	bne.n	8002f98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d063      	beq.n	8003054 <HAL_RCC_OscConfig+0x2f0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d15f      	bne.n	8003054 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e2f7      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x24c>
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e025      	b.n	8002ffc <HAL_RCC_OscConfig+0x298>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fb8:	d114      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x280>
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a05      	ldr	r2, [pc, #20]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a02      	ldr	r2, [pc, #8]	@ (8002fd4 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e013      	b.n	8002ffc <HAL_RCC_OscConfig+0x298>
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	0801d898 	.word	0x0801d898
 8002fdc:	20040000 	.word	0x20040000
 8002fe0:	20040004 	.word	0x20040004
 8002fe4:	4ba0      	ldr	r3, [pc, #640]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a9f      	ldr	r2, [pc, #636]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b9d      	ldr	r3, [pc, #628]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a9c      	ldr	r2, [pc, #624]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7ff fb1a 	bl	800263c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7ff fb16 	bl	800263c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	@ 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e2b4      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301e:	4b92      	ldr	r3, [pc, #584]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x2a8>
 800302a:	e014      	b.n	8003056 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff fb06 	bl	800263c <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003034:	f7ff fb02 	bl	800263c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	@ 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e2a0      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003046:	4b88      	ldr	r3, [pc, #544]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x2d0>
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d060      	beq.n	8003124 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b04      	cmp	r3, #4
 8003066:	d005      	beq.n	8003074 <HAL_RCC_OscConfig+0x310>
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d116      	bne.n	80030a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003074:	4b7c      	ldr	r3, [pc, #496]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_OscConfig+0x328>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e27d      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b76      	ldr	r3, [pc, #472]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	4973      	ldr	r1, [pc, #460]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a0:	e040      	b.n	8003124 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d023      	beq.n	80030f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7ff fac1 	bl	800263c <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030be:	f7ff fabd 	bl	800263c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e25b      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d0:	4b65      	ldr	r3, [pc, #404]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	4b62      	ldr	r3, [pc, #392]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	495f      	ldr	r1, [pc, #380]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
 80030f0:	e018      	b.n	8003124 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80030f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7ff fa9d 	bl	800263c <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003106:	f7ff fa99 	bl	800263c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e237      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003118:	4b53      	ldr	r3, [pc, #332]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d03c      	beq.n	80031aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01c      	beq.n	8003172 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003138:	4b4b      	ldr	r3, [pc, #300]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800313e:	4a4a      	ldr	r2, [pc, #296]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7ff fa78 	bl	800263c <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003150:	f7ff fa74 	bl	800263c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e212      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003162:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ef      	beq.n	8003150 <HAL_RCC_OscConfig+0x3ec>
 8003170:	e01b      	b.n	80031aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003172:	4b3d      	ldr	r3, [pc, #244]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003178:	4a3b      	ldr	r2, [pc, #236]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7ff fa5b 	bl	800263c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318a:	f7ff fa57 	bl	800263c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1f5      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800319c:	4b32      	ldr	r3, [pc, #200]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ef      	bne.n	800318a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80a6 	beq.w	8003304 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b27      	ldr	r3, [pc, #156]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031cc:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d4:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e0:	2301      	movs	r3, #1
 80031e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e4:	4b21      	ldr	r3, [pc, #132]	@ (800326c <HAL_RCC_OscConfig+0x508>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d118      	bne.n	8003222 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f0:	4b1e      	ldr	r3, [pc, #120]	@ (800326c <HAL_RCC_OscConfig+0x508>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	@ (800326c <HAL_RCC_OscConfig+0x508>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fc:	f7ff fa1e 	bl	800263c <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7ff fa1a 	bl	800263c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1b8      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003216:	4b15      	ldr	r3, [pc, #84]	@ (800326c <HAL_RCC_OscConfig+0x508>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d108      	bne.n	800323c <HAL_RCC_OscConfig+0x4d8>
 800322a:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003230:	4a0d      	ldr	r2, [pc, #52]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800323a:	e029      	b.n	8003290 <HAL_RCC_OscConfig+0x52c>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b05      	cmp	r3, #5
 8003242:	d115      	bne.n	8003270 <HAL_RCC_OscConfig+0x50c>
 8003244:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324a:	4a07      	ldr	r2, [pc, #28]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800324c:	f043 0304 	orr.w	r3, r3, #4
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003254:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325a:	4a03      	ldr	r2, [pc, #12]	@ (8003268 <HAL_RCC_OscConfig+0x504>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003264:	e014      	b.n	8003290 <HAL_RCC_OscConfig+0x52c>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	40007000 	.word	0x40007000
 8003270:	4b9d      	ldr	r3, [pc, #628]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	4a9c      	ldr	r2, [pc, #624]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003280:	4b99      	ldr	r3, [pc, #612]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003286:	4a98      	ldr	r2, [pc, #608]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d016      	beq.n	80032c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7ff f9d0 	bl	800263c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7ff f9cc 	bl	800263c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e168      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b6:	4b8c      	ldr	r3, [pc, #560]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ed      	beq.n	80032a0 <HAL_RCC_OscConfig+0x53c>
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7ff f9b9 	bl	800263c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7ff f9b5 	bl	800263c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e151      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e4:	4b80      	ldr	r3, [pc, #512]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ed      	bne.n	80032ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f2:	7ffb      	ldrb	r3, [r7, #31]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f8:	4b7b      	ldr	r3, [pc, #492]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	4a7a      	ldr	r2, [pc, #488]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80032fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003302:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03c      	beq.n	800338a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01c      	beq.n	8003352 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003318:	4b73      	ldr	r3, [pc, #460]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 800331a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800331e:	4a72      	ldr	r2, [pc, #456]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7ff f988 	bl	800263c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003330:	f7ff f984 	bl	800263c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e122      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003342:	4b69      	ldr	r3, [pc, #420]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ef      	beq.n	8003330 <HAL_RCC_OscConfig+0x5cc>
 8003350:	e01b      	b.n	800338a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003352:	4b65      	ldr	r3, [pc, #404]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003354:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003358:	4a63      	ldr	r2, [pc, #396]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7ff f96b 	bl	800263c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800336a:	f7ff f967 	bl	800263c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e105      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800337c:	4b5a      	ldr	r3, [pc, #360]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 800337e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80f9 	beq.w	8003586 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	2b02      	cmp	r3, #2
 800339a:	f040 80cf 	bne.w	800353c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800339e:	4b52      	ldr	r3, [pc, #328]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0203 	and.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d12c      	bne.n	800340c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	3b01      	subs	r3, #1
 80033be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d123      	bne.n	800340c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d11b      	bne.n	800340c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d113      	bne.n	800340c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d109      	bne.n	800340c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	3b01      	subs	r3, #1
 8003406:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d071      	beq.n	80034f0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d068      	beq.n	80034e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003412:	4b35      	ldr	r3, [pc, #212]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d105      	bne.n	800342a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800341e:	4b32      	ldr	r3, [pc, #200]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0ac      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800342e:	4b2e      	ldr	r3, [pc, #184]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a2d      	ldr	r2, [pc, #180]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003434:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003438:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800343a:	f7ff f8ff 	bl	800263c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7ff f8fb 	bl	800263c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e099      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003454:	4b24      	ldr	r3, [pc, #144]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003460:	4b21      	ldr	r3, [pc, #132]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <HAL_RCC_OscConfig+0x788>)
 8003466:	4013      	ands	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003470:	3a01      	subs	r2, #1
 8003472:	0112      	lsls	r2, r2, #4
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800347a:	0212      	lsls	r2, r2, #8
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003482:	0852      	lsrs	r2, r2, #1
 8003484:	3a01      	subs	r2, #1
 8003486:	0552      	lsls	r2, r2, #21
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800348e:	0852      	lsrs	r2, r2, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	0652      	lsls	r2, r2, #25
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800349a:	06d2      	lsls	r2, r2, #27
 800349c:	430a      	orrs	r2, r1
 800349e:	4912      	ldr	r1, [pc, #72]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034a4:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0f      	ldr	r2, [pc, #60]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b0:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a0c      	ldr	r2, [pc, #48]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034bc:	f7ff f8be 	bl	800263c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7ff f8ba 	bl	800263c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e058      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	4b04      	ldr	r3, [pc, #16]	@ (80034e8 <HAL_RCC_OscConfig+0x784>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e2:	e050      	b.n	8003586 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e04f      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
 80034e8:	40021000 	.word	0x40021000
 80034ec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f0:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d144      	bne.n	8003586 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034fc:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a23      	ldr	r2, [pc, #140]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 8003502:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003506:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003508:	4b21      	ldr	r3, [pc, #132]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a20      	ldr	r2, [pc, #128]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 800350e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003512:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003514:	f7ff f892 	bl	800263c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7ff f88e 	bl	800263c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e02c      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352e:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x7b8>
 800353a:	e024      	b.n	8003586 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d01f      	beq.n	8003582 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003542:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 8003548:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800354c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7ff f875 	bl	800263c <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003556:	f7ff f871 	bl	800263c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e00f      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4905      	ldr	r1, [pc, #20]	@ (8003590 <HAL_RCC_OscConfig+0x82c>)
 800357a:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <HAL_RCC_OscConfig+0x830>)
 800357c:	4013      	ands	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	e001      	b.n	8003586 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3720      	adds	r7, #32
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	feeefffc 	.word	0xfeeefffc

08003598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e11d      	b.n	80037ec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b90      	ldr	r3, [pc, #576]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d910      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b8d      	ldr	r3, [pc, #564]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 020f 	bic.w	r2, r3, #15
 80035c6:	498b      	ldr	r1, [pc, #556]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b89      	ldr	r3, [pc, #548]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e105      	b.n	80037ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d010      	beq.n	800360e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	4b81      	ldr	r3, [pc, #516]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d908      	bls.n	800360e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b7e      	ldr	r3, [pc, #504]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	497b      	ldr	r1, [pc, #492]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d079      	beq.n	800370e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d11e      	bne.n	8003660 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	4b75      	ldr	r3, [pc, #468]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0dc      	b.n	80037ec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003632:	f000 f9d1 	bl	80039d8 <RCC_GetSysClockFreqFromPLLSource>
 8003636:	4603      	mov	r3, r0
 8003638:	4a70      	ldr	r2, [pc, #448]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d946      	bls.n	80036cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800363e:	4b6e      	ldr	r3, [pc, #440]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d140      	bne.n	80036cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800364a:	4b6b      	ldr	r3, [pc, #428]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003652:	4a69      	ldr	r2, [pc, #420]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003658:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e035      	b.n	80036cc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d107      	bne.n	8003678 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003668:	4b63      	ldr	r3, [pc, #396]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d115      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0b9      	b.n	80037ec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003680:	4b5d      	ldr	r3, [pc, #372]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0ad      	b.n	80037ec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003690:	4b59      	ldr	r3, [pc, #356]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0a5      	b.n	80037ec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80036a0:	f000 f8b4 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4a55      	ldr	r2, [pc, #340]	@ (80037fc <HAL_RCC_ClockConfig+0x264>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d90f      	bls.n	80036cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036ac:	4b52      	ldr	r3, [pc, #328]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036b8:	4b4f      	ldr	r3, [pc, #316]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036c0:	4a4d      	ldr	r2, [pc, #308]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036cc:	4b4a      	ldr	r3, [pc, #296]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 0203 	bic.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4947      	ldr	r1, [pc, #284]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036de:	f7fe ffad 	bl	800263c <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e6:	f7fe ffa9 	bl	800263c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e077      	b.n	80037ec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fc:	4b3e      	ldr	r3, [pc, #248]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 020c 	and.w	r2, r3, #12
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	429a      	cmp	r2, r3
 800370c:	d1eb      	bne.n	80036e6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b80      	cmp	r3, #128	@ 0x80
 8003712:	d105      	bne.n	8003720 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003714:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a37      	ldr	r2, [pc, #220]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800371a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800371e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d010      	beq.n	800374e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	4b31      	ldr	r3, [pc, #196]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003738:	429a      	cmp	r2, r3
 800373a:	d208      	bcs.n	800374e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373c:	4b2e      	ldr	r3, [pc, #184]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	492b      	ldr	r1, [pc, #172]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d210      	bcs.n	800377e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375c:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 020f 	bic.w	r2, r3, #15
 8003764:	4923      	ldr	r1, [pc, #140]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376c:	4b21      	ldr	r3, [pc, #132]	@ (80037f4 <HAL_RCC_ClockConfig+0x25c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d001      	beq.n	800377e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e036      	b.n	80037ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378a:	4b1b      	ldr	r3, [pc, #108]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4918      	ldr	r1, [pc, #96]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a8:	4b13      	ldr	r3, [pc, #76]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4910      	ldr	r1, [pc, #64]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037bc:	f000 f826 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <HAL_RCC_ClockConfig+0x260>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	490c      	ldr	r1, [pc, #48]	@ (8003800 <HAL_RCC_ClockConfig+0x268>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003804 <HAL_RCC_ClockConfig+0x26c>)
 80037da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fedb 	bl	800259c <HAL_InitTick>
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40021000 	.word	0x40021000
 80037fc:	04c4b400 	.word	0x04c4b400
 8003800:	0801d898 	.word	0x0801d898
 8003804:	20040000 	.word	0x20040000
 8003808:	20040004 	.word	0x20040004

0800380c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	@ 0x24
 8003810:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381a:	4b3e      	ldr	r3, [pc, #248]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003824:	4b3b      	ldr	r3, [pc, #236]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x34>
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d121      	bne.n	800387e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d11e      	bne.n	800387e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003840:	4b34      	ldr	r3, [pc, #208]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800384c:	4b31      	ldr	r3, [pc, #196]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e005      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800385c:	4b2d      	ldr	r3, [pc, #180]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003868:	4a2b      	ldr	r2, [pc, #172]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x10c>)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003870:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d102      	bne.n	800388a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003884:	4b25      	ldr	r3, [pc, #148]	@ (800391c <HAL_RCC_GetSysClockFreq+0x110>)
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	e004      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d101      	bne.n	8003894 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003890:	4b23      	ldr	r3, [pc, #140]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x114>)
 8003892:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d134      	bne.n	8003904 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800389a:	4b1e      	ldr	r3, [pc, #120]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d003      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0xac>
 80038b0:	e005      	b.n	80038be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038b2:	4b1a      	ldr	r3, [pc, #104]	@ (800391c <HAL_RCC_GetSysClockFreq+0x110>)
 80038b4:	617b      	str	r3, [r7, #20]
      break;
 80038b6:	e005      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038b8:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ba:	617b      	str	r3, [r7, #20]
      break;
 80038bc:	e002      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	617b      	str	r3, [r7, #20]
      break;
 80038c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3301      	adds	r3, #1
 80038d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038d2:	4b10      	ldr	r3, [pc, #64]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	fb03 f202 	mul.w	r2, r3, r2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	0e5b      	lsrs	r3, r3, #25
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	3301      	adds	r3, #1
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003904:	69bb      	ldr	r3, [r7, #24]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	@ 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	0801d8a8 	.word	0x0801d8a8
 800391c:	00f42400 	.word	0x00f42400
 8003920:	007a1200 	.word	0x007a1200

08003924 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003930:	4b27      	ldr	r3, [pc, #156]	@ (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800393c:	f7ff f93e 	bl	8002bbc <HAL_PWREx_GetVoltageRange>
 8003940:	6178      	str	r0, [r7, #20]
 8003942:	e014      	b.n	800396e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003944:	4b22      	ldr	r3, [pc, #136]	@ (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	4a21      	ldr	r2, [pc, #132]	@ (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800394a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003950:	4b1f      	ldr	r3, [pc, #124]	@ (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800395c:	f7ff f92e 	bl	8002bbc <HAL_PWREx_GetVoltageRange>
 8003960:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003962:	4b1b      	ldr	r3, [pc, #108]	@ (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	4a1a      	ldr	r2, [pc, #104]	@ (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003974:	d10b      	bne.n	800398e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b80      	cmp	r3, #128	@ 0x80
 800397a:	d913      	bls.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003980:	d902      	bls.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003982:	2302      	movs	r3, #2
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e00d      	b.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003988:	2301      	movs	r3, #1
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	e00a      	b.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b7f      	cmp	r3, #127	@ 0x7f
 8003992:	d902      	bls.n	800399a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003994:	2302      	movs	r3, #2
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	e004      	b.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b70      	cmp	r3, #112	@ 0x70
 800399e:	d101      	bne.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a0:	2301      	movs	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 020f 	bic.w	r2, r3, #15
 80039ac:	4909      	ldr	r1, [pc, #36]	@ (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039b4:	4b07      	ldr	r3, [pc, #28]	@ (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40022000 	.word	0x40022000

080039d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039de:	4b2d      	ldr	r3, [pc, #180]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d00b      	beq.n	8003a06 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d825      	bhi.n	8003a40 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d008      	beq.n	8003a0c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d11f      	bne.n	8003a40 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a00:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a02:	613b      	str	r3, [r7, #16]
    break;
 8003a04:	e01f      	b.n	8003a46 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a06:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a08:	613b      	str	r3, [r7, #16]
    break;
 8003a0a:	e01c      	b.n	8003a46 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a0c:	4b21      	ldr	r3, [pc, #132]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a18:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e005      	b.n	8003a34 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a28:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003a34:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	613b      	str	r3, [r7, #16]
    break;
 8003a3e:	e002      	b.n	8003a46 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
    break;
 8003a44:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a46:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	3301      	adds	r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	0a1b      	lsrs	r3, r3, #8
 8003a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	fb03 f202 	mul.w	r2, r3, r2
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a6c:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	0e5b      	lsrs	r3, r3, #25
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a86:	683b      	ldr	r3, [r7, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40021000 	.word	0x40021000
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	007a1200 	.word	0x007a1200
 8003aa0:	0801d8a8 	.word	0x0801d8a8

08003aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e095      	b.n	8003be2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ac6:	d009      	beq.n	8003adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
 8003ace:	e005      	b.n	8003adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe faac 	bl	8002054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b1c:	d902      	bls.n	8003b24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e002      	b.n	8003b2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b32:	d007      	beq.n	8003b44 <HAL_SPI_Init+0xa0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b86:	ea42 0103 	orr.w	r1, r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 0204 	and.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bc0:	ea42 0103 	orr.w	r1, r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b088      	sub	sp, #32
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bfa:	f7fe fd1f 	bl	800263c <HAL_GetTick>
 8003bfe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d001      	beq.n	8003c14 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
 8003c12:	e15c      	b.n	8003ece <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Transmit+0x36>
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e154      	b.n	8003ece <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_SPI_Transmit+0x48>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e14d      	b.n	8003ece <HAL_SPI_Transmit+0x2e4>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c84:	d10f      	bne.n	8003ca6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ca4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb0:	2b40      	cmp	r3, #64	@ 0x40
 8003cb2:	d007      	beq.n	8003cc4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ccc:	d952      	bls.n	8003d74 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Transmit+0xf2>
 8003cd6:	8b7b      	ldrh	r3, [r7, #26]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d145      	bne.n	8003d68 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d00:	e032      	b.n	8003d68 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d112      	bne.n	8003d36 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	1c9a      	adds	r2, r3, #2
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d34:	e018      	b.n	8003d68 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d36:	f7fe fc81 	bl	800263c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d803      	bhi.n	8003d4e <HAL_SPI_Transmit+0x164>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d102      	bne.n	8003d54 <HAL_SPI_Transmit+0x16a>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0b2      	b.n	8003ece <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1c7      	bne.n	8003d02 <HAL_SPI_Transmit+0x118>
 8003d72:	e083      	b.n	8003e7c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_Transmit+0x198>
 8003d7c:	8b7b      	ldrh	r3, [r7, #26]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d177      	bne.n	8003e72 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d912      	bls.n	8003db2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b02      	subs	r3, #2
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003db0:	e05f      	b.n	8003e72 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dd8:	e04b      	b.n	8003e72 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d12b      	bne.n	8003e40 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d912      	bls.n	8003e18 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	881a      	ldrh	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e02:	1c9a      	adds	r2, r3, #2
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b02      	subs	r3, #2
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e16:	e02c      	b.n	8003e72 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e3e:	e018      	b.n	8003e72 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e40:	f7fe fbfc 	bl	800263c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d803      	bhi.n	8003e58 <HAL_SPI_Transmit+0x26e>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d102      	bne.n	8003e5e <HAL_SPI_Transmit+0x274>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e02d      	b.n	8003ece <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ae      	bne.n	8003dda <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f947 	bl	8004114 <SPI_EndRxTxTransaction>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ee8:	f7fe fba8 	bl	800263c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ef8:	f7fe fba0 	bl	800263c <HAL_GetTick>
 8003efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003efe:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	015b      	lsls	r3, r3, #5
 8003f04:	0d1b      	lsrs	r3, r3, #20
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	fb02 f303 	mul.w	r3, r2, r3
 8003f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f0e:	e054      	b.n	8003fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d050      	beq.n	8003fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f18:	f7fe fb90 	bl	800263c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d902      	bls.n	8003f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d13d      	bne.n	8003faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f46:	d111      	bne.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f50:	d004      	beq.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f5a:	d107      	bne.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f74:	d10f      	bne.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e017      	b.n	8003fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d19b      	bne.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20040000 	.word	0x20040000

08003fe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	@ 0x28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ffa:	f7fe fb1f 	bl	800263c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	4413      	add	r3, r2
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800400a:	f7fe fb17 	bl	800263c <HAL_GetTick>
 800400e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004018:	4b3d      	ldr	r3, [pc, #244]	@ (8004110 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	00da      	lsls	r2, r3, #3
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	0d1b      	lsrs	r3, r3, #20
 8004028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004030:	e060      	b.n	80040f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004038:	d107      	bne.n	800404a <SPI_WaitFifoStateUntilTimeout+0x62>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004048:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d050      	beq.n	80040f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004052:	f7fe faf3 	bl	800263c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405e:	429a      	cmp	r2, r3
 8004060:	d902      	bls.n	8004068 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d13d      	bne.n	80040e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004076:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004080:	d111      	bne.n	80040a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800408a:	d004      	beq.n	8004096 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004094:	d107      	bne.n	80040a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ae:	d10f      	bne.n	80040d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e010      	b.n	8004106 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d196      	bne.n	8004032 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3728      	adds	r7, #40	@ 0x28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20040000 	.word	0x20040000

08004114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff ff5b 	bl	8003fe8 <SPI_WaitFifoStateUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413c:	f043 0220 	orr.w	r2, r3, #32
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e027      	b.n	8004198 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2200      	movs	r2, #0
 8004150:	2180      	movs	r1, #128	@ 0x80
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff fec0 	bl	8003ed8 <SPI_WaitFlagStateUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004162:	f043 0220 	orr.w	r2, r3, #32
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e014      	b.n	8004198 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff ff34 	bl	8003fe8 <SPI_WaitFifoStateUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e000      	b.n	8004198 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e049      	b.n	8004246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd ffa4 	bl	8002114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 fb72 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e049      	b.n	80042f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f841 	bl	80042fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f000 fb1b 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e049      	b.n	80043b6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f841 	bl	80043be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f000 faba 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e088      	b.n	8004502 <HAL_TIM_IC_ConfigChannel+0x130>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11b      	bne.n	8004436 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800440e:	f000 fdd7 	bl	8004fc0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699a      	ldr	r2, [r3, #24]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 020c 	bic.w	r2, r2, #12
 8004420:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6999      	ldr	r1, [r3, #24]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	619a      	str	r2, [r3, #24]
 8004434:	e060      	b.n	80044f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b04      	cmp	r3, #4
 800443a:	d11c      	bne.n	8004476 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800444c:	f000 fe55 	bl	80050fa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800445e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6999      	ldr	r1, [r3, #24]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	021a      	lsls	r2, r3, #8
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	619a      	str	r2, [r3, #24]
 8004474:	e040      	b.n	80044f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800448c:	f000 fea2 	bl	80051d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 020c 	bic.w	r2, r2, #12
 800449e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69d9      	ldr	r1, [r3, #28]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	61da      	str	r2, [r3, #28]
 80044b2:	e021      	b.n	80044f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d11c      	bne.n	80044f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80044ca:	f000 febf 	bl	800524c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80044dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	021a      	lsls	r2, r3, #8
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	61da      	str	r2, [r3, #28]
 80044f2:	e001      	b.n	80044f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004500:	7dfb      	ldrb	r3, [r7, #23]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004526:	2302      	movs	r3, #2
 8004528:	e0ff      	b.n	800472a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b14      	cmp	r3, #20
 8004536:	f200 80f0 	bhi.w	800471a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800453a:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004595 	.word	0x08004595
 8004544:	0800471b 	.word	0x0800471b
 8004548:	0800471b 	.word	0x0800471b
 800454c:	0800471b 	.word	0x0800471b
 8004550:	080045d5 	.word	0x080045d5
 8004554:	0800471b 	.word	0x0800471b
 8004558:	0800471b 	.word	0x0800471b
 800455c:	0800471b 	.word	0x0800471b
 8004560:	08004617 	.word	0x08004617
 8004564:	0800471b 	.word	0x0800471b
 8004568:	0800471b 	.word	0x0800471b
 800456c:	0800471b 	.word	0x0800471b
 8004570:	08004657 	.word	0x08004657
 8004574:	0800471b 	.word	0x0800471b
 8004578:	0800471b 	.word	0x0800471b
 800457c:	0800471b 	.word	0x0800471b
 8004580:	08004699 	.word	0x08004699
 8004584:	0800471b 	.word	0x0800471b
 8004588:	0800471b 	.word	0x0800471b
 800458c:	0800471b 	.word	0x0800471b
 8004590:	080046d9 	.word	0x080046d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fa3a 	bl	8004a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0208 	orr.w	r2, r2, #8
 80045ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0204 	bic.w	r2, r2, #4
 80045be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6999      	ldr	r1, [r3, #24]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	619a      	str	r2, [r3, #24]
      break;
 80045d2:	e0a5      	b.n	8004720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 faaa 	bl	8004b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6999      	ldr	r1, [r3, #24]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	021a      	lsls	r2, r3, #8
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	619a      	str	r2, [r3, #24]
      break;
 8004614:	e084      	b.n	8004720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fb13 	bl	8004c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0208 	orr.w	r2, r2, #8
 8004630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0204 	bic.w	r2, r2, #4
 8004640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69d9      	ldr	r1, [r3, #28]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	61da      	str	r2, [r3, #28]
      break;
 8004654:	e064      	b.n	8004720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fb7b 	bl	8004d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69d9      	ldr	r1, [r3, #28]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	021a      	lsls	r2, r3, #8
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	61da      	str	r2, [r3, #28]
      break;
 8004696:	e043      	b.n	8004720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fbc4 	bl	8004e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0208 	orr.w	r2, r2, #8
 80046b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0204 	bic.w	r2, r2, #4
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80046d6:	e023      	b.n	8004720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fc08 	bl	8004ef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	021a      	lsls	r2, r3, #8
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004718:	e002      	b.n	8004720 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
      break;
 800471e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop

08004734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_TIM_ConfigClockSource+0x1c>
 800474c:	2302      	movs	r3, #2
 800474e:	e0b6      	b.n	80048be <HAL_TIM_ConfigClockSource+0x18a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800477a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478c:	d03e      	beq.n	800480c <HAL_TIM_ConfigClockSource+0xd8>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004792:	f200 8087 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x170>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	f000 8086 	beq.w	80048aa <HAL_TIM_ConfigClockSource+0x176>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	d87f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x170>
 80047a4:	2b70      	cmp	r3, #112	@ 0x70
 80047a6:	d01a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xaa>
 80047a8:	2b70      	cmp	r3, #112	@ 0x70
 80047aa:	d87b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x170>
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d050      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x11e>
 80047b0:	2b60      	cmp	r3, #96	@ 0x60
 80047b2:	d877      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x170>
 80047b4:	2b50      	cmp	r3, #80	@ 0x50
 80047b6:	d03c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xfe>
 80047b8:	2b50      	cmp	r3, #80	@ 0x50
 80047ba:	d873      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x170>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d058      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x13e>
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d86f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x170>
 80047c4:	2b30      	cmp	r3, #48	@ 0x30
 80047c6:	d064      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15e>
 80047c8:	2b30      	cmp	r3, #48	@ 0x30
 80047ca:	d86b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x170>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d060      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15e>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d867      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x170>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15e>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d05a      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15e>
 80047dc:	e062      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ee:	f000 fd85 	bl	80052fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	609a      	str	r2, [r3, #8]
      break;
 800480a:	e04f      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481c:	f000 fd6e 	bl	80052fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482e:	609a      	str	r2, [r3, #8]
      break;
 8004830:	e03c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fc2c 	bl	800509c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2150      	movs	r1, #80	@ 0x50
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fd3b 	bl	80052c6 <TIM_ITRx_SetConfig>
      break;
 8004850:	e02c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	461a      	mov	r2, r3
 8004860:	f000 fc88 	bl	8005174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2160      	movs	r1, #96	@ 0x60
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fd2b 	bl	80052c6 <TIM_ITRx_SetConfig>
      break;
 8004870:	e01c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fc0c 	bl	800509c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	@ 0x40
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fd1b 	bl	80052c6 <TIM_ITRx_SetConfig>
      break;
 8004890:	e00c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f000 fd12 	bl	80052c6 <TIM_ITRx_SetConfig>
      break;
 80048a2:	e003      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      break;
 80048a8:	e000      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a46      	ldr	r2, [pc, #280]	@ (80049f4 <TIM_Base_SetConfig+0x12c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e6:	d00f      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a43      	ldr	r2, [pc, #268]	@ (80049f8 <TIM_Base_SetConfig+0x130>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a42      	ldr	r2, [pc, #264]	@ (80049fc <TIM_Base_SetConfig+0x134>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a41      	ldr	r2, [pc, #260]	@ (8004a00 <TIM_Base_SetConfig+0x138>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a40      	ldr	r2, [pc, #256]	@ (8004a04 <TIM_Base_SetConfig+0x13c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d108      	bne.n	800491a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a35      	ldr	r2, [pc, #212]	@ (80049f4 <TIM_Base_SetConfig+0x12c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01f      	beq.n	8004962 <TIM_Base_SetConfig+0x9a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004928:	d01b      	beq.n	8004962 <TIM_Base_SetConfig+0x9a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a32      	ldr	r2, [pc, #200]	@ (80049f8 <TIM_Base_SetConfig+0x130>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d017      	beq.n	8004962 <TIM_Base_SetConfig+0x9a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a31      	ldr	r2, [pc, #196]	@ (80049fc <TIM_Base_SetConfig+0x134>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d013      	beq.n	8004962 <TIM_Base_SetConfig+0x9a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a30      	ldr	r2, [pc, #192]	@ (8004a00 <TIM_Base_SetConfig+0x138>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00f      	beq.n	8004962 <TIM_Base_SetConfig+0x9a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2f      	ldr	r2, [pc, #188]	@ (8004a04 <TIM_Base_SetConfig+0x13c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00b      	beq.n	8004962 <TIM_Base_SetConfig+0x9a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a08 <TIM_Base_SetConfig+0x140>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2d      	ldr	r2, [pc, #180]	@ (8004a0c <TIM_Base_SetConfig+0x144>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a10 <TIM_Base_SetConfig+0x148>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d108      	bne.n	8004974 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a16      	ldr	r2, [pc, #88]	@ (80049f4 <TIM_Base_SetConfig+0x12c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00f      	beq.n	80049c0 <TIM_Base_SetConfig+0xf8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <TIM_Base_SetConfig+0x13c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <TIM_Base_SetConfig+0xf8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a17      	ldr	r2, [pc, #92]	@ (8004a08 <TIM_Base_SetConfig+0x140>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_Base_SetConfig+0xf8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a16      	ldr	r2, [pc, #88]	@ (8004a0c <TIM_Base_SetConfig+0x144>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_Base_SetConfig+0xf8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <TIM_Base_SetConfig+0x148>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d103      	bne.n	80049c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]
  }
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40013400 	.word	0x40013400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800

08004a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f023 0201 	bic.w	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f023 0302 	bic.w	r3, r3, #2
 8004a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b20 <TIM_OC1_SetConfig+0x10c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00f      	beq.n	8004a94 <TIM_OC1_SetConfig+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a2b      	ldr	r2, [pc, #172]	@ (8004b24 <TIM_OC1_SetConfig+0x110>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <TIM_OC1_SetConfig+0x80>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b28 <TIM_OC1_SetConfig+0x114>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d007      	beq.n	8004a94 <TIM_OC1_SetConfig+0x80>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a29      	ldr	r2, [pc, #164]	@ (8004b2c <TIM_OC1_SetConfig+0x118>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC1_SetConfig+0x80>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a28      	ldr	r2, [pc, #160]	@ (8004b30 <TIM_OC1_SetConfig+0x11c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10c      	bne.n	8004aae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0308 	bic.w	r3, r3, #8
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 0304 	bic.w	r3, r3, #4
 8004aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b20 <TIM_OC1_SetConfig+0x10c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00f      	beq.n	8004ad6 <TIM_OC1_SetConfig+0xc2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b24 <TIM_OC1_SetConfig+0x110>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00b      	beq.n	8004ad6 <TIM_OC1_SetConfig+0xc2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	@ (8004b28 <TIM_OC1_SetConfig+0x114>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d007      	beq.n	8004ad6 <TIM_OC1_SetConfig+0xc2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a18      	ldr	r2, [pc, #96]	@ (8004b2c <TIM_OC1_SetConfig+0x118>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d003      	beq.n	8004ad6 <TIM_OC1_SetConfig+0xc2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a17      	ldr	r2, [pc, #92]	@ (8004b30 <TIM_OC1_SetConfig+0x11c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d111      	bne.n	8004afa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	621a      	str	r2, [r3, #32]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40013400 	.word	0x40013400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800

08004b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f023 0210 	bic.w	r2, r3, #16
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0320 	bic.w	r3, r3, #32
 8004b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a28      	ldr	r2, [pc, #160]	@ (8004c34 <TIM_OC2_SetConfig+0x100>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC2_SetConfig+0x6c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a27      	ldr	r2, [pc, #156]	@ (8004c38 <TIM_OC2_SetConfig+0x104>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d10d      	bne.n	8004bbc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8004c34 <TIM_OC2_SetConfig+0x100>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00f      	beq.n	8004be4 <TIM_OC2_SetConfig+0xb0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <TIM_OC2_SetConfig+0x104>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00b      	beq.n	8004be4 <TIM_OC2_SetConfig+0xb0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <TIM_OC2_SetConfig+0x108>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_OC2_SetConfig+0xb0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c40 <TIM_OC2_SetConfig+0x10c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC2_SetConfig+0xb0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <TIM_OC2_SetConfig+0x110>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d113      	bne.n	8004c0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40013400 	.word	0x40013400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40014400 	.word	0x40014400
 8004c44:	40014800 	.word	0x40014800

08004c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	@ (8004d44 <TIM_OC3_SetConfig+0xfc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_OC3_SetConfig+0x6a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a26      	ldr	r2, [pc, #152]	@ (8004d48 <TIM_OC3_SetConfig+0x100>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d10d      	bne.n	8004cce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d44 <TIM_OC3_SetConfig+0xfc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00f      	beq.n	8004cf6 <TIM_OC3_SetConfig+0xae>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d48 <TIM_OC3_SetConfig+0x100>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_OC3_SetConfig+0xae>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d4c <TIM_OC3_SetConfig+0x104>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <TIM_OC3_SetConfig+0xae>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	@ (8004d50 <TIM_OC3_SetConfig+0x108>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_OC3_SetConfig+0xae>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	@ (8004d54 <TIM_OC3_SetConfig+0x10c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d113      	bne.n	8004d1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	621a      	str	r2, [r3, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40013400 	.word	0x40013400
 8004d4c:	40014000 	.word	0x40014000
 8004d50:	40014400 	.word	0x40014400
 8004d54:	40014800 	.word	0x40014800

08004d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	031b      	lsls	r3, r3, #12
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <TIM_OC4_SetConfig+0xc0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00f      	beq.n	8004ddc <TIM_OC4_SetConfig+0x84>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	@ (8004e1c <TIM_OC4_SetConfig+0xc4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00b      	beq.n	8004ddc <TIM_OC4_SetConfig+0x84>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a16      	ldr	r2, [pc, #88]	@ (8004e20 <TIM_OC4_SetConfig+0xc8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d007      	beq.n	8004ddc <TIM_OC4_SetConfig+0x84>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a15      	ldr	r2, [pc, #84]	@ (8004e24 <TIM_OC4_SetConfig+0xcc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_OC4_SetConfig+0x84>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a14      	ldr	r2, [pc, #80]	@ (8004e28 <TIM_OC4_SetConfig+0xd0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d109      	bne.n	8004df0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	019b      	lsls	r3, r3, #6
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <TIM_OC5_SetConfig+0xb4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00f      	beq.n	8004ea6 <TIM_OC5_SetConfig+0x7a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a16      	ldr	r2, [pc, #88]	@ (8004ee4 <TIM_OC5_SetConfig+0xb8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00b      	beq.n	8004ea6 <TIM_OC5_SetConfig+0x7a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a15      	ldr	r2, [pc, #84]	@ (8004ee8 <TIM_OC5_SetConfig+0xbc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d007      	beq.n	8004ea6 <TIM_OC5_SetConfig+0x7a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a14      	ldr	r2, [pc, #80]	@ (8004eec <TIM_OC5_SetConfig+0xc0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_OC5_SetConfig+0x7a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a13      	ldr	r2, [pc, #76]	@ (8004ef0 <TIM_OC5_SetConfig+0xc4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d109      	bne.n	8004eba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	621a      	str	r2, [r3, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40013400 	.word	0x40013400
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800

08004ef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	051b      	lsls	r3, r3, #20
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a18      	ldr	r2, [pc, #96]	@ (8004fac <TIM_OC6_SetConfig+0xb8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00f      	beq.n	8004f70 <TIM_OC6_SetConfig+0x7c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a17      	ldr	r2, [pc, #92]	@ (8004fb0 <TIM_OC6_SetConfig+0xbc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <TIM_OC6_SetConfig+0x7c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a16      	ldr	r2, [pc, #88]	@ (8004fb4 <TIM_OC6_SetConfig+0xc0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_OC6_SetConfig+0x7c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a15      	ldr	r2, [pc, #84]	@ (8004fb8 <TIM_OC6_SetConfig+0xc4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC6_SetConfig+0x7c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a14      	ldr	r2, [pc, #80]	@ (8004fbc <TIM_OC6_SetConfig+0xc8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d109      	bne.n	8004f84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	029b      	lsls	r3, r3, #10
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40013400 	.word	0x40013400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800

08004fc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f023 0201 	bic.w	r2, r3, #1
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a26      	ldr	r2, [pc, #152]	@ (8005084 <TIM_TI1_SetConfig+0xc4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d017      	beq.n	800501e <TIM_TI1_SetConfig+0x5e>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff4:	d013      	beq.n	800501e <TIM_TI1_SetConfig+0x5e>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a23      	ldr	r2, [pc, #140]	@ (8005088 <TIM_TI1_SetConfig+0xc8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00f      	beq.n	800501e <TIM_TI1_SetConfig+0x5e>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a22      	ldr	r2, [pc, #136]	@ (800508c <TIM_TI1_SetConfig+0xcc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_TI1_SetConfig+0x5e>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a21      	ldr	r2, [pc, #132]	@ (8005090 <TIM_TI1_SetConfig+0xd0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_TI1_SetConfig+0x5e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a20      	ldr	r2, [pc, #128]	@ (8005094 <TIM_TI1_SetConfig+0xd4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_TI1_SetConfig+0x5e>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a1f      	ldr	r2, [pc, #124]	@ (8005098 <TIM_TI1_SetConfig+0xd8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <TIM_TI1_SetConfig+0x62>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <TIM_TI1_SetConfig+0x64>
 8005022:	2300      	movs	r3, #0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e003      	b.n	8005042 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	b2db      	uxtb	r3, r3
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 030a 	and.w	r3, r3, #10
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40014000 	.word	0x40014000

0800509c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f023 030a 	bic.w	r3, r3, #10
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b087      	sub	sp, #28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0210 	bic.w	r2, r3, #16
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	031b      	lsls	r3, r3, #12
 800513e:	b29b      	uxth	r3, r3
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f023 0210 	bic.w	r2, r3, #16
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800519e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	031b      	lsls	r3, r3, #12
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f023 0303 	bic.w	r3, r3, #3
 8005200:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005210:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	b2db      	uxtb	r3, r3
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005224:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005278:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800528a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	031b      	lsls	r3, r3, #12
 8005290:	b29b      	uxth	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800529e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	031b      	lsls	r3, r3, #12
 80052a4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f043 0307 	orr.w	r3, r3, #7
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	609a      	str	r2, [r3, #8]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	021a      	lsls	r2, r3, #8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	431a      	orrs	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4313      	orrs	r3, r2
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005350:	2302      	movs	r3, #2
 8005352:	e068      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2e      	ldr	r2, [pc, #184]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a2d      	ldr	r2, [pc, #180]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d108      	bne.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800538e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a13      	ldr	r2, [pc, #76]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a14      	ldr	r2, [pc, #80]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40013400 	.word	0x40013400
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40014000 	.word	0x40014000

0800544c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005464:	2302      	movs	r3, #2
 8005466:	e065      	b.n	8005534 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a16      	ldr	r2, [pc, #88]	@ (8005540 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a14      	ldr	r2, [pc, #80]	@ (8005544 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d115      	bne.n	8005522 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	051b      	lsls	r3, r3, #20
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40013400 	.word	0x40013400

08005548 <malloc>:
 8005548:	4b02      	ldr	r3, [pc, #8]	@ (8005554 <malloc+0xc>)
 800554a:	4601      	mov	r1, r0
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	f000 b825 	b.w	800559c <_malloc_r>
 8005552:	bf00      	nop
 8005554:	20040018 	.word	0x20040018

08005558 <sbrk_aligned>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	4e0f      	ldr	r6, [pc, #60]	@ (8005598 <sbrk_aligned+0x40>)
 800555c:	460c      	mov	r4, r1
 800555e:	6831      	ldr	r1, [r6, #0]
 8005560:	4605      	mov	r5, r0
 8005562:	b911      	cbnz	r1, 800556a <sbrk_aligned+0x12>
 8005564:	f001 f976 	bl	8006854 <_sbrk_r>
 8005568:	6030      	str	r0, [r6, #0]
 800556a:	4621      	mov	r1, r4
 800556c:	4628      	mov	r0, r5
 800556e:	f001 f971 	bl	8006854 <_sbrk_r>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	d103      	bne.n	800557e <sbrk_aligned+0x26>
 8005576:	f04f 34ff 	mov.w	r4, #4294967295
 800557a:	4620      	mov	r0, r4
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	1cc4      	adds	r4, r0, #3
 8005580:	f024 0403 	bic.w	r4, r4, #3
 8005584:	42a0      	cmp	r0, r4
 8005586:	d0f8      	beq.n	800557a <sbrk_aligned+0x22>
 8005588:	1a21      	subs	r1, r4, r0
 800558a:	4628      	mov	r0, r5
 800558c:	f001 f962 	bl	8006854 <_sbrk_r>
 8005590:	3001      	adds	r0, #1
 8005592:	d1f2      	bne.n	800557a <sbrk_aligned+0x22>
 8005594:	e7ef      	b.n	8005576 <sbrk_aligned+0x1e>
 8005596:	bf00      	nop
 8005598:	2005c520 	.word	0x2005c520

0800559c <_malloc_r>:
 800559c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a0:	1ccd      	adds	r5, r1, #3
 80055a2:	f025 0503 	bic.w	r5, r5, #3
 80055a6:	3508      	adds	r5, #8
 80055a8:	2d0c      	cmp	r5, #12
 80055aa:	bf38      	it	cc
 80055ac:	250c      	movcc	r5, #12
 80055ae:	2d00      	cmp	r5, #0
 80055b0:	4606      	mov	r6, r0
 80055b2:	db01      	blt.n	80055b8 <_malloc_r+0x1c>
 80055b4:	42a9      	cmp	r1, r5
 80055b6:	d904      	bls.n	80055c2 <_malloc_r+0x26>
 80055b8:	230c      	movs	r3, #12
 80055ba:	6033      	str	r3, [r6, #0]
 80055bc:	2000      	movs	r0, #0
 80055be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005698 <_malloc_r+0xfc>
 80055c6:	f000 f869 	bl	800569c <__malloc_lock>
 80055ca:	f8d8 3000 	ldr.w	r3, [r8]
 80055ce:	461c      	mov	r4, r3
 80055d0:	bb44      	cbnz	r4, 8005624 <_malloc_r+0x88>
 80055d2:	4629      	mov	r1, r5
 80055d4:	4630      	mov	r0, r6
 80055d6:	f7ff ffbf 	bl	8005558 <sbrk_aligned>
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	4604      	mov	r4, r0
 80055de:	d158      	bne.n	8005692 <_malloc_r+0xf6>
 80055e0:	f8d8 4000 	ldr.w	r4, [r8]
 80055e4:	4627      	mov	r7, r4
 80055e6:	2f00      	cmp	r7, #0
 80055e8:	d143      	bne.n	8005672 <_malloc_r+0xd6>
 80055ea:	2c00      	cmp	r4, #0
 80055ec:	d04b      	beq.n	8005686 <_malloc_r+0xea>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	4639      	mov	r1, r7
 80055f2:	4630      	mov	r0, r6
 80055f4:	eb04 0903 	add.w	r9, r4, r3
 80055f8:	f001 f92c 	bl	8006854 <_sbrk_r>
 80055fc:	4581      	cmp	r9, r0
 80055fe:	d142      	bne.n	8005686 <_malloc_r+0xea>
 8005600:	6821      	ldr	r1, [r4, #0]
 8005602:	1a6d      	subs	r5, r5, r1
 8005604:	4629      	mov	r1, r5
 8005606:	4630      	mov	r0, r6
 8005608:	f7ff ffa6 	bl	8005558 <sbrk_aligned>
 800560c:	3001      	adds	r0, #1
 800560e:	d03a      	beq.n	8005686 <_malloc_r+0xea>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	442b      	add	r3, r5
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	f8d8 3000 	ldr.w	r3, [r8]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	bb62      	cbnz	r2, 8005678 <_malloc_r+0xdc>
 800561e:	f8c8 7000 	str.w	r7, [r8]
 8005622:	e00f      	b.n	8005644 <_malloc_r+0xa8>
 8005624:	6822      	ldr	r2, [r4, #0]
 8005626:	1b52      	subs	r2, r2, r5
 8005628:	d420      	bmi.n	800566c <_malloc_r+0xd0>
 800562a:	2a0b      	cmp	r2, #11
 800562c:	d917      	bls.n	800565e <_malloc_r+0xc2>
 800562e:	1961      	adds	r1, r4, r5
 8005630:	42a3      	cmp	r3, r4
 8005632:	6025      	str	r5, [r4, #0]
 8005634:	bf18      	it	ne
 8005636:	6059      	strne	r1, [r3, #4]
 8005638:	6863      	ldr	r3, [r4, #4]
 800563a:	bf08      	it	eq
 800563c:	f8c8 1000 	streq.w	r1, [r8]
 8005640:	5162      	str	r2, [r4, r5]
 8005642:	604b      	str	r3, [r1, #4]
 8005644:	4630      	mov	r0, r6
 8005646:	f000 f82f 	bl	80056a8 <__malloc_unlock>
 800564a:	f104 000b 	add.w	r0, r4, #11
 800564e:	1d23      	adds	r3, r4, #4
 8005650:	f020 0007 	bic.w	r0, r0, #7
 8005654:	1ac2      	subs	r2, r0, r3
 8005656:	bf1c      	itt	ne
 8005658:	1a1b      	subne	r3, r3, r0
 800565a:	50a3      	strne	r3, [r4, r2]
 800565c:	e7af      	b.n	80055be <_malloc_r+0x22>
 800565e:	6862      	ldr	r2, [r4, #4]
 8005660:	42a3      	cmp	r3, r4
 8005662:	bf0c      	ite	eq
 8005664:	f8c8 2000 	streq.w	r2, [r8]
 8005668:	605a      	strne	r2, [r3, #4]
 800566a:	e7eb      	b.n	8005644 <_malloc_r+0xa8>
 800566c:	4623      	mov	r3, r4
 800566e:	6864      	ldr	r4, [r4, #4]
 8005670:	e7ae      	b.n	80055d0 <_malloc_r+0x34>
 8005672:	463c      	mov	r4, r7
 8005674:	687f      	ldr	r7, [r7, #4]
 8005676:	e7b6      	b.n	80055e6 <_malloc_r+0x4a>
 8005678:	461a      	mov	r2, r3
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	42a3      	cmp	r3, r4
 800567e:	d1fb      	bne.n	8005678 <_malloc_r+0xdc>
 8005680:	2300      	movs	r3, #0
 8005682:	6053      	str	r3, [r2, #4]
 8005684:	e7de      	b.n	8005644 <_malloc_r+0xa8>
 8005686:	230c      	movs	r3, #12
 8005688:	6033      	str	r3, [r6, #0]
 800568a:	4630      	mov	r0, r6
 800568c:	f000 f80c 	bl	80056a8 <__malloc_unlock>
 8005690:	e794      	b.n	80055bc <_malloc_r+0x20>
 8005692:	6005      	str	r5, [r0, #0]
 8005694:	e7d6      	b.n	8005644 <_malloc_r+0xa8>
 8005696:	bf00      	nop
 8005698:	2005c524 	.word	0x2005c524

0800569c <__malloc_lock>:
 800569c:	4801      	ldr	r0, [pc, #4]	@ (80056a4 <__malloc_lock+0x8>)
 800569e:	f001 b926 	b.w	80068ee <__retarget_lock_acquire_recursive>
 80056a2:	bf00      	nop
 80056a4:	2005c668 	.word	0x2005c668

080056a8 <__malloc_unlock>:
 80056a8:	4801      	ldr	r0, [pc, #4]	@ (80056b0 <__malloc_unlock+0x8>)
 80056aa:	f001 b921 	b.w	80068f0 <__retarget_lock_release_recursive>
 80056ae:	bf00      	nop
 80056b0:	2005c668 	.word	0x2005c668

080056b4 <__cvt>:
 80056b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b8:	ec57 6b10 	vmov	r6, r7, d0
 80056bc:	2f00      	cmp	r7, #0
 80056be:	460c      	mov	r4, r1
 80056c0:	4619      	mov	r1, r3
 80056c2:	463b      	mov	r3, r7
 80056c4:	bfbb      	ittet	lt
 80056c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80056ca:	461f      	movlt	r7, r3
 80056cc:	2300      	movge	r3, #0
 80056ce:	232d      	movlt	r3, #45	@ 0x2d
 80056d0:	700b      	strb	r3, [r1, #0]
 80056d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80056d8:	4691      	mov	r9, r2
 80056da:	f023 0820 	bic.w	r8, r3, #32
 80056de:	bfbc      	itt	lt
 80056e0:	4632      	movlt	r2, r6
 80056e2:	4616      	movlt	r6, r2
 80056e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056e8:	d005      	beq.n	80056f6 <__cvt+0x42>
 80056ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056ee:	d100      	bne.n	80056f2 <__cvt+0x3e>
 80056f0:	3401      	adds	r4, #1
 80056f2:	2102      	movs	r1, #2
 80056f4:	e000      	b.n	80056f8 <__cvt+0x44>
 80056f6:	2103      	movs	r1, #3
 80056f8:	ab03      	add	r3, sp, #12
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	ab02      	add	r3, sp, #8
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	ec47 6b10 	vmov	d0, r6, r7
 8005704:	4653      	mov	r3, sl
 8005706:	4622      	mov	r2, r4
 8005708:	f001 f992 	bl	8006a30 <_dtoa_r>
 800570c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005710:	4605      	mov	r5, r0
 8005712:	d119      	bne.n	8005748 <__cvt+0x94>
 8005714:	f019 0f01 	tst.w	r9, #1
 8005718:	d00e      	beq.n	8005738 <__cvt+0x84>
 800571a:	eb00 0904 	add.w	r9, r0, r4
 800571e:	2200      	movs	r2, #0
 8005720:	2300      	movs	r3, #0
 8005722:	4630      	mov	r0, r6
 8005724:	4639      	mov	r1, r7
 8005726:	f7fb f9e7 	bl	8000af8 <__aeabi_dcmpeq>
 800572a:	b108      	cbz	r0, 8005730 <__cvt+0x7c>
 800572c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005730:	2230      	movs	r2, #48	@ 0x30
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	454b      	cmp	r3, r9
 8005736:	d31e      	bcc.n	8005776 <__cvt+0xc2>
 8005738:	9b03      	ldr	r3, [sp, #12]
 800573a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800573c:	1b5b      	subs	r3, r3, r5
 800573e:	4628      	mov	r0, r5
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	b004      	add	sp, #16
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005748:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800574c:	eb00 0904 	add.w	r9, r0, r4
 8005750:	d1e5      	bne.n	800571e <__cvt+0x6a>
 8005752:	7803      	ldrb	r3, [r0, #0]
 8005754:	2b30      	cmp	r3, #48	@ 0x30
 8005756:	d10a      	bne.n	800576e <__cvt+0xba>
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fb f9ca 	bl	8000af8 <__aeabi_dcmpeq>
 8005764:	b918      	cbnz	r0, 800576e <__cvt+0xba>
 8005766:	f1c4 0401 	rsb	r4, r4, #1
 800576a:	f8ca 4000 	str.w	r4, [sl]
 800576e:	f8da 3000 	ldr.w	r3, [sl]
 8005772:	4499      	add	r9, r3
 8005774:	e7d3      	b.n	800571e <__cvt+0x6a>
 8005776:	1c59      	adds	r1, r3, #1
 8005778:	9103      	str	r1, [sp, #12]
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	e7d9      	b.n	8005732 <__cvt+0x7e>

0800577e <__exponent>:
 800577e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005780:	2900      	cmp	r1, #0
 8005782:	bfba      	itte	lt
 8005784:	4249      	neglt	r1, r1
 8005786:	232d      	movlt	r3, #45	@ 0x2d
 8005788:	232b      	movge	r3, #43	@ 0x2b
 800578a:	2909      	cmp	r1, #9
 800578c:	7002      	strb	r2, [r0, #0]
 800578e:	7043      	strb	r3, [r0, #1]
 8005790:	dd29      	ble.n	80057e6 <__exponent+0x68>
 8005792:	f10d 0307 	add.w	r3, sp, #7
 8005796:	461d      	mov	r5, r3
 8005798:	270a      	movs	r7, #10
 800579a:	461a      	mov	r2, r3
 800579c:	fbb1 f6f7 	udiv	r6, r1, r7
 80057a0:	fb07 1416 	mls	r4, r7, r6, r1
 80057a4:	3430      	adds	r4, #48	@ 0x30
 80057a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057aa:	460c      	mov	r4, r1
 80057ac:	2c63      	cmp	r4, #99	@ 0x63
 80057ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80057b2:	4631      	mov	r1, r6
 80057b4:	dcf1      	bgt.n	800579a <__exponent+0x1c>
 80057b6:	3130      	adds	r1, #48	@ 0x30
 80057b8:	1e94      	subs	r4, r2, #2
 80057ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057be:	1c41      	adds	r1, r0, #1
 80057c0:	4623      	mov	r3, r4
 80057c2:	42ab      	cmp	r3, r5
 80057c4:	d30a      	bcc.n	80057dc <__exponent+0x5e>
 80057c6:	f10d 0309 	add.w	r3, sp, #9
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	42ac      	cmp	r4, r5
 80057ce:	bf88      	it	hi
 80057d0:	2300      	movhi	r3, #0
 80057d2:	3302      	adds	r3, #2
 80057d4:	4403      	add	r3, r0
 80057d6:	1a18      	subs	r0, r3, r0
 80057d8:	b003      	add	sp, #12
 80057da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057e4:	e7ed      	b.n	80057c2 <__exponent+0x44>
 80057e6:	2330      	movs	r3, #48	@ 0x30
 80057e8:	3130      	adds	r1, #48	@ 0x30
 80057ea:	7083      	strb	r3, [r0, #2]
 80057ec:	70c1      	strb	r1, [r0, #3]
 80057ee:	1d03      	adds	r3, r0, #4
 80057f0:	e7f1      	b.n	80057d6 <__exponent+0x58>
	...

080057f4 <_printf_float>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	b08d      	sub	sp, #52	@ 0x34
 80057fa:	460c      	mov	r4, r1
 80057fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005800:	4616      	mov	r6, r2
 8005802:	461f      	mov	r7, r3
 8005804:	4605      	mov	r5, r0
 8005806:	f000 ffed 	bl	80067e4 <_localeconv_r>
 800580a:	6803      	ldr	r3, [r0, #0]
 800580c:	9304      	str	r3, [sp, #16]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fa fd46 	bl	80002a0 <strlen>
 8005814:	2300      	movs	r3, #0
 8005816:	930a      	str	r3, [sp, #40]	@ 0x28
 8005818:	f8d8 3000 	ldr.w	r3, [r8]
 800581c:	9005      	str	r0, [sp, #20]
 800581e:	3307      	adds	r3, #7
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	f103 0208 	add.w	r2, r3, #8
 8005828:	f894 a018 	ldrb.w	sl, [r4, #24]
 800582c:	f8d4 b000 	ldr.w	fp, [r4]
 8005830:	f8c8 2000 	str.w	r2, [r8]
 8005834:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005838:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800583c:	9307      	str	r3, [sp, #28]
 800583e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005842:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800584a:	4b9c      	ldr	r3, [pc, #624]	@ (8005abc <_printf_float+0x2c8>)
 800584c:	f04f 32ff 	mov.w	r2, #4294967295
 8005850:	f7fb f984 	bl	8000b5c <__aeabi_dcmpun>
 8005854:	bb70      	cbnz	r0, 80058b4 <_printf_float+0xc0>
 8005856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800585a:	4b98      	ldr	r3, [pc, #608]	@ (8005abc <_printf_float+0x2c8>)
 800585c:	f04f 32ff 	mov.w	r2, #4294967295
 8005860:	f7fb f95e 	bl	8000b20 <__aeabi_dcmple>
 8005864:	bb30      	cbnz	r0, 80058b4 <_printf_float+0xc0>
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4640      	mov	r0, r8
 800586c:	4649      	mov	r1, r9
 800586e:	f7fb f94d 	bl	8000b0c <__aeabi_dcmplt>
 8005872:	b110      	cbz	r0, 800587a <_printf_float+0x86>
 8005874:	232d      	movs	r3, #45	@ 0x2d
 8005876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800587a:	4a91      	ldr	r2, [pc, #580]	@ (8005ac0 <_printf_float+0x2cc>)
 800587c:	4b91      	ldr	r3, [pc, #580]	@ (8005ac4 <_printf_float+0x2d0>)
 800587e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005882:	bf8c      	ite	hi
 8005884:	4690      	movhi	r8, r2
 8005886:	4698      	movls	r8, r3
 8005888:	2303      	movs	r3, #3
 800588a:	6123      	str	r3, [r4, #16]
 800588c:	f02b 0304 	bic.w	r3, fp, #4
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	f04f 0900 	mov.w	r9, #0
 8005896:	9700      	str	r7, [sp, #0]
 8005898:	4633      	mov	r3, r6
 800589a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f9d2 	bl	8005c48 <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	f040 808d 	bne.w	80059c4 <_printf_float+0x1d0>
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	b00d      	add	sp, #52	@ 0x34
 80058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b4:	4642      	mov	r2, r8
 80058b6:	464b      	mov	r3, r9
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f7fb f94e 	bl	8000b5c <__aeabi_dcmpun>
 80058c0:	b140      	cbz	r0, 80058d4 <_printf_float+0xe0>
 80058c2:	464b      	mov	r3, r9
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfbc      	itt	lt
 80058c8:	232d      	movlt	r3, #45	@ 0x2d
 80058ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058ce:	4a7e      	ldr	r2, [pc, #504]	@ (8005ac8 <_printf_float+0x2d4>)
 80058d0:	4b7e      	ldr	r3, [pc, #504]	@ (8005acc <_printf_float+0x2d8>)
 80058d2:	e7d4      	b.n	800587e <_printf_float+0x8a>
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80058da:	9206      	str	r2, [sp, #24]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	d13b      	bne.n	8005958 <_printf_float+0x164>
 80058e0:	2306      	movs	r3, #6
 80058e2:	6063      	str	r3, [r4, #4]
 80058e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80058e8:	2300      	movs	r3, #0
 80058ea:	6022      	str	r2, [r4, #0]
 80058ec:	9303      	str	r3, [sp, #12]
 80058ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80058f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058f4:	ab09      	add	r3, sp, #36	@ 0x24
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	6861      	ldr	r1, [r4, #4]
 80058fa:	ec49 8b10 	vmov	d0, r8, r9
 80058fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005902:	4628      	mov	r0, r5
 8005904:	f7ff fed6 	bl	80056b4 <__cvt>
 8005908:	9b06      	ldr	r3, [sp, #24]
 800590a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800590c:	2b47      	cmp	r3, #71	@ 0x47
 800590e:	4680      	mov	r8, r0
 8005910:	d129      	bne.n	8005966 <_printf_float+0x172>
 8005912:	1cc8      	adds	r0, r1, #3
 8005914:	db02      	blt.n	800591c <_printf_float+0x128>
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	4299      	cmp	r1, r3
 800591a:	dd41      	ble.n	80059a0 <_printf_float+0x1ac>
 800591c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005920:	fa5f fa8a 	uxtb.w	sl, sl
 8005924:	3901      	subs	r1, #1
 8005926:	4652      	mov	r2, sl
 8005928:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800592c:	9109      	str	r1, [sp, #36]	@ 0x24
 800592e:	f7ff ff26 	bl	800577e <__exponent>
 8005932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005934:	1813      	adds	r3, r2, r0
 8005936:	2a01      	cmp	r2, #1
 8005938:	4681      	mov	r9, r0
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	dc02      	bgt.n	8005944 <_printf_float+0x150>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	07d2      	lsls	r2, r2, #31
 8005942:	d501      	bpl.n	8005948 <_printf_float+0x154>
 8005944:	3301      	adds	r3, #1
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0a2      	beq.n	8005896 <_printf_float+0xa2>
 8005950:	232d      	movs	r3, #45	@ 0x2d
 8005952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005956:	e79e      	b.n	8005896 <_printf_float+0xa2>
 8005958:	9a06      	ldr	r2, [sp, #24]
 800595a:	2a47      	cmp	r2, #71	@ 0x47
 800595c:	d1c2      	bne.n	80058e4 <_printf_float+0xf0>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1c0      	bne.n	80058e4 <_printf_float+0xf0>
 8005962:	2301      	movs	r3, #1
 8005964:	e7bd      	b.n	80058e2 <_printf_float+0xee>
 8005966:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800596a:	d9db      	bls.n	8005924 <_printf_float+0x130>
 800596c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005970:	d118      	bne.n	80059a4 <_printf_float+0x1b0>
 8005972:	2900      	cmp	r1, #0
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	dd0b      	ble.n	8005990 <_printf_float+0x19c>
 8005978:	6121      	str	r1, [r4, #16]
 800597a:	b913      	cbnz	r3, 8005982 <_printf_float+0x18e>
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	07d0      	lsls	r0, r2, #31
 8005980:	d502      	bpl.n	8005988 <_printf_float+0x194>
 8005982:	3301      	adds	r3, #1
 8005984:	440b      	add	r3, r1
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	65a1      	str	r1, [r4, #88]	@ 0x58
 800598a:	f04f 0900 	mov.w	r9, #0
 800598e:	e7db      	b.n	8005948 <_printf_float+0x154>
 8005990:	b913      	cbnz	r3, 8005998 <_printf_float+0x1a4>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	07d2      	lsls	r2, r2, #31
 8005996:	d501      	bpl.n	800599c <_printf_float+0x1a8>
 8005998:	3302      	adds	r3, #2
 800599a:	e7f4      	b.n	8005986 <_printf_float+0x192>
 800599c:	2301      	movs	r3, #1
 800599e:	e7f2      	b.n	8005986 <_printf_float+0x192>
 80059a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059a6:	4299      	cmp	r1, r3
 80059a8:	db05      	blt.n	80059b6 <_printf_float+0x1c2>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6121      	str	r1, [r4, #16]
 80059ae:	07d8      	lsls	r0, r3, #31
 80059b0:	d5ea      	bpl.n	8005988 <_printf_float+0x194>
 80059b2:	1c4b      	adds	r3, r1, #1
 80059b4:	e7e7      	b.n	8005986 <_printf_float+0x192>
 80059b6:	2900      	cmp	r1, #0
 80059b8:	bfd4      	ite	le
 80059ba:	f1c1 0202 	rsble	r2, r1, #2
 80059be:	2201      	movgt	r2, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	e7e0      	b.n	8005986 <_printf_float+0x192>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	055a      	lsls	r2, r3, #21
 80059c8:	d407      	bmi.n	80059da <_printf_float+0x1e6>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	4642      	mov	r2, r8
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	d12b      	bne.n	8005a30 <_printf_float+0x23c>
 80059d8:	e767      	b.n	80058aa <_printf_float+0xb6>
 80059da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059de:	f240 80dd 	bls.w	8005b9c <_printf_float+0x3a8>
 80059e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059e6:	2200      	movs	r2, #0
 80059e8:	2300      	movs	r3, #0
 80059ea:	f7fb f885 	bl	8000af8 <__aeabi_dcmpeq>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d033      	beq.n	8005a5a <_printf_float+0x266>
 80059f2:	4a37      	ldr	r2, [pc, #220]	@ (8005ad0 <_printf_float+0x2dc>)
 80059f4:	2301      	movs	r3, #1
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f af54 	beq.w	80058aa <_printf_float+0xb6>
 8005a02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a06:	4543      	cmp	r3, r8
 8005a08:	db02      	blt.n	8005a10 <_printf_float+0x21c>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	07d8      	lsls	r0, r3, #31
 8005a0e:	d50f      	bpl.n	8005a30 <_printf_float+0x23c>
 8005a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f af45 	beq.w	80058aa <_printf_float+0xb6>
 8005a20:	f04f 0900 	mov.w	r9, #0
 8005a24:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a28:	f104 0a1a 	add.w	sl, r4, #26
 8005a2c:	45c8      	cmp	r8, r9
 8005a2e:	dc09      	bgt.n	8005a44 <_printf_float+0x250>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	079b      	lsls	r3, r3, #30
 8005a34:	f100 8103 	bmi.w	8005c3e <_printf_float+0x44a>
 8005a38:	68e0      	ldr	r0, [r4, #12]
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	bfb8      	it	lt
 8005a40:	4618      	movlt	r0, r3
 8005a42:	e734      	b.n	80058ae <_printf_float+0xba>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4652      	mov	r2, sl
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af2b 	beq.w	80058aa <_printf_float+0xb6>
 8005a54:	f109 0901 	add.w	r9, r9, #1
 8005a58:	e7e8      	b.n	8005a2c <_printf_float+0x238>
 8005a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dc39      	bgt.n	8005ad4 <_printf_float+0x2e0>
 8005a60:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <_printf_float+0x2dc>)
 8005a62:	2301      	movs	r3, #1
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af1d 	beq.w	80058aa <_printf_float+0xb6>
 8005a70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a74:	ea59 0303 	orrs.w	r3, r9, r3
 8005a78:	d102      	bne.n	8005a80 <_printf_float+0x28c>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	07d9      	lsls	r1, r3, #31
 8005a7e:	d5d7      	bpl.n	8005a30 <_printf_float+0x23c>
 8005a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a84:	4631      	mov	r1, r6
 8005a86:	4628      	mov	r0, r5
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f43f af0d 	beq.w	80058aa <_printf_float+0xb6>
 8005a90:	f04f 0a00 	mov.w	sl, #0
 8005a94:	f104 0b1a 	add.w	fp, r4, #26
 8005a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a9a:	425b      	negs	r3, r3
 8005a9c:	4553      	cmp	r3, sl
 8005a9e:	dc01      	bgt.n	8005aa4 <_printf_float+0x2b0>
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	e793      	b.n	80059cc <_printf_float+0x1d8>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	465a      	mov	r2, fp
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f aefb 	beq.w	80058aa <_printf_float+0xb6>
 8005ab4:	f10a 0a01 	add.w	sl, sl, #1
 8005ab8:	e7ee      	b.n	8005a98 <_printf_float+0x2a4>
 8005aba:	bf00      	nop
 8005abc:	7fefffff 	.word	0x7fefffff
 8005ac0:	0801d8dc 	.word	0x0801d8dc
 8005ac4:	0801d8d8 	.word	0x0801d8d8
 8005ac8:	0801d8e4 	.word	0x0801d8e4
 8005acc:	0801d8e0 	.word	0x0801d8e0
 8005ad0:	0801d8e8 	.word	0x0801d8e8
 8005ad4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ad6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ada:	4553      	cmp	r3, sl
 8005adc:	bfa8      	it	ge
 8005ade:	4653      	movge	r3, sl
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	dc36      	bgt.n	8005b54 <_printf_float+0x360>
 8005ae6:	f04f 0b00 	mov.w	fp, #0
 8005aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aee:	f104 021a 	add.w	r2, r4, #26
 8005af2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005af4:	9306      	str	r3, [sp, #24]
 8005af6:	eba3 0309 	sub.w	r3, r3, r9
 8005afa:	455b      	cmp	r3, fp
 8005afc:	dc31      	bgt.n	8005b62 <_printf_float+0x36e>
 8005afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b00:	459a      	cmp	sl, r3
 8005b02:	dc3a      	bgt.n	8005b7a <_printf_float+0x386>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	07da      	lsls	r2, r3, #31
 8005b08:	d437      	bmi.n	8005b7a <_printf_float+0x386>
 8005b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0c:	ebaa 0903 	sub.w	r9, sl, r3
 8005b10:	9b06      	ldr	r3, [sp, #24]
 8005b12:	ebaa 0303 	sub.w	r3, sl, r3
 8005b16:	4599      	cmp	r9, r3
 8005b18:	bfa8      	it	ge
 8005b1a:	4699      	movge	r9, r3
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	dc33      	bgt.n	8005b8a <_printf_float+0x396>
 8005b22:	f04f 0800 	mov.w	r8, #0
 8005b26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b2a:	f104 0b1a 	add.w	fp, r4, #26
 8005b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b30:	ebaa 0303 	sub.w	r3, sl, r3
 8005b34:	eba3 0309 	sub.w	r3, r3, r9
 8005b38:	4543      	cmp	r3, r8
 8005b3a:	f77f af79 	ble.w	8005a30 <_printf_float+0x23c>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	465a      	mov	r2, fp
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f43f aeae 	beq.w	80058aa <_printf_float+0xb6>
 8005b4e:	f108 0801 	add.w	r8, r8, #1
 8005b52:	e7ec      	b.n	8005b2e <_printf_float+0x33a>
 8005b54:	4642      	mov	r2, r8
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1c2      	bne.n	8005ae6 <_printf_float+0x2f2>
 8005b60:	e6a3      	b.n	80058aa <_printf_float+0xb6>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	9206      	str	r2, [sp, #24]
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f ae9c 	beq.w	80058aa <_printf_float+0xb6>
 8005b72:	9a06      	ldr	r2, [sp, #24]
 8005b74:	f10b 0b01 	add.w	fp, fp, #1
 8005b78:	e7bb      	b.n	8005af2 <_printf_float+0x2fe>
 8005b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	d1c0      	bne.n	8005b0a <_printf_float+0x316>
 8005b88:	e68f      	b.n	80058aa <_printf_float+0xb6>
 8005b8a:	9a06      	ldr	r2, [sp, #24]
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	4442      	add	r2, r8
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d1c3      	bne.n	8005b22 <_printf_float+0x32e>
 8005b9a:	e686      	b.n	80058aa <_printf_float+0xb6>
 8005b9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ba0:	f1ba 0f01 	cmp.w	sl, #1
 8005ba4:	dc01      	bgt.n	8005baa <_printf_float+0x3b6>
 8005ba6:	07db      	lsls	r3, r3, #31
 8005ba8:	d536      	bpl.n	8005c18 <_printf_float+0x424>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4642      	mov	r2, r8
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae78 	beq.w	80058aa <_printf_float+0xb6>
 8005bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b8      	blx	r7
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f43f ae70 	beq.w	80058aa <_printf_float+0xb6>
 8005bca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd6:	f7fa ff8f 	bl	8000af8 <__aeabi_dcmpeq>
 8005bda:	b9c0      	cbnz	r0, 8005c0e <_printf_float+0x41a>
 8005bdc:	4653      	mov	r3, sl
 8005bde:	f108 0201 	add.w	r2, r8, #1
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	d10c      	bne.n	8005c06 <_printf_float+0x412>
 8005bec:	e65d      	b.n	80058aa <_printf_float+0xb6>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	465a      	mov	r2, fp
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f ae56 	beq.w	80058aa <_printf_float+0xb6>
 8005bfe:	f108 0801 	add.w	r8, r8, #1
 8005c02:	45d0      	cmp	r8, sl
 8005c04:	dbf3      	blt.n	8005bee <_printf_float+0x3fa>
 8005c06:	464b      	mov	r3, r9
 8005c08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c0c:	e6df      	b.n	80059ce <_printf_float+0x1da>
 8005c0e:	f04f 0800 	mov.w	r8, #0
 8005c12:	f104 0b1a 	add.w	fp, r4, #26
 8005c16:	e7f4      	b.n	8005c02 <_printf_float+0x40e>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	e7e1      	b.n	8005be2 <_printf_float+0x3ee>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	464a      	mov	r2, r9
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae3e 	beq.w	80058aa <_printf_float+0xb6>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	dcf0      	bgt.n	8005c1e <_printf_float+0x42a>
 8005c3c:	e6fc      	b.n	8005a38 <_printf_float+0x244>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	f104 0919 	add.w	r9, r4, #25
 8005c46:	e7f4      	b.n	8005c32 <_printf_float+0x43e>

08005c48 <_printf_common>:
 8005c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	4698      	mov	r8, r3
 8005c50:	688a      	ldr	r2, [r1, #8]
 8005c52:	690b      	ldr	r3, [r1, #16]
 8005c54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	bfb8      	it	lt
 8005c5c:	4613      	movlt	r3, r2
 8005c5e:	6033      	str	r3, [r6, #0]
 8005c60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c64:	4607      	mov	r7, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	b10a      	cbz	r2, 8005c6e <_printf_common+0x26>
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	0699      	lsls	r1, r3, #26
 8005c72:	bf42      	ittt	mi
 8005c74:	6833      	ldrmi	r3, [r6, #0]
 8005c76:	3302      	addmi	r3, #2
 8005c78:	6033      	strmi	r3, [r6, #0]
 8005c7a:	6825      	ldr	r5, [r4, #0]
 8005c7c:	f015 0506 	ands.w	r5, r5, #6
 8005c80:	d106      	bne.n	8005c90 <_printf_common+0x48>
 8005c82:	f104 0a19 	add.w	sl, r4, #25
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	6832      	ldr	r2, [r6, #0]
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dc26      	bgt.n	8005cde <_printf_common+0x96>
 8005c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	3b00      	subs	r3, #0
 8005c98:	bf18      	it	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	0692      	lsls	r2, r2, #26
 8005c9e:	d42b      	bmi.n	8005cf8 <_printf_common+0xb0>
 8005ca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	47c8      	blx	r9
 8005caa:	3001      	adds	r0, #1
 8005cac:	d01e      	beq.n	8005cec <_printf_common+0xa4>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	6922      	ldr	r2, [r4, #16]
 8005cb2:	f003 0306 	and.w	r3, r3, #6
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	bf02      	ittt	eq
 8005cba:	68e5      	ldreq	r5, [r4, #12]
 8005cbc:	6833      	ldreq	r3, [r6, #0]
 8005cbe:	1aed      	subeq	r5, r5, r3
 8005cc0:	68a3      	ldr	r3, [r4, #8]
 8005cc2:	bf0c      	ite	eq
 8005cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc8:	2500      	movne	r5, #0
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bfc4      	itt	gt
 8005cce:	1a9b      	subgt	r3, r3, r2
 8005cd0:	18ed      	addgt	r5, r5, r3
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	341a      	adds	r4, #26
 8005cd6:	42b5      	cmp	r5, r6
 8005cd8:	d11a      	bne.n	8005d10 <_printf_common+0xc8>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e008      	b.n	8005cf0 <_printf_common+0xa8>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	47c8      	blx	r9
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d103      	bne.n	8005cf4 <_printf_common+0xac>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	e7c6      	b.n	8005c86 <_printf_common+0x3e>
 8005cf8:	18e1      	adds	r1, r4, r3
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	2030      	movs	r0, #48	@ 0x30
 8005cfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d02:	4422      	add	r2, r4
 8005d04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	e7c7      	b.n	8005ca0 <_printf_common+0x58>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4622      	mov	r2, r4
 8005d14:	4641      	mov	r1, r8
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c8      	blx	r9
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d0e6      	beq.n	8005cec <_printf_common+0xa4>
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7d9      	b.n	8005cd6 <_printf_common+0x8e>
	...

08005d24 <_printf_i>:
 8005d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	7e0f      	ldrb	r7, [r1, #24]
 8005d2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d2c:	2f78      	cmp	r7, #120	@ 0x78
 8005d2e:	4691      	mov	r9, r2
 8005d30:	4680      	mov	r8, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	469a      	mov	sl, r3
 8005d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d3a:	d807      	bhi.n	8005d4c <_printf_i+0x28>
 8005d3c:	2f62      	cmp	r7, #98	@ 0x62
 8005d3e:	d80a      	bhi.n	8005d56 <_printf_i+0x32>
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	f000 80d1 	beq.w	8005ee8 <_printf_i+0x1c4>
 8005d46:	2f58      	cmp	r7, #88	@ 0x58
 8005d48:	f000 80b8 	beq.w	8005ebc <_printf_i+0x198>
 8005d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d54:	e03a      	b.n	8005dcc <_printf_i+0xa8>
 8005d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d5a:	2b15      	cmp	r3, #21
 8005d5c:	d8f6      	bhi.n	8005d4c <_printf_i+0x28>
 8005d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d64 <_printf_i+0x40>)
 8005d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005d4d 	.word	0x08005d4d
 8005d70:	08005d4d 	.word	0x08005d4d
 8005d74:	08005d4d 	.word	0x08005d4d
 8005d78:	08005d4d 	.word	0x08005d4d
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005d4d 	.word	0x08005d4d
 8005d84:	08005d4d 	.word	0x08005d4d
 8005d88:	08005d4d 	.word	0x08005d4d
 8005d8c:	08005d4d 	.word	0x08005d4d
 8005d90:	08005ecf 	.word	0x08005ecf
 8005d94:	08005dfb 	.word	0x08005dfb
 8005d98:	08005e89 	.word	0x08005e89
 8005d9c:	08005d4d 	.word	0x08005d4d
 8005da0:	08005d4d 	.word	0x08005d4d
 8005da4:	08005ef1 	.word	0x08005ef1
 8005da8:	08005d4d 	.word	0x08005d4d
 8005dac:	08005dfb 	.word	0x08005dfb
 8005db0:	08005d4d 	.word	0x08005d4d
 8005db4:	08005d4d 	.word	0x08005d4d
 8005db8:	08005e91 	.word	0x08005e91
 8005dbc:	6833      	ldr	r3, [r6, #0]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6032      	str	r2, [r6, #0]
 8005dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e09c      	b.n	8005f0a <_printf_i+0x1e6>
 8005dd0:	6833      	ldr	r3, [r6, #0]
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	6031      	str	r1, [r6, #0]
 8005dd8:	0606      	lsls	r6, r0, #24
 8005dda:	d501      	bpl.n	8005de0 <_printf_i+0xbc>
 8005ddc:	681d      	ldr	r5, [r3, #0]
 8005dde:	e003      	b.n	8005de8 <_printf_i+0xc4>
 8005de0:	0645      	lsls	r5, r0, #25
 8005de2:	d5fb      	bpl.n	8005ddc <_printf_i+0xb8>
 8005de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	da03      	bge.n	8005df4 <_printf_i+0xd0>
 8005dec:	232d      	movs	r3, #45	@ 0x2d
 8005dee:	426d      	negs	r5, r5
 8005df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005df4:	4858      	ldr	r0, [pc, #352]	@ (8005f58 <_printf_i+0x234>)
 8005df6:	230a      	movs	r3, #10
 8005df8:	e011      	b.n	8005e1e <_printf_i+0xfa>
 8005dfa:	6821      	ldr	r1, [r4, #0]
 8005dfc:	6833      	ldr	r3, [r6, #0]
 8005dfe:	0608      	lsls	r0, r1, #24
 8005e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e04:	d402      	bmi.n	8005e0c <_printf_i+0xe8>
 8005e06:	0649      	lsls	r1, r1, #25
 8005e08:	bf48      	it	mi
 8005e0a:	b2ad      	uxthmi	r5, r5
 8005e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e0e:	4852      	ldr	r0, [pc, #328]	@ (8005f58 <_printf_i+0x234>)
 8005e10:	6033      	str	r3, [r6, #0]
 8005e12:	bf14      	ite	ne
 8005e14:	230a      	movne	r3, #10
 8005e16:	2308      	moveq	r3, #8
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e1e:	6866      	ldr	r6, [r4, #4]
 8005e20:	60a6      	str	r6, [r4, #8]
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	db05      	blt.n	8005e32 <_printf_i+0x10e>
 8005e26:	6821      	ldr	r1, [r4, #0]
 8005e28:	432e      	orrs	r6, r5
 8005e2a:	f021 0104 	bic.w	r1, r1, #4
 8005e2e:	6021      	str	r1, [r4, #0]
 8005e30:	d04b      	beq.n	8005eca <_printf_i+0x1a6>
 8005e32:	4616      	mov	r6, r2
 8005e34:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e38:	fb03 5711 	mls	r7, r3, r1, r5
 8005e3c:	5dc7      	ldrb	r7, [r0, r7]
 8005e3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e42:	462f      	mov	r7, r5
 8005e44:	42bb      	cmp	r3, r7
 8005e46:	460d      	mov	r5, r1
 8005e48:	d9f4      	bls.n	8005e34 <_printf_i+0x110>
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d10b      	bne.n	8005e66 <_printf_i+0x142>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	07df      	lsls	r7, r3, #31
 8005e52:	d508      	bpl.n	8005e66 <_printf_i+0x142>
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	6861      	ldr	r1, [r4, #4]
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	bfde      	ittt	le
 8005e5c:	2330      	movle	r3, #48	@ 0x30
 8005e5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e66:	1b92      	subs	r2, r2, r6
 8005e68:	6122      	str	r2, [r4, #16]
 8005e6a:	f8cd a000 	str.w	sl, [sp]
 8005e6e:	464b      	mov	r3, r9
 8005e70:	aa03      	add	r2, sp, #12
 8005e72:	4621      	mov	r1, r4
 8005e74:	4640      	mov	r0, r8
 8005e76:	f7ff fee7 	bl	8005c48 <_printf_common>
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d14a      	bne.n	8005f14 <_printf_i+0x1f0>
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	b004      	add	sp, #16
 8005e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	f043 0320 	orr.w	r3, r3, #32
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	4832      	ldr	r0, [pc, #200]	@ (8005f5c <_printf_i+0x238>)
 8005e92:	2778      	movs	r7, #120	@ 0x78
 8005e94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	6831      	ldr	r1, [r6, #0]
 8005e9c:	061f      	lsls	r7, r3, #24
 8005e9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ea2:	d402      	bmi.n	8005eaa <_printf_i+0x186>
 8005ea4:	065f      	lsls	r7, r3, #25
 8005ea6:	bf48      	it	mi
 8005ea8:	b2ad      	uxthmi	r5, r5
 8005eaa:	6031      	str	r1, [r6, #0]
 8005eac:	07d9      	lsls	r1, r3, #31
 8005eae:	bf44      	itt	mi
 8005eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8005eb4:	6023      	strmi	r3, [r4, #0]
 8005eb6:	b11d      	cbz	r5, 8005ec0 <_printf_i+0x19c>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	e7ad      	b.n	8005e18 <_printf_i+0xf4>
 8005ebc:	4826      	ldr	r0, [pc, #152]	@ (8005f58 <_printf_i+0x234>)
 8005ebe:	e7e9      	b.n	8005e94 <_printf_i+0x170>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	f023 0320 	bic.w	r3, r3, #32
 8005ec6:	6023      	str	r3, [r4, #0]
 8005ec8:	e7f6      	b.n	8005eb8 <_printf_i+0x194>
 8005eca:	4616      	mov	r6, r2
 8005ecc:	e7bd      	b.n	8005e4a <_printf_i+0x126>
 8005ece:	6833      	ldr	r3, [r6, #0]
 8005ed0:	6825      	ldr	r5, [r4, #0]
 8005ed2:	6961      	ldr	r1, [r4, #20]
 8005ed4:	1d18      	adds	r0, r3, #4
 8005ed6:	6030      	str	r0, [r6, #0]
 8005ed8:	062e      	lsls	r6, r5, #24
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	d501      	bpl.n	8005ee2 <_printf_i+0x1be>
 8005ede:	6019      	str	r1, [r3, #0]
 8005ee0:	e002      	b.n	8005ee8 <_printf_i+0x1c4>
 8005ee2:	0668      	lsls	r0, r5, #25
 8005ee4:	d5fb      	bpl.n	8005ede <_printf_i+0x1ba>
 8005ee6:	8019      	strh	r1, [r3, #0]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	4616      	mov	r6, r2
 8005eee:	e7bc      	b.n	8005e6a <_printf_i+0x146>
 8005ef0:	6833      	ldr	r3, [r6, #0]
 8005ef2:	1d1a      	adds	r2, r3, #4
 8005ef4:	6032      	str	r2, [r6, #0]
 8005ef6:	681e      	ldr	r6, [r3, #0]
 8005ef8:	6862      	ldr	r2, [r4, #4]
 8005efa:	2100      	movs	r1, #0
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7fa f97f 	bl	8000200 <memchr>
 8005f02:	b108      	cbz	r0, 8005f08 <_printf_i+0x1e4>
 8005f04:	1b80      	subs	r0, r0, r6
 8005f06:	6060      	str	r0, [r4, #4]
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f12:	e7aa      	b.n	8005e6a <_printf_i+0x146>
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	4632      	mov	r2, r6
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	47d0      	blx	sl
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d0ad      	beq.n	8005e7e <_printf_i+0x15a>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	079b      	lsls	r3, r3, #30
 8005f26:	d413      	bmi.n	8005f50 <_printf_i+0x22c>
 8005f28:	68e0      	ldr	r0, [r4, #12]
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	4298      	cmp	r0, r3
 8005f2e:	bfb8      	it	lt
 8005f30:	4618      	movlt	r0, r3
 8005f32:	e7a6      	b.n	8005e82 <_printf_i+0x15e>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4632      	mov	r2, r6
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	47d0      	blx	sl
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d09d      	beq.n	8005e7e <_printf_i+0x15a>
 8005f42:	3501      	adds	r5, #1
 8005f44:	68e3      	ldr	r3, [r4, #12]
 8005f46:	9903      	ldr	r1, [sp, #12]
 8005f48:	1a5b      	subs	r3, r3, r1
 8005f4a:	42ab      	cmp	r3, r5
 8005f4c:	dcf2      	bgt.n	8005f34 <_printf_i+0x210>
 8005f4e:	e7eb      	b.n	8005f28 <_printf_i+0x204>
 8005f50:	2500      	movs	r5, #0
 8005f52:	f104 0619 	add.w	r6, r4, #25
 8005f56:	e7f5      	b.n	8005f44 <_printf_i+0x220>
 8005f58:	0801d8ea 	.word	0x0801d8ea
 8005f5c:	0801d8fb 	.word	0x0801d8fb

08005f60 <_scanf_float>:
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	b087      	sub	sp, #28
 8005f66:	4691      	mov	r9, r2
 8005f68:	9303      	str	r3, [sp, #12]
 8005f6a:	688b      	ldr	r3, [r1, #8]
 8005f6c:	1e5a      	subs	r2, r3, #1
 8005f6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005f72:	bf81      	itttt	hi
 8005f74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005f78:	eb03 0b05 	addhi.w	fp, r3, r5
 8005f7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005f80:	608b      	strhi	r3, [r1, #8]
 8005f82:	680b      	ldr	r3, [r1, #0]
 8005f84:	460a      	mov	r2, r1
 8005f86:	f04f 0500 	mov.w	r5, #0
 8005f8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005f8e:	f842 3b1c 	str.w	r3, [r2], #28
 8005f92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f96:	4680      	mov	r8, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	bf98      	it	ls
 8005f9c:	f04f 0b00 	movls.w	fp, #0
 8005fa0:	9201      	str	r2, [sp, #4]
 8005fa2:	4616      	mov	r6, r2
 8005fa4:	46aa      	mov	sl, r5
 8005fa6:	462f      	mov	r7, r5
 8005fa8:	9502      	str	r5, [sp, #8]
 8005faa:	68a2      	ldr	r2, [r4, #8]
 8005fac:	b15a      	cbz	r2, 8005fc6 <_scanf_float+0x66>
 8005fae:	f8d9 3000 	ldr.w	r3, [r9]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b4e      	cmp	r3, #78	@ 0x4e
 8005fb6:	d863      	bhi.n	8006080 <_scanf_float+0x120>
 8005fb8:	2b40      	cmp	r3, #64	@ 0x40
 8005fba:	d83b      	bhi.n	8006034 <_scanf_float+0xd4>
 8005fbc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005fc0:	b2c8      	uxtb	r0, r1
 8005fc2:	280e      	cmp	r0, #14
 8005fc4:	d939      	bls.n	800603a <_scanf_float+0xda>
 8005fc6:	b11f      	cbz	r7, 8005fd0 <_scanf_float+0x70>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fd4:	f1ba 0f01 	cmp.w	sl, #1
 8005fd8:	f200 8114 	bhi.w	8006204 <_scanf_float+0x2a4>
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	429e      	cmp	r6, r3
 8005fe0:	f200 8105 	bhi.w	80061ee <_scanf_float+0x28e>
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	b007      	add	sp, #28
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005ff0:	2a0d      	cmp	r2, #13
 8005ff2:	d8e8      	bhi.n	8005fc6 <_scanf_float+0x66>
 8005ff4:	a101      	add	r1, pc, #4	@ (adr r1, 8005ffc <_scanf_float+0x9c>)
 8005ff6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006145 	.word	0x08006145
 8006000:	08005fc7 	.word	0x08005fc7
 8006004:	08005fc7 	.word	0x08005fc7
 8006008:	08005fc7 	.word	0x08005fc7
 800600c:	080061a1 	.word	0x080061a1
 8006010:	0800617b 	.word	0x0800617b
 8006014:	08005fc7 	.word	0x08005fc7
 8006018:	08005fc7 	.word	0x08005fc7
 800601c:	08006153 	.word	0x08006153
 8006020:	08005fc7 	.word	0x08005fc7
 8006024:	08005fc7 	.word	0x08005fc7
 8006028:	08005fc7 	.word	0x08005fc7
 800602c:	08005fc7 	.word	0x08005fc7
 8006030:	0800610f 	.word	0x0800610f
 8006034:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006038:	e7da      	b.n	8005ff0 <_scanf_float+0x90>
 800603a:	290e      	cmp	r1, #14
 800603c:	d8c3      	bhi.n	8005fc6 <_scanf_float+0x66>
 800603e:	a001      	add	r0, pc, #4	@ (adr r0, 8006044 <_scanf_float+0xe4>)
 8006040:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006044:	080060ff 	.word	0x080060ff
 8006048:	08005fc7 	.word	0x08005fc7
 800604c:	080060ff 	.word	0x080060ff
 8006050:	0800618f 	.word	0x0800618f
 8006054:	08005fc7 	.word	0x08005fc7
 8006058:	080060a1 	.word	0x080060a1
 800605c:	080060e5 	.word	0x080060e5
 8006060:	080060e5 	.word	0x080060e5
 8006064:	080060e5 	.word	0x080060e5
 8006068:	080060e5 	.word	0x080060e5
 800606c:	080060e5 	.word	0x080060e5
 8006070:	080060e5 	.word	0x080060e5
 8006074:	080060e5 	.word	0x080060e5
 8006078:	080060e5 	.word	0x080060e5
 800607c:	080060e5 	.word	0x080060e5
 8006080:	2b6e      	cmp	r3, #110	@ 0x6e
 8006082:	d809      	bhi.n	8006098 <_scanf_float+0x138>
 8006084:	2b60      	cmp	r3, #96	@ 0x60
 8006086:	d8b1      	bhi.n	8005fec <_scanf_float+0x8c>
 8006088:	2b54      	cmp	r3, #84	@ 0x54
 800608a:	d07b      	beq.n	8006184 <_scanf_float+0x224>
 800608c:	2b59      	cmp	r3, #89	@ 0x59
 800608e:	d19a      	bne.n	8005fc6 <_scanf_float+0x66>
 8006090:	2d07      	cmp	r5, #7
 8006092:	d198      	bne.n	8005fc6 <_scanf_float+0x66>
 8006094:	2508      	movs	r5, #8
 8006096:	e02f      	b.n	80060f8 <_scanf_float+0x198>
 8006098:	2b74      	cmp	r3, #116	@ 0x74
 800609a:	d073      	beq.n	8006184 <_scanf_float+0x224>
 800609c:	2b79      	cmp	r3, #121	@ 0x79
 800609e:	e7f6      	b.n	800608e <_scanf_float+0x12e>
 80060a0:	6821      	ldr	r1, [r4, #0]
 80060a2:	05c8      	lsls	r0, r1, #23
 80060a4:	d51e      	bpl.n	80060e4 <_scanf_float+0x184>
 80060a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80060aa:	6021      	str	r1, [r4, #0]
 80060ac:	3701      	adds	r7, #1
 80060ae:	f1bb 0f00 	cmp.w	fp, #0
 80060b2:	d003      	beq.n	80060bc <_scanf_float+0x15c>
 80060b4:	3201      	adds	r2, #1
 80060b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060ba:	60a2      	str	r2, [r4, #8]
 80060bc:	68a3      	ldr	r3, [r4, #8]
 80060be:	3b01      	subs	r3, #1
 80060c0:	60a3      	str	r3, [r4, #8]
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	3301      	adds	r3, #1
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f8c9 3004 	str.w	r3, [r9, #4]
 80060d4:	f340 8082 	ble.w	80061dc <_scanf_float+0x27c>
 80060d8:	f8d9 3000 	ldr.w	r3, [r9]
 80060dc:	3301      	adds	r3, #1
 80060de:	f8c9 3000 	str.w	r3, [r9]
 80060e2:	e762      	b.n	8005faa <_scanf_float+0x4a>
 80060e4:	eb1a 0105 	adds.w	r1, sl, r5
 80060e8:	f47f af6d 	bne.w	8005fc6 <_scanf_float+0x66>
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80060f2:	6022      	str	r2, [r4, #0]
 80060f4:	460d      	mov	r5, r1
 80060f6:	468a      	mov	sl, r1
 80060f8:	f806 3b01 	strb.w	r3, [r6], #1
 80060fc:	e7de      	b.n	80060bc <_scanf_float+0x15c>
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	0610      	lsls	r0, r2, #24
 8006102:	f57f af60 	bpl.w	8005fc6 <_scanf_float+0x66>
 8006106:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800610a:	6022      	str	r2, [r4, #0]
 800610c:	e7f4      	b.n	80060f8 <_scanf_float+0x198>
 800610e:	f1ba 0f00 	cmp.w	sl, #0
 8006112:	d10c      	bne.n	800612e <_scanf_float+0x1ce>
 8006114:	b977      	cbnz	r7, 8006134 <_scanf_float+0x1d4>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800611c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006120:	d108      	bne.n	8006134 <_scanf_float+0x1d4>
 8006122:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006126:	6022      	str	r2, [r4, #0]
 8006128:	f04f 0a01 	mov.w	sl, #1
 800612c:	e7e4      	b.n	80060f8 <_scanf_float+0x198>
 800612e:	f1ba 0f02 	cmp.w	sl, #2
 8006132:	d050      	beq.n	80061d6 <_scanf_float+0x276>
 8006134:	2d01      	cmp	r5, #1
 8006136:	d002      	beq.n	800613e <_scanf_float+0x1de>
 8006138:	2d04      	cmp	r5, #4
 800613a:	f47f af44 	bne.w	8005fc6 <_scanf_float+0x66>
 800613e:	3501      	adds	r5, #1
 8006140:	b2ed      	uxtb	r5, r5
 8006142:	e7d9      	b.n	80060f8 <_scanf_float+0x198>
 8006144:	f1ba 0f01 	cmp.w	sl, #1
 8006148:	f47f af3d 	bne.w	8005fc6 <_scanf_float+0x66>
 800614c:	f04f 0a02 	mov.w	sl, #2
 8006150:	e7d2      	b.n	80060f8 <_scanf_float+0x198>
 8006152:	b975      	cbnz	r5, 8006172 <_scanf_float+0x212>
 8006154:	2f00      	cmp	r7, #0
 8006156:	f47f af37 	bne.w	8005fc8 <_scanf_float+0x68>
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006160:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006164:	f040 8103 	bne.w	800636e <_scanf_float+0x40e>
 8006168:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800616c:	6022      	str	r2, [r4, #0]
 800616e:	2501      	movs	r5, #1
 8006170:	e7c2      	b.n	80060f8 <_scanf_float+0x198>
 8006172:	2d03      	cmp	r5, #3
 8006174:	d0e3      	beq.n	800613e <_scanf_float+0x1de>
 8006176:	2d05      	cmp	r5, #5
 8006178:	e7df      	b.n	800613a <_scanf_float+0x1da>
 800617a:	2d02      	cmp	r5, #2
 800617c:	f47f af23 	bne.w	8005fc6 <_scanf_float+0x66>
 8006180:	2503      	movs	r5, #3
 8006182:	e7b9      	b.n	80060f8 <_scanf_float+0x198>
 8006184:	2d06      	cmp	r5, #6
 8006186:	f47f af1e 	bne.w	8005fc6 <_scanf_float+0x66>
 800618a:	2507      	movs	r5, #7
 800618c:	e7b4      	b.n	80060f8 <_scanf_float+0x198>
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	0591      	lsls	r1, r2, #22
 8006192:	f57f af18 	bpl.w	8005fc6 <_scanf_float+0x66>
 8006196:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800619a:	6022      	str	r2, [r4, #0]
 800619c:	9702      	str	r7, [sp, #8]
 800619e:	e7ab      	b.n	80060f8 <_scanf_float+0x198>
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80061a6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80061aa:	d005      	beq.n	80061b8 <_scanf_float+0x258>
 80061ac:	0550      	lsls	r0, r2, #21
 80061ae:	f57f af0a 	bpl.w	8005fc6 <_scanf_float+0x66>
 80061b2:	2f00      	cmp	r7, #0
 80061b4:	f000 80db 	beq.w	800636e <_scanf_float+0x40e>
 80061b8:	0591      	lsls	r1, r2, #22
 80061ba:	bf58      	it	pl
 80061bc:	9902      	ldrpl	r1, [sp, #8]
 80061be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061c2:	bf58      	it	pl
 80061c4:	1a79      	subpl	r1, r7, r1
 80061c6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80061ca:	bf58      	it	pl
 80061cc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80061d0:	6022      	str	r2, [r4, #0]
 80061d2:	2700      	movs	r7, #0
 80061d4:	e790      	b.n	80060f8 <_scanf_float+0x198>
 80061d6:	f04f 0a03 	mov.w	sl, #3
 80061da:	e78d      	b.n	80060f8 <_scanf_float+0x198>
 80061dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80061e0:	4649      	mov	r1, r9
 80061e2:	4640      	mov	r0, r8
 80061e4:	4798      	blx	r3
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f43f aedf 	beq.w	8005faa <_scanf_float+0x4a>
 80061ec:	e6eb      	b.n	8005fc6 <_scanf_float+0x66>
 80061ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061f6:	464a      	mov	r2, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	4798      	blx	r3
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	3b01      	subs	r3, #1
 8006200:	6123      	str	r3, [r4, #16]
 8006202:	e6eb      	b.n	8005fdc <_scanf_float+0x7c>
 8006204:	1e6b      	subs	r3, r5, #1
 8006206:	2b06      	cmp	r3, #6
 8006208:	d824      	bhi.n	8006254 <_scanf_float+0x2f4>
 800620a:	2d02      	cmp	r5, #2
 800620c:	d836      	bhi.n	800627c <_scanf_float+0x31c>
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	429e      	cmp	r6, r3
 8006212:	f67f aee7 	bls.w	8005fe4 <_scanf_float+0x84>
 8006216:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800621a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800621e:	464a      	mov	r2, r9
 8006220:	4640      	mov	r0, r8
 8006222:	4798      	blx	r3
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	3b01      	subs	r3, #1
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	e7f0      	b.n	800620e <_scanf_float+0x2ae>
 800622c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006230:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006234:	464a      	mov	r2, r9
 8006236:	4640      	mov	r0, r8
 8006238:	4798      	blx	r3
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	3b01      	subs	r3, #1
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006244:	fa5f fa8a 	uxtb.w	sl, sl
 8006248:	f1ba 0f02 	cmp.w	sl, #2
 800624c:	d1ee      	bne.n	800622c <_scanf_float+0x2cc>
 800624e:	3d03      	subs	r5, #3
 8006250:	b2ed      	uxtb	r5, r5
 8006252:	1b76      	subs	r6, r6, r5
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	05da      	lsls	r2, r3, #23
 8006258:	d530      	bpl.n	80062bc <_scanf_float+0x35c>
 800625a:	055b      	lsls	r3, r3, #21
 800625c:	d511      	bpl.n	8006282 <_scanf_float+0x322>
 800625e:	9b01      	ldr	r3, [sp, #4]
 8006260:	429e      	cmp	r6, r3
 8006262:	f67f aebf 	bls.w	8005fe4 <_scanf_float+0x84>
 8006266:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800626a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800626e:	464a      	mov	r2, r9
 8006270:	4640      	mov	r0, r8
 8006272:	4798      	blx	r3
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	3b01      	subs	r3, #1
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	e7f0      	b.n	800625e <_scanf_float+0x2fe>
 800627c:	46aa      	mov	sl, r5
 800627e:	46b3      	mov	fp, r6
 8006280:	e7de      	b.n	8006240 <_scanf_float+0x2e0>
 8006282:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	2965      	cmp	r1, #101	@ 0x65
 800628a:	f103 33ff 	add.w	r3, r3, #4294967295
 800628e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	d00c      	beq.n	80062b0 <_scanf_float+0x350>
 8006296:	2945      	cmp	r1, #69	@ 0x45
 8006298:	d00a      	beq.n	80062b0 <_scanf_float+0x350>
 800629a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800629e:	464a      	mov	r2, r9
 80062a0:	4640      	mov	r0, r8
 80062a2:	4798      	blx	r3
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	1eb5      	subs	r5, r6, #2
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062b4:	464a      	mov	r2, r9
 80062b6:	4640      	mov	r0, r8
 80062b8:	4798      	blx	r3
 80062ba:	462e      	mov	r6, r5
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	f012 0210 	ands.w	r2, r2, #16
 80062c2:	d001      	beq.n	80062c8 <_scanf_float+0x368>
 80062c4:	2000      	movs	r0, #0
 80062c6:	e68e      	b.n	8005fe6 <_scanf_float+0x86>
 80062c8:	7032      	strb	r2, [r6, #0]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d4:	d125      	bne.n	8006322 <_scanf_float+0x3c2>
 80062d6:	9b02      	ldr	r3, [sp, #8]
 80062d8:	429f      	cmp	r7, r3
 80062da:	d00a      	beq.n	80062f2 <_scanf_float+0x392>
 80062dc:	1bda      	subs	r2, r3, r7
 80062de:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80062e2:	429e      	cmp	r6, r3
 80062e4:	bf28      	it	cs
 80062e6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80062ea:	4922      	ldr	r1, [pc, #136]	@ (8006374 <_scanf_float+0x414>)
 80062ec:	4630      	mov	r0, r6
 80062ee:	f000 f977 	bl	80065e0 <siprintf>
 80062f2:	9901      	ldr	r1, [sp, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	4640      	mov	r0, r8
 80062f8:	f002 fc62 	bl	8008bc0 <_strtod_r>
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	6821      	ldr	r1, [r4, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f011 0f02 	tst.w	r1, #2
 8006306:	ec57 6b10 	vmov	r6, r7, d0
 800630a:	f103 0204 	add.w	r2, r3, #4
 800630e:	d015      	beq.n	800633c <_scanf_float+0x3dc>
 8006310:	9903      	ldr	r1, [sp, #12]
 8006312:	600a      	str	r2, [r1, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	e9c3 6700 	strd	r6, r7, [r3]
 800631a:	68e3      	ldr	r3, [r4, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	60e3      	str	r3, [r4, #12]
 8006320:	e7d0      	b.n	80062c4 <_scanf_float+0x364>
 8006322:	9b04      	ldr	r3, [sp, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0e4      	beq.n	80062f2 <_scanf_float+0x392>
 8006328:	9905      	ldr	r1, [sp, #20]
 800632a:	230a      	movs	r3, #10
 800632c:	3101      	adds	r1, #1
 800632e:	4640      	mov	r0, r8
 8006330:	f002 fcc6 	bl	8008cc0 <_strtol_r>
 8006334:	9b04      	ldr	r3, [sp, #16]
 8006336:	9e05      	ldr	r6, [sp, #20]
 8006338:	1ac2      	subs	r2, r0, r3
 800633a:	e7d0      	b.n	80062de <_scanf_float+0x37e>
 800633c:	f011 0f04 	tst.w	r1, #4
 8006340:	9903      	ldr	r1, [sp, #12]
 8006342:	600a      	str	r2, [r1, #0]
 8006344:	d1e6      	bne.n	8006314 <_scanf_float+0x3b4>
 8006346:	681d      	ldr	r5, [r3, #0]
 8006348:	4632      	mov	r2, r6
 800634a:	463b      	mov	r3, r7
 800634c:	4630      	mov	r0, r6
 800634e:	4639      	mov	r1, r7
 8006350:	f7fa fc04 	bl	8000b5c <__aeabi_dcmpun>
 8006354:	b128      	cbz	r0, 8006362 <_scanf_float+0x402>
 8006356:	4808      	ldr	r0, [pc, #32]	@ (8006378 <_scanf_float+0x418>)
 8006358:	f000 fada 	bl	8006910 <nanf>
 800635c:	ed85 0a00 	vstr	s0, [r5]
 8006360:	e7db      	b.n	800631a <_scanf_float+0x3ba>
 8006362:	4630      	mov	r0, r6
 8006364:	4639      	mov	r1, r7
 8006366:	f7fa fc57 	bl	8000c18 <__aeabi_d2f>
 800636a:	6028      	str	r0, [r5, #0]
 800636c:	e7d5      	b.n	800631a <_scanf_float+0x3ba>
 800636e:	2700      	movs	r7, #0
 8006370:	e62e      	b.n	8005fd0 <_scanf_float+0x70>
 8006372:	bf00      	nop
 8006374:	0801d90c 	.word	0x0801d90c
 8006378:	0801da4d 	.word	0x0801da4d

0800637c <std>:
 800637c:	2300      	movs	r3, #0
 800637e:	b510      	push	{r4, lr}
 8006380:	4604      	mov	r4, r0
 8006382:	e9c0 3300 	strd	r3, r3, [r0]
 8006386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800638a:	6083      	str	r3, [r0, #8]
 800638c:	8181      	strh	r1, [r0, #12]
 800638e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006390:	81c2      	strh	r2, [r0, #14]
 8006392:	6183      	str	r3, [r0, #24]
 8006394:	4619      	mov	r1, r3
 8006396:	2208      	movs	r2, #8
 8006398:	305c      	adds	r0, #92	@ 0x5c
 800639a:	f000 fa1b 	bl	80067d4 <memset>
 800639e:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <std+0x58>)
 80063a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80063a2:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <std+0x5c>)
 80063a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063a6:	4b0d      	ldr	r3, [pc, #52]	@ (80063dc <std+0x60>)
 80063a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063aa:	4b0d      	ldr	r3, [pc, #52]	@ (80063e0 <std+0x64>)
 80063ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80063ae:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <std+0x68>)
 80063b0:	6224      	str	r4, [r4, #32]
 80063b2:	429c      	cmp	r4, r3
 80063b4:	d006      	beq.n	80063c4 <std+0x48>
 80063b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063ba:	4294      	cmp	r4, r2
 80063bc:	d002      	beq.n	80063c4 <std+0x48>
 80063be:	33d0      	adds	r3, #208	@ 0xd0
 80063c0:	429c      	cmp	r4, r3
 80063c2:	d105      	bne.n	80063d0 <std+0x54>
 80063c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063cc:	f000 ba8e 	b.w	80068ec <__retarget_lock_init_recursive>
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	bf00      	nop
 80063d4:	08006625 	.word	0x08006625
 80063d8:	08006647 	.word	0x08006647
 80063dc:	0800667f 	.word	0x0800667f
 80063e0:	080066a3 	.word	0x080066a3
 80063e4:	2005c528 	.word	0x2005c528

080063e8 <stdio_exit_handler>:
 80063e8:	4a02      	ldr	r2, [pc, #8]	@ (80063f4 <stdio_exit_handler+0xc>)
 80063ea:	4903      	ldr	r1, [pc, #12]	@ (80063f8 <stdio_exit_handler+0x10>)
 80063ec:	4803      	ldr	r0, [pc, #12]	@ (80063fc <stdio_exit_handler+0x14>)
 80063ee:	f000 b869 	b.w	80064c4 <_fwalk_sglue>
 80063f2:	bf00      	nop
 80063f4:	2004000c 	.word	0x2004000c
 80063f8:	08009301 	.word	0x08009301
 80063fc:	2004001c 	.word	0x2004001c

08006400 <cleanup_stdio>:
 8006400:	6841      	ldr	r1, [r0, #4]
 8006402:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <cleanup_stdio+0x34>)
 8006404:	4299      	cmp	r1, r3
 8006406:	b510      	push	{r4, lr}
 8006408:	4604      	mov	r4, r0
 800640a:	d001      	beq.n	8006410 <cleanup_stdio+0x10>
 800640c:	f002 ff78 	bl	8009300 <_fflush_r>
 8006410:	68a1      	ldr	r1, [r4, #8]
 8006412:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <cleanup_stdio+0x38>)
 8006414:	4299      	cmp	r1, r3
 8006416:	d002      	beq.n	800641e <cleanup_stdio+0x1e>
 8006418:	4620      	mov	r0, r4
 800641a:	f002 ff71 	bl	8009300 <_fflush_r>
 800641e:	68e1      	ldr	r1, [r4, #12]
 8006420:	4b06      	ldr	r3, [pc, #24]	@ (800643c <cleanup_stdio+0x3c>)
 8006422:	4299      	cmp	r1, r3
 8006424:	d004      	beq.n	8006430 <cleanup_stdio+0x30>
 8006426:	4620      	mov	r0, r4
 8006428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800642c:	f002 bf68 	b.w	8009300 <_fflush_r>
 8006430:	bd10      	pop	{r4, pc}
 8006432:	bf00      	nop
 8006434:	2005c528 	.word	0x2005c528
 8006438:	2005c590 	.word	0x2005c590
 800643c:	2005c5f8 	.word	0x2005c5f8

08006440 <global_stdio_init.part.0>:
 8006440:	b510      	push	{r4, lr}
 8006442:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <global_stdio_init.part.0+0x30>)
 8006444:	4c0b      	ldr	r4, [pc, #44]	@ (8006474 <global_stdio_init.part.0+0x34>)
 8006446:	4a0c      	ldr	r2, [pc, #48]	@ (8006478 <global_stdio_init.part.0+0x38>)
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	4620      	mov	r0, r4
 800644c:	2200      	movs	r2, #0
 800644e:	2104      	movs	r1, #4
 8006450:	f7ff ff94 	bl	800637c <std>
 8006454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006458:	2201      	movs	r2, #1
 800645a:	2109      	movs	r1, #9
 800645c:	f7ff ff8e 	bl	800637c <std>
 8006460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006464:	2202      	movs	r2, #2
 8006466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800646a:	2112      	movs	r1, #18
 800646c:	f7ff bf86 	b.w	800637c <std>
 8006470:	2005c660 	.word	0x2005c660
 8006474:	2005c528 	.word	0x2005c528
 8006478:	080063e9 	.word	0x080063e9

0800647c <__sfp_lock_acquire>:
 800647c:	4801      	ldr	r0, [pc, #4]	@ (8006484 <__sfp_lock_acquire+0x8>)
 800647e:	f000 ba36 	b.w	80068ee <__retarget_lock_acquire_recursive>
 8006482:	bf00      	nop
 8006484:	2005c669 	.word	0x2005c669

08006488 <__sfp_lock_release>:
 8006488:	4801      	ldr	r0, [pc, #4]	@ (8006490 <__sfp_lock_release+0x8>)
 800648a:	f000 ba31 	b.w	80068f0 <__retarget_lock_release_recursive>
 800648e:	bf00      	nop
 8006490:	2005c669 	.word	0x2005c669

08006494 <__sinit>:
 8006494:	b510      	push	{r4, lr}
 8006496:	4604      	mov	r4, r0
 8006498:	f7ff fff0 	bl	800647c <__sfp_lock_acquire>
 800649c:	6a23      	ldr	r3, [r4, #32]
 800649e:	b11b      	cbz	r3, 80064a8 <__sinit+0x14>
 80064a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a4:	f7ff bff0 	b.w	8006488 <__sfp_lock_release>
 80064a8:	4b04      	ldr	r3, [pc, #16]	@ (80064bc <__sinit+0x28>)
 80064aa:	6223      	str	r3, [r4, #32]
 80064ac:	4b04      	ldr	r3, [pc, #16]	@ (80064c0 <__sinit+0x2c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f5      	bne.n	80064a0 <__sinit+0xc>
 80064b4:	f7ff ffc4 	bl	8006440 <global_stdio_init.part.0>
 80064b8:	e7f2      	b.n	80064a0 <__sinit+0xc>
 80064ba:	bf00      	nop
 80064bc:	08006401 	.word	0x08006401
 80064c0:	2005c660 	.word	0x2005c660

080064c4 <_fwalk_sglue>:
 80064c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c8:	4607      	mov	r7, r0
 80064ca:	4688      	mov	r8, r1
 80064cc:	4614      	mov	r4, r2
 80064ce:	2600      	movs	r6, #0
 80064d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064d4:	f1b9 0901 	subs.w	r9, r9, #1
 80064d8:	d505      	bpl.n	80064e6 <_fwalk_sglue+0x22>
 80064da:	6824      	ldr	r4, [r4, #0]
 80064dc:	2c00      	cmp	r4, #0
 80064de:	d1f7      	bne.n	80064d0 <_fwalk_sglue+0xc>
 80064e0:	4630      	mov	r0, r6
 80064e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e6:	89ab      	ldrh	r3, [r5, #12]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d907      	bls.n	80064fc <_fwalk_sglue+0x38>
 80064ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064f0:	3301      	adds	r3, #1
 80064f2:	d003      	beq.n	80064fc <_fwalk_sglue+0x38>
 80064f4:	4629      	mov	r1, r5
 80064f6:	4638      	mov	r0, r7
 80064f8:	47c0      	blx	r8
 80064fa:	4306      	orrs	r6, r0
 80064fc:	3568      	adds	r5, #104	@ 0x68
 80064fe:	e7e9      	b.n	80064d4 <_fwalk_sglue+0x10>

08006500 <iprintf>:
 8006500:	b40f      	push	{r0, r1, r2, r3}
 8006502:	b507      	push	{r0, r1, r2, lr}
 8006504:	4906      	ldr	r1, [pc, #24]	@ (8006520 <iprintf+0x20>)
 8006506:	ab04      	add	r3, sp, #16
 8006508:	6808      	ldr	r0, [r1, #0]
 800650a:	f853 2b04 	ldr.w	r2, [r3], #4
 800650e:	6881      	ldr	r1, [r0, #8]
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	f002 fd59 	bl	8008fc8 <_vfiprintf_r>
 8006516:	b003      	add	sp, #12
 8006518:	f85d eb04 	ldr.w	lr, [sp], #4
 800651c:	b004      	add	sp, #16
 800651e:	4770      	bx	lr
 8006520:	20040018 	.word	0x20040018

08006524 <_puts_r>:
 8006524:	6a03      	ldr	r3, [r0, #32]
 8006526:	b570      	push	{r4, r5, r6, lr}
 8006528:	6884      	ldr	r4, [r0, #8]
 800652a:	4605      	mov	r5, r0
 800652c:	460e      	mov	r6, r1
 800652e:	b90b      	cbnz	r3, 8006534 <_puts_r+0x10>
 8006530:	f7ff ffb0 	bl	8006494 <__sinit>
 8006534:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006536:	07db      	lsls	r3, r3, #31
 8006538:	d405      	bmi.n	8006546 <_puts_r+0x22>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	0598      	lsls	r0, r3, #22
 800653e:	d402      	bmi.n	8006546 <_puts_r+0x22>
 8006540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006542:	f000 f9d4 	bl	80068ee <__retarget_lock_acquire_recursive>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	0719      	lsls	r1, r3, #28
 800654a:	d502      	bpl.n	8006552 <_puts_r+0x2e>
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d135      	bne.n	80065be <_puts_r+0x9a>
 8006552:	4621      	mov	r1, r4
 8006554:	4628      	mov	r0, r5
 8006556:	f000 f8e7 	bl	8006728 <__swsetup_r>
 800655a:	b380      	cbz	r0, 80065be <_puts_r+0x9a>
 800655c:	f04f 35ff 	mov.w	r5, #4294967295
 8006560:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006562:	07da      	lsls	r2, r3, #31
 8006564:	d405      	bmi.n	8006572 <_puts_r+0x4e>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	059b      	lsls	r3, r3, #22
 800656a:	d402      	bmi.n	8006572 <_puts_r+0x4e>
 800656c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800656e:	f000 f9bf 	bl	80068f0 <__retarget_lock_release_recursive>
 8006572:	4628      	mov	r0, r5
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	2b00      	cmp	r3, #0
 8006578:	da04      	bge.n	8006584 <_puts_r+0x60>
 800657a:	69a2      	ldr	r2, [r4, #24]
 800657c:	429a      	cmp	r2, r3
 800657e:	dc17      	bgt.n	80065b0 <_puts_r+0x8c>
 8006580:	290a      	cmp	r1, #10
 8006582:	d015      	beq.n	80065b0 <_puts_r+0x8c>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	6022      	str	r2, [r4, #0]
 800658a:	7019      	strb	r1, [r3, #0]
 800658c:	68a3      	ldr	r3, [r4, #8]
 800658e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006592:	3b01      	subs	r3, #1
 8006594:	60a3      	str	r3, [r4, #8]
 8006596:	2900      	cmp	r1, #0
 8006598:	d1ed      	bne.n	8006576 <_puts_r+0x52>
 800659a:	2b00      	cmp	r3, #0
 800659c:	da11      	bge.n	80065c2 <_puts_r+0x9e>
 800659e:	4622      	mov	r2, r4
 80065a0:	210a      	movs	r1, #10
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f881 	bl	80066aa <__swbuf_r>
 80065a8:	3001      	adds	r0, #1
 80065aa:	d0d7      	beq.n	800655c <_puts_r+0x38>
 80065ac:	250a      	movs	r5, #10
 80065ae:	e7d7      	b.n	8006560 <_puts_r+0x3c>
 80065b0:	4622      	mov	r2, r4
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f879 	bl	80066aa <__swbuf_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d1e7      	bne.n	800658c <_puts_r+0x68>
 80065bc:	e7ce      	b.n	800655c <_puts_r+0x38>
 80065be:	3e01      	subs	r6, #1
 80065c0:	e7e4      	b.n	800658c <_puts_r+0x68>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	6022      	str	r2, [r4, #0]
 80065c8:	220a      	movs	r2, #10
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e7ee      	b.n	80065ac <_puts_r+0x88>
	...

080065d0 <puts>:
 80065d0:	4b02      	ldr	r3, [pc, #8]	@ (80065dc <puts+0xc>)
 80065d2:	4601      	mov	r1, r0
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f7ff bfa5 	b.w	8006524 <_puts_r>
 80065da:	bf00      	nop
 80065dc:	20040018 	.word	0x20040018

080065e0 <siprintf>:
 80065e0:	b40e      	push	{r1, r2, r3}
 80065e2:	b510      	push	{r4, lr}
 80065e4:	b09d      	sub	sp, #116	@ 0x74
 80065e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80065e8:	9002      	str	r0, [sp, #8]
 80065ea:	9006      	str	r0, [sp, #24]
 80065ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065f0:	480a      	ldr	r0, [pc, #40]	@ (800661c <siprintf+0x3c>)
 80065f2:	9107      	str	r1, [sp, #28]
 80065f4:	9104      	str	r1, [sp, #16]
 80065f6:	490a      	ldr	r1, [pc, #40]	@ (8006620 <siprintf+0x40>)
 80065f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fc:	9105      	str	r1, [sp, #20]
 80065fe:	2400      	movs	r4, #0
 8006600:	a902      	add	r1, sp, #8
 8006602:	6800      	ldr	r0, [r0, #0]
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006608:	f002 fbb8 	bl	8008d7c <_svfiprintf_r>
 800660c:	9b02      	ldr	r3, [sp, #8]
 800660e:	701c      	strb	r4, [r3, #0]
 8006610:	b01d      	add	sp, #116	@ 0x74
 8006612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006616:	b003      	add	sp, #12
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20040018 	.word	0x20040018
 8006620:	ffff0208 	.word	0xffff0208

08006624 <__sread>:
 8006624:	b510      	push	{r4, lr}
 8006626:	460c      	mov	r4, r1
 8006628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662c:	f000 f900 	bl	8006830 <_read_r>
 8006630:	2800      	cmp	r0, #0
 8006632:	bfab      	itete	ge
 8006634:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006636:	89a3      	ldrhlt	r3, [r4, #12]
 8006638:	181b      	addge	r3, r3, r0
 800663a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800663e:	bfac      	ite	ge
 8006640:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006642:	81a3      	strhlt	r3, [r4, #12]
 8006644:	bd10      	pop	{r4, pc}

08006646 <__swrite>:
 8006646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664a:	461f      	mov	r7, r3
 800664c:	898b      	ldrh	r3, [r1, #12]
 800664e:	05db      	lsls	r3, r3, #23
 8006650:	4605      	mov	r5, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4616      	mov	r6, r2
 8006656:	d505      	bpl.n	8006664 <__swrite+0x1e>
 8006658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665c:	2302      	movs	r3, #2
 800665e:	2200      	movs	r2, #0
 8006660:	f000 f8d4 	bl	800680c <_lseek_r>
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800666a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	4632      	mov	r2, r6
 8006672:	463b      	mov	r3, r7
 8006674:	4628      	mov	r0, r5
 8006676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667a:	f000 b8fb 	b.w	8006874 <_write_r>

0800667e <__sseek>:
 800667e:	b510      	push	{r4, lr}
 8006680:	460c      	mov	r4, r1
 8006682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006686:	f000 f8c1 	bl	800680c <_lseek_r>
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	bf15      	itete	ne
 8006690:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006692:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006696:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800669a:	81a3      	strheq	r3, [r4, #12]
 800669c:	bf18      	it	ne
 800669e:	81a3      	strhne	r3, [r4, #12]
 80066a0:	bd10      	pop	{r4, pc}

080066a2 <__sclose>:
 80066a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a6:	f000 b8a1 	b.w	80067ec <_close_r>

080066aa <__swbuf_r>:
 80066aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ac:	460e      	mov	r6, r1
 80066ae:	4614      	mov	r4, r2
 80066b0:	4605      	mov	r5, r0
 80066b2:	b118      	cbz	r0, 80066bc <__swbuf_r+0x12>
 80066b4:	6a03      	ldr	r3, [r0, #32]
 80066b6:	b90b      	cbnz	r3, 80066bc <__swbuf_r+0x12>
 80066b8:	f7ff feec 	bl	8006494 <__sinit>
 80066bc:	69a3      	ldr	r3, [r4, #24]
 80066be:	60a3      	str	r3, [r4, #8]
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	071a      	lsls	r2, r3, #28
 80066c4:	d501      	bpl.n	80066ca <__swbuf_r+0x20>
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	b943      	cbnz	r3, 80066dc <__swbuf_r+0x32>
 80066ca:	4621      	mov	r1, r4
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 f82b 	bl	8006728 <__swsetup_r>
 80066d2:	b118      	cbz	r0, 80066dc <__swbuf_r+0x32>
 80066d4:	f04f 37ff 	mov.w	r7, #4294967295
 80066d8:	4638      	mov	r0, r7
 80066da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	6922      	ldr	r2, [r4, #16]
 80066e0:	1a98      	subs	r0, r3, r2
 80066e2:	6963      	ldr	r3, [r4, #20]
 80066e4:	b2f6      	uxtb	r6, r6
 80066e6:	4283      	cmp	r3, r0
 80066e8:	4637      	mov	r7, r6
 80066ea:	dc05      	bgt.n	80066f8 <__swbuf_r+0x4e>
 80066ec:	4621      	mov	r1, r4
 80066ee:	4628      	mov	r0, r5
 80066f0:	f002 fe06 	bl	8009300 <_fflush_r>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d1ed      	bne.n	80066d4 <__swbuf_r+0x2a>
 80066f8:	68a3      	ldr	r3, [r4, #8]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	60a3      	str	r3, [r4, #8]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	6022      	str	r2, [r4, #0]
 8006704:	701e      	strb	r6, [r3, #0]
 8006706:	6962      	ldr	r2, [r4, #20]
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	429a      	cmp	r2, r3
 800670c:	d004      	beq.n	8006718 <__swbuf_r+0x6e>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	07db      	lsls	r3, r3, #31
 8006712:	d5e1      	bpl.n	80066d8 <__swbuf_r+0x2e>
 8006714:	2e0a      	cmp	r6, #10
 8006716:	d1df      	bne.n	80066d8 <__swbuf_r+0x2e>
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f002 fdf0 	bl	8009300 <_fflush_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	d0d9      	beq.n	80066d8 <__swbuf_r+0x2e>
 8006724:	e7d6      	b.n	80066d4 <__swbuf_r+0x2a>
	...

08006728 <__swsetup_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4b29      	ldr	r3, [pc, #164]	@ (80067d0 <__swsetup_r+0xa8>)
 800672c:	4605      	mov	r5, r0
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	460c      	mov	r4, r1
 8006732:	b118      	cbz	r0, 800673c <__swsetup_r+0x14>
 8006734:	6a03      	ldr	r3, [r0, #32]
 8006736:	b90b      	cbnz	r3, 800673c <__swsetup_r+0x14>
 8006738:	f7ff feac 	bl	8006494 <__sinit>
 800673c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006740:	0719      	lsls	r1, r3, #28
 8006742:	d422      	bmi.n	800678a <__swsetup_r+0x62>
 8006744:	06da      	lsls	r2, r3, #27
 8006746:	d407      	bmi.n	8006758 <__swsetup_r+0x30>
 8006748:	2209      	movs	r2, #9
 800674a:	602a      	str	r2, [r5, #0]
 800674c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
 8006756:	e033      	b.n	80067c0 <__swsetup_r+0x98>
 8006758:	0758      	lsls	r0, r3, #29
 800675a:	d512      	bpl.n	8006782 <__swsetup_r+0x5a>
 800675c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800675e:	b141      	cbz	r1, 8006772 <__swsetup_r+0x4a>
 8006760:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006764:	4299      	cmp	r1, r3
 8006766:	d002      	beq.n	800676e <__swsetup_r+0x46>
 8006768:	4628      	mov	r0, r5
 800676a:	f000 ff31 	bl	80075d0 <_free_r>
 800676e:	2300      	movs	r3, #0
 8006770:	6363      	str	r3, [r4, #52]	@ 0x34
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006778:	81a3      	strh	r3, [r4, #12]
 800677a:	2300      	movs	r3, #0
 800677c:	6063      	str	r3, [r4, #4]
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	f043 0308 	orr.w	r3, r3, #8
 8006788:	81a3      	strh	r3, [r4, #12]
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	b94b      	cbnz	r3, 80067a2 <__swsetup_r+0x7a>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006798:	d003      	beq.n	80067a2 <__swsetup_r+0x7a>
 800679a:	4621      	mov	r1, r4
 800679c:	4628      	mov	r0, r5
 800679e:	f002 fdfd 	bl	800939c <__smakebuf_r>
 80067a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a6:	f013 0201 	ands.w	r2, r3, #1
 80067aa:	d00a      	beq.n	80067c2 <__swsetup_r+0x9a>
 80067ac:	2200      	movs	r2, #0
 80067ae:	60a2      	str	r2, [r4, #8]
 80067b0:	6962      	ldr	r2, [r4, #20]
 80067b2:	4252      	negs	r2, r2
 80067b4:	61a2      	str	r2, [r4, #24]
 80067b6:	6922      	ldr	r2, [r4, #16]
 80067b8:	b942      	cbnz	r2, 80067cc <__swsetup_r+0xa4>
 80067ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067be:	d1c5      	bne.n	800674c <__swsetup_r+0x24>
 80067c0:	bd38      	pop	{r3, r4, r5, pc}
 80067c2:	0799      	lsls	r1, r3, #30
 80067c4:	bf58      	it	pl
 80067c6:	6962      	ldrpl	r2, [r4, #20]
 80067c8:	60a2      	str	r2, [r4, #8]
 80067ca:	e7f4      	b.n	80067b6 <__swsetup_r+0x8e>
 80067cc:	2000      	movs	r0, #0
 80067ce:	e7f7      	b.n	80067c0 <__swsetup_r+0x98>
 80067d0:	20040018 	.word	0x20040018

080067d4 <memset>:
 80067d4:	4402      	add	r2, r0
 80067d6:	4603      	mov	r3, r0
 80067d8:	4293      	cmp	r3, r2
 80067da:	d100      	bne.n	80067de <memset+0xa>
 80067dc:	4770      	bx	lr
 80067de:	f803 1b01 	strb.w	r1, [r3], #1
 80067e2:	e7f9      	b.n	80067d8 <memset+0x4>

080067e4 <_localeconv_r>:
 80067e4:	4800      	ldr	r0, [pc, #0]	@ (80067e8 <_localeconv_r+0x4>)
 80067e6:	4770      	bx	lr
 80067e8:	20040158 	.word	0x20040158

080067ec <_close_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4d06      	ldr	r5, [pc, #24]	@ (8006808 <_close_r+0x1c>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	4604      	mov	r4, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	f7fb fe11 	bl	800241e <_close>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_close_r+0x1a>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_close_r+0x1a>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	2005c664 	.word	0x2005c664

0800680c <_lseek_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d07      	ldr	r5, [pc, #28]	@ (800682c <_lseek_r+0x20>)
 8006810:	4604      	mov	r4, r0
 8006812:	4608      	mov	r0, r1
 8006814:	4611      	mov	r1, r2
 8006816:	2200      	movs	r2, #0
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fb fe26 	bl	800246c <_lseek>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_lseek_r+0x1e>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_lseek_r+0x1e>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	2005c664 	.word	0x2005c664

08006830 <_read_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d07      	ldr	r5, [pc, #28]	@ (8006850 <_read_r+0x20>)
 8006834:	4604      	mov	r4, r0
 8006836:	4608      	mov	r0, r1
 8006838:	4611      	mov	r1, r2
 800683a:	2200      	movs	r2, #0
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f7fb fdb4 	bl	80023ac <_read>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_read_r+0x1e>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_read_r+0x1e>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	2005c664 	.word	0x2005c664

08006854 <_sbrk_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d06      	ldr	r5, [pc, #24]	@ (8006870 <_sbrk_r+0x1c>)
 8006858:	2300      	movs	r3, #0
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	f7fb fe12 	bl	8002488 <_sbrk>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_sbrk_r+0x1a>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_sbrk_r+0x1a>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	2005c664 	.word	0x2005c664

08006874 <_write_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d07      	ldr	r5, [pc, #28]	@ (8006894 <_write_r+0x20>)
 8006878:	4604      	mov	r4, r0
 800687a:	4608      	mov	r0, r1
 800687c:	4611      	mov	r1, r2
 800687e:	2200      	movs	r2, #0
 8006880:	602a      	str	r2, [r5, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	f7fb fdaf 	bl	80023e6 <_write>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_write_r+0x1e>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_write_r+0x1e>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	2005c664 	.word	0x2005c664

08006898 <__errno>:
 8006898:	4b01      	ldr	r3, [pc, #4]	@ (80068a0 <__errno+0x8>)
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20040018 	.word	0x20040018

080068a4 <__libc_init_array>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4d0d      	ldr	r5, [pc, #52]	@ (80068dc <__libc_init_array+0x38>)
 80068a8:	4c0d      	ldr	r4, [pc, #52]	@ (80068e0 <__libc_init_array+0x3c>)
 80068aa:	1b64      	subs	r4, r4, r5
 80068ac:	10a4      	asrs	r4, r4, #2
 80068ae:	2600      	movs	r6, #0
 80068b0:	42a6      	cmp	r6, r4
 80068b2:	d109      	bne.n	80068c8 <__libc_init_array+0x24>
 80068b4:	4d0b      	ldr	r5, [pc, #44]	@ (80068e4 <__libc_init_array+0x40>)
 80068b6:	4c0c      	ldr	r4, [pc, #48]	@ (80068e8 <__libc_init_array+0x44>)
 80068b8:	f003 fa20 	bl	8009cfc <_init>
 80068bc:	1b64      	subs	r4, r4, r5
 80068be:	10a4      	asrs	r4, r4, #2
 80068c0:	2600      	movs	r6, #0
 80068c2:	42a6      	cmp	r6, r4
 80068c4:	d105      	bne.n	80068d2 <__libc_init_array+0x2e>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068cc:	4798      	blx	r3
 80068ce:	3601      	adds	r6, #1
 80068d0:	e7ee      	b.n	80068b0 <__libc_init_array+0xc>
 80068d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d6:	4798      	blx	r3
 80068d8:	3601      	adds	r6, #1
 80068da:	e7f2      	b.n	80068c2 <__libc_init_array+0x1e>
 80068dc:	0801dd0c 	.word	0x0801dd0c
 80068e0:	0801dd0c 	.word	0x0801dd0c
 80068e4:	0801dd0c 	.word	0x0801dd0c
 80068e8:	0801dd10 	.word	0x0801dd10

080068ec <__retarget_lock_init_recursive>:
 80068ec:	4770      	bx	lr

080068ee <__retarget_lock_acquire_recursive>:
 80068ee:	4770      	bx	lr

080068f0 <__retarget_lock_release_recursive>:
 80068f0:	4770      	bx	lr

080068f2 <memcpy>:
 80068f2:	440a      	add	r2, r1
 80068f4:	4291      	cmp	r1, r2
 80068f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80068fa:	d100      	bne.n	80068fe <memcpy+0xc>
 80068fc:	4770      	bx	lr
 80068fe:	b510      	push	{r4, lr}
 8006900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006908:	4291      	cmp	r1, r2
 800690a:	d1f9      	bne.n	8006900 <memcpy+0xe>
 800690c:	bd10      	pop	{r4, pc}
	...

08006910 <nanf>:
 8006910:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006918 <nanf+0x8>
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	7fc00000 	.word	0x7fc00000

0800691c <quorem>:
 800691c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	6903      	ldr	r3, [r0, #16]
 8006922:	690c      	ldr	r4, [r1, #16]
 8006924:	42a3      	cmp	r3, r4
 8006926:	4607      	mov	r7, r0
 8006928:	db7e      	blt.n	8006a28 <quorem+0x10c>
 800692a:	3c01      	subs	r4, #1
 800692c:	f101 0814 	add.w	r8, r1, #20
 8006930:	00a3      	lsls	r3, r4, #2
 8006932:	f100 0514 	add.w	r5, r0, #20
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006946:	3301      	adds	r3, #1
 8006948:	429a      	cmp	r2, r3
 800694a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800694e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006952:	d32e      	bcc.n	80069b2 <quorem+0x96>
 8006954:	f04f 0a00 	mov.w	sl, #0
 8006958:	46c4      	mov	ip, r8
 800695a:	46ae      	mov	lr, r5
 800695c:	46d3      	mov	fp, sl
 800695e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006962:	b298      	uxth	r0, r3
 8006964:	fb06 a000 	mla	r0, r6, r0, sl
 8006968:	0c02      	lsrs	r2, r0, #16
 800696a:	0c1b      	lsrs	r3, r3, #16
 800696c:	fb06 2303 	mla	r3, r6, r3, r2
 8006970:	f8de 2000 	ldr.w	r2, [lr]
 8006974:	b280      	uxth	r0, r0
 8006976:	b292      	uxth	r2, r2
 8006978:	1a12      	subs	r2, r2, r0
 800697a:	445a      	add	r2, fp
 800697c:	f8de 0000 	ldr.w	r0, [lr]
 8006980:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006984:	b29b      	uxth	r3, r3
 8006986:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800698a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800698e:	b292      	uxth	r2, r2
 8006990:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006994:	45e1      	cmp	r9, ip
 8006996:	f84e 2b04 	str.w	r2, [lr], #4
 800699a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800699e:	d2de      	bcs.n	800695e <quorem+0x42>
 80069a0:	9b00      	ldr	r3, [sp, #0]
 80069a2:	58eb      	ldr	r3, [r5, r3]
 80069a4:	b92b      	cbnz	r3, 80069b2 <quorem+0x96>
 80069a6:	9b01      	ldr	r3, [sp, #4]
 80069a8:	3b04      	subs	r3, #4
 80069aa:	429d      	cmp	r5, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	d32f      	bcc.n	8006a10 <quorem+0xf4>
 80069b0:	613c      	str	r4, [r7, #16]
 80069b2:	4638      	mov	r0, r7
 80069b4:	f001 f912 	bl	8007bdc <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	db25      	blt.n	8006a08 <quorem+0xec>
 80069bc:	4629      	mov	r1, r5
 80069be:	2000      	movs	r0, #0
 80069c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80069c4:	f8d1 c000 	ldr.w	ip, [r1]
 80069c8:	fa1f fe82 	uxth.w	lr, r2
 80069cc:	fa1f f38c 	uxth.w	r3, ip
 80069d0:	eba3 030e 	sub.w	r3, r3, lr
 80069d4:	4403      	add	r3, r0
 80069d6:	0c12      	lsrs	r2, r2, #16
 80069d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069e6:	45c1      	cmp	r9, r8
 80069e8:	f841 3b04 	str.w	r3, [r1], #4
 80069ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069f0:	d2e6      	bcs.n	80069c0 <quorem+0xa4>
 80069f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069fa:	b922      	cbnz	r2, 8006a06 <quorem+0xea>
 80069fc:	3b04      	subs	r3, #4
 80069fe:	429d      	cmp	r5, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	d30b      	bcc.n	8006a1c <quorem+0x100>
 8006a04:	613c      	str	r4, [r7, #16]
 8006a06:	3601      	adds	r6, #1
 8006a08:	4630      	mov	r0, r6
 8006a0a:	b003      	add	sp, #12
 8006a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	3b04      	subs	r3, #4
 8006a14:	2a00      	cmp	r2, #0
 8006a16:	d1cb      	bne.n	80069b0 <quorem+0x94>
 8006a18:	3c01      	subs	r4, #1
 8006a1a:	e7c6      	b.n	80069aa <quorem+0x8e>
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	3b04      	subs	r3, #4
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	d1ef      	bne.n	8006a04 <quorem+0xe8>
 8006a24:	3c01      	subs	r4, #1
 8006a26:	e7ea      	b.n	80069fe <quorem+0xe2>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e7ee      	b.n	8006a0a <quorem+0xee>
 8006a2c:	0000      	movs	r0, r0
	...

08006a30 <_dtoa_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	69c7      	ldr	r7, [r0, #28]
 8006a36:	b097      	sub	sp, #92	@ 0x5c
 8006a38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006a3c:	ec55 4b10 	vmov	r4, r5, d0
 8006a40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006a42:	9107      	str	r1, [sp, #28]
 8006a44:	4681      	mov	r9, r0
 8006a46:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a48:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a4a:	b97f      	cbnz	r7, 8006a6c <_dtoa_r+0x3c>
 8006a4c:	2010      	movs	r0, #16
 8006a4e:	f7fe fd7b 	bl	8005548 <malloc>
 8006a52:	4602      	mov	r2, r0
 8006a54:	f8c9 001c 	str.w	r0, [r9, #28]
 8006a58:	b920      	cbnz	r0, 8006a64 <_dtoa_r+0x34>
 8006a5a:	4ba9      	ldr	r3, [pc, #676]	@ (8006d00 <_dtoa_r+0x2d0>)
 8006a5c:	21ef      	movs	r1, #239	@ 0xef
 8006a5e:	48a9      	ldr	r0, [pc, #676]	@ (8006d04 <_dtoa_r+0x2d4>)
 8006a60:	f002 fd2e 	bl	80094c0 <__assert_func>
 8006a64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a68:	6007      	str	r7, [r0, #0]
 8006a6a:	60c7      	str	r7, [r0, #12]
 8006a6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a70:	6819      	ldr	r1, [r3, #0]
 8006a72:	b159      	cbz	r1, 8006a8c <_dtoa_r+0x5c>
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	604a      	str	r2, [r1, #4]
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4093      	lsls	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
 8006a7e:	4648      	mov	r0, r9
 8006a80:	f000 fe30 	bl	80076e4 <_Bfree>
 8006a84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	1e2b      	subs	r3, r5, #0
 8006a8e:	bfb9      	ittee	lt
 8006a90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a94:	9305      	strlt	r3, [sp, #20]
 8006a96:	2300      	movge	r3, #0
 8006a98:	6033      	strge	r3, [r6, #0]
 8006a9a:	9f05      	ldr	r7, [sp, #20]
 8006a9c:	4b9a      	ldr	r3, [pc, #616]	@ (8006d08 <_dtoa_r+0x2d8>)
 8006a9e:	bfbc      	itt	lt
 8006aa0:	2201      	movlt	r2, #1
 8006aa2:	6032      	strlt	r2, [r6, #0]
 8006aa4:	43bb      	bics	r3, r7
 8006aa6:	d112      	bne.n	8006ace <_dtoa_r+0x9e>
 8006aa8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006aaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ab4:	4323      	orrs	r3, r4
 8006ab6:	f000 855a 	beq.w	800756e <_dtoa_r+0xb3e>
 8006aba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006abc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006d1c <_dtoa_r+0x2ec>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 855c 	beq.w	800757e <_dtoa_r+0xb4e>
 8006ac6:	f10a 0303 	add.w	r3, sl, #3
 8006aca:	f000 bd56 	b.w	800757a <_dtoa_r+0xb4a>
 8006ace:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	ec51 0b17 	vmov	r0, r1, d7
 8006ad8:	2300      	movs	r3, #0
 8006ada:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006ade:	f7fa f80b 	bl	8000af8 <__aeabi_dcmpeq>
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	b158      	cbz	r0, 8006afe <_dtoa_r+0xce>
 8006ae6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ae8:	2301      	movs	r3, #1
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006aee:	b113      	cbz	r3, 8006af6 <_dtoa_r+0xc6>
 8006af0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006af2:	4b86      	ldr	r3, [pc, #536]	@ (8006d0c <_dtoa_r+0x2dc>)
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006d20 <_dtoa_r+0x2f0>
 8006afa:	f000 bd40 	b.w	800757e <_dtoa_r+0xb4e>
 8006afe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006b02:	aa14      	add	r2, sp, #80	@ 0x50
 8006b04:	a915      	add	r1, sp, #84	@ 0x54
 8006b06:	4648      	mov	r0, r9
 8006b08:	f001 f988 	bl	8007e1c <__d2b>
 8006b0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b10:	9002      	str	r0, [sp, #8]
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d078      	beq.n	8006c08 <_dtoa_r+0x1d8>
 8006b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b30:	4619      	mov	r1, r3
 8006b32:	2200      	movs	r2, #0
 8006b34:	4b76      	ldr	r3, [pc, #472]	@ (8006d10 <_dtoa_r+0x2e0>)
 8006b36:	f7f9 fbbf 	bl	80002b8 <__aeabi_dsub>
 8006b3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ce8 <_dtoa_r+0x2b8>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fd72 	bl	8000628 <__aeabi_dmul>
 8006b44:	a36a      	add	r3, pc, #424	@ (adr r3, 8006cf0 <_dtoa_r+0x2c0>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fbb7 	bl	80002bc <__adddf3>
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4630      	mov	r0, r6
 8006b52:	460d      	mov	r5, r1
 8006b54:	f7f9 fcfe 	bl	8000554 <__aeabi_i2d>
 8006b58:	a367      	add	r3, pc, #412	@ (adr r3, 8006cf8 <_dtoa_r+0x2c8>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 fd63 	bl	8000628 <__aeabi_dmul>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4620      	mov	r0, r4
 8006b68:	4629      	mov	r1, r5
 8006b6a:	f7f9 fba7 	bl	80002bc <__adddf3>
 8006b6e:	4604      	mov	r4, r0
 8006b70:	460d      	mov	r5, r1
 8006b72:	f7fa f809 	bl	8000b88 <__aeabi_d2iz>
 8006b76:	2200      	movs	r2, #0
 8006b78:	4607      	mov	r7, r0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f7f9 ffc4 	bl	8000b0c <__aeabi_dcmplt>
 8006b84:	b140      	cbz	r0, 8006b98 <_dtoa_r+0x168>
 8006b86:	4638      	mov	r0, r7
 8006b88:	f7f9 fce4 	bl	8000554 <__aeabi_i2d>
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	462b      	mov	r3, r5
 8006b90:	f7f9 ffb2 	bl	8000af8 <__aeabi_dcmpeq>
 8006b94:	b900      	cbnz	r0, 8006b98 <_dtoa_r+0x168>
 8006b96:	3f01      	subs	r7, #1
 8006b98:	2f16      	cmp	r7, #22
 8006b9a:	d852      	bhi.n	8006c42 <_dtoa_r+0x212>
 8006b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8006d14 <_dtoa_r+0x2e4>)
 8006b9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006baa:	f7f9 ffaf 	bl	8000b0c <__aeabi_dcmplt>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d049      	beq.n	8006c46 <_dtoa_r+0x216>
 8006bb2:	3f01      	subs	r7, #1
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bba:	1b9b      	subs	r3, r3, r6
 8006bbc:	1e5a      	subs	r2, r3, #1
 8006bbe:	bf45      	ittet	mi
 8006bc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bc4:	9300      	strmi	r3, [sp, #0]
 8006bc6:	2300      	movpl	r3, #0
 8006bc8:	2300      	movmi	r3, #0
 8006bca:	9206      	str	r2, [sp, #24]
 8006bcc:	bf54      	ite	pl
 8006bce:	9300      	strpl	r3, [sp, #0]
 8006bd0:	9306      	strmi	r3, [sp, #24]
 8006bd2:	2f00      	cmp	r7, #0
 8006bd4:	db39      	blt.n	8006c4a <_dtoa_r+0x21a>
 8006bd6:	9b06      	ldr	r3, [sp, #24]
 8006bd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8006bda:	443b      	add	r3, r7
 8006bdc:	9306      	str	r3, [sp, #24]
 8006bde:	2300      	movs	r3, #0
 8006be0:	9308      	str	r3, [sp, #32]
 8006be2:	9b07      	ldr	r3, [sp, #28]
 8006be4:	2b09      	cmp	r3, #9
 8006be6:	d863      	bhi.n	8006cb0 <_dtoa_r+0x280>
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	bfc4      	itt	gt
 8006bec:	3b04      	subgt	r3, #4
 8006bee:	9307      	strgt	r3, [sp, #28]
 8006bf0:	9b07      	ldr	r3, [sp, #28]
 8006bf2:	f1a3 0302 	sub.w	r3, r3, #2
 8006bf6:	bfcc      	ite	gt
 8006bf8:	2400      	movgt	r4, #0
 8006bfa:	2401      	movle	r4, #1
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d863      	bhi.n	8006cc8 <_dtoa_r+0x298>
 8006c00:	e8df f003 	tbb	[pc, r3]
 8006c04:	2b375452 	.word	0x2b375452
 8006c08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006c0c:	441e      	add	r6, r3
 8006c0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	bfc1      	itttt	gt
 8006c16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c1a:	409f      	lslgt	r7, r3
 8006c1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c24:	bfd6      	itet	le
 8006c26:	f1c3 0320 	rsble	r3, r3, #32
 8006c2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c2e:	fa04 f003 	lslle.w	r0, r4, r3
 8006c32:	f7f9 fc7f 	bl	8000534 <__aeabi_ui2d>
 8006c36:	2201      	movs	r2, #1
 8006c38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c3c:	3e01      	subs	r6, #1
 8006c3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c40:	e776      	b.n	8006b30 <_dtoa_r+0x100>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e7b7      	b.n	8006bb6 <_dtoa_r+0x186>
 8006c46:	9010      	str	r0, [sp, #64]	@ 0x40
 8006c48:	e7b6      	b.n	8006bb8 <_dtoa_r+0x188>
 8006c4a:	9b00      	ldr	r3, [sp, #0]
 8006c4c:	1bdb      	subs	r3, r3, r7
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	427b      	negs	r3, r7
 8006c52:	9308      	str	r3, [sp, #32]
 8006c54:	2300      	movs	r3, #0
 8006c56:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c58:	e7c3      	b.n	8006be2 <_dtoa_r+0x1b2>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c60:	eb07 0b03 	add.w	fp, r7, r3
 8006c64:	f10b 0301 	add.w	r3, fp, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	9303      	str	r3, [sp, #12]
 8006c6c:	bfb8      	it	lt
 8006c6e:	2301      	movlt	r3, #1
 8006c70:	e006      	b.n	8006c80 <_dtoa_r+0x250>
 8006c72:	2301      	movs	r3, #1
 8006c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dd28      	ble.n	8006cce <_dtoa_r+0x29e>
 8006c7c:	469b      	mov	fp, r3
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006c84:	2100      	movs	r1, #0
 8006c86:	2204      	movs	r2, #4
 8006c88:	f102 0514 	add.w	r5, r2, #20
 8006c8c:	429d      	cmp	r5, r3
 8006c8e:	d926      	bls.n	8006cde <_dtoa_r+0x2ae>
 8006c90:	6041      	str	r1, [r0, #4]
 8006c92:	4648      	mov	r0, r9
 8006c94:	f000 fce6 	bl	8007664 <_Balloc>
 8006c98:	4682      	mov	sl, r0
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d142      	bne.n	8006d24 <_dtoa_r+0x2f4>
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d18 <_dtoa_r+0x2e8>)
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ca6:	e6da      	b.n	8006a5e <_dtoa_r+0x2e>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e7e3      	b.n	8006c74 <_dtoa_r+0x244>
 8006cac:	2300      	movs	r3, #0
 8006cae:	e7d5      	b.n	8006c5c <_dtoa_r+0x22c>
 8006cb0:	2401      	movs	r4, #1
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9307      	str	r3, [sp, #28]
 8006cb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006cb8:	f04f 3bff 	mov.w	fp, #4294967295
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cc2:	2312      	movs	r3, #18
 8006cc4:	920c      	str	r2, [sp, #48]	@ 0x30
 8006cc6:	e7db      	b.n	8006c80 <_dtoa_r+0x250>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ccc:	e7f4      	b.n	8006cb8 <_dtoa_r+0x288>
 8006cce:	f04f 0b01 	mov.w	fp, #1
 8006cd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006cdc:	e7d0      	b.n	8006c80 <_dtoa_r+0x250>
 8006cde:	3101      	adds	r1, #1
 8006ce0:	0052      	lsls	r2, r2, #1
 8006ce2:	e7d1      	b.n	8006c88 <_dtoa_r+0x258>
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	636f4361 	.word	0x636f4361
 8006cec:	3fd287a7 	.word	0x3fd287a7
 8006cf0:	8b60c8b3 	.word	0x8b60c8b3
 8006cf4:	3fc68a28 	.word	0x3fc68a28
 8006cf8:	509f79fb 	.word	0x509f79fb
 8006cfc:	3fd34413 	.word	0x3fd34413
 8006d00:	0801d91e 	.word	0x0801d91e
 8006d04:	0801d935 	.word	0x0801d935
 8006d08:	7ff00000 	.word	0x7ff00000
 8006d0c:	0801d8e9 	.word	0x0801d8e9
 8006d10:	3ff80000 	.word	0x3ff80000
 8006d14:	0801dae8 	.word	0x0801dae8
 8006d18:	0801d98d 	.word	0x0801d98d
 8006d1c:	0801d91a 	.word	0x0801d91a
 8006d20:	0801d8e8 	.word	0x0801d8e8
 8006d24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d28:	6018      	str	r0, [r3, #0]
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	2b0e      	cmp	r3, #14
 8006d2e:	f200 80a1 	bhi.w	8006e74 <_dtoa_r+0x444>
 8006d32:	2c00      	cmp	r4, #0
 8006d34:	f000 809e 	beq.w	8006e74 <_dtoa_r+0x444>
 8006d38:	2f00      	cmp	r7, #0
 8006d3a:	dd33      	ble.n	8006da4 <_dtoa_r+0x374>
 8006d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8006fb0 <_dtoa_r+0x580>)
 8006d3e:	f007 020f 	and.w	r2, r7, #15
 8006d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d46:	ed93 7b00 	vldr	d7, [r3]
 8006d4a:	05f8      	lsls	r0, r7, #23
 8006d4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006d50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d54:	d516      	bpl.n	8006d84 <_dtoa_r+0x354>
 8006d56:	4b97      	ldr	r3, [pc, #604]	@ (8006fb4 <_dtoa_r+0x584>)
 8006d58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d60:	f7f9 fd8c 	bl	800087c <__aeabi_ddiv>
 8006d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d68:	f004 040f 	and.w	r4, r4, #15
 8006d6c:	2603      	movs	r6, #3
 8006d6e:	4d91      	ldr	r5, [pc, #580]	@ (8006fb4 <_dtoa_r+0x584>)
 8006d70:	b954      	cbnz	r4, 8006d88 <_dtoa_r+0x358>
 8006d72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d7a:	f7f9 fd7f 	bl	800087c <__aeabi_ddiv>
 8006d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d82:	e028      	b.n	8006dd6 <_dtoa_r+0x3a6>
 8006d84:	2602      	movs	r6, #2
 8006d86:	e7f2      	b.n	8006d6e <_dtoa_r+0x33e>
 8006d88:	07e1      	lsls	r1, r4, #31
 8006d8a:	d508      	bpl.n	8006d9e <_dtoa_r+0x36e>
 8006d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d94:	f7f9 fc48 	bl	8000628 <__aeabi_dmul>
 8006d98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	1064      	asrs	r4, r4, #1
 8006da0:	3508      	adds	r5, #8
 8006da2:	e7e5      	b.n	8006d70 <_dtoa_r+0x340>
 8006da4:	f000 80af 	beq.w	8006f06 <_dtoa_r+0x4d6>
 8006da8:	427c      	negs	r4, r7
 8006daa:	4b81      	ldr	r3, [pc, #516]	@ (8006fb0 <_dtoa_r+0x580>)
 8006dac:	4d81      	ldr	r5, [pc, #516]	@ (8006fb4 <_dtoa_r+0x584>)
 8006dae:	f004 020f 	and.w	r2, r4, #15
 8006db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006dbe:	f7f9 fc33 	bl	8000628 <__aeabi_dmul>
 8006dc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dc6:	1124      	asrs	r4, r4, #4
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2602      	movs	r6, #2
 8006dcc:	2c00      	cmp	r4, #0
 8006dce:	f040 808f 	bne.w	8006ef0 <_dtoa_r+0x4c0>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1d3      	bne.n	8006d7e <_dtoa_r+0x34e>
 8006dd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006dd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8094 	beq.w	8006f0a <_dtoa_r+0x4da>
 8006de2:	4b75      	ldr	r3, [pc, #468]	@ (8006fb8 <_dtoa_r+0x588>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	4620      	mov	r0, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	f7f9 fe8f 	bl	8000b0c <__aeabi_dcmplt>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f000 808b 	beq.w	8006f0a <_dtoa_r+0x4da>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8087 	beq.w	8006f0a <_dtoa_r+0x4da>
 8006dfc:	f1bb 0f00 	cmp.w	fp, #0
 8006e00:	dd34      	ble.n	8006e6c <_dtoa_r+0x43c>
 8006e02:	4620      	mov	r0, r4
 8006e04:	4b6d      	ldr	r3, [pc, #436]	@ (8006fbc <_dtoa_r+0x58c>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fc0d 	bl	8000628 <__aeabi_dmul>
 8006e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e12:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e16:	3601      	adds	r6, #1
 8006e18:	465c      	mov	r4, fp
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7f9 fb9a 	bl	8000554 <__aeabi_i2d>
 8006e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e24:	f7f9 fc00 	bl	8000628 <__aeabi_dmul>
 8006e28:	4b65      	ldr	r3, [pc, #404]	@ (8006fc0 <_dtoa_r+0x590>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f7f9 fa46 	bl	80002bc <__adddf3>
 8006e30:	4605      	mov	r5, r0
 8006e32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	d16a      	bne.n	8006f10 <_dtoa_r+0x4e0>
 8006e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e3e:	4b61      	ldr	r3, [pc, #388]	@ (8006fc4 <_dtoa_r+0x594>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f7f9 fa39 	bl	80002b8 <__aeabi_dsub>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e4e:	462a      	mov	r2, r5
 8006e50:	4633      	mov	r3, r6
 8006e52:	f7f9 fe79 	bl	8000b48 <__aeabi_dcmpgt>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f040 8298 	bne.w	800738c <_dtoa_r+0x95c>
 8006e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e60:	462a      	mov	r2, r5
 8006e62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e66:	f7f9 fe51 	bl	8000b0c <__aeabi_dcmplt>
 8006e6a:	bb38      	cbnz	r0, 8006ebc <_dtoa_r+0x48c>
 8006e6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006e70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f2c0 8157 	blt.w	800712a <_dtoa_r+0x6fa>
 8006e7c:	2f0e      	cmp	r7, #14
 8006e7e:	f300 8154 	bgt.w	800712a <_dtoa_r+0x6fa>
 8006e82:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb0 <_dtoa_r+0x580>)
 8006e84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e88:	ed93 7b00 	vldr	d7, [r3]
 8006e8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	ed8d 7b00 	vstr	d7, [sp]
 8006e94:	f280 80e5 	bge.w	8007062 <_dtoa_r+0x632>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f300 80e1 	bgt.w	8007062 <_dtoa_r+0x632>
 8006ea0:	d10c      	bne.n	8006ebc <_dtoa_r+0x48c>
 8006ea2:	4b48      	ldr	r3, [pc, #288]	@ (8006fc4 <_dtoa_r+0x594>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	ec51 0b17 	vmov	r0, r1, d7
 8006eaa:	f7f9 fbbd 	bl	8000628 <__aeabi_dmul>
 8006eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb2:	f7f9 fe3f 	bl	8000b34 <__aeabi_dcmpge>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f000 8266 	beq.w	8007388 <_dtoa_r+0x958>
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	4625      	mov	r5, r4
 8006ec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ec2:	4656      	mov	r6, sl
 8006ec4:	ea6f 0803 	mvn.w	r8, r3
 8006ec8:	2700      	movs	r7, #0
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4648      	mov	r0, r9
 8006ece:	f000 fc09 	bl	80076e4 <_Bfree>
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	f000 80bd 	beq.w	8007052 <_dtoa_r+0x622>
 8006ed8:	b12f      	cbz	r7, 8006ee6 <_dtoa_r+0x4b6>
 8006eda:	42af      	cmp	r7, r5
 8006edc:	d003      	beq.n	8006ee6 <_dtoa_r+0x4b6>
 8006ede:	4639      	mov	r1, r7
 8006ee0:	4648      	mov	r0, r9
 8006ee2:	f000 fbff 	bl	80076e4 <_Bfree>
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	4648      	mov	r0, r9
 8006eea:	f000 fbfb 	bl	80076e4 <_Bfree>
 8006eee:	e0b0      	b.n	8007052 <_dtoa_r+0x622>
 8006ef0:	07e2      	lsls	r2, r4, #31
 8006ef2:	d505      	bpl.n	8006f00 <_dtoa_r+0x4d0>
 8006ef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ef8:	f7f9 fb96 	bl	8000628 <__aeabi_dmul>
 8006efc:	3601      	adds	r6, #1
 8006efe:	2301      	movs	r3, #1
 8006f00:	1064      	asrs	r4, r4, #1
 8006f02:	3508      	adds	r5, #8
 8006f04:	e762      	b.n	8006dcc <_dtoa_r+0x39c>
 8006f06:	2602      	movs	r6, #2
 8006f08:	e765      	b.n	8006dd6 <_dtoa_r+0x3a6>
 8006f0a:	9c03      	ldr	r4, [sp, #12]
 8006f0c:	46b8      	mov	r8, r7
 8006f0e:	e784      	b.n	8006e1a <_dtoa_r+0x3ea>
 8006f10:	4b27      	ldr	r3, [pc, #156]	@ (8006fb0 <_dtoa_r+0x580>)
 8006f12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f1c:	4454      	add	r4, sl
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	d054      	beq.n	8006fcc <_dtoa_r+0x59c>
 8006f22:	4929      	ldr	r1, [pc, #164]	@ (8006fc8 <_dtoa_r+0x598>)
 8006f24:	2000      	movs	r0, #0
 8006f26:	f7f9 fca9 	bl	800087c <__aeabi_ddiv>
 8006f2a:	4633      	mov	r3, r6
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	f7f9 f9c3 	bl	80002b8 <__aeabi_dsub>
 8006f32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f36:	4656      	mov	r6, sl
 8006f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f3c:	f7f9 fe24 	bl	8000b88 <__aeabi_d2iz>
 8006f40:	4605      	mov	r5, r0
 8006f42:	f7f9 fb07 	bl	8000554 <__aeabi_i2d>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f4e:	f7f9 f9b3 	bl	80002b8 <__aeabi_dsub>
 8006f52:	3530      	adds	r5, #48	@ 0x30
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f5c:	f806 5b01 	strb.w	r5, [r6], #1
 8006f60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f64:	f7f9 fdd2 	bl	8000b0c <__aeabi_dcmplt>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d172      	bne.n	8007052 <_dtoa_r+0x622>
 8006f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f70:	4911      	ldr	r1, [pc, #68]	@ (8006fb8 <_dtoa_r+0x588>)
 8006f72:	2000      	movs	r0, #0
 8006f74:	f7f9 f9a0 	bl	80002b8 <__aeabi_dsub>
 8006f78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f7c:	f7f9 fdc6 	bl	8000b0c <__aeabi_dcmplt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f040 80b4 	bne.w	80070ee <_dtoa_r+0x6be>
 8006f86:	42a6      	cmp	r6, r4
 8006f88:	f43f af70 	beq.w	8006e6c <_dtoa_r+0x43c>
 8006f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f90:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <_dtoa_r+0x58c>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	f7f9 fb48 	bl	8000628 <__aeabi_dmul>
 8006f98:	4b08      	ldr	r3, [pc, #32]	@ (8006fbc <_dtoa_r+0x58c>)
 8006f9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fa4:	f7f9 fb40 	bl	8000628 <__aeabi_dmul>
 8006fa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fac:	e7c4      	b.n	8006f38 <_dtoa_r+0x508>
 8006fae:	bf00      	nop
 8006fb0:	0801dae8 	.word	0x0801dae8
 8006fb4:	0801dac0 	.word	0x0801dac0
 8006fb8:	3ff00000 	.word	0x3ff00000
 8006fbc:	40240000 	.word	0x40240000
 8006fc0:	401c0000 	.word	0x401c0000
 8006fc4:	40140000 	.word	0x40140000
 8006fc8:	3fe00000 	.word	0x3fe00000
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7f9 fb2a 	bl	8000628 <__aeabi_dmul>
 8006fd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006fda:	4656      	mov	r6, sl
 8006fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe0:	f7f9 fdd2 	bl	8000b88 <__aeabi_d2iz>
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	f7f9 fab5 	bl	8000554 <__aeabi_i2d>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff2:	f7f9 f961 	bl	80002b8 <__aeabi_dsub>
 8006ff6:	3530      	adds	r5, #48	@ 0x30
 8006ff8:	f806 5b01 	strb.w	r5, [r6], #1
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	42a6      	cmp	r6, r4
 8007002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	d124      	bne.n	8007056 <_dtoa_r+0x626>
 800700c:	4baf      	ldr	r3, [pc, #700]	@ (80072cc <_dtoa_r+0x89c>)
 800700e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007012:	f7f9 f953 	bl	80002bc <__adddf3>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800701e:	f7f9 fd93 	bl	8000b48 <__aeabi_dcmpgt>
 8007022:	2800      	cmp	r0, #0
 8007024:	d163      	bne.n	80070ee <_dtoa_r+0x6be>
 8007026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800702a:	49a8      	ldr	r1, [pc, #672]	@ (80072cc <_dtoa_r+0x89c>)
 800702c:	2000      	movs	r0, #0
 800702e:	f7f9 f943 	bl	80002b8 <__aeabi_dsub>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800703a:	f7f9 fd67 	bl	8000b0c <__aeabi_dcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f af14 	beq.w	8006e6c <_dtoa_r+0x43c>
 8007044:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007046:	1e73      	subs	r3, r6, #1
 8007048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800704a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800704e:	2b30      	cmp	r3, #48	@ 0x30
 8007050:	d0f8      	beq.n	8007044 <_dtoa_r+0x614>
 8007052:	4647      	mov	r7, r8
 8007054:	e03b      	b.n	80070ce <_dtoa_r+0x69e>
 8007056:	4b9e      	ldr	r3, [pc, #632]	@ (80072d0 <_dtoa_r+0x8a0>)
 8007058:	f7f9 fae6 	bl	8000628 <__aeabi_dmul>
 800705c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007060:	e7bc      	b.n	8006fdc <_dtoa_r+0x5ac>
 8007062:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007066:	4656      	mov	r6, sl
 8007068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800706c:	4620      	mov	r0, r4
 800706e:	4629      	mov	r1, r5
 8007070:	f7f9 fc04 	bl	800087c <__aeabi_ddiv>
 8007074:	f7f9 fd88 	bl	8000b88 <__aeabi_d2iz>
 8007078:	4680      	mov	r8, r0
 800707a:	f7f9 fa6b 	bl	8000554 <__aeabi_i2d>
 800707e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007082:	f7f9 fad1 	bl	8000628 <__aeabi_dmul>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007092:	f7f9 f911 	bl	80002b8 <__aeabi_dsub>
 8007096:	f806 4b01 	strb.w	r4, [r6], #1
 800709a:	9d03      	ldr	r5, [sp, #12]
 800709c:	eba6 040a 	sub.w	r4, r6, sl
 80070a0:	42a5      	cmp	r5, r4
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	d133      	bne.n	8007110 <_dtoa_r+0x6e0>
 80070a8:	f7f9 f908 	bl	80002bc <__adddf3>
 80070ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	f7f9 fd48 	bl	8000b48 <__aeabi_dcmpgt>
 80070b8:	b9c0      	cbnz	r0, 80070ec <_dtoa_r+0x6bc>
 80070ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 fd19 	bl	8000af8 <__aeabi_dcmpeq>
 80070c6:	b110      	cbz	r0, 80070ce <_dtoa_r+0x69e>
 80070c8:	f018 0f01 	tst.w	r8, #1
 80070cc:	d10e      	bne.n	80070ec <_dtoa_r+0x6bc>
 80070ce:	9902      	ldr	r1, [sp, #8]
 80070d0:	4648      	mov	r0, r9
 80070d2:	f000 fb07 	bl	80076e4 <_Bfree>
 80070d6:	2300      	movs	r3, #0
 80070d8:	7033      	strb	r3, [r6, #0]
 80070da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070dc:	3701      	adds	r7, #1
 80070de:	601f      	str	r7, [r3, #0]
 80070e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 824b 	beq.w	800757e <_dtoa_r+0xb4e>
 80070e8:	601e      	str	r6, [r3, #0]
 80070ea:	e248      	b.n	800757e <_dtoa_r+0xb4e>
 80070ec:	46b8      	mov	r8, r7
 80070ee:	4633      	mov	r3, r6
 80070f0:	461e      	mov	r6, r3
 80070f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070f6:	2a39      	cmp	r2, #57	@ 0x39
 80070f8:	d106      	bne.n	8007108 <_dtoa_r+0x6d8>
 80070fa:	459a      	cmp	sl, r3
 80070fc:	d1f8      	bne.n	80070f0 <_dtoa_r+0x6c0>
 80070fe:	2230      	movs	r2, #48	@ 0x30
 8007100:	f108 0801 	add.w	r8, r8, #1
 8007104:	f88a 2000 	strb.w	r2, [sl]
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	3201      	adds	r2, #1
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	e7a0      	b.n	8007052 <_dtoa_r+0x622>
 8007110:	4b6f      	ldr	r3, [pc, #444]	@ (80072d0 <_dtoa_r+0x8a0>)
 8007112:	2200      	movs	r2, #0
 8007114:	f7f9 fa88 	bl	8000628 <__aeabi_dmul>
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	f7f9 fcea 	bl	8000af8 <__aeabi_dcmpeq>
 8007124:	2800      	cmp	r0, #0
 8007126:	d09f      	beq.n	8007068 <_dtoa_r+0x638>
 8007128:	e7d1      	b.n	80070ce <_dtoa_r+0x69e>
 800712a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800712c:	2a00      	cmp	r2, #0
 800712e:	f000 80ea 	beq.w	8007306 <_dtoa_r+0x8d6>
 8007132:	9a07      	ldr	r2, [sp, #28]
 8007134:	2a01      	cmp	r2, #1
 8007136:	f300 80cd 	bgt.w	80072d4 <_dtoa_r+0x8a4>
 800713a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800713c:	2a00      	cmp	r2, #0
 800713e:	f000 80c1 	beq.w	80072c4 <_dtoa_r+0x894>
 8007142:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007146:	9c08      	ldr	r4, [sp, #32]
 8007148:	9e00      	ldr	r6, [sp, #0]
 800714a:	9a00      	ldr	r2, [sp, #0]
 800714c:	441a      	add	r2, r3
 800714e:	9200      	str	r2, [sp, #0]
 8007150:	9a06      	ldr	r2, [sp, #24]
 8007152:	2101      	movs	r1, #1
 8007154:	441a      	add	r2, r3
 8007156:	4648      	mov	r0, r9
 8007158:	9206      	str	r2, [sp, #24]
 800715a:	f000 fbc1 	bl	80078e0 <__i2b>
 800715e:	4605      	mov	r5, r0
 8007160:	b166      	cbz	r6, 800717c <_dtoa_r+0x74c>
 8007162:	9b06      	ldr	r3, [sp, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dd09      	ble.n	800717c <_dtoa_r+0x74c>
 8007168:	42b3      	cmp	r3, r6
 800716a:	9a00      	ldr	r2, [sp, #0]
 800716c:	bfa8      	it	ge
 800716e:	4633      	movge	r3, r6
 8007170:	1ad2      	subs	r2, r2, r3
 8007172:	9200      	str	r2, [sp, #0]
 8007174:	9a06      	ldr	r2, [sp, #24]
 8007176:	1af6      	subs	r6, r6, r3
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	9306      	str	r3, [sp, #24]
 800717c:	9b08      	ldr	r3, [sp, #32]
 800717e:	b30b      	cbz	r3, 80071c4 <_dtoa_r+0x794>
 8007180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80c6 	beq.w	8007314 <_dtoa_r+0x8e4>
 8007188:	2c00      	cmp	r4, #0
 800718a:	f000 80c0 	beq.w	800730e <_dtoa_r+0x8de>
 800718e:	4629      	mov	r1, r5
 8007190:	4622      	mov	r2, r4
 8007192:	4648      	mov	r0, r9
 8007194:	f000 fc5c 	bl	8007a50 <__pow5mult>
 8007198:	9a02      	ldr	r2, [sp, #8]
 800719a:	4601      	mov	r1, r0
 800719c:	4605      	mov	r5, r0
 800719e:	4648      	mov	r0, r9
 80071a0:	f000 fbb4 	bl	800790c <__multiply>
 80071a4:	9902      	ldr	r1, [sp, #8]
 80071a6:	4680      	mov	r8, r0
 80071a8:	4648      	mov	r0, r9
 80071aa:	f000 fa9b 	bl	80076e4 <_Bfree>
 80071ae:	9b08      	ldr	r3, [sp, #32]
 80071b0:	1b1b      	subs	r3, r3, r4
 80071b2:	9308      	str	r3, [sp, #32]
 80071b4:	f000 80b1 	beq.w	800731a <_dtoa_r+0x8ea>
 80071b8:	9a08      	ldr	r2, [sp, #32]
 80071ba:	4641      	mov	r1, r8
 80071bc:	4648      	mov	r0, r9
 80071be:	f000 fc47 	bl	8007a50 <__pow5mult>
 80071c2:	9002      	str	r0, [sp, #8]
 80071c4:	2101      	movs	r1, #1
 80071c6:	4648      	mov	r0, r9
 80071c8:	f000 fb8a 	bl	80078e0 <__i2b>
 80071cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071ce:	4604      	mov	r4, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 81d8 	beq.w	8007586 <_dtoa_r+0xb56>
 80071d6:	461a      	mov	r2, r3
 80071d8:	4601      	mov	r1, r0
 80071da:	4648      	mov	r0, r9
 80071dc:	f000 fc38 	bl	8007a50 <__pow5mult>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	4604      	mov	r4, r0
 80071e6:	f300 809f 	bgt.w	8007328 <_dtoa_r+0x8f8>
 80071ea:	9b04      	ldr	r3, [sp, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8097 	bne.w	8007320 <_dtoa_r+0x8f0>
 80071f2:	9b05      	ldr	r3, [sp, #20]
 80071f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f040 8093 	bne.w	8007324 <_dtoa_r+0x8f4>
 80071fe:	9b05      	ldr	r3, [sp, #20]
 8007200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007204:	0d1b      	lsrs	r3, r3, #20
 8007206:	051b      	lsls	r3, r3, #20
 8007208:	b133      	cbz	r3, 8007218 <_dtoa_r+0x7e8>
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	9b06      	ldr	r3, [sp, #24]
 8007212:	3301      	adds	r3, #1
 8007214:	9306      	str	r3, [sp, #24]
 8007216:	2301      	movs	r3, #1
 8007218:	9308      	str	r3, [sp, #32]
 800721a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 81b8 	beq.w	8007592 <_dtoa_r+0xb62>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007228:	6918      	ldr	r0, [r3, #16]
 800722a:	f000 fb0d 	bl	8007848 <__hi0bits>
 800722e:	f1c0 0020 	rsb	r0, r0, #32
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	4418      	add	r0, r3
 8007236:	f010 001f 	ands.w	r0, r0, #31
 800723a:	f000 8082 	beq.w	8007342 <_dtoa_r+0x912>
 800723e:	f1c0 0320 	rsb	r3, r0, #32
 8007242:	2b04      	cmp	r3, #4
 8007244:	dd73      	ble.n	800732e <_dtoa_r+0x8fe>
 8007246:	9b00      	ldr	r3, [sp, #0]
 8007248:	f1c0 001c 	rsb	r0, r0, #28
 800724c:	4403      	add	r3, r0
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	4403      	add	r3, r0
 8007254:	4406      	add	r6, r0
 8007256:	9306      	str	r3, [sp, #24]
 8007258:	9b00      	ldr	r3, [sp, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dd05      	ble.n	800726a <_dtoa_r+0x83a>
 800725e:	9902      	ldr	r1, [sp, #8]
 8007260:	461a      	mov	r2, r3
 8007262:	4648      	mov	r0, r9
 8007264:	f000 fc4e 	bl	8007b04 <__lshift>
 8007268:	9002      	str	r0, [sp, #8]
 800726a:	9b06      	ldr	r3, [sp, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	dd05      	ble.n	800727c <_dtoa_r+0x84c>
 8007270:	4621      	mov	r1, r4
 8007272:	461a      	mov	r2, r3
 8007274:	4648      	mov	r0, r9
 8007276:	f000 fc45 	bl	8007b04 <__lshift>
 800727a:	4604      	mov	r4, r0
 800727c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d061      	beq.n	8007346 <_dtoa_r+0x916>
 8007282:	9802      	ldr	r0, [sp, #8]
 8007284:	4621      	mov	r1, r4
 8007286:	f000 fca9 	bl	8007bdc <__mcmp>
 800728a:	2800      	cmp	r0, #0
 800728c:	da5b      	bge.n	8007346 <_dtoa_r+0x916>
 800728e:	2300      	movs	r3, #0
 8007290:	9902      	ldr	r1, [sp, #8]
 8007292:	220a      	movs	r2, #10
 8007294:	4648      	mov	r0, r9
 8007296:	f000 fa47 	bl	8007728 <__multadd>
 800729a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	f107 38ff 	add.w	r8, r7, #4294967295
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 8177 	beq.w	8007596 <_dtoa_r+0xb66>
 80072a8:	4629      	mov	r1, r5
 80072aa:	2300      	movs	r3, #0
 80072ac:	220a      	movs	r2, #10
 80072ae:	4648      	mov	r0, r9
 80072b0:	f000 fa3a 	bl	8007728 <__multadd>
 80072b4:	f1bb 0f00 	cmp.w	fp, #0
 80072b8:	4605      	mov	r5, r0
 80072ba:	dc6f      	bgt.n	800739c <_dtoa_r+0x96c>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	dc49      	bgt.n	8007356 <_dtoa_r+0x926>
 80072c2:	e06b      	b.n	800739c <_dtoa_r+0x96c>
 80072c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072ca:	e73c      	b.n	8007146 <_dtoa_r+0x716>
 80072cc:	3fe00000 	.word	0x3fe00000
 80072d0:	40240000 	.word	0x40240000
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	1e5c      	subs	r4, r3, #1
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	42a3      	cmp	r3, r4
 80072dc:	db09      	blt.n	80072f2 <_dtoa_r+0x8c2>
 80072de:	1b1c      	subs	r4, r3, r4
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f6bf af30 	bge.w	8007148 <_dtoa_r+0x718>
 80072e8:	9b00      	ldr	r3, [sp, #0]
 80072ea:	9a03      	ldr	r2, [sp, #12]
 80072ec:	1a9e      	subs	r6, r3, r2
 80072ee:	2300      	movs	r3, #0
 80072f0:	e72b      	b.n	800714a <_dtoa_r+0x71a>
 80072f2:	9b08      	ldr	r3, [sp, #32]
 80072f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072f6:	9408      	str	r4, [sp, #32]
 80072f8:	1ae3      	subs	r3, r4, r3
 80072fa:	441a      	add	r2, r3
 80072fc:	9e00      	ldr	r6, [sp, #0]
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	920d      	str	r2, [sp, #52]	@ 0x34
 8007302:	2400      	movs	r4, #0
 8007304:	e721      	b.n	800714a <_dtoa_r+0x71a>
 8007306:	9c08      	ldr	r4, [sp, #32]
 8007308:	9e00      	ldr	r6, [sp, #0]
 800730a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800730c:	e728      	b.n	8007160 <_dtoa_r+0x730>
 800730e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007312:	e751      	b.n	80071b8 <_dtoa_r+0x788>
 8007314:	9a08      	ldr	r2, [sp, #32]
 8007316:	9902      	ldr	r1, [sp, #8]
 8007318:	e750      	b.n	80071bc <_dtoa_r+0x78c>
 800731a:	f8cd 8008 	str.w	r8, [sp, #8]
 800731e:	e751      	b.n	80071c4 <_dtoa_r+0x794>
 8007320:	2300      	movs	r3, #0
 8007322:	e779      	b.n	8007218 <_dtoa_r+0x7e8>
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	e777      	b.n	8007218 <_dtoa_r+0x7e8>
 8007328:	2300      	movs	r3, #0
 800732a:	9308      	str	r3, [sp, #32]
 800732c:	e779      	b.n	8007222 <_dtoa_r+0x7f2>
 800732e:	d093      	beq.n	8007258 <_dtoa_r+0x828>
 8007330:	9a00      	ldr	r2, [sp, #0]
 8007332:	331c      	adds	r3, #28
 8007334:	441a      	add	r2, r3
 8007336:	9200      	str	r2, [sp, #0]
 8007338:	9a06      	ldr	r2, [sp, #24]
 800733a:	441a      	add	r2, r3
 800733c:	441e      	add	r6, r3
 800733e:	9206      	str	r2, [sp, #24]
 8007340:	e78a      	b.n	8007258 <_dtoa_r+0x828>
 8007342:	4603      	mov	r3, r0
 8007344:	e7f4      	b.n	8007330 <_dtoa_r+0x900>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	46b8      	mov	r8, r7
 800734c:	dc20      	bgt.n	8007390 <_dtoa_r+0x960>
 800734e:	469b      	mov	fp, r3
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	2b02      	cmp	r3, #2
 8007354:	dd1e      	ble.n	8007394 <_dtoa_r+0x964>
 8007356:	f1bb 0f00 	cmp.w	fp, #0
 800735a:	f47f adb1 	bne.w	8006ec0 <_dtoa_r+0x490>
 800735e:	4621      	mov	r1, r4
 8007360:	465b      	mov	r3, fp
 8007362:	2205      	movs	r2, #5
 8007364:	4648      	mov	r0, r9
 8007366:	f000 f9df 	bl	8007728 <__multadd>
 800736a:	4601      	mov	r1, r0
 800736c:	4604      	mov	r4, r0
 800736e:	9802      	ldr	r0, [sp, #8]
 8007370:	f000 fc34 	bl	8007bdc <__mcmp>
 8007374:	2800      	cmp	r0, #0
 8007376:	f77f ada3 	ble.w	8006ec0 <_dtoa_r+0x490>
 800737a:	4656      	mov	r6, sl
 800737c:	2331      	movs	r3, #49	@ 0x31
 800737e:	f806 3b01 	strb.w	r3, [r6], #1
 8007382:	f108 0801 	add.w	r8, r8, #1
 8007386:	e59f      	b.n	8006ec8 <_dtoa_r+0x498>
 8007388:	9c03      	ldr	r4, [sp, #12]
 800738a:	46b8      	mov	r8, r7
 800738c:	4625      	mov	r5, r4
 800738e:	e7f4      	b.n	800737a <_dtoa_r+0x94a>
 8007390:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8101 	beq.w	800759e <_dtoa_r+0xb6e>
 800739c:	2e00      	cmp	r6, #0
 800739e:	dd05      	ble.n	80073ac <_dtoa_r+0x97c>
 80073a0:	4629      	mov	r1, r5
 80073a2:	4632      	mov	r2, r6
 80073a4:	4648      	mov	r0, r9
 80073a6:	f000 fbad 	bl	8007b04 <__lshift>
 80073aa:	4605      	mov	r5, r0
 80073ac:	9b08      	ldr	r3, [sp, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d05c      	beq.n	800746c <_dtoa_r+0xa3c>
 80073b2:	6869      	ldr	r1, [r5, #4]
 80073b4:	4648      	mov	r0, r9
 80073b6:	f000 f955 	bl	8007664 <_Balloc>
 80073ba:	4606      	mov	r6, r0
 80073bc:	b928      	cbnz	r0, 80073ca <_dtoa_r+0x99a>
 80073be:	4b82      	ldr	r3, [pc, #520]	@ (80075c8 <_dtoa_r+0xb98>)
 80073c0:	4602      	mov	r2, r0
 80073c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073c6:	f7ff bb4a 	b.w	8006a5e <_dtoa_r+0x2e>
 80073ca:	692a      	ldr	r2, [r5, #16]
 80073cc:	3202      	adds	r2, #2
 80073ce:	0092      	lsls	r2, r2, #2
 80073d0:	f105 010c 	add.w	r1, r5, #12
 80073d4:	300c      	adds	r0, #12
 80073d6:	f7ff fa8c 	bl	80068f2 <memcpy>
 80073da:	2201      	movs	r2, #1
 80073dc:	4631      	mov	r1, r6
 80073de:	4648      	mov	r0, r9
 80073e0:	f000 fb90 	bl	8007b04 <__lshift>
 80073e4:	f10a 0301 	add.w	r3, sl, #1
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	eb0a 030b 	add.w	r3, sl, fp
 80073ee:	9308      	str	r3, [sp, #32]
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	462f      	mov	r7, r5
 80073f8:	9306      	str	r3, [sp, #24]
 80073fa:	4605      	mov	r5, r0
 80073fc:	9b00      	ldr	r3, [sp, #0]
 80073fe:	9802      	ldr	r0, [sp, #8]
 8007400:	4621      	mov	r1, r4
 8007402:	f103 3bff 	add.w	fp, r3, #4294967295
 8007406:	f7ff fa89 	bl	800691c <quorem>
 800740a:	4603      	mov	r3, r0
 800740c:	3330      	adds	r3, #48	@ 0x30
 800740e:	9003      	str	r0, [sp, #12]
 8007410:	4639      	mov	r1, r7
 8007412:	9802      	ldr	r0, [sp, #8]
 8007414:	9309      	str	r3, [sp, #36]	@ 0x24
 8007416:	f000 fbe1 	bl	8007bdc <__mcmp>
 800741a:	462a      	mov	r2, r5
 800741c:	9004      	str	r0, [sp, #16]
 800741e:	4621      	mov	r1, r4
 8007420:	4648      	mov	r0, r9
 8007422:	f000 fbf7 	bl	8007c14 <__mdiff>
 8007426:	68c2      	ldr	r2, [r0, #12]
 8007428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742a:	4606      	mov	r6, r0
 800742c:	bb02      	cbnz	r2, 8007470 <_dtoa_r+0xa40>
 800742e:	4601      	mov	r1, r0
 8007430:	9802      	ldr	r0, [sp, #8]
 8007432:	f000 fbd3 	bl	8007bdc <__mcmp>
 8007436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007438:	4602      	mov	r2, r0
 800743a:	4631      	mov	r1, r6
 800743c:	4648      	mov	r0, r9
 800743e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007440:	9309      	str	r3, [sp, #36]	@ 0x24
 8007442:	f000 f94f 	bl	80076e4 <_Bfree>
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800744a:	9e00      	ldr	r6, [sp, #0]
 800744c:	ea42 0103 	orr.w	r1, r2, r3
 8007450:	9b06      	ldr	r3, [sp, #24]
 8007452:	4319      	orrs	r1, r3
 8007454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007456:	d10d      	bne.n	8007474 <_dtoa_r+0xa44>
 8007458:	2b39      	cmp	r3, #57	@ 0x39
 800745a:	d027      	beq.n	80074ac <_dtoa_r+0xa7c>
 800745c:	9a04      	ldr	r2, [sp, #16]
 800745e:	2a00      	cmp	r2, #0
 8007460:	dd01      	ble.n	8007466 <_dtoa_r+0xa36>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	3331      	adds	r3, #49	@ 0x31
 8007466:	f88b 3000 	strb.w	r3, [fp]
 800746a:	e52e      	b.n	8006eca <_dtoa_r+0x49a>
 800746c:	4628      	mov	r0, r5
 800746e:	e7b9      	b.n	80073e4 <_dtoa_r+0x9b4>
 8007470:	2201      	movs	r2, #1
 8007472:	e7e2      	b.n	800743a <_dtoa_r+0xa0a>
 8007474:	9904      	ldr	r1, [sp, #16]
 8007476:	2900      	cmp	r1, #0
 8007478:	db04      	blt.n	8007484 <_dtoa_r+0xa54>
 800747a:	9807      	ldr	r0, [sp, #28]
 800747c:	4301      	orrs	r1, r0
 800747e:	9806      	ldr	r0, [sp, #24]
 8007480:	4301      	orrs	r1, r0
 8007482:	d120      	bne.n	80074c6 <_dtoa_r+0xa96>
 8007484:	2a00      	cmp	r2, #0
 8007486:	ddee      	ble.n	8007466 <_dtoa_r+0xa36>
 8007488:	9902      	ldr	r1, [sp, #8]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	4648      	mov	r0, r9
 8007490:	f000 fb38 	bl	8007b04 <__lshift>
 8007494:	4621      	mov	r1, r4
 8007496:	9002      	str	r0, [sp, #8]
 8007498:	f000 fba0 	bl	8007bdc <__mcmp>
 800749c:	2800      	cmp	r0, #0
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	dc02      	bgt.n	80074a8 <_dtoa_r+0xa78>
 80074a2:	d1e0      	bne.n	8007466 <_dtoa_r+0xa36>
 80074a4:	07da      	lsls	r2, r3, #31
 80074a6:	d5de      	bpl.n	8007466 <_dtoa_r+0xa36>
 80074a8:	2b39      	cmp	r3, #57	@ 0x39
 80074aa:	d1da      	bne.n	8007462 <_dtoa_r+0xa32>
 80074ac:	2339      	movs	r3, #57	@ 0x39
 80074ae:	f88b 3000 	strb.w	r3, [fp]
 80074b2:	4633      	mov	r3, r6
 80074b4:	461e      	mov	r6, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074bc:	2a39      	cmp	r2, #57	@ 0x39
 80074be:	d04e      	beq.n	800755e <_dtoa_r+0xb2e>
 80074c0:	3201      	adds	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	e501      	b.n	8006eca <_dtoa_r+0x49a>
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	dd03      	ble.n	80074d2 <_dtoa_r+0xaa2>
 80074ca:	2b39      	cmp	r3, #57	@ 0x39
 80074cc:	d0ee      	beq.n	80074ac <_dtoa_r+0xa7c>
 80074ce:	3301      	adds	r3, #1
 80074d0:	e7c9      	b.n	8007466 <_dtoa_r+0xa36>
 80074d2:	9a00      	ldr	r2, [sp, #0]
 80074d4:	9908      	ldr	r1, [sp, #32]
 80074d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074da:	428a      	cmp	r2, r1
 80074dc:	d028      	beq.n	8007530 <_dtoa_r+0xb00>
 80074de:	9902      	ldr	r1, [sp, #8]
 80074e0:	2300      	movs	r3, #0
 80074e2:	220a      	movs	r2, #10
 80074e4:	4648      	mov	r0, r9
 80074e6:	f000 f91f 	bl	8007728 <__multadd>
 80074ea:	42af      	cmp	r7, r5
 80074ec:	9002      	str	r0, [sp, #8]
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	f04f 020a 	mov.w	r2, #10
 80074f6:	4639      	mov	r1, r7
 80074f8:	4648      	mov	r0, r9
 80074fa:	d107      	bne.n	800750c <_dtoa_r+0xadc>
 80074fc:	f000 f914 	bl	8007728 <__multadd>
 8007500:	4607      	mov	r7, r0
 8007502:	4605      	mov	r5, r0
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	e777      	b.n	80073fc <_dtoa_r+0x9cc>
 800750c:	f000 f90c 	bl	8007728 <__multadd>
 8007510:	4629      	mov	r1, r5
 8007512:	4607      	mov	r7, r0
 8007514:	2300      	movs	r3, #0
 8007516:	220a      	movs	r2, #10
 8007518:	4648      	mov	r0, r9
 800751a:	f000 f905 	bl	8007728 <__multadd>
 800751e:	4605      	mov	r5, r0
 8007520:	e7f0      	b.n	8007504 <_dtoa_r+0xad4>
 8007522:	f1bb 0f00 	cmp.w	fp, #0
 8007526:	bfcc      	ite	gt
 8007528:	465e      	movgt	r6, fp
 800752a:	2601      	movle	r6, #1
 800752c:	4456      	add	r6, sl
 800752e:	2700      	movs	r7, #0
 8007530:	9902      	ldr	r1, [sp, #8]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	2201      	movs	r2, #1
 8007536:	4648      	mov	r0, r9
 8007538:	f000 fae4 	bl	8007b04 <__lshift>
 800753c:	4621      	mov	r1, r4
 800753e:	9002      	str	r0, [sp, #8]
 8007540:	f000 fb4c 	bl	8007bdc <__mcmp>
 8007544:	2800      	cmp	r0, #0
 8007546:	dcb4      	bgt.n	80074b2 <_dtoa_r+0xa82>
 8007548:	d102      	bne.n	8007550 <_dtoa_r+0xb20>
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	07db      	lsls	r3, r3, #31
 800754e:	d4b0      	bmi.n	80074b2 <_dtoa_r+0xa82>
 8007550:	4633      	mov	r3, r6
 8007552:	461e      	mov	r6, r3
 8007554:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007558:	2a30      	cmp	r2, #48	@ 0x30
 800755a:	d0fa      	beq.n	8007552 <_dtoa_r+0xb22>
 800755c:	e4b5      	b.n	8006eca <_dtoa_r+0x49a>
 800755e:	459a      	cmp	sl, r3
 8007560:	d1a8      	bne.n	80074b4 <_dtoa_r+0xa84>
 8007562:	2331      	movs	r3, #49	@ 0x31
 8007564:	f108 0801 	add.w	r8, r8, #1
 8007568:	f88a 3000 	strb.w	r3, [sl]
 800756c:	e4ad      	b.n	8006eca <_dtoa_r+0x49a>
 800756e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007570:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80075cc <_dtoa_r+0xb9c>
 8007574:	b11b      	cbz	r3, 800757e <_dtoa_r+0xb4e>
 8007576:	f10a 0308 	add.w	r3, sl, #8
 800757a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	4650      	mov	r0, sl
 8007580:	b017      	add	sp, #92	@ 0x5c
 8007582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	2b01      	cmp	r3, #1
 800758a:	f77f ae2e 	ble.w	80071ea <_dtoa_r+0x7ba>
 800758e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	2001      	movs	r0, #1
 8007594:	e64d      	b.n	8007232 <_dtoa_r+0x802>
 8007596:	f1bb 0f00 	cmp.w	fp, #0
 800759a:	f77f aed9 	ble.w	8007350 <_dtoa_r+0x920>
 800759e:	4656      	mov	r6, sl
 80075a0:	9802      	ldr	r0, [sp, #8]
 80075a2:	4621      	mov	r1, r4
 80075a4:	f7ff f9ba 	bl	800691c <quorem>
 80075a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80075ac:	f806 3b01 	strb.w	r3, [r6], #1
 80075b0:	eba6 020a 	sub.w	r2, r6, sl
 80075b4:	4593      	cmp	fp, r2
 80075b6:	ddb4      	ble.n	8007522 <_dtoa_r+0xaf2>
 80075b8:	9902      	ldr	r1, [sp, #8]
 80075ba:	2300      	movs	r3, #0
 80075bc:	220a      	movs	r2, #10
 80075be:	4648      	mov	r0, r9
 80075c0:	f000 f8b2 	bl	8007728 <__multadd>
 80075c4:	9002      	str	r0, [sp, #8]
 80075c6:	e7eb      	b.n	80075a0 <_dtoa_r+0xb70>
 80075c8:	0801d98d 	.word	0x0801d98d
 80075cc:	0801d911 	.word	0x0801d911

080075d0 <_free_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d041      	beq.n	800765c <_free_r+0x8c>
 80075d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075dc:	1f0c      	subs	r4, r1, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfb8      	it	lt
 80075e2:	18e4      	addlt	r4, r4, r3
 80075e4:	f7fe f85a 	bl	800569c <__malloc_lock>
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <_free_r+0x90>)
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	b933      	cbnz	r3, 80075fc <_free_r+0x2c>
 80075ee:	6063      	str	r3, [r4, #4]
 80075f0:	6014      	str	r4, [r2, #0]
 80075f2:	4628      	mov	r0, r5
 80075f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f8:	f7fe b856 	b.w	80056a8 <__malloc_unlock>
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	d908      	bls.n	8007612 <_free_r+0x42>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	1821      	adds	r1, r4, r0
 8007604:	428b      	cmp	r3, r1
 8007606:	bf01      	itttt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	1809      	addeq	r1, r1, r0
 800760e:	6021      	streq	r1, [r4, #0]
 8007610:	e7ed      	b.n	80075ee <_free_r+0x1e>
 8007612:	461a      	mov	r2, r3
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b10b      	cbz	r3, 800761c <_free_r+0x4c>
 8007618:	42a3      	cmp	r3, r4
 800761a:	d9fa      	bls.n	8007612 <_free_r+0x42>
 800761c:	6811      	ldr	r1, [r2, #0]
 800761e:	1850      	adds	r0, r2, r1
 8007620:	42a0      	cmp	r0, r4
 8007622:	d10b      	bne.n	800763c <_free_r+0x6c>
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	4401      	add	r1, r0
 8007628:	1850      	adds	r0, r2, r1
 800762a:	4283      	cmp	r3, r0
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	d1e0      	bne.n	80075f2 <_free_r+0x22>
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	6053      	str	r3, [r2, #4]
 8007636:	4408      	add	r0, r1
 8007638:	6010      	str	r0, [r2, #0]
 800763a:	e7da      	b.n	80075f2 <_free_r+0x22>
 800763c:	d902      	bls.n	8007644 <_free_r+0x74>
 800763e:	230c      	movs	r3, #12
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	e7d6      	b.n	80075f2 <_free_r+0x22>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	1821      	adds	r1, r4, r0
 8007648:	428b      	cmp	r3, r1
 800764a:	bf04      	itt	eq
 800764c:	6819      	ldreq	r1, [r3, #0]
 800764e:	685b      	ldreq	r3, [r3, #4]
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	bf04      	itt	eq
 8007654:	1809      	addeq	r1, r1, r0
 8007656:	6021      	streq	r1, [r4, #0]
 8007658:	6054      	str	r4, [r2, #4]
 800765a:	e7ca      	b.n	80075f2 <_free_r+0x22>
 800765c:	bd38      	pop	{r3, r4, r5, pc}
 800765e:	bf00      	nop
 8007660:	2005c524 	.word	0x2005c524

08007664 <_Balloc>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	69c6      	ldr	r6, [r0, #28]
 8007668:	4604      	mov	r4, r0
 800766a:	460d      	mov	r5, r1
 800766c:	b976      	cbnz	r6, 800768c <_Balloc+0x28>
 800766e:	2010      	movs	r0, #16
 8007670:	f7fd ff6a 	bl	8005548 <malloc>
 8007674:	4602      	mov	r2, r0
 8007676:	61e0      	str	r0, [r4, #28]
 8007678:	b920      	cbnz	r0, 8007684 <_Balloc+0x20>
 800767a:	4b18      	ldr	r3, [pc, #96]	@ (80076dc <_Balloc+0x78>)
 800767c:	4818      	ldr	r0, [pc, #96]	@ (80076e0 <_Balloc+0x7c>)
 800767e:	216b      	movs	r1, #107	@ 0x6b
 8007680:	f001 ff1e 	bl	80094c0 <__assert_func>
 8007684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007688:	6006      	str	r6, [r0, #0]
 800768a:	60c6      	str	r6, [r0, #12]
 800768c:	69e6      	ldr	r6, [r4, #28]
 800768e:	68f3      	ldr	r3, [r6, #12]
 8007690:	b183      	cbz	r3, 80076b4 <_Balloc+0x50>
 8007692:	69e3      	ldr	r3, [r4, #28]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800769a:	b9b8      	cbnz	r0, 80076cc <_Balloc+0x68>
 800769c:	2101      	movs	r1, #1
 800769e:	fa01 f605 	lsl.w	r6, r1, r5
 80076a2:	1d72      	adds	r2, r6, #5
 80076a4:	0092      	lsls	r2, r2, #2
 80076a6:	4620      	mov	r0, r4
 80076a8:	f001 ff28 	bl	80094fc <_calloc_r>
 80076ac:	b160      	cbz	r0, 80076c8 <_Balloc+0x64>
 80076ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076b2:	e00e      	b.n	80076d2 <_Balloc+0x6e>
 80076b4:	2221      	movs	r2, #33	@ 0x21
 80076b6:	2104      	movs	r1, #4
 80076b8:	4620      	mov	r0, r4
 80076ba:	f001 ff1f 	bl	80094fc <_calloc_r>
 80076be:	69e3      	ldr	r3, [r4, #28]
 80076c0:	60f0      	str	r0, [r6, #12]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e4      	bne.n	8007692 <_Balloc+0x2e>
 80076c8:	2000      	movs	r0, #0
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	6802      	ldr	r2, [r0, #0]
 80076ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076d2:	2300      	movs	r3, #0
 80076d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076d8:	e7f7      	b.n	80076ca <_Balloc+0x66>
 80076da:	bf00      	nop
 80076dc:	0801d91e 	.word	0x0801d91e
 80076e0:	0801d99e 	.word	0x0801d99e

080076e4 <_Bfree>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	69c6      	ldr	r6, [r0, #28]
 80076e8:	4605      	mov	r5, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	b976      	cbnz	r6, 800770c <_Bfree+0x28>
 80076ee:	2010      	movs	r0, #16
 80076f0:	f7fd ff2a 	bl	8005548 <malloc>
 80076f4:	4602      	mov	r2, r0
 80076f6:	61e8      	str	r0, [r5, #28]
 80076f8:	b920      	cbnz	r0, 8007704 <_Bfree+0x20>
 80076fa:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <_Bfree+0x3c>)
 80076fc:	4809      	ldr	r0, [pc, #36]	@ (8007724 <_Bfree+0x40>)
 80076fe:	218f      	movs	r1, #143	@ 0x8f
 8007700:	f001 fede 	bl	80094c0 <__assert_func>
 8007704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007708:	6006      	str	r6, [r0, #0]
 800770a:	60c6      	str	r6, [r0, #12]
 800770c:	b13c      	cbz	r4, 800771e <_Bfree+0x3a>
 800770e:	69eb      	ldr	r3, [r5, #28]
 8007710:	6862      	ldr	r2, [r4, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007718:	6021      	str	r1, [r4, #0]
 800771a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	0801d91e 	.word	0x0801d91e
 8007724:	0801d99e 	.word	0x0801d99e

08007728 <__multadd>:
 8007728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800772c:	690d      	ldr	r5, [r1, #16]
 800772e:	4607      	mov	r7, r0
 8007730:	460c      	mov	r4, r1
 8007732:	461e      	mov	r6, r3
 8007734:	f101 0c14 	add.w	ip, r1, #20
 8007738:	2000      	movs	r0, #0
 800773a:	f8dc 3000 	ldr.w	r3, [ip]
 800773e:	b299      	uxth	r1, r3
 8007740:	fb02 6101 	mla	r1, r2, r1, r6
 8007744:	0c1e      	lsrs	r6, r3, #16
 8007746:	0c0b      	lsrs	r3, r1, #16
 8007748:	fb02 3306 	mla	r3, r2, r6, r3
 800774c:	b289      	uxth	r1, r1
 800774e:	3001      	adds	r0, #1
 8007750:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007754:	4285      	cmp	r5, r0
 8007756:	f84c 1b04 	str.w	r1, [ip], #4
 800775a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800775e:	dcec      	bgt.n	800773a <__multadd+0x12>
 8007760:	b30e      	cbz	r6, 80077a6 <__multadd+0x7e>
 8007762:	68a3      	ldr	r3, [r4, #8]
 8007764:	42ab      	cmp	r3, r5
 8007766:	dc19      	bgt.n	800779c <__multadd+0x74>
 8007768:	6861      	ldr	r1, [r4, #4]
 800776a:	4638      	mov	r0, r7
 800776c:	3101      	adds	r1, #1
 800776e:	f7ff ff79 	bl	8007664 <_Balloc>
 8007772:	4680      	mov	r8, r0
 8007774:	b928      	cbnz	r0, 8007782 <__multadd+0x5a>
 8007776:	4602      	mov	r2, r0
 8007778:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <__multadd+0x84>)
 800777a:	480d      	ldr	r0, [pc, #52]	@ (80077b0 <__multadd+0x88>)
 800777c:	21ba      	movs	r1, #186	@ 0xba
 800777e:	f001 fe9f 	bl	80094c0 <__assert_func>
 8007782:	6922      	ldr	r2, [r4, #16]
 8007784:	3202      	adds	r2, #2
 8007786:	f104 010c 	add.w	r1, r4, #12
 800778a:	0092      	lsls	r2, r2, #2
 800778c:	300c      	adds	r0, #12
 800778e:	f7ff f8b0 	bl	80068f2 <memcpy>
 8007792:	4621      	mov	r1, r4
 8007794:	4638      	mov	r0, r7
 8007796:	f7ff ffa5 	bl	80076e4 <_Bfree>
 800779a:	4644      	mov	r4, r8
 800779c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077a0:	3501      	adds	r5, #1
 80077a2:	615e      	str	r6, [r3, #20]
 80077a4:	6125      	str	r5, [r4, #16]
 80077a6:	4620      	mov	r0, r4
 80077a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ac:	0801d98d 	.word	0x0801d98d
 80077b0:	0801d99e 	.word	0x0801d99e

080077b4 <__s2b>:
 80077b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b8:	460c      	mov	r4, r1
 80077ba:	4615      	mov	r5, r2
 80077bc:	461f      	mov	r7, r3
 80077be:	2209      	movs	r2, #9
 80077c0:	3308      	adds	r3, #8
 80077c2:	4606      	mov	r6, r0
 80077c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80077c8:	2100      	movs	r1, #0
 80077ca:	2201      	movs	r2, #1
 80077cc:	429a      	cmp	r2, r3
 80077ce:	db09      	blt.n	80077e4 <__s2b+0x30>
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff ff47 	bl	8007664 <_Balloc>
 80077d6:	b940      	cbnz	r0, 80077ea <__s2b+0x36>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b19      	ldr	r3, [pc, #100]	@ (8007840 <__s2b+0x8c>)
 80077dc:	4819      	ldr	r0, [pc, #100]	@ (8007844 <__s2b+0x90>)
 80077de:	21d3      	movs	r1, #211	@ 0xd3
 80077e0:	f001 fe6e 	bl	80094c0 <__assert_func>
 80077e4:	0052      	lsls	r2, r2, #1
 80077e6:	3101      	adds	r1, #1
 80077e8:	e7f0      	b.n	80077cc <__s2b+0x18>
 80077ea:	9b08      	ldr	r3, [sp, #32]
 80077ec:	6143      	str	r3, [r0, #20]
 80077ee:	2d09      	cmp	r5, #9
 80077f0:	f04f 0301 	mov.w	r3, #1
 80077f4:	6103      	str	r3, [r0, #16]
 80077f6:	dd16      	ble.n	8007826 <__s2b+0x72>
 80077f8:	f104 0909 	add.w	r9, r4, #9
 80077fc:	46c8      	mov	r8, r9
 80077fe:	442c      	add	r4, r5
 8007800:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007804:	4601      	mov	r1, r0
 8007806:	3b30      	subs	r3, #48	@ 0x30
 8007808:	220a      	movs	r2, #10
 800780a:	4630      	mov	r0, r6
 800780c:	f7ff ff8c 	bl	8007728 <__multadd>
 8007810:	45a0      	cmp	r8, r4
 8007812:	d1f5      	bne.n	8007800 <__s2b+0x4c>
 8007814:	f1a5 0408 	sub.w	r4, r5, #8
 8007818:	444c      	add	r4, r9
 800781a:	1b2d      	subs	r5, r5, r4
 800781c:	1963      	adds	r3, r4, r5
 800781e:	42bb      	cmp	r3, r7
 8007820:	db04      	blt.n	800782c <__s2b+0x78>
 8007822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007826:	340a      	adds	r4, #10
 8007828:	2509      	movs	r5, #9
 800782a:	e7f6      	b.n	800781a <__s2b+0x66>
 800782c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007830:	4601      	mov	r1, r0
 8007832:	3b30      	subs	r3, #48	@ 0x30
 8007834:	220a      	movs	r2, #10
 8007836:	4630      	mov	r0, r6
 8007838:	f7ff ff76 	bl	8007728 <__multadd>
 800783c:	e7ee      	b.n	800781c <__s2b+0x68>
 800783e:	bf00      	nop
 8007840:	0801d98d 	.word	0x0801d98d
 8007844:	0801d99e 	.word	0x0801d99e

08007848 <__hi0bits>:
 8007848:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800784c:	4603      	mov	r3, r0
 800784e:	bf36      	itet	cc
 8007850:	0403      	lslcc	r3, r0, #16
 8007852:	2000      	movcs	r0, #0
 8007854:	2010      	movcc	r0, #16
 8007856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800785a:	bf3c      	itt	cc
 800785c:	021b      	lslcc	r3, r3, #8
 800785e:	3008      	addcc	r0, #8
 8007860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007864:	bf3c      	itt	cc
 8007866:	011b      	lslcc	r3, r3, #4
 8007868:	3004      	addcc	r0, #4
 800786a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800786e:	bf3c      	itt	cc
 8007870:	009b      	lslcc	r3, r3, #2
 8007872:	3002      	addcc	r0, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	db05      	blt.n	8007884 <__hi0bits+0x3c>
 8007878:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800787c:	f100 0001 	add.w	r0, r0, #1
 8007880:	bf08      	it	eq
 8007882:	2020      	moveq	r0, #32
 8007884:	4770      	bx	lr

08007886 <__lo0bits>:
 8007886:	6803      	ldr	r3, [r0, #0]
 8007888:	4602      	mov	r2, r0
 800788a:	f013 0007 	ands.w	r0, r3, #7
 800788e:	d00b      	beq.n	80078a8 <__lo0bits+0x22>
 8007890:	07d9      	lsls	r1, r3, #31
 8007892:	d421      	bmi.n	80078d8 <__lo0bits+0x52>
 8007894:	0798      	lsls	r0, r3, #30
 8007896:	bf49      	itett	mi
 8007898:	085b      	lsrmi	r3, r3, #1
 800789a:	089b      	lsrpl	r3, r3, #2
 800789c:	2001      	movmi	r0, #1
 800789e:	6013      	strmi	r3, [r2, #0]
 80078a0:	bf5c      	itt	pl
 80078a2:	6013      	strpl	r3, [r2, #0]
 80078a4:	2002      	movpl	r0, #2
 80078a6:	4770      	bx	lr
 80078a8:	b299      	uxth	r1, r3
 80078aa:	b909      	cbnz	r1, 80078b0 <__lo0bits+0x2a>
 80078ac:	0c1b      	lsrs	r3, r3, #16
 80078ae:	2010      	movs	r0, #16
 80078b0:	b2d9      	uxtb	r1, r3
 80078b2:	b909      	cbnz	r1, 80078b8 <__lo0bits+0x32>
 80078b4:	3008      	adds	r0, #8
 80078b6:	0a1b      	lsrs	r3, r3, #8
 80078b8:	0719      	lsls	r1, r3, #28
 80078ba:	bf04      	itt	eq
 80078bc:	091b      	lsreq	r3, r3, #4
 80078be:	3004      	addeq	r0, #4
 80078c0:	0799      	lsls	r1, r3, #30
 80078c2:	bf04      	itt	eq
 80078c4:	089b      	lsreq	r3, r3, #2
 80078c6:	3002      	addeq	r0, #2
 80078c8:	07d9      	lsls	r1, r3, #31
 80078ca:	d403      	bmi.n	80078d4 <__lo0bits+0x4e>
 80078cc:	085b      	lsrs	r3, r3, #1
 80078ce:	f100 0001 	add.w	r0, r0, #1
 80078d2:	d003      	beq.n	80078dc <__lo0bits+0x56>
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	4770      	bx	lr
 80078d8:	2000      	movs	r0, #0
 80078da:	4770      	bx	lr
 80078dc:	2020      	movs	r0, #32
 80078de:	4770      	bx	lr

080078e0 <__i2b>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	460c      	mov	r4, r1
 80078e4:	2101      	movs	r1, #1
 80078e6:	f7ff febd 	bl	8007664 <_Balloc>
 80078ea:	4602      	mov	r2, r0
 80078ec:	b928      	cbnz	r0, 80078fa <__i2b+0x1a>
 80078ee:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <__i2b+0x24>)
 80078f0:	4805      	ldr	r0, [pc, #20]	@ (8007908 <__i2b+0x28>)
 80078f2:	f240 1145 	movw	r1, #325	@ 0x145
 80078f6:	f001 fde3 	bl	80094c0 <__assert_func>
 80078fa:	2301      	movs	r3, #1
 80078fc:	6144      	str	r4, [r0, #20]
 80078fe:	6103      	str	r3, [r0, #16]
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	0801d98d 	.word	0x0801d98d
 8007908:	0801d99e 	.word	0x0801d99e

0800790c <__multiply>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	4617      	mov	r7, r2
 8007912:	690a      	ldr	r2, [r1, #16]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	429a      	cmp	r2, r3
 8007918:	bfa8      	it	ge
 800791a:	463b      	movge	r3, r7
 800791c:	4689      	mov	r9, r1
 800791e:	bfa4      	itt	ge
 8007920:	460f      	movge	r7, r1
 8007922:	4699      	movge	r9, r3
 8007924:	693d      	ldr	r5, [r7, #16]
 8007926:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	eb05 060a 	add.w	r6, r5, sl
 8007932:	42b3      	cmp	r3, r6
 8007934:	b085      	sub	sp, #20
 8007936:	bfb8      	it	lt
 8007938:	3101      	addlt	r1, #1
 800793a:	f7ff fe93 	bl	8007664 <_Balloc>
 800793e:	b930      	cbnz	r0, 800794e <__multiply+0x42>
 8007940:	4602      	mov	r2, r0
 8007942:	4b41      	ldr	r3, [pc, #260]	@ (8007a48 <__multiply+0x13c>)
 8007944:	4841      	ldr	r0, [pc, #260]	@ (8007a4c <__multiply+0x140>)
 8007946:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800794a:	f001 fdb9 	bl	80094c0 <__assert_func>
 800794e:	f100 0414 	add.w	r4, r0, #20
 8007952:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007956:	4623      	mov	r3, r4
 8007958:	2200      	movs	r2, #0
 800795a:	4573      	cmp	r3, lr
 800795c:	d320      	bcc.n	80079a0 <__multiply+0x94>
 800795e:	f107 0814 	add.w	r8, r7, #20
 8007962:	f109 0114 	add.w	r1, r9, #20
 8007966:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800796a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800796e:	9302      	str	r3, [sp, #8]
 8007970:	1beb      	subs	r3, r5, r7
 8007972:	3b15      	subs	r3, #21
 8007974:	f023 0303 	bic.w	r3, r3, #3
 8007978:	3304      	adds	r3, #4
 800797a:	3715      	adds	r7, #21
 800797c:	42bd      	cmp	r5, r7
 800797e:	bf38      	it	cc
 8007980:	2304      	movcc	r3, #4
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	9b02      	ldr	r3, [sp, #8]
 8007986:	9103      	str	r1, [sp, #12]
 8007988:	428b      	cmp	r3, r1
 800798a:	d80c      	bhi.n	80079a6 <__multiply+0x9a>
 800798c:	2e00      	cmp	r6, #0
 800798e:	dd03      	ble.n	8007998 <__multiply+0x8c>
 8007990:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007994:	2b00      	cmp	r3, #0
 8007996:	d055      	beq.n	8007a44 <__multiply+0x138>
 8007998:	6106      	str	r6, [r0, #16]
 800799a:	b005      	add	sp, #20
 800799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a0:	f843 2b04 	str.w	r2, [r3], #4
 80079a4:	e7d9      	b.n	800795a <__multiply+0x4e>
 80079a6:	f8b1 a000 	ldrh.w	sl, [r1]
 80079aa:	f1ba 0f00 	cmp.w	sl, #0
 80079ae:	d01f      	beq.n	80079f0 <__multiply+0xe4>
 80079b0:	46c4      	mov	ip, r8
 80079b2:	46a1      	mov	r9, r4
 80079b4:	2700      	movs	r7, #0
 80079b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80079ba:	f8d9 3000 	ldr.w	r3, [r9]
 80079be:	fa1f fb82 	uxth.w	fp, r2
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80079c8:	443b      	add	r3, r7
 80079ca:	f8d9 7000 	ldr.w	r7, [r9]
 80079ce:	0c12      	lsrs	r2, r2, #16
 80079d0:	0c3f      	lsrs	r7, r7, #16
 80079d2:	fb0a 7202 	mla	r2, sl, r2, r7
 80079d6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80079da:	b29b      	uxth	r3, r3
 80079dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079e0:	4565      	cmp	r5, ip
 80079e2:	f849 3b04 	str.w	r3, [r9], #4
 80079e6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80079ea:	d8e4      	bhi.n	80079b6 <__multiply+0xaa>
 80079ec:	9b01      	ldr	r3, [sp, #4]
 80079ee:	50e7      	str	r7, [r4, r3]
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079f6:	3104      	adds	r1, #4
 80079f8:	f1b9 0f00 	cmp.w	r9, #0
 80079fc:	d020      	beq.n	8007a40 <__multiply+0x134>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	4647      	mov	r7, r8
 8007a02:	46a4      	mov	ip, r4
 8007a04:	f04f 0a00 	mov.w	sl, #0
 8007a08:	f8b7 b000 	ldrh.w	fp, [r7]
 8007a0c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007a10:	fb09 220b 	mla	r2, r9, fp, r2
 8007a14:	4452      	add	r2, sl
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a1c:	f84c 3b04 	str.w	r3, [ip], #4
 8007a20:	f857 3b04 	ldr.w	r3, [r7], #4
 8007a24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a28:	f8bc 3000 	ldrh.w	r3, [ip]
 8007a2c:	fb09 330a 	mla	r3, r9, sl, r3
 8007a30:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007a34:	42bd      	cmp	r5, r7
 8007a36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a3a:	d8e5      	bhi.n	8007a08 <__multiply+0xfc>
 8007a3c:	9a01      	ldr	r2, [sp, #4]
 8007a3e:	50a3      	str	r3, [r4, r2]
 8007a40:	3404      	adds	r4, #4
 8007a42:	e79f      	b.n	8007984 <__multiply+0x78>
 8007a44:	3e01      	subs	r6, #1
 8007a46:	e7a1      	b.n	800798c <__multiply+0x80>
 8007a48:	0801d98d 	.word	0x0801d98d
 8007a4c:	0801d99e 	.word	0x0801d99e

08007a50 <__pow5mult>:
 8007a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a54:	4615      	mov	r5, r2
 8007a56:	f012 0203 	ands.w	r2, r2, #3
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	d007      	beq.n	8007a70 <__pow5mult+0x20>
 8007a60:	4c25      	ldr	r4, [pc, #148]	@ (8007af8 <__pow5mult+0xa8>)
 8007a62:	3a01      	subs	r2, #1
 8007a64:	2300      	movs	r3, #0
 8007a66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a6a:	f7ff fe5d 	bl	8007728 <__multadd>
 8007a6e:	4606      	mov	r6, r0
 8007a70:	10ad      	asrs	r5, r5, #2
 8007a72:	d03d      	beq.n	8007af0 <__pow5mult+0xa0>
 8007a74:	69fc      	ldr	r4, [r7, #28]
 8007a76:	b97c      	cbnz	r4, 8007a98 <__pow5mult+0x48>
 8007a78:	2010      	movs	r0, #16
 8007a7a:	f7fd fd65 	bl	8005548 <malloc>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	61f8      	str	r0, [r7, #28]
 8007a82:	b928      	cbnz	r0, 8007a90 <__pow5mult+0x40>
 8007a84:	4b1d      	ldr	r3, [pc, #116]	@ (8007afc <__pow5mult+0xac>)
 8007a86:	481e      	ldr	r0, [pc, #120]	@ (8007b00 <__pow5mult+0xb0>)
 8007a88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a8c:	f001 fd18 	bl	80094c0 <__assert_func>
 8007a90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a94:	6004      	str	r4, [r0, #0]
 8007a96:	60c4      	str	r4, [r0, #12]
 8007a98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007aa0:	b94c      	cbnz	r4, 8007ab6 <__pow5mult+0x66>
 8007aa2:	f240 2171 	movw	r1, #625	@ 0x271
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	f7ff ff1a 	bl	80078e0 <__i2b>
 8007aac:	2300      	movs	r3, #0
 8007aae:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	6003      	str	r3, [r0, #0]
 8007ab6:	f04f 0900 	mov.w	r9, #0
 8007aba:	07eb      	lsls	r3, r5, #31
 8007abc:	d50a      	bpl.n	8007ad4 <__pow5mult+0x84>
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f7ff ff22 	bl	800790c <__multiply>
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4680      	mov	r8, r0
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7ff fe09 	bl	80076e4 <_Bfree>
 8007ad2:	4646      	mov	r6, r8
 8007ad4:	106d      	asrs	r5, r5, #1
 8007ad6:	d00b      	beq.n	8007af0 <__pow5mult+0xa0>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	b938      	cbnz	r0, 8007aec <__pow5mult+0x9c>
 8007adc:	4622      	mov	r2, r4
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f7ff ff13 	bl	800790c <__multiply>
 8007ae6:	6020      	str	r0, [r4, #0]
 8007ae8:	f8c0 9000 	str.w	r9, [r0]
 8007aec:	4604      	mov	r4, r0
 8007aee:	e7e4      	b.n	8007aba <__pow5mult+0x6a>
 8007af0:	4630      	mov	r0, r6
 8007af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af6:	bf00      	nop
 8007af8:	0801dab0 	.word	0x0801dab0
 8007afc:	0801d91e 	.word	0x0801d91e
 8007b00:	0801d99e 	.word	0x0801d99e

08007b04 <__lshift>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	460c      	mov	r4, r1
 8007b0a:	6849      	ldr	r1, [r1, #4]
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b12:	68a3      	ldr	r3, [r4, #8]
 8007b14:	4607      	mov	r7, r0
 8007b16:	4691      	mov	r9, r2
 8007b18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b1c:	f108 0601 	add.w	r6, r8, #1
 8007b20:	42b3      	cmp	r3, r6
 8007b22:	db0b      	blt.n	8007b3c <__lshift+0x38>
 8007b24:	4638      	mov	r0, r7
 8007b26:	f7ff fd9d 	bl	8007664 <_Balloc>
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	b948      	cbnz	r0, 8007b42 <__lshift+0x3e>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	4b28      	ldr	r3, [pc, #160]	@ (8007bd4 <__lshift+0xd0>)
 8007b32:	4829      	ldr	r0, [pc, #164]	@ (8007bd8 <__lshift+0xd4>)
 8007b34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b38:	f001 fcc2 	bl	80094c0 <__assert_func>
 8007b3c:	3101      	adds	r1, #1
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	e7ee      	b.n	8007b20 <__lshift+0x1c>
 8007b42:	2300      	movs	r3, #0
 8007b44:	f100 0114 	add.w	r1, r0, #20
 8007b48:	f100 0210 	add.w	r2, r0, #16
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	4553      	cmp	r3, sl
 8007b50:	db33      	blt.n	8007bba <__lshift+0xb6>
 8007b52:	6920      	ldr	r0, [r4, #16]
 8007b54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b58:	f104 0314 	add.w	r3, r4, #20
 8007b5c:	f019 091f 	ands.w	r9, r9, #31
 8007b60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b68:	d02b      	beq.n	8007bc2 <__lshift+0xbe>
 8007b6a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b6e:	468a      	mov	sl, r1
 8007b70:	2200      	movs	r2, #0
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	fa00 f009 	lsl.w	r0, r0, r9
 8007b78:	4310      	orrs	r0, r2
 8007b7a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b82:	459c      	cmp	ip, r3
 8007b84:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b88:	d8f3      	bhi.n	8007b72 <__lshift+0x6e>
 8007b8a:	ebac 0304 	sub.w	r3, ip, r4
 8007b8e:	3b15      	subs	r3, #21
 8007b90:	f023 0303 	bic.w	r3, r3, #3
 8007b94:	3304      	adds	r3, #4
 8007b96:	f104 0015 	add.w	r0, r4, #21
 8007b9a:	4560      	cmp	r0, ip
 8007b9c:	bf88      	it	hi
 8007b9e:	2304      	movhi	r3, #4
 8007ba0:	50ca      	str	r2, [r1, r3]
 8007ba2:	b10a      	cbz	r2, 8007ba8 <__lshift+0xa4>
 8007ba4:	f108 0602 	add.w	r6, r8, #2
 8007ba8:	3e01      	subs	r6, #1
 8007baa:	4638      	mov	r0, r7
 8007bac:	612e      	str	r6, [r5, #16]
 8007bae:	4621      	mov	r1, r4
 8007bb0:	f7ff fd98 	bl	80076e4 <_Bfree>
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bba:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	e7c5      	b.n	8007b4e <__lshift+0x4a>
 8007bc2:	3904      	subs	r1, #4
 8007bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bcc:	459c      	cmp	ip, r3
 8007bce:	d8f9      	bhi.n	8007bc4 <__lshift+0xc0>
 8007bd0:	e7ea      	b.n	8007ba8 <__lshift+0xa4>
 8007bd2:	bf00      	nop
 8007bd4:	0801d98d 	.word	0x0801d98d
 8007bd8:	0801d99e 	.word	0x0801d99e

08007bdc <__mcmp>:
 8007bdc:	690a      	ldr	r2, [r1, #16]
 8007bde:	4603      	mov	r3, r0
 8007be0:	6900      	ldr	r0, [r0, #16]
 8007be2:	1a80      	subs	r0, r0, r2
 8007be4:	b530      	push	{r4, r5, lr}
 8007be6:	d10e      	bne.n	8007c06 <__mcmp+0x2a>
 8007be8:	3314      	adds	r3, #20
 8007bea:	3114      	adds	r1, #20
 8007bec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007bf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007bf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bfc:	4295      	cmp	r5, r2
 8007bfe:	d003      	beq.n	8007c08 <__mcmp+0x2c>
 8007c00:	d205      	bcs.n	8007c0e <__mcmp+0x32>
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	bd30      	pop	{r4, r5, pc}
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d3f3      	bcc.n	8007bf4 <__mcmp+0x18>
 8007c0c:	e7fb      	b.n	8007c06 <__mcmp+0x2a>
 8007c0e:	2001      	movs	r0, #1
 8007c10:	e7f9      	b.n	8007c06 <__mcmp+0x2a>
	...

08007c14 <__mdiff>:
 8007c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c18:	4689      	mov	r9, r1
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4648      	mov	r0, r9
 8007c20:	4614      	mov	r4, r2
 8007c22:	f7ff ffdb 	bl	8007bdc <__mcmp>
 8007c26:	1e05      	subs	r5, r0, #0
 8007c28:	d112      	bne.n	8007c50 <__mdiff+0x3c>
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f7ff fd19 	bl	8007664 <_Balloc>
 8007c32:	4602      	mov	r2, r0
 8007c34:	b928      	cbnz	r0, 8007c42 <__mdiff+0x2e>
 8007c36:	4b3f      	ldr	r3, [pc, #252]	@ (8007d34 <__mdiff+0x120>)
 8007c38:	f240 2137 	movw	r1, #567	@ 0x237
 8007c3c:	483e      	ldr	r0, [pc, #248]	@ (8007d38 <__mdiff+0x124>)
 8007c3e:	f001 fc3f 	bl	80094c0 <__assert_func>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c48:	4610      	mov	r0, r2
 8007c4a:	b003      	add	sp, #12
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	bfbc      	itt	lt
 8007c52:	464b      	movlt	r3, r9
 8007c54:	46a1      	movlt	r9, r4
 8007c56:	4630      	mov	r0, r6
 8007c58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c5c:	bfba      	itte	lt
 8007c5e:	461c      	movlt	r4, r3
 8007c60:	2501      	movlt	r5, #1
 8007c62:	2500      	movge	r5, #0
 8007c64:	f7ff fcfe 	bl	8007664 <_Balloc>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	b918      	cbnz	r0, 8007c74 <__mdiff+0x60>
 8007c6c:	4b31      	ldr	r3, [pc, #196]	@ (8007d34 <__mdiff+0x120>)
 8007c6e:	f240 2145 	movw	r1, #581	@ 0x245
 8007c72:	e7e3      	b.n	8007c3c <__mdiff+0x28>
 8007c74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c78:	6926      	ldr	r6, [r4, #16]
 8007c7a:	60c5      	str	r5, [r0, #12]
 8007c7c:	f109 0310 	add.w	r3, r9, #16
 8007c80:	f109 0514 	add.w	r5, r9, #20
 8007c84:	f104 0e14 	add.w	lr, r4, #20
 8007c88:	f100 0b14 	add.w	fp, r0, #20
 8007c8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	46d9      	mov	r9, fp
 8007c98:	f04f 0c00 	mov.w	ip, #0
 8007c9c:	9b01      	ldr	r3, [sp, #4]
 8007c9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ca2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	fa1f f38a 	uxth.w	r3, sl
 8007cac:	4619      	mov	r1, r3
 8007cae:	b283      	uxth	r3, r0
 8007cb0:	1acb      	subs	r3, r1, r3
 8007cb2:	0c00      	lsrs	r0, r0, #16
 8007cb4:	4463      	add	r3, ip
 8007cb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007cba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cc4:	4576      	cmp	r6, lr
 8007cc6:	f849 3b04 	str.w	r3, [r9], #4
 8007cca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cce:	d8e5      	bhi.n	8007c9c <__mdiff+0x88>
 8007cd0:	1b33      	subs	r3, r6, r4
 8007cd2:	3b15      	subs	r3, #21
 8007cd4:	f023 0303 	bic.w	r3, r3, #3
 8007cd8:	3415      	adds	r4, #21
 8007cda:	3304      	adds	r3, #4
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	bf38      	it	cc
 8007ce0:	2304      	movcc	r3, #4
 8007ce2:	441d      	add	r5, r3
 8007ce4:	445b      	add	r3, fp
 8007ce6:	461e      	mov	r6, r3
 8007ce8:	462c      	mov	r4, r5
 8007cea:	4544      	cmp	r4, r8
 8007cec:	d30e      	bcc.n	8007d0c <__mdiff+0xf8>
 8007cee:	f108 0103 	add.w	r1, r8, #3
 8007cf2:	1b49      	subs	r1, r1, r5
 8007cf4:	f021 0103 	bic.w	r1, r1, #3
 8007cf8:	3d03      	subs	r5, #3
 8007cfa:	45a8      	cmp	r8, r5
 8007cfc:	bf38      	it	cc
 8007cfe:	2100      	movcc	r1, #0
 8007d00:	440b      	add	r3, r1
 8007d02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d06:	b191      	cbz	r1, 8007d2e <__mdiff+0x11a>
 8007d08:	6117      	str	r7, [r2, #16]
 8007d0a:	e79d      	b.n	8007c48 <__mdiff+0x34>
 8007d0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d10:	46e6      	mov	lr, ip
 8007d12:	0c08      	lsrs	r0, r1, #16
 8007d14:	fa1c fc81 	uxtah	ip, ip, r1
 8007d18:	4471      	add	r1, lr
 8007d1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d1e:	b289      	uxth	r1, r1
 8007d20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d24:	f846 1b04 	str.w	r1, [r6], #4
 8007d28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d2c:	e7dd      	b.n	8007cea <__mdiff+0xd6>
 8007d2e:	3f01      	subs	r7, #1
 8007d30:	e7e7      	b.n	8007d02 <__mdiff+0xee>
 8007d32:	bf00      	nop
 8007d34:	0801d98d 	.word	0x0801d98d
 8007d38:	0801d99e 	.word	0x0801d99e

08007d3c <__ulp>:
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	ed8d 0b00 	vstr	d0, [sp]
 8007d42:	9a01      	ldr	r2, [sp, #4]
 8007d44:	4b0f      	ldr	r3, [pc, #60]	@ (8007d84 <__ulp+0x48>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dc08      	bgt.n	8007d62 <__ulp+0x26>
 8007d50:	425b      	negs	r3, r3
 8007d52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007d56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d5a:	da04      	bge.n	8007d66 <__ulp+0x2a>
 8007d5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007d60:	4113      	asrs	r3, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	e008      	b.n	8007d78 <__ulp+0x3c>
 8007d66:	f1a2 0314 	sub.w	r3, r2, #20
 8007d6a:	2b1e      	cmp	r3, #30
 8007d6c:	bfda      	itte	le
 8007d6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007d72:	40da      	lsrle	r2, r3
 8007d74:	2201      	movgt	r2, #1
 8007d76:	2300      	movs	r3, #0
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	ec41 0b10 	vmov	d0, r0, r1
 8007d80:	b002      	add	sp, #8
 8007d82:	4770      	bx	lr
 8007d84:	7ff00000 	.word	0x7ff00000

08007d88 <__b2d>:
 8007d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	6906      	ldr	r6, [r0, #16]
 8007d8e:	f100 0814 	add.w	r8, r0, #20
 8007d92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007d96:	1f37      	subs	r7, r6, #4
 8007d98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	f7ff fd53 	bl	8007848 <__hi0bits>
 8007da2:	f1c0 0320 	rsb	r3, r0, #32
 8007da6:	280a      	cmp	r0, #10
 8007da8:	600b      	str	r3, [r1, #0]
 8007daa:	491b      	ldr	r1, [pc, #108]	@ (8007e18 <__b2d+0x90>)
 8007dac:	dc15      	bgt.n	8007dda <__b2d+0x52>
 8007dae:	f1c0 0c0b 	rsb	ip, r0, #11
 8007db2:	fa22 f30c 	lsr.w	r3, r2, ip
 8007db6:	45b8      	cmp	r8, r7
 8007db8:	ea43 0501 	orr.w	r5, r3, r1
 8007dbc:	bf34      	ite	cc
 8007dbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007dc2:	2300      	movcs	r3, #0
 8007dc4:	3015      	adds	r0, #21
 8007dc6:	fa02 f000 	lsl.w	r0, r2, r0
 8007dca:	fa23 f30c 	lsr.w	r3, r3, ip
 8007dce:	4303      	orrs	r3, r0
 8007dd0:	461c      	mov	r4, r3
 8007dd2:	ec45 4b10 	vmov	d0, r4, r5
 8007dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dda:	45b8      	cmp	r8, r7
 8007ddc:	bf3a      	itte	cc
 8007dde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007de2:	f1a6 0708 	subcc.w	r7, r6, #8
 8007de6:	2300      	movcs	r3, #0
 8007de8:	380b      	subs	r0, #11
 8007dea:	d012      	beq.n	8007e12 <__b2d+0x8a>
 8007dec:	f1c0 0120 	rsb	r1, r0, #32
 8007df0:	fa23 f401 	lsr.w	r4, r3, r1
 8007df4:	4082      	lsls	r2, r0
 8007df6:	4322      	orrs	r2, r4
 8007df8:	4547      	cmp	r7, r8
 8007dfa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007dfe:	bf8c      	ite	hi
 8007e00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007e04:	2200      	movls	r2, #0
 8007e06:	4083      	lsls	r3, r0
 8007e08:	40ca      	lsrs	r2, r1
 8007e0a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	e7de      	b.n	8007dd0 <__b2d+0x48>
 8007e12:	ea42 0501 	orr.w	r5, r2, r1
 8007e16:	e7db      	b.n	8007dd0 <__b2d+0x48>
 8007e18:	3ff00000 	.word	0x3ff00000

08007e1c <__d2b>:
 8007e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	460f      	mov	r7, r1
 8007e22:	2101      	movs	r1, #1
 8007e24:	ec59 8b10 	vmov	r8, r9, d0
 8007e28:	4616      	mov	r6, r2
 8007e2a:	f7ff fc1b 	bl	8007664 <_Balloc>
 8007e2e:	4604      	mov	r4, r0
 8007e30:	b930      	cbnz	r0, 8007e40 <__d2b+0x24>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b23      	ldr	r3, [pc, #140]	@ (8007ec4 <__d2b+0xa8>)
 8007e36:	4824      	ldr	r0, [pc, #144]	@ (8007ec8 <__d2b+0xac>)
 8007e38:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e3c:	f001 fb40 	bl	80094c0 <__assert_func>
 8007e40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e48:	b10d      	cbz	r5, 8007e4e <__d2b+0x32>
 8007e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	f1b8 0300 	subs.w	r3, r8, #0
 8007e54:	d023      	beq.n	8007e9e <__d2b+0x82>
 8007e56:	4668      	mov	r0, sp
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	f7ff fd14 	bl	8007886 <__lo0bits>
 8007e5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e62:	b1d0      	cbz	r0, 8007e9a <__d2b+0x7e>
 8007e64:	f1c0 0320 	rsb	r3, r0, #32
 8007e68:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	40c2      	lsrs	r2, r0
 8007e70:	6163      	str	r3, [r4, #20]
 8007e72:	9201      	str	r2, [sp, #4]
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	61a3      	str	r3, [r4, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2201      	moveq	r2, #1
 8007e7e:	2202      	movne	r2, #2
 8007e80:	6122      	str	r2, [r4, #16]
 8007e82:	b1a5      	cbz	r5, 8007eae <__d2b+0x92>
 8007e84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e88:	4405      	add	r5, r0
 8007e8a:	603d      	str	r5, [r7, #0]
 8007e8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e90:	6030      	str	r0, [r6, #0]
 8007e92:	4620      	mov	r0, r4
 8007e94:	b003      	add	sp, #12
 8007e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e9a:	6161      	str	r1, [r4, #20]
 8007e9c:	e7ea      	b.n	8007e74 <__d2b+0x58>
 8007e9e:	a801      	add	r0, sp, #4
 8007ea0:	f7ff fcf1 	bl	8007886 <__lo0bits>
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	6163      	str	r3, [r4, #20]
 8007ea8:	3020      	adds	r0, #32
 8007eaa:	2201      	movs	r2, #1
 8007eac:	e7e8      	b.n	8007e80 <__d2b+0x64>
 8007eae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007eb6:	6038      	str	r0, [r7, #0]
 8007eb8:	6918      	ldr	r0, [r3, #16]
 8007eba:	f7ff fcc5 	bl	8007848 <__hi0bits>
 8007ebe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ec2:	e7e5      	b.n	8007e90 <__d2b+0x74>
 8007ec4:	0801d98d 	.word	0x0801d98d
 8007ec8:	0801d99e 	.word	0x0801d99e

08007ecc <__ratio>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	b085      	sub	sp, #20
 8007ed2:	e9cd 1000 	strd	r1, r0, [sp]
 8007ed6:	a902      	add	r1, sp, #8
 8007ed8:	f7ff ff56 	bl	8007d88 <__b2d>
 8007edc:	9800      	ldr	r0, [sp, #0]
 8007ede:	a903      	add	r1, sp, #12
 8007ee0:	ec55 4b10 	vmov	r4, r5, d0
 8007ee4:	f7ff ff50 	bl	8007d88 <__b2d>
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	6919      	ldr	r1, [r3, #16]
 8007eec:	9b00      	ldr	r3, [sp, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	1ac9      	subs	r1, r1, r3
 8007ef2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	ec5b ab10 	vmov	sl, fp, d0
 8007efc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bfce      	itee	gt
 8007f04:	462a      	movgt	r2, r5
 8007f06:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f0a:	465a      	movle	r2, fp
 8007f0c:	462f      	mov	r7, r5
 8007f0e:	46d9      	mov	r9, fp
 8007f10:	bfcc      	ite	gt
 8007f12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f16:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	4652      	mov	r2, sl
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4639      	mov	r1, r7
 8007f22:	f7f8 fcab 	bl	800087c <__aeabi_ddiv>
 8007f26:	ec41 0b10 	vmov	d0, r0, r1
 8007f2a:	b005      	add	sp, #20
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f30 <__copybits>:
 8007f30:	3901      	subs	r1, #1
 8007f32:	b570      	push	{r4, r5, r6, lr}
 8007f34:	1149      	asrs	r1, r1, #5
 8007f36:	6914      	ldr	r4, [r2, #16]
 8007f38:	3101      	adds	r1, #1
 8007f3a:	f102 0314 	add.w	r3, r2, #20
 8007f3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f46:	1f05      	subs	r5, r0, #4
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	d30c      	bcc.n	8007f66 <__copybits+0x36>
 8007f4c:	1aa3      	subs	r3, r4, r2
 8007f4e:	3b11      	subs	r3, #17
 8007f50:	f023 0303 	bic.w	r3, r3, #3
 8007f54:	3211      	adds	r2, #17
 8007f56:	42a2      	cmp	r2, r4
 8007f58:	bf88      	it	hi
 8007f5a:	2300      	movhi	r3, #0
 8007f5c:	4418      	add	r0, r3
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4288      	cmp	r0, r1
 8007f62:	d305      	bcc.n	8007f70 <__copybits+0x40>
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f6a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f6e:	e7eb      	b.n	8007f48 <__copybits+0x18>
 8007f70:	f840 3b04 	str.w	r3, [r0], #4
 8007f74:	e7f4      	b.n	8007f60 <__copybits+0x30>

08007f76 <__any_on>:
 8007f76:	f100 0214 	add.w	r2, r0, #20
 8007f7a:	6900      	ldr	r0, [r0, #16]
 8007f7c:	114b      	asrs	r3, r1, #5
 8007f7e:	4298      	cmp	r0, r3
 8007f80:	b510      	push	{r4, lr}
 8007f82:	db11      	blt.n	8007fa8 <__any_on+0x32>
 8007f84:	dd0a      	ble.n	8007f9c <__any_on+0x26>
 8007f86:	f011 011f 	ands.w	r1, r1, #31
 8007f8a:	d007      	beq.n	8007f9c <__any_on+0x26>
 8007f8c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f90:	fa24 f001 	lsr.w	r0, r4, r1
 8007f94:	fa00 f101 	lsl.w	r1, r0, r1
 8007f98:	428c      	cmp	r4, r1
 8007f9a:	d10b      	bne.n	8007fb4 <__any_on+0x3e>
 8007f9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d803      	bhi.n	8007fac <__any_on+0x36>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	bd10      	pop	{r4, pc}
 8007fa8:	4603      	mov	r3, r0
 8007faa:	e7f7      	b.n	8007f9c <__any_on+0x26>
 8007fac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d0f5      	beq.n	8007fa0 <__any_on+0x2a>
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	e7f6      	b.n	8007fa6 <__any_on+0x30>

08007fb8 <sulp>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	4604      	mov	r4, r0
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	ec45 4b10 	vmov	d0, r4, r5
 8007fc2:	4616      	mov	r6, r2
 8007fc4:	f7ff feba 	bl	8007d3c <__ulp>
 8007fc8:	ec51 0b10 	vmov	r0, r1, d0
 8007fcc:	b17e      	cbz	r6, 8007fee <sulp+0x36>
 8007fce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fd2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	dd09      	ble.n	8007fee <sulp+0x36>
 8007fda:	051b      	lsls	r3, r3, #20
 8007fdc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	462b      	mov	r3, r5
 8007fea:	f7f8 fb1d 	bl	8000628 <__aeabi_dmul>
 8007fee:	ec41 0b10 	vmov	d0, r0, r1
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	0000      	movs	r0, r0
	...

08007ff8 <_strtod_l>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	b09f      	sub	sp, #124	@ 0x7c
 8007ffe:	460c      	mov	r4, r1
 8008000:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008002:	2200      	movs	r2, #0
 8008004:	921a      	str	r2, [sp, #104]	@ 0x68
 8008006:	9005      	str	r0, [sp, #20]
 8008008:	f04f 0a00 	mov.w	sl, #0
 800800c:	f04f 0b00 	mov.w	fp, #0
 8008010:	460a      	mov	r2, r1
 8008012:	9219      	str	r2, [sp, #100]	@ 0x64
 8008014:	7811      	ldrb	r1, [r2, #0]
 8008016:	292b      	cmp	r1, #43	@ 0x2b
 8008018:	d04a      	beq.n	80080b0 <_strtod_l+0xb8>
 800801a:	d838      	bhi.n	800808e <_strtod_l+0x96>
 800801c:	290d      	cmp	r1, #13
 800801e:	d832      	bhi.n	8008086 <_strtod_l+0x8e>
 8008020:	2908      	cmp	r1, #8
 8008022:	d832      	bhi.n	800808a <_strtod_l+0x92>
 8008024:	2900      	cmp	r1, #0
 8008026:	d03b      	beq.n	80080a0 <_strtod_l+0xa8>
 8008028:	2200      	movs	r2, #0
 800802a:	920e      	str	r2, [sp, #56]	@ 0x38
 800802c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800802e:	782a      	ldrb	r2, [r5, #0]
 8008030:	2a30      	cmp	r2, #48	@ 0x30
 8008032:	f040 80b2 	bne.w	800819a <_strtod_l+0x1a2>
 8008036:	786a      	ldrb	r2, [r5, #1]
 8008038:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800803c:	2a58      	cmp	r2, #88	@ 0x58
 800803e:	d16e      	bne.n	800811e <_strtod_l+0x126>
 8008040:	9302      	str	r3, [sp, #8]
 8008042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	ab1a      	add	r3, sp, #104	@ 0x68
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	4a8f      	ldr	r2, [pc, #572]	@ (8008288 <_strtod_l+0x290>)
 800804c:	9805      	ldr	r0, [sp, #20]
 800804e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008050:	a919      	add	r1, sp, #100	@ 0x64
 8008052:	f001 facf 	bl	80095f4 <__gethex>
 8008056:	f010 060f 	ands.w	r6, r0, #15
 800805a:	4604      	mov	r4, r0
 800805c:	d005      	beq.n	800806a <_strtod_l+0x72>
 800805e:	2e06      	cmp	r6, #6
 8008060:	d128      	bne.n	80080b4 <_strtod_l+0xbc>
 8008062:	3501      	adds	r5, #1
 8008064:	2300      	movs	r3, #0
 8008066:	9519      	str	r5, [sp, #100]	@ 0x64
 8008068:	930e      	str	r3, [sp, #56]	@ 0x38
 800806a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800806c:	2b00      	cmp	r3, #0
 800806e:	f040 858e 	bne.w	8008b8e <_strtod_l+0xb96>
 8008072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008074:	b1cb      	cbz	r3, 80080aa <_strtod_l+0xb2>
 8008076:	4652      	mov	r2, sl
 8008078:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800807c:	ec43 2b10 	vmov	d0, r2, r3
 8008080:	b01f      	add	sp, #124	@ 0x7c
 8008082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008086:	2920      	cmp	r1, #32
 8008088:	d1ce      	bne.n	8008028 <_strtod_l+0x30>
 800808a:	3201      	adds	r2, #1
 800808c:	e7c1      	b.n	8008012 <_strtod_l+0x1a>
 800808e:	292d      	cmp	r1, #45	@ 0x2d
 8008090:	d1ca      	bne.n	8008028 <_strtod_l+0x30>
 8008092:	2101      	movs	r1, #1
 8008094:	910e      	str	r1, [sp, #56]	@ 0x38
 8008096:	1c51      	adds	r1, r2, #1
 8008098:	9119      	str	r1, [sp, #100]	@ 0x64
 800809a:	7852      	ldrb	r2, [r2, #1]
 800809c:	2a00      	cmp	r2, #0
 800809e:	d1c5      	bne.n	800802c <_strtod_l+0x34>
 80080a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 8570 	bne.w	8008b8a <_strtod_l+0xb92>
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	e7e5      	b.n	800807c <_strtod_l+0x84>
 80080b0:	2100      	movs	r1, #0
 80080b2:	e7ef      	b.n	8008094 <_strtod_l+0x9c>
 80080b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80080b6:	b13a      	cbz	r2, 80080c8 <_strtod_l+0xd0>
 80080b8:	2135      	movs	r1, #53	@ 0x35
 80080ba:	a81c      	add	r0, sp, #112	@ 0x70
 80080bc:	f7ff ff38 	bl	8007f30 <__copybits>
 80080c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080c2:	9805      	ldr	r0, [sp, #20]
 80080c4:	f7ff fb0e 	bl	80076e4 <_Bfree>
 80080c8:	3e01      	subs	r6, #1
 80080ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80080cc:	2e04      	cmp	r6, #4
 80080ce:	d806      	bhi.n	80080de <_strtod_l+0xe6>
 80080d0:	e8df f006 	tbb	[pc, r6]
 80080d4:	201d0314 	.word	0x201d0314
 80080d8:	14          	.byte	0x14
 80080d9:	00          	.byte	0x00
 80080da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80080de:	05e1      	lsls	r1, r4, #23
 80080e0:	bf48      	it	mi
 80080e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80080e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080ea:	0d1b      	lsrs	r3, r3, #20
 80080ec:	051b      	lsls	r3, r3, #20
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1bb      	bne.n	800806a <_strtod_l+0x72>
 80080f2:	f7fe fbd1 	bl	8006898 <__errno>
 80080f6:	2322      	movs	r3, #34	@ 0x22
 80080f8:	6003      	str	r3, [r0, #0]
 80080fa:	e7b6      	b.n	800806a <_strtod_l+0x72>
 80080fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008100:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008104:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008108:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800810c:	e7e7      	b.n	80080de <_strtod_l+0xe6>
 800810e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008290 <_strtod_l+0x298>
 8008112:	e7e4      	b.n	80080de <_strtod_l+0xe6>
 8008114:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008118:	f04f 3aff 	mov.w	sl, #4294967295
 800811c:	e7df      	b.n	80080de <_strtod_l+0xe6>
 800811e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	9219      	str	r2, [sp, #100]	@ 0x64
 8008124:	785b      	ldrb	r3, [r3, #1]
 8008126:	2b30      	cmp	r3, #48	@ 0x30
 8008128:	d0f9      	beq.n	800811e <_strtod_l+0x126>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d09d      	beq.n	800806a <_strtod_l+0x72>
 800812e:	2301      	movs	r3, #1
 8008130:	2700      	movs	r7, #0
 8008132:	9308      	str	r3, [sp, #32]
 8008134:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008136:	930c      	str	r3, [sp, #48]	@ 0x30
 8008138:	970b      	str	r7, [sp, #44]	@ 0x2c
 800813a:	46b9      	mov	r9, r7
 800813c:	220a      	movs	r2, #10
 800813e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008140:	7805      	ldrb	r5, [r0, #0]
 8008142:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008146:	b2d9      	uxtb	r1, r3
 8008148:	2909      	cmp	r1, #9
 800814a:	d928      	bls.n	800819e <_strtod_l+0x1a6>
 800814c:	494f      	ldr	r1, [pc, #316]	@ (800828c <_strtod_l+0x294>)
 800814e:	2201      	movs	r2, #1
 8008150:	f001 f97a 	bl	8009448 <strncmp>
 8008154:	2800      	cmp	r0, #0
 8008156:	d032      	beq.n	80081be <_strtod_l+0x1c6>
 8008158:	2000      	movs	r0, #0
 800815a:	462a      	mov	r2, r5
 800815c:	900a      	str	r0, [sp, #40]	@ 0x28
 800815e:	464d      	mov	r5, r9
 8008160:	4603      	mov	r3, r0
 8008162:	2a65      	cmp	r2, #101	@ 0x65
 8008164:	d001      	beq.n	800816a <_strtod_l+0x172>
 8008166:	2a45      	cmp	r2, #69	@ 0x45
 8008168:	d114      	bne.n	8008194 <_strtod_l+0x19c>
 800816a:	b91d      	cbnz	r5, 8008174 <_strtod_l+0x17c>
 800816c:	9a08      	ldr	r2, [sp, #32]
 800816e:	4302      	orrs	r2, r0
 8008170:	d096      	beq.n	80080a0 <_strtod_l+0xa8>
 8008172:	2500      	movs	r5, #0
 8008174:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008176:	1c62      	adds	r2, r4, #1
 8008178:	9219      	str	r2, [sp, #100]	@ 0x64
 800817a:	7862      	ldrb	r2, [r4, #1]
 800817c:	2a2b      	cmp	r2, #43	@ 0x2b
 800817e:	d07a      	beq.n	8008276 <_strtod_l+0x27e>
 8008180:	2a2d      	cmp	r2, #45	@ 0x2d
 8008182:	d07e      	beq.n	8008282 <_strtod_l+0x28a>
 8008184:	f04f 0c00 	mov.w	ip, #0
 8008188:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800818c:	2909      	cmp	r1, #9
 800818e:	f240 8085 	bls.w	800829c <_strtod_l+0x2a4>
 8008192:	9419      	str	r4, [sp, #100]	@ 0x64
 8008194:	f04f 0800 	mov.w	r8, #0
 8008198:	e0a5      	b.n	80082e6 <_strtod_l+0x2ee>
 800819a:	2300      	movs	r3, #0
 800819c:	e7c8      	b.n	8008130 <_strtod_l+0x138>
 800819e:	f1b9 0f08 	cmp.w	r9, #8
 80081a2:	bfd8      	it	le
 80081a4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80081a6:	f100 0001 	add.w	r0, r0, #1
 80081aa:	bfda      	itte	le
 80081ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80081b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80081b2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80081b6:	f109 0901 	add.w	r9, r9, #1
 80081ba:	9019      	str	r0, [sp, #100]	@ 0x64
 80081bc:	e7bf      	b.n	800813e <_strtod_l+0x146>
 80081be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80081c4:	785a      	ldrb	r2, [r3, #1]
 80081c6:	f1b9 0f00 	cmp.w	r9, #0
 80081ca:	d03b      	beq.n	8008244 <_strtod_l+0x24c>
 80081cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80081ce:	464d      	mov	r5, r9
 80081d0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	d912      	bls.n	80081fe <_strtod_l+0x206>
 80081d8:	2301      	movs	r3, #1
 80081da:	e7c2      	b.n	8008162 <_strtod_l+0x16a>
 80081dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80081e2:	785a      	ldrb	r2, [r3, #1]
 80081e4:	3001      	adds	r0, #1
 80081e6:	2a30      	cmp	r2, #48	@ 0x30
 80081e8:	d0f8      	beq.n	80081dc <_strtod_l+0x1e4>
 80081ea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80081ee:	2b08      	cmp	r3, #8
 80081f0:	f200 84d2 	bhi.w	8008b98 <_strtod_l+0xba0>
 80081f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80081f8:	2000      	movs	r0, #0
 80081fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80081fc:	4605      	mov	r5, r0
 80081fe:	3a30      	subs	r2, #48	@ 0x30
 8008200:	f100 0301 	add.w	r3, r0, #1
 8008204:	d018      	beq.n	8008238 <_strtod_l+0x240>
 8008206:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008208:	4419      	add	r1, r3
 800820a:	910a      	str	r1, [sp, #40]	@ 0x28
 800820c:	462e      	mov	r6, r5
 800820e:	f04f 0e0a 	mov.w	lr, #10
 8008212:	1c71      	adds	r1, r6, #1
 8008214:	eba1 0c05 	sub.w	ip, r1, r5
 8008218:	4563      	cmp	r3, ip
 800821a:	dc15      	bgt.n	8008248 <_strtod_l+0x250>
 800821c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008220:	182b      	adds	r3, r5, r0
 8008222:	2b08      	cmp	r3, #8
 8008224:	f105 0501 	add.w	r5, r5, #1
 8008228:	4405      	add	r5, r0
 800822a:	dc1a      	bgt.n	8008262 <_strtod_l+0x26a>
 800822c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800822e:	230a      	movs	r3, #10
 8008230:	fb03 2301 	mla	r3, r3, r1, r2
 8008234:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008236:	2300      	movs	r3, #0
 8008238:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800823a:	1c51      	adds	r1, r2, #1
 800823c:	9119      	str	r1, [sp, #100]	@ 0x64
 800823e:	7852      	ldrb	r2, [r2, #1]
 8008240:	4618      	mov	r0, r3
 8008242:	e7c5      	b.n	80081d0 <_strtod_l+0x1d8>
 8008244:	4648      	mov	r0, r9
 8008246:	e7ce      	b.n	80081e6 <_strtod_l+0x1ee>
 8008248:	2e08      	cmp	r6, #8
 800824a:	dc05      	bgt.n	8008258 <_strtod_l+0x260>
 800824c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800824e:	fb0e f606 	mul.w	r6, lr, r6
 8008252:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008254:	460e      	mov	r6, r1
 8008256:	e7dc      	b.n	8008212 <_strtod_l+0x21a>
 8008258:	2910      	cmp	r1, #16
 800825a:	bfd8      	it	le
 800825c:	fb0e f707 	mulle.w	r7, lr, r7
 8008260:	e7f8      	b.n	8008254 <_strtod_l+0x25c>
 8008262:	2b0f      	cmp	r3, #15
 8008264:	bfdc      	itt	le
 8008266:	230a      	movle	r3, #10
 8008268:	fb03 2707 	mlale	r7, r3, r7, r2
 800826c:	e7e3      	b.n	8008236 <_strtod_l+0x23e>
 800826e:	2300      	movs	r3, #0
 8008270:	930a      	str	r3, [sp, #40]	@ 0x28
 8008272:	2301      	movs	r3, #1
 8008274:	e77a      	b.n	800816c <_strtod_l+0x174>
 8008276:	f04f 0c00 	mov.w	ip, #0
 800827a:	1ca2      	adds	r2, r4, #2
 800827c:	9219      	str	r2, [sp, #100]	@ 0x64
 800827e:	78a2      	ldrb	r2, [r4, #2]
 8008280:	e782      	b.n	8008188 <_strtod_l+0x190>
 8008282:	f04f 0c01 	mov.w	ip, #1
 8008286:	e7f8      	b.n	800827a <_strtod_l+0x282>
 8008288:	0801dbc4 	.word	0x0801dbc4
 800828c:	0801d9f7 	.word	0x0801d9f7
 8008290:	7ff00000 	.word	0x7ff00000
 8008294:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008296:	1c51      	adds	r1, r2, #1
 8008298:	9119      	str	r1, [sp, #100]	@ 0x64
 800829a:	7852      	ldrb	r2, [r2, #1]
 800829c:	2a30      	cmp	r2, #48	@ 0x30
 800829e:	d0f9      	beq.n	8008294 <_strtod_l+0x29c>
 80082a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80082a4:	2908      	cmp	r1, #8
 80082a6:	f63f af75 	bhi.w	8008194 <_strtod_l+0x19c>
 80082aa:	3a30      	subs	r2, #48	@ 0x30
 80082ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80082ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80082b2:	f04f 080a 	mov.w	r8, #10
 80082b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082b8:	1c56      	adds	r6, r2, #1
 80082ba:	9619      	str	r6, [sp, #100]	@ 0x64
 80082bc:	7852      	ldrb	r2, [r2, #1]
 80082be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80082c2:	f1be 0f09 	cmp.w	lr, #9
 80082c6:	d939      	bls.n	800833c <_strtod_l+0x344>
 80082c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082ca:	1a76      	subs	r6, r6, r1
 80082cc:	2e08      	cmp	r6, #8
 80082ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80082d2:	dc03      	bgt.n	80082dc <_strtod_l+0x2e4>
 80082d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082d6:	4588      	cmp	r8, r1
 80082d8:	bfa8      	it	ge
 80082da:	4688      	movge	r8, r1
 80082dc:	f1bc 0f00 	cmp.w	ip, #0
 80082e0:	d001      	beq.n	80082e6 <_strtod_l+0x2ee>
 80082e2:	f1c8 0800 	rsb	r8, r8, #0
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	d14e      	bne.n	8008388 <_strtod_l+0x390>
 80082ea:	9908      	ldr	r1, [sp, #32]
 80082ec:	4308      	orrs	r0, r1
 80082ee:	f47f aebc 	bne.w	800806a <_strtod_l+0x72>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f47f aed4 	bne.w	80080a0 <_strtod_l+0xa8>
 80082f8:	2a69      	cmp	r2, #105	@ 0x69
 80082fa:	d028      	beq.n	800834e <_strtod_l+0x356>
 80082fc:	dc25      	bgt.n	800834a <_strtod_l+0x352>
 80082fe:	2a49      	cmp	r2, #73	@ 0x49
 8008300:	d025      	beq.n	800834e <_strtod_l+0x356>
 8008302:	2a4e      	cmp	r2, #78	@ 0x4e
 8008304:	f47f aecc 	bne.w	80080a0 <_strtod_l+0xa8>
 8008308:	499a      	ldr	r1, [pc, #616]	@ (8008574 <_strtod_l+0x57c>)
 800830a:	a819      	add	r0, sp, #100	@ 0x64
 800830c:	f001 fb94 	bl	8009a38 <__match>
 8008310:	2800      	cmp	r0, #0
 8008312:	f43f aec5 	beq.w	80080a0 <_strtod_l+0xa8>
 8008316:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b28      	cmp	r3, #40	@ 0x28
 800831c:	d12e      	bne.n	800837c <_strtod_l+0x384>
 800831e:	4996      	ldr	r1, [pc, #600]	@ (8008578 <_strtod_l+0x580>)
 8008320:	aa1c      	add	r2, sp, #112	@ 0x70
 8008322:	a819      	add	r0, sp, #100	@ 0x64
 8008324:	f001 fb9c 	bl	8009a60 <__hexnan>
 8008328:	2805      	cmp	r0, #5
 800832a:	d127      	bne.n	800837c <_strtod_l+0x384>
 800832c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800832e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008332:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008336:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800833a:	e696      	b.n	800806a <_strtod_l+0x72>
 800833c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800833e:	fb08 2101 	mla	r1, r8, r1, r2
 8008342:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008346:	9209      	str	r2, [sp, #36]	@ 0x24
 8008348:	e7b5      	b.n	80082b6 <_strtod_l+0x2be>
 800834a:	2a6e      	cmp	r2, #110	@ 0x6e
 800834c:	e7da      	b.n	8008304 <_strtod_l+0x30c>
 800834e:	498b      	ldr	r1, [pc, #556]	@ (800857c <_strtod_l+0x584>)
 8008350:	a819      	add	r0, sp, #100	@ 0x64
 8008352:	f001 fb71 	bl	8009a38 <__match>
 8008356:	2800      	cmp	r0, #0
 8008358:	f43f aea2 	beq.w	80080a0 <_strtod_l+0xa8>
 800835c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800835e:	4988      	ldr	r1, [pc, #544]	@ (8008580 <_strtod_l+0x588>)
 8008360:	3b01      	subs	r3, #1
 8008362:	a819      	add	r0, sp, #100	@ 0x64
 8008364:	9319      	str	r3, [sp, #100]	@ 0x64
 8008366:	f001 fb67 	bl	8009a38 <__match>
 800836a:	b910      	cbnz	r0, 8008372 <_strtod_l+0x37a>
 800836c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800836e:	3301      	adds	r3, #1
 8008370:	9319      	str	r3, [sp, #100]	@ 0x64
 8008372:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008590 <_strtod_l+0x598>
 8008376:	f04f 0a00 	mov.w	sl, #0
 800837a:	e676      	b.n	800806a <_strtod_l+0x72>
 800837c:	4881      	ldr	r0, [pc, #516]	@ (8008584 <_strtod_l+0x58c>)
 800837e:	f001 f897 	bl	80094b0 <nan>
 8008382:	ec5b ab10 	vmov	sl, fp, d0
 8008386:	e670      	b.n	800806a <_strtod_l+0x72>
 8008388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800838a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800838c:	eba8 0303 	sub.w	r3, r8, r3
 8008390:	f1b9 0f00 	cmp.w	r9, #0
 8008394:	bf08      	it	eq
 8008396:	46a9      	moveq	r9, r5
 8008398:	2d10      	cmp	r5, #16
 800839a:	9309      	str	r3, [sp, #36]	@ 0x24
 800839c:	462c      	mov	r4, r5
 800839e:	bfa8      	it	ge
 80083a0:	2410      	movge	r4, #16
 80083a2:	f7f8 f8c7 	bl	8000534 <__aeabi_ui2d>
 80083a6:	2d09      	cmp	r5, #9
 80083a8:	4682      	mov	sl, r0
 80083aa:	468b      	mov	fp, r1
 80083ac:	dc13      	bgt.n	80083d6 <_strtod_l+0x3de>
 80083ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f43f ae5a 	beq.w	800806a <_strtod_l+0x72>
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	dd78      	ble.n	80084ac <_strtod_l+0x4b4>
 80083ba:	2b16      	cmp	r3, #22
 80083bc:	dc5f      	bgt.n	800847e <_strtod_l+0x486>
 80083be:	4972      	ldr	r1, [pc, #456]	@ (8008588 <_strtod_l+0x590>)
 80083c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c8:	4652      	mov	r2, sl
 80083ca:	465b      	mov	r3, fp
 80083cc:	f7f8 f92c 	bl	8000628 <__aeabi_dmul>
 80083d0:	4682      	mov	sl, r0
 80083d2:	468b      	mov	fp, r1
 80083d4:	e649      	b.n	800806a <_strtod_l+0x72>
 80083d6:	4b6c      	ldr	r3, [pc, #432]	@ (8008588 <_strtod_l+0x590>)
 80083d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80083e0:	f7f8 f922 	bl	8000628 <__aeabi_dmul>
 80083e4:	4682      	mov	sl, r0
 80083e6:	4638      	mov	r0, r7
 80083e8:	468b      	mov	fp, r1
 80083ea:	f7f8 f8a3 	bl	8000534 <__aeabi_ui2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4650      	mov	r0, sl
 80083f4:	4659      	mov	r1, fp
 80083f6:	f7f7 ff61 	bl	80002bc <__adddf3>
 80083fa:	2d0f      	cmp	r5, #15
 80083fc:	4682      	mov	sl, r0
 80083fe:	468b      	mov	fp, r1
 8008400:	ddd5      	ble.n	80083ae <_strtod_l+0x3b6>
 8008402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008404:	1b2c      	subs	r4, r5, r4
 8008406:	441c      	add	r4, r3
 8008408:	2c00      	cmp	r4, #0
 800840a:	f340 8093 	ble.w	8008534 <_strtod_l+0x53c>
 800840e:	f014 030f 	ands.w	r3, r4, #15
 8008412:	d00a      	beq.n	800842a <_strtod_l+0x432>
 8008414:	495c      	ldr	r1, [pc, #368]	@ (8008588 <_strtod_l+0x590>)
 8008416:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008422:	f7f8 f901 	bl	8000628 <__aeabi_dmul>
 8008426:	4682      	mov	sl, r0
 8008428:	468b      	mov	fp, r1
 800842a:	f034 040f 	bics.w	r4, r4, #15
 800842e:	d073      	beq.n	8008518 <_strtod_l+0x520>
 8008430:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008434:	dd49      	ble.n	80084ca <_strtod_l+0x4d2>
 8008436:	2400      	movs	r4, #0
 8008438:	46a0      	mov	r8, r4
 800843a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800843c:	46a1      	mov	r9, r4
 800843e:	9a05      	ldr	r2, [sp, #20]
 8008440:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008590 <_strtod_l+0x598>
 8008444:	2322      	movs	r3, #34	@ 0x22
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	f04f 0a00 	mov.w	sl, #0
 800844c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800844e:	2b00      	cmp	r3, #0
 8008450:	f43f ae0b 	beq.w	800806a <_strtod_l+0x72>
 8008454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008456:	9805      	ldr	r0, [sp, #20]
 8008458:	f7ff f944 	bl	80076e4 <_Bfree>
 800845c:	9805      	ldr	r0, [sp, #20]
 800845e:	4649      	mov	r1, r9
 8008460:	f7ff f940 	bl	80076e4 <_Bfree>
 8008464:	9805      	ldr	r0, [sp, #20]
 8008466:	4641      	mov	r1, r8
 8008468:	f7ff f93c 	bl	80076e4 <_Bfree>
 800846c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800846e:	9805      	ldr	r0, [sp, #20]
 8008470:	f7ff f938 	bl	80076e4 <_Bfree>
 8008474:	9805      	ldr	r0, [sp, #20]
 8008476:	4621      	mov	r1, r4
 8008478:	f7ff f934 	bl	80076e4 <_Bfree>
 800847c:	e5f5      	b.n	800806a <_strtod_l+0x72>
 800847e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008480:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008484:	4293      	cmp	r3, r2
 8008486:	dbbc      	blt.n	8008402 <_strtod_l+0x40a>
 8008488:	4c3f      	ldr	r4, [pc, #252]	@ (8008588 <_strtod_l+0x590>)
 800848a:	f1c5 050f 	rsb	r5, r5, #15
 800848e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008492:	4652      	mov	r2, sl
 8008494:	465b      	mov	r3, fp
 8008496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849a:	f7f8 f8c5 	bl	8000628 <__aeabi_dmul>
 800849e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a0:	1b5d      	subs	r5, r3, r5
 80084a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80084a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80084aa:	e78f      	b.n	80083cc <_strtod_l+0x3d4>
 80084ac:	3316      	adds	r3, #22
 80084ae:	dba8      	blt.n	8008402 <_strtod_l+0x40a>
 80084b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084b2:	eba3 0808 	sub.w	r8, r3, r8
 80084b6:	4b34      	ldr	r3, [pc, #208]	@ (8008588 <_strtod_l+0x590>)
 80084b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80084bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80084c0:	4650      	mov	r0, sl
 80084c2:	4659      	mov	r1, fp
 80084c4:	f7f8 f9da 	bl	800087c <__aeabi_ddiv>
 80084c8:	e782      	b.n	80083d0 <_strtod_l+0x3d8>
 80084ca:	2300      	movs	r3, #0
 80084cc:	4f2f      	ldr	r7, [pc, #188]	@ (800858c <_strtod_l+0x594>)
 80084ce:	1124      	asrs	r4, r4, #4
 80084d0:	4650      	mov	r0, sl
 80084d2:	4659      	mov	r1, fp
 80084d4:	461e      	mov	r6, r3
 80084d6:	2c01      	cmp	r4, #1
 80084d8:	dc21      	bgt.n	800851e <_strtod_l+0x526>
 80084da:	b10b      	cbz	r3, 80084e0 <_strtod_l+0x4e8>
 80084dc:	4682      	mov	sl, r0
 80084de:	468b      	mov	fp, r1
 80084e0:	492a      	ldr	r1, [pc, #168]	@ (800858c <_strtod_l+0x594>)
 80084e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80084e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80084ea:	4652      	mov	r2, sl
 80084ec:	465b      	mov	r3, fp
 80084ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f2:	f7f8 f899 	bl	8000628 <__aeabi_dmul>
 80084f6:	4b26      	ldr	r3, [pc, #152]	@ (8008590 <_strtod_l+0x598>)
 80084f8:	460a      	mov	r2, r1
 80084fa:	400b      	ands	r3, r1
 80084fc:	4925      	ldr	r1, [pc, #148]	@ (8008594 <_strtod_l+0x59c>)
 80084fe:	428b      	cmp	r3, r1
 8008500:	4682      	mov	sl, r0
 8008502:	d898      	bhi.n	8008436 <_strtod_l+0x43e>
 8008504:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008508:	428b      	cmp	r3, r1
 800850a:	bf86      	itte	hi
 800850c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008598 <_strtod_l+0x5a0>
 8008510:	f04f 3aff 	movhi.w	sl, #4294967295
 8008514:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008518:	2300      	movs	r3, #0
 800851a:	9308      	str	r3, [sp, #32]
 800851c:	e076      	b.n	800860c <_strtod_l+0x614>
 800851e:	07e2      	lsls	r2, r4, #31
 8008520:	d504      	bpl.n	800852c <_strtod_l+0x534>
 8008522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008526:	f7f8 f87f 	bl	8000628 <__aeabi_dmul>
 800852a:	2301      	movs	r3, #1
 800852c:	3601      	adds	r6, #1
 800852e:	1064      	asrs	r4, r4, #1
 8008530:	3708      	adds	r7, #8
 8008532:	e7d0      	b.n	80084d6 <_strtod_l+0x4de>
 8008534:	d0f0      	beq.n	8008518 <_strtod_l+0x520>
 8008536:	4264      	negs	r4, r4
 8008538:	f014 020f 	ands.w	r2, r4, #15
 800853c:	d00a      	beq.n	8008554 <_strtod_l+0x55c>
 800853e:	4b12      	ldr	r3, [pc, #72]	@ (8008588 <_strtod_l+0x590>)
 8008540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008544:	4650      	mov	r0, sl
 8008546:	4659      	mov	r1, fp
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f7f8 f996 	bl	800087c <__aeabi_ddiv>
 8008550:	4682      	mov	sl, r0
 8008552:	468b      	mov	fp, r1
 8008554:	1124      	asrs	r4, r4, #4
 8008556:	d0df      	beq.n	8008518 <_strtod_l+0x520>
 8008558:	2c1f      	cmp	r4, #31
 800855a:	dd1f      	ble.n	800859c <_strtod_l+0x5a4>
 800855c:	2400      	movs	r4, #0
 800855e:	46a0      	mov	r8, r4
 8008560:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008562:	46a1      	mov	r9, r4
 8008564:	9a05      	ldr	r2, [sp, #20]
 8008566:	2322      	movs	r3, #34	@ 0x22
 8008568:	f04f 0a00 	mov.w	sl, #0
 800856c:	f04f 0b00 	mov.w	fp, #0
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	e76b      	b.n	800844c <_strtod_l+0x454>
 8008574:	0801d8e5 	.word	0x0801d8e5
 8008578:	0801dbb0 	.word	0x0801dbb0
 800857c:	0801d8dd 	.word	0x0801d8dd
 8008580:	0801d914 	.word	0x0801d914
 8008584:	0801da4d 	.word	0x0801da4d
 8008588:	0801dae8 	.word	0x0801dae8
 800858c:	0801dac0 	.word	0x0801dac0
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	7ca00000 	.word	0x7ca00000
 8008598:	7fefffff 	.word	0x7fefffff
 800859c:	f014 0310 	ands.w	r3, r4, #16
 80085a0:	bf18      	it	ne
 80085a2:	236a      	movne	r3, #106	@ 0x6a
 80085a4:	4ea9      	ldr	r6, [pc, #676]	@ (800884c <_strtod_l+0x854>)
 80085a6:	9308      	str	r3, [sp, #32]
 80085a8:	4650      	mov	r0, sl
 80085aa:	4659      	mov	r1, fp
 80085ac:	2300      	movs	r3, #0
 80085ae:	07e7      	lsls	r7, r4, #31
 80085b0:	d504      	bpl.n	80085bc <_strtod_l+0x5c4>
 80085b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085b6:	f7f8 f837 	bl	8000628 <__aeabi_dmul>
 80085ba:	2301      	movs	r3, #1
 80085bc:	1064      	asrs	r4, r4, #1
 80085be:	f106 0608 	add.w	r6, r6, #8
 80085c2:	d1f4      	bne.n	80085ae <_strtod_l+0x5b6>
 80085c4:	b10b      	cbz	r3, 80085ca <_strtod_l+0x5d2>
 80085c6:	4682      	mov	sl, r0
 80085c8:	468b      	mov	fp, r1
 80085ca:	9b08      	ldr	r3, [sp, #32]
 80085cc:	b1b3      	cbz	r3, 80085fc <_strtod_l+0x604>
 80085ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80085d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	4659      	mov	r1, fp
 80085da:	dd0f      	ble.n	80085fc <_strtod_l+0x604>
 80085dc:	2b1f      	cmp	r3, #31
 80085de:	dd56      	ble.n	800868e <_strtod_l+0x696>
 80085e0:	2b34      	cmp	r3, #52	@ 0x34
 80085e2:	bfde      	ittt	le
 80085e4:	f04f 33ff 	movle.w	r3, #4294967295
 80085e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80085ec:	4093      	lslle	r3, r2
 80085ee:	f04f 0a00 	mov.w	sl, #0
 80085f2:	bfcc      	ite	gt
 80085f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80085f8:	ea03 0b01 	andle.w	fp, r3, r1
 80085fc:	2200      	movs	r2, #0
 80085fe:	2300      	movs	r3, #0
 8008600:	4650      	mov	r0, sl
 8008602:	4659      	mov	r1, fp
 8008604:	f7f8 fa78 	bl	8000af8 <__aeabi_dcmpeq>
 8008608:	2800      	cmp	r0, #0
 800860a:	d1a7      	bne.n	800855c <_strtod_l+0x564>
 800860c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008612:	9805      	ldr	r0, [sp, #20]
 8008614:	462b      	mov	r3, r5
 8008616:	464a      	mov	r2, r9
 8008618:	f7ff f8cc 	bl	80077b4 <__s2b>
 800861c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800861e:	2800      	cmp	r0, #0
 8008620:	f43f af09 	beq.w	8008436 <_strtod_l+0x43e>
 8008624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008628:	2a00      	cmp	r2, #0
 800862a:	eba3 0308 	sub.w	r3, r3, r8
 800862e:	bfa8      	it	ge
 8008630:	2300      	movge	r3, #0
 8008632:	9312      	str	r3, [sp, #72]	@ 0x48
 8008634:	2400      	movs	r4, #0
 8008636:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800863a:	9316      	str	r3, [sp, #88]	@ 0x58
 800863c:	46a0      	mov	r8, r4
 800863e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008640:	9805      	ldr	r0, [sp, #20]
 8008642:	6859      	ldr	r1, [r3, #4]
 8008644:	f7ff f80e 	bl	8007664 <_Balloc>
 8008648:	4681      	mov	r9, r0
 800864a:	2800      	cmp	r0, #0
 800864c:	f43f aef7 	beq.w	800843e <_strtod_l+0x446>
 8008650:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008652:	691a      	ldr	r2, [r3, #16]
 8008654:	3202      	adds	r2, #2
 8008656:	f103 010c 	add.w	r1, r3, #12
 800865a:	0092      	lsls	r2, r2, #2
 800865c:	300c      	adds	r0, #12
 800865e:	f7fe f948 	bl	80068f2 <memcpy>
 8008662:	ec4b ab10 	vmov	d0, sl, fp
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	aa1c      	add	r2, sp, #112	@ 0x70
 800866a:	a91b      	add	r1, sp, #108	@ 0x6c
 800866c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008670:	f7ff fbd4 	bl	8007e1c <__d2b>
 8008674:	901a      	str	r0, [sp, #104]	@ 0x68
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aee1 	beq.w	800843e <_strtod_l+0x446>
 800867c:	9805      	ldr	r0, [sp, #20]
 800867e:	2101      	movs	r1, #1
 8008680:	f7ff f92e 	bl	80078e0 <__i2b>
 8008684:	4680      	mov	r8, r0
 8008686:	b948      	cbnz	r0, 800869c <_strtod_l+0x6a4>
 8008688:	f04f 0800 	mov.w	r8, #0
 800868c:	e6d7      	b.n	800843e <_strtod_l+0x446>
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	fa02 f303 	lsl.w	r3, r2, r3
 8008696:	ea03 0a0a 	and.w	sl, r3, sl
 800869a:	e7af      	b.n	80085fc <_strtod_l+0x604>
 800869c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800869e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	bfab      	itete	ge
 80086a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80086a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80086a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80086aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80086ac:	bfac      	ite	ge
 80086ae:	18ef      	addge	r7, r5, r3
 80086b0:	1b5e      	sublt	r6, r3, r5
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	1aed      	subs	r5, r5, r3
 80086b6:	4415      	add	r5, r2
 80086b8:	4b65      	ldr	r3, [pc, #404]	@ (8008850 <_strtod_l+0x858>)
 80086ba:	3d01      	subs	r5, #1
 80086bc:	429d      	cmp	r5, r3
 80086be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80086c2:	da50      	bge.n	8008766 <_strtod_l+0x76e>
 80086c4:	1b5b      	subs	r3, r3, r5
 80086c6:	2b1f      	cmp	r3, #31
 80086c8:	eba2 0203 	sub.w	r2, r2, r3
 80086cc:	f04f 0101 	mov.w	r1, #1
 80086d0:	dc3d      	bgt.n	800874e <_strtod_l+0x756>
 80086d2:	fa01 f303 	lsl.w	r3, r1, r3
 80086d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086d8:	2300      	movs	r3, #0
 80086da:	9310      	str	r3, [sp, #64]	@ 0x40
 80086dc:	18bd      	adds	r5, r7, r2
 80086de:	9b08      	ldr	r3, [sp, #32]
 80086e0:	42af      	cmp	r7, r5
 80086e2:	4416      	add	r6, r2
 80086e4:	441e      	add	r6, r3
 80086e6:	463b      	mov	r3, r7
 80086e8:	bfa8      	it	ge
 80086ea:	462b      	movge	r3, r5
 80086ec:	42b3      	cmp	r3, r6
 80086ee:	bfa8      	it	ge
 80086f0:	4633      	movge	r3, r6
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfc2      	ittt	gt
 80086f6:	1aed      	subgt	r5, r5, r3
 80086f8:	1af6      	subgt	r6, r6, r3
 80086fa:	1aff      	subgt	r7, r7, r3
 80086fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dd16      	ble.n	8008730 <_strtod_l+0x738>
 8008702:	4641      	mov	r1, r8
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	461a      	mov	r2, r3
 8008708:	f7ff f9a2 	bl	8007a50 <__pow5mult>
 800870c:	4680      	mov	r8, r0
 800870e:	2800      	cmp	r0, #0
 8008710:	d0ba      	beq.n	8008688 <_strtod_l+0x690>
 8008712:	4601      	mov	r1, r0
 8008714:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008716:	9805      	ldr	r0, [sp, #20]
 8008718:	f7ff f8f8 	bl	800790c <__multiply>
 800871c:	900a      	str	r0, [sp, #40]	@ 0x28
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f ae8d 	beq.w	800843e <_strtod_l+0x446>
 8008724:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008726:	9805      	ldr	r0, [sp, #20]
 8008728:	f7fe ffdc 	bl	80076e4 <_Bfree>
 800872c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800872e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008730:	2d00      	cmp	r5, #0
 8008732:	dc1d      	bgt.n	8008770 <_strtod_l+0x778>
 8008734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	dd23      	ble.n	8008782 <_strtod_l+0x78a>
 800873a:	4649      	mov	r1, r9
 800873c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800873e:	9805      	ldr	r0, [sp, #20]
 8008740:	f7ff f986 	bl	8007a50 <__pow5mult>
 8008744:	4681      	mov	r9, r0
 8008746:	b9e0      	cbnz	r0, 8008782 <_strtod_l+0x78a>
 8008748:	f04f 0900 	mov.w	r9, #0
 800874c:	e677      	b.n	800843e <_strtod_l+0x446>
 800874e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008752:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008756:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800875a:	35e2      	adds	r5, #226	@ 0xe2
 800875c:	fa01 f305 	lsl.w	r3, r1, r5
 8008760:	9310      	str	r3, [sp, #64]	@ 0x40
 8008762:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008764:	e7ba      	b.n	80086dc <_strtod_l+0x6e4>
 8008766:	2300      	movs	r3, #0
 8008768:	9310      	str	r3, [sp, #64]	@ 0x40
 800876a:	2301      	movs	r3, #1
 800876c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800876e:	e7b5      	b.n	80086dc <_strtod_l+0x6e4>
 8008770:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008772:	9805      	ldr	r0, [sp, #20]
 8008774:	462a      	mov	r2, r5
 8008776:	f7ff f9c5 	bl	8007b04 <__lshift>
 800877a:	901a      	str	r0, [sp, #104]	@ 0x68
 800877c:	2800      	cmp	r0, #0
 800877e:	d1d9      	bne.n	8008734 <_strtod_l+0x73c>
 8008780:	e65d      	b.n	800843e <_strtod_l+0x446>
 8008782:	2e00      	cmp	r6, #0
 8008784:	dd07      	ble.n	8008796 <_strtod_l+0x79e>
 8008786:	4649      	mov	r1, r9
 8008788:	9805      	ldr	r0, [sp, #20]
 800878a:	4632      	mov	r2, r6
 800878c:	f7ff f9ba 	bl	8007b04 <__lshift>
 8008790:	4681      	mov	r9, r0
 8008792:	2800      	cmp	r0, #0
 8008794:	d0d8      	beq.n	8008748 <_strtod_l+0x750>
 8008796:	2f00      	cmp	r7, #0
 8008798:	dd08      	ble.n	80087ac <_strtod_l+0x7b4>
 800879a:	4641      	mov	r1, r8
 800879c:	9805      	ldr	r0, [sp, #20]
 800879e:	463a      	mov	r2, r7
 80087a0:	f7ff f9b0 	bl	8007b04 <__lshift>
 80087a4:	4680      	mov	r8, r0
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f ae49 	beq.w	800843e <_strtod_l+0x446>
 80087ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087ae:	9805      	ldr	r0, [sp, #20]
 80087b0:	464a      	mov	r2, r9
 80087b2:	f7ff fa2f 	bl	8007c14 <__mdiff>
 80087b6:	4604      	mov	r4, r0
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f43f ae40 	beq.w	800843e <_strtod_l+0x446>
 80087be:	68c3      	ldr	r3, [r0, #12]
 80087c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087c2:	2300      	movs	r3, #0
 80087c4:	60c3      	str	r3, [r0, #12]
 80087c6:	4641      	mov	r1, r8
 80087c8:	f7ff fa08 	bl	8007bdc <__mcmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	da45      	bge.n	800885c <_strtod_l+0x864>
 80087d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087d2:	ea53 030a 	orrs.w	r3, r3, sl
 80087d6:	d16b      	bne.n	80088b0 <_strtod_l+0x8b8>
 80087d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d167      	bne.n	80088b0 <_strtod_l+0x8b8>
 80087e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80087e4:	0d1b      	lsrs	r3, r3, #20
 80087e6:	051b      	lsls	r3, r3, #20
 80087e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80087ec:	d960      	bls.n	80088b0 <_strtod_l+0x8b8>
 80087ee:	6963      	ldr	r3, [r4, #20]
 80087f0:	b913      	cbnz	r3, 80087f8 <_strtod_l+0x800>
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	dd5b      	ble.n	80088b0 <_strtod_l+0x8b8>
 80087f8:	4621      	mov	r1, r4
 80087fa:	2201      	movs	r2, #1
 80087fc:	9805      	ldr	r0, [sp, #20]
 80087fe:	f7ff f981 	bl	8007b04 <__lshift>
 8008802:	4641      	mov	r1, r8
 8008804:	4604      	mov	r4, r0
 8008806:	f7ff f9e9 	bl	8007bdc <__mcmp>
 800880a:	2800      	cmp	r0, #0
 800880c:	dd50      	ble.n	80088b0 <_strtod_l+0x8b8>
 800880e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008812:	9a08      	ldr	r2, [sp, #32]
 8008814:	0d1b      	lsrs	r3, r3, #20
 8008816:	051b      	lsls	r3, r3, #20
 8008818:	2a00      	cmp	r2, #0
 800881a:	d06a      	beq.n	80088f2 <_strtod_l+0x8fa>
 800881c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008820:	d867      	bhi.n	80088f2 <_strtod_l+0x8fa>
 8008822:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008826:	f67f ae9d 	bls.w	8008564 <_strtod_l+0x56c>
 800882a:	4b0a      	ldr	r3, [pc, #40]	@ (8008854 <_strtod_l+0x85c>)
 800882c:	4650      	mov	r0, sl
 800882e:	4659      	mov	r1, fp
 8008830:	2200      	movs	r2, #0
 8008832:	f7f7 fef9 	bl	8000628 <__aeabi_dmul>
 8008836:	4b08      	ldr	r3, [pc, #32]	@ (8008858 <_strtod_l+0x860>)
 8008838:	400b      	ands	r3, r1
 800883a:	4682      	mov	sl, r0
 800883c:	468b      	mov	fp, r1
 800883e:	2b00      	cmp	r3, #0
 8008840:	f47f ae08 	bne.w	8008454 <_strtod_l+0x45c>
 8008844:	9a05      	ldr	r2, [sp, #20]
 8008846:	2322      	movs	r3, #34	@ 0x22
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	e603      	b.n	8008454 <_strtod_l+0x45c>
 800884c:	0801dbd8 	.word	0x0801dbd8
 8008850:	fffffc02 	.word	0xfffffc02
 8008854:	39500000 	.word	0x39500000
 8008858:	7ff00000 	.word	0x7ff00000
 800885c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008860:	d165      	bne.n	800892e <_strtod_l+0x936>
 8008862:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008868:	b35a      	cbz	r2, 80088c2 <_strtod_l+0x8ca>
 800886a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ae8 <_strtod_l+0xaf0>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d12b      	bne.n	80088c8 <_strtod_l+0x8d0>
 8008870:	9b08      	ldr	r3, [sp, #32]
 8008872:	4651      	mov	r1, sl
 8008874:	b303      	cbz	r3, 80088b8 <_strtod_l+0x8c0>
 8008876:	4b9d      	ldr	r3, [pc, #628]	@ (8008aec <_strtod_l+0xaf4>)
 8008878:	465a      	mov	r2, fp
 800887a:	4013      	ands	r3, r2
 800887c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	d81b      	bhi.n	80088be <_strtod_l+0x8c6>
 8008886:	0d1b      	lsrs	r3, r3, #20
 8008888:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800888c:	fa02 f303 	lsl.w	r3, r2, r3
 8008890:	4299      	cmp	r1, r3
 8008892:	d119      	bne.n	80088c8 <_strtod_l+0x8d0>
 8008894:	4b96      	ldr	r3, [pc, #600]	@ (8008af0 <_strtod_l+0xaf8>)
 8008896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008898:	429a      	cmp	r2, r3
 800889a:	d102      	bne.n	80088a2 <_strtod_l+0x8aa>
 800889c:	3101      	adds	r1, #1
 800889e:	f43f adce 	beq.w	800843e <_strtod_l+0x446>
 80088a2:	4b92      	ldr	r3, [pc, #584]	@ (8008aec <_strtod_l+0xaf4>)
 80088a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088a6:	401a      	ands	r2, r3
 80088a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80088ac:	f04f 0a00 	mov.w	sl, #0
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1b9      	bne.n	800882a <_strtod_l+0x832>
 80088b6:	e5cd      	b.n	8008454 <_strtod_l+0x45c>
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	e7e8      	b.n	8008890 <_strtod_l+0x898>
 80088be:	4613      	mov	r3, r2
 80088c0:	e7e6      	b.n	8008890 <_strtod_l+0x898>
 80088c2:	ea53 030a 	orrs.w	r3, r3, sl
 80088c6:	d0a2      	beq.n	800880e <_strtod_l+0x816>
 80088c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088ca:	b1db      	cbz	r3, 8008904 <_strtod_l+0x90c>
 80088cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088ce:	4213      	tst	r3, r2
 80088d0:	d0ee      	beq.n	80088b0 <_strtod_l+0x8b8>
 80088d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088d4:	9a08      	ldr	r2, [sp, #32]
 80088d6:	4650      	mov	r0, sl
 80088d8:	4659      	mov	r1, fp
 80088da:	b1bb      	cbz	r3, 800890c <_strtod_l+0x914>
 80088dc:	f7ff fb6c 	bl	8007fb8 <sulp>
 80088e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088e4:	ec53 2b10 	vmov	r2, r3, d0
 80088e8:	f7f7 fce8 	bl	80002bc <__adddf3>
 80088ec:	4682      	mov	sl, r0
 80088ee:	468b      	mov	fp, r1
 80088f0:	e7de      	b.n	80088b0 <_strtod_l+0x8b8>
 80088f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80088f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088fe:	f04f 3aff 	mov.w	sl, #4294967295
 8008902:	e7d5      	b.n	80088b0 <_strtod_l+0x8b8>
 8008904:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008906:	ea13 0f0a 	tst.w	r3, sl
 800890a:	e7e1      	b.n	80088d0 <_strtod_l+0x8d8>
 800890c:	f7ff fb54 	bl	8007fb8 <sulp>
 8008910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008914:	ec53 2b10 	vmov	r2, r3, d0
 8008918:	f7f7 fcce 	bl	80002b8 <__aeabi_dsub>
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	4682      	mov	sl, r0
 8008922:	468b      	mov	fp, r1
 8008924:	f7f8 f8e8 	bl	8000af8 <__aeabi_dcmpeq>
 8008928:	2800      	cmp	r0, #0
 800892a:	d0c1      	beq.n	80088b0 <_strtod_l+0x8b8>
 800892c:	e61a      	b.n	8008564 <_strtod_l+0x56c>
 800892e:	4641      	mov	r1, r8
 8008930:	4620      	mov	r0, r4
 8008932:	f7ff facb 	bl	8007ecc <__ratio>
 8008936:	ec57 6b10 	vmov	r6, r7, d0
 800893a:	2200      	movs	r2, #0
 800893c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f8 f8ec 	bl	8000b20 <__aeabi_dcmple>
 8008948:	2800      	cmp	r0, #0
 800894a:	d06f      	beq.n	8008a2c <_strtod_l+0xa34>
 800894c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d17a      	bne.n	8008a48 <_strtod_l+0xa50>
 8008952:	f1ba 0f00 	cmp.w	sl, #0
 8008956:	d158      	bne.n	8008a0a <_strtod_l+0xa12>
 8008958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800895a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800895e:	2b00      	cmp	r3, #0
 8008960:	d15a      	bne.n	8008a18 <_strtod_l+0xa20>
 8008962:	4b64      	ldr	r3, [pc, #400]	@ (8008af4 <_strtod_l+0xafc>)
 8008964:	2200      	movs	r2, #0
 8008966:	4630      	mov	r0, r6
 8008968:	4639      	mov	r1, r7
 800896a:	f7f8 f8cf 	bl	8000b0c <__aeabi_dcmplt>
 800896e:	2800      	cmp	r0, #0
 8008970:	d159      	bne.n	8008a26 <_strtod_l+0xa2e>
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	4b60      	ldr	r3, [pc, #384]	@ (8008af8 <_strtod_l+0xb00>)
 8008978:	2200      	movs	r2, #0
 800897a:	f7f7 fe55 	bl	8000628 <__aeabi_dmul>
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008986:	9606      	str	r6, [sp, #24]
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800898e:	4d57      	ldr	r5, [pc, #348]	@ (8008aec <_strtod_l+0xaf4>)
 8008990:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008996:	401d      	ands	r5, r3
 8008998:	4b58      	ldr	r3, [pc, #352]	@ (8008afc <_strtod_l+0xb04>)
 800899a:	429d      	cmp	r5, r3
 800899c:	f040 80b2 	bne.w	8008b04 <_strtod_l+0xb0c>
 80089a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80089a6:	ec4b ab10 	vmov	d0, sl, fp
 80089aa:	f7ff f9c7 	bl	8007d3c <__ulp>
 80089ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089b2:	ec51 0b10 	vmov	r0, r1, d0
 80089b6:	f7f7 fe37 	bl	8000628 <__aeabi_dmul>
 80089ba:	4652      	mov	r2, sl
 80089bc:	465b      	mov	r3, fp
 80089be:	f7f7 fc7d 	bl	80002bc <__adddf3>
 80089c2:	460b      	mov	r3, r1
 80089c4:	4949      	ldr	r1, [pc, #292]	@ (8008aec <_strtod_l+0xaf4>)
 80089c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008b00 <_strtod_l+0xb08>)
 80089c8:	4019      	ands	r1, r3
 80089ca:	4291      	cmp	r1, r2
 80089cc:	4682      	mov	sl, r0
 80089ce:	d942      	bls.n	8008a56 <_strtod_l+0xa5e>
 80089d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089d2:	4b47      	ldr	r3, [pc, #284]	@ (8008af0 <_strtod_l+0xaf8>)
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d103      	bne.n	80089e0 <_strtod_l+0x9e8>
 80089d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089da:	3301      	adds	r3, #1
 80089dc:	f43f ad2f 	beq.w	800843e <_strtod_l+0x446>
 80089e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008af0 <_strtod_l+0xaf8>
 80089e4:	f04f 3aff 	mov.w	sl, #4294967295
 80089e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089ea:	9805      	ldr	r0, [sp, #20]
 80089ec:	f7fe fe7a 	bl	80076e4 <_Bfree>
 80089f0:	9805      	ldr	r0, [sp, #20]
 80089f2:	4649      	mov	r1, r9
 80089f4:	f7fe fe76 	bl	80076e4 <_Bfree>
 80089f8:	9805      	ldr	r0, [sp, #20]
 80089fa:	4641      	mov	r1, r8
 80089fc:	f7fe fe72 	bl	80076e4 <_Bfree>
 8008a00:	9805      	ldr	r0, [sp, #20]
 8008a02:	4621      	mov	r1, r4
 8008a04:	f7fe fe6e 	bl	80076e4 <_Bfree>
 8008a08:	e619      	b.n	800863e <_strtod_l+0x646>
 8008a0a:	f1ba 0f01 	cmp.w	sl, #1
 8008a0e:	d103      	bne.n	8008a18 <_strtod_l+0xa20>
 8008a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f43f ada6 	beq.w	8008564 <_strtod_l+0x56c>
 8008a18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008ac8 <_strtod_l+0xad0>
 8008a1c:	4f35      	ldr	r7, [pc, #212]	@ (8008af4 <_strtod_l+0xafc>)
 8008a1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a22:	2600      	movs	r6, #0
 8008a24:	e7b1      	b.n	800898a <_strtod_l+0x992>
 8008a26:	4f34      	ldr	r7, [pc, #208]	@ (8008af8 <_strtod_l+0xb00>)
 8008a28:	2600      	movs	r6, #0
 8008a2a:	e7aa      	b.n	8008982 <_strtod_l+0x98a>
 8008a2c:	4b32      	ldr	r3, [pc, #200]	@ (8008af8 <_strtod_l+0xb00>)
 8008a2e:	4630      	mov	r0, r6
 8008a30:	4639      	mov	r1, r7
 8008a32:	2200      	movs	r2, #0
 8008a34:	f7f7 fdf8 	bl	8000628 <__aeabi_dmul>
 8008a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460f      	mov	r7, r1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d09f      	beq.n	8008982 <_strtod_l+0x98a>
 8008a42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a46:	e7a0      	b.n	800898a <_strtod_l+0x992>
 8008a48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ad0 <_strtod_l+0xad8>
 8008a4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a50:	ec57 6b17 	vmov	r6, r7, d7
 8008a54:	e799      	b.n	800898a <_strtod_l+0x992>
 8008a56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1c1      	bne.n	80089e8 <_strtod_l+0x9f0>
 8008a64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a68:	0d1b      	lsrs	r3, r3, #20
 8008a6a:	051b      	lsls	r3, r3, #20
 8008a6c:	429d      	cmp	r5, r3
 8008a6e:	d1bb      	bne.n	80089e8 <_strtod_l+0x9f0>
 8008a70:	4630      	mov	r0, r6
 8008a72:	4639      	mov	r1, r7
 8008a74:	f7f8 f920 	bl	8000cb8 <__aeabi_d2lz>
 8008a78:	f7f7 fda8 	bl	80005cc <__aeabi_l2d>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4630      	mov	r0, r6
 8008a82:	4639      	mov	r1, r7
 8008a84:	f7f7 fc18 	bl	80002b8 <__aeabi_dsub>
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a96:	ea46 060a 	orr.w	r6, r6, sl
 8008a9a:	431e      	orrs	r6, r3
 8008a9c:	d06f      	beq.n	8008b7e <_strtod_l+0xb86>
 8008a9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ad8 <_strtod_l+0xae0>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f7f8 f832 	bl	8000b0c <__aeabi_dcmplt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f47f acd3 	bne.w	8008454 <_strtod_l+0x45c>
 8008aae:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ae0 <_strtod_l+0xae8>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ab8:	f7f8 f846 	bl	8000b48 <__aeabi_dcmpgt>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d093      	beq.n	80089e8 <_strtod_l+0x9f0>
 8008ac0:	e4c8      	b.n	8008454 <_strtod_l+0x45c>
 8008ac2:	bf00      	nop
 8008ac4:	f3af 8000 	nop.w
 8008ac8:	00000000 	.word	0x00000000
 8008acc:	bff00000 	.word	0xbff00000
 8008ad0:	00000000 	.word	0x00000000
 8008ad4:	3ff00000 	.word	0x3ff00000
 8008ad8:	94a03595 	.word	0x94a03595
 8008adc:	3fdfffff 	.word	0x3fdfffff
 8008ae0:	35afe535 	.word	0x35afe535
 8008ae4:	3fe00000 	.word	0x3fe00000
 8008ae8:	000fffff 	.word	0x000fffff
 8008aec:	7ff00000 	.word	0x7ff00000
 8008af0:	7fefffff 	.word	0x7fefffff
 8008af4:	3ff00000 	.word	0x3ff00000
 8008af8:	3fe00000 	.word	0x3fe00000
 8008afc:	7fe00000 	.word	0x7fe00000
 8008b00:	7c9fffff 	.word	0x7c9fffff
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	b323      	cbz	r3, 8008b52 <_strtod_l+0xb5a>
 8008b08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008b0c:	d821      	bhi.n	8008b52 <_strtod_l+0xb5a>
 8008b0e:	a328      	add	r3, pc, #160	@ (adr r3, 8008bb0 <_strtod_l+0xbb8>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f8 f802 	bl	8000b20 <__aeabi_dcmple>
 8008b1c:	b1a0      	cbz	r0, 8008b48 <_strtod_l+0xb50>
 8008b1e:	4639      	mov	r1, r7
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7f8 f859 	bl	8000bd8 <__aeabi_d2uiz>
 8008b26:	2801      	cmp	r0, #1
 8008b28:	bf38      	it	cc
 8008b2a:	2001      	movcc	r0, #1
 8008b2c:	f7f7 fd02 	bl	8000534 <__aeabi_ui2d>
 8008b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b32:	4606      	mov	r6, r0
 8008b34:	460f      	mov	r7, r1
 8008b36:	b9fb      	cbnz	r3, 8008b78 <_strtod_l+0xb80>
 8008b38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008b3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008b44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008b4e:	1b5b      	subs	r3, r3, r5
 8008b50:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008b5a:	f7ff f8ef 	bl	8007d3c <__ulp>
 8008b5e:	4650      	mov	r0, sl
 8008b60:	ec53 2b10 	vmov	r2, r3, d0
 8008b64:	4659      	mov	r1, fp
 8008b66:	f7f7 fd5f 	bl	8000628 <__aeabi_dmul>
 8008b6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b6e:	f7f7 fba5 	bl	80002bc <__adddf3>
 8008b72:	4682      	mov	sl, r0
 8008b74:	468b      	mov	fp, r1
 8008b76:	e770      	b.n	8008a5a <_strtod_l+0xa62>
 8008b78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008b7c:	e7e0      	b.n	8008b40 <_strtod_l+0xb48>
 8008b7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008bb8 <_strtod_l+0xbc0>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f7f7 ffc2 	bl	8000b0c <__aeabi_dcmplt>
 8008b88:	e798      	b.n	8008abc <_strtod_l+0xac4>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008b90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	f7ff ba6d 	b.w	8008072 <_strtod_l+0x7a>
 8008b98:	2a65      	cmp	r2, #101	@ 0x65
 8008b9a:	f43f ab68 	beq.w	800826e <_strtod_l+0x276>
 8008b9e:	2a45      	cmp	r2, #69	@ 0x45
 8008ba0:	f43f ab65 	beq.w	800826e <_strtod_l+0x276>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	f7ff bba0 	b.w	80082ea <_strtod_l+0x2f2>
 8008baa:	bf00      	nop
 8008bac:	f3af 8000 	nop.w
 8008bb0:	ffc00000 	.word	0xffc00000
 8008bb4:	41dfffff 	.word	0x41dfffff
 8008bb8:	94a03595 	.word	0x94a03595
 8008bbc:	3fcfffff 	.word	0x3fcfffff

08008bc0 <_strtod_r>:
 8008bc0:	4b01      	ldr	r3, [pc, #4]	@ (8008bc8 <_strtod_r+0x8>)
 8008bc2:	f7ff ba19 	b.w	8007ff8 <_strtod_l>
 8008bc6:	bf00      	nop
 8008bc8:	20040068 	.word	0x20040068

08008bcc <_strtol_l.isra.0>:
 8008bcc:	2b24      	cmp	r3, #36	@ 0x24
 8008bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd2:	4686      	mov	lr, r0
 8008bd4:	4690      	mov	r8, r2
 8008bd6:	d801      	bhi.n	8008bdc <_strtol_l.isra.0+0x10>
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d106      	bne.n	8008bea <_strtol_l.isra.0+0x1e>
 8008bdc:	f7fd fe5c 	bl	8006898 <__errno>
 8008be0:	2316      	movs	r3, #22
 8008be2:	6003      	str	r3, [r0, #0]
 8008be4:	2000      	movs	r0, #0
 8008be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bea:	4834      	ldr	r0, [pc, #208]	@ (8008cbc <_strtol_l.isra.0+0xf0>)
 8008bec:	460d      	mov	r5, r1
 8008bee:	462a      	mov	r2, r5
 8008bf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bf4:	5d06      	ldrb	r6, [r0, r4]
 8008bf6:	f016 0608 	ands.w	r6, r6, #8
 8008bfa:	d1f8      	bne.n	8008bee <_strtol_l.isra.0+0x22>
 8008bfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008bfe:	d110      	bne.n	8008c22 <_strtol_l.isra.0+0x56>
 8008c00:	782c      	ldrb	r4, [r5, #0]
 8008c02:	2601      	movs	r6, #1
 8008c04:	1c95      	adds	r5, r2, #2
 8008c06:	f033 0210 	bics.w	r2, r3, #16
 8008c0a:	d115      	bne.n	8008c38 <_strtol_l.isra.0+0x6c>
 8008c0c:	2c30      	cmp	r4, #48	@ 0x30
 8008c0e:	d10d      	bne.n	8008c2c <_strtol_l.isra.0+0x60>
 8008c10:	782a      	ldrb	r2, [r5, #0]
 8008c12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c16:	2a58      	cmp	r2, #88	@ 0x58
 8008c18:	d108      	bne.n	8008c2c <_strtol_l.isra.0+0x60>
 8008c1a:	786c      	ldrb	r4, [r5, #1]
 8008c1c:	3502      	adds	r5, #2
 8008c1e:	2310      	movs	r3, #16
 8008c20:	e00a      	b.n	8008c38 <_strtol_l.isra.0+0x6c>
 8008c22:	2c2b      	cmp	r4, #43	@ 0x2b
 8008c24:	bf04      	itt	eq
 8008c26:	782c      	ldrbeq	r4, [r5, #0]
 8008c28:	1c95      	addeq	r5, r2, #2
 8008c2a:	e7ec      	b.n	8008c06 <_strtol_l.isra.0+0x3a>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1f6      	bne.n	8008c1e <_strtol_l.isra.0+0x52>
 8008c30:	2c30      	cmp	r4, #48	@ 0x30
 8008c32:	bf14      	ite	ne
 8008c34:	230a      	movne	r3, #10
 8008c36:	2308      	moveq	r3, #8
 8008c38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008c3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c40:	2200      	movs	r2, #0
 8008c42:	fbbc f9f3 	udiv	r9, ip, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008c50:	2f09      	cmp	r7, #9
 8008c52:	d80f      	bhi.n	8008c74 <_strtol_l.isra.0+0xa8>
 8008c54:	463c      	mov	r4, r7
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	dd1b      	ble.n	8008c92 <_strtol_l.isra.0+0xc6>
 8008c5a:	1c57      	adds	r7, r2, #1
 8008c5c:	d007      	beq.n	8008c6e <_strtol_l.isra.0+0xa2>
 8008c5e:	4581      	cmp	r9, r0
 8008c60:	d314      	bcc.n	8008c8c <_strtol_l.isra.0+0xc0>
 8008c62:	d101      	bne.n	8008c68 <_strtol_l.isra.0+0x9c>
 8008c64:	45a2      	cmp	sl, r4
 8008c66:	db11      	blt.n	8008c8c <_strtol_l.isra.0+0xc0>
 8008c68:	fb00 4003 	mla	r0, r0, r3, r4
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c72:	e7eb      	b.n	8008c4c <_strtol_l.isra.0+0x80>
 8008c74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c78:	2f19      	cmp	r7, #25
 8008c7a:	d801      	bhi.n	8008c80 <_strtol_l.isra.0+0xb4>
 8008c7c:	3c37      	subs	r4, #55	@ 0x37
 8008c7e:	e7ea      	b.n	8008c56 <_strtol_l.isra.0+0x8a>
 8008c80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c84:	2f19      	cmp	r7, #25
 8008c86:	d804      	bhi.n	8008c92 <_strtol_l.isra.0+0xc6>
 8008c88:	3c57      	subs	r4, #87	@ 0x57
 8008c8a:	e7e4      	b.n	8008c56 <_strtol_l.isra.0+0x8a>
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	e7ed      	b.n	8008c6e <_strtol_l.isra.0+0xa2>
 8008c92:	1c53      	adds	r3, r2, #1
 8008c94:	d108      	bne.n	8008ca8 <_strtol_l.isra.0+0xdc>
 8008c96:	2322      	movs	r3, #34	@ 0x22
 8008c98:	f8ce 3000 	str.w	r3, [lr]
 8008c9c:	4660      	mov	r0, ip
 8008c9e:	f1b8 0f00 	cmp.w	r8, #0
 8008ca2:	d0a0      	beq.n	8008be6 <_strtol_l.isra.0+0x1a>
 8008ca4:	1e69      	subs	r1, r5, #1
 8008ca6:	e006      	b.n	8008cb6 <_strtol_l.isra.0+0xea>
 8008ca8:	b106      	cbz	r6, 8008cac <_strtol_l.isra.0+0xe0>
 8008caa:	4240      	negs	r0, r0
 8008cac:	f1b8 0f00 	cmp.w	r8, #0
 8008cb0:	d099      	beq.n	8008be6 <_strtol_l.isra.0+0x1a>
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	d1f6      	bne.n	8008ca4 <_strtol_l.isra.0+0xd8>
 8008cb6:	f8c8 1000 	str.w	r1, [r8]
 8008cba:	e794      	b.n	8008be6 <_strtol_l.isra.0+0x1a>
 8008cbc:	0801dc01 	.word	0x0801dc01

08008cc0 <_strtol_r>:
 8008cc0:	f7ff bf84 	b.w	8008bcc <_strtol_l.isra.0>

08008cc4 <__ssputs_r>:
 8008cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	688e      	ldr	r6, [r1, #8]
 8008cca:	461f      	mov	r7, r3
 8008ccc:	42be      	cmp	r6, r7
 8008cce:	680b      	ldr	r3, [r1, #0]
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	4690      	mov	r8, r2
 8008cd6:	d82d      	bhi.n	8008d34 <__ssputs_r+0x70>
 8008cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ce0:	d026      	beq.n	8008d30 <__ssputs_r+0x6c>
 8008ce2:	6965      	ldr	r5, [r4, #20]
 8008ce4:	6909      	ldr	r1, [r1, #16]
 8008ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cea:	eba3 0901 	sub.w	r9, r3, r1
 8008cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cf2:	1c7b      	adds	r3, r7, #1
 8008cf4:	444b      	add	r3, r9
 8008cf6:	106d      	asrs	r5, r5, #1
 8008cf8:	429d      	cmp	r5, r3
 8008cfa:	bf38      	it	cc
 8008cfc:	461d      	movcc	r5, r3
 8008cfe:	0553      	lsls	r3, r2, #21
 8008d00:	d527      	bpl.n	8008d52 <__ssputs_r+0x8e>
 8008d02:	4629      	mov	r1, r5
 8008d04:	f7fc fc4a 	bl	800559c <_malloc_r>
 8008d08:	4606      	mov	r6, r0
 8008d0a:	b360      	cbz	r0, 8008d66 <__ssputs_r+0xa2>
 8008d0c:	6921      	ldr	r1, [r4, #16]
 8008d0e:	464a      	mov	r2, r9
 8008d10:	f7fd fdef 	bl	80068f2 <memcpy>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	6126      	str	r6, [r4, #16]
 8008d22:	6165      	str	r5, [r4, #20]
 8008d24:	444e      	add	r6, r9
 8008d26:	eba5 0509 	sub.w	r5, r5, r9
 8008d2a:	6026      	str	r6, [r4, #0]
 8008d2c:	60a5      	str	r5, [r4, #8]
 8008d2e:	463e      	mov	r6, r7
 8008d30:	42be      	cmp	r6, r7
 8008d32:	d900      	bls.n	8008d36 <__ssputs_r+0x72>
 8008d34:	463e      	mov	r6, r7
 8008d36:	6820      	ldr	r0, [r4, #0]
 8008d38:	4632      	mov	r2, r6
 8008d3a:	4641      	mov	r1, r8
 8008d3c:	f000 fb6a 	bl	8009414 <memmove>
 8008d40:	68a3      	ldr	r3, [r4, #8]
 8008d42:	1b9b      	subs	r3, r3, r6
 8008d44:	60a3      	str	r3, [r4, #8]
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	4433      	add	r3, r6
 8008d4a:	6023      	str	r3, [r4, #0]
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d52:	462a      	mov	r2, r5
 8008d54:	f000 ff31 	bl	8009bba <_realloc_r>
 8008d58:	4606      	mov	r6, r0
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d1e0      	bne.n	8008d20 <__ssputs_r+0x5c>
 8008d5e:	6921      	ldr	r1, [r4, #16]
 8008d60:	4650      	mov	r0, sl
 8008d62:	f7fe fc35 	bl	80075d0 <_free_r>
 8008d66:	230c      	movs	r3, #12
 8008d68:	f8ca 3000 	str.w	r3, [sl]
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	e7e9      	b.n	8008d4e <__ssputs_r+0x8a>
	...

08008d7c <_svfiprintf_r>:
 8008d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	4698      	mov	r8, r3
 8008d82:	898b      	ldrh	r3, [r1, #12]
 8008d84:	061b      	lsls	r3, r3, #24
 8008d86:	b09d      	sub	sp, #116	@ 0x74
 8008d88:	4607      	mov	r7, r0
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	d510      	bpl.n	8008db2 <_svfiprintf_r+0x36>
 8008d90:	690b      	ldr	r3, [r1, #16]
 8008d92:	b973      	cbnz	r3, 8008db2 <_svfiprintf_r+0x36>
 8008d94:	2140      	movs	r1, #64	@ 0x40
 8008d96:	f7fc fc01 	bl	800559c <_malloc_r>
 8008d9a:	6028      	str	r0, [r5, #0]
 8008d9c:	6128      	str	r0, [r5, #16]
 8008d9e:	b930      	cbnz	r0, 8008dae <_svfiprintf_r+0x32>
 8008da0:	230c      	movs	r3, #12
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	b01d      	add	sp, #116	@ 0x74
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	2340      	movs	r3, #64	@ 0x40
 8008db0:	616b      	str	r3, [r5, #20]
 8008db2:	2300      	movs	r3, #0
 8008db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db6:	2320      	movs	r3, #32
 8008db8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc0:	2330      	movs	r3, #48	@ 0x30
 8008dc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f60 <_svfiprintf_r+0x1e4>
 8008dc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dca:	f04f 0901 	mov.w	r9, #1
 8008dce:	4623      	mov	r3, r4
 8008dd0:	469a      	mov	sl, r3
 8008dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dd6:	b10a      	cbz	r2, 8008ddc <_svfiprintf_r+0x60>
 8008dd8:	2a25      	cmp	r2, #37	@ 0x25
 8008dda:	d1f9      	bne.n	8008dd0 <_svfiprintf_r+0x54>
 8008ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8008de0:	d00b      	beq.n	8008dfa <_svfiprintf_r+0x7e>
 8008de2:	465b      	mov	r3, fp
 8008de4:	4622      	mov	r2, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	4638      	mov	r0, r7
 8008dea:	f7ff ff6b 	bl	8008cc4 <__ssputs_r>
 8008dee:	3001      	adds	r0, #1
 8008df0:	f000 80a7 	beq.w	8008f42 <_svfiprintf_r+0x1c6>
 8008df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df6:	445a      	add	r2, fp
 8008df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 809f 	beq.w	8008f42 <_svfiprintf_r+0x1c6>
 8008e04:	2300      	movs	r3, #0
 8008e06:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e0e:	f10a 0a01 	add.w	sl, sl, #1
 8008e12:	9304      	str	r3, [sp, #16]
 8008e14:	9307      	str	r3, [sp, #28]
 8008e16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e1c:	4654      	mov	r4, sl
 8008e1e:	2205      	movs	r2, #5
 8008e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e24:	484e      	ldr	r0, [pc, #312]	@ (8008f60 <_svfiprintf_r+0x1e4>)
 8008e26:	f7f7 f9eb 	bl	8000200 <memchr>
 8008e2a:	9a04      	ldr	r2, [sp, #16]
 8008e2c:	b9d8      	cbnz	r0, 8008e66 <_svfiprintf_r+0xea>
 8008e2e:	06d0      	lsls	r0, r2, #27
 8008e30:	bf44      	itt	mi
 8008e32:	2320      	movmi	r3, #32
 8008e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e38:	0711      	lsls	r1, r2, #28
 8008e3a:	bf44      	itt	mi
 8008e3c:	232b      	movmi	r3, #43	@ 0x2b
 8008e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e42:	f89a 3000 	ldrb.w	r3, [sl]
 8008e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e48:	d015      	beq.n	8008e76 <_svfiprintf_r+0xfa>
 8008e4a:	9a07      	ldr	r2, [sp, #28]
 8008e4c:	4654      	mov	r4, sl
 8008e4e:	2000      	movs	r0, #0
 8008e50:	f04f 0c0a 	mov.w	ip, #10
 8008e54:	4621      	mov	r1, r4
 8008e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5a:	3b30      	subs	r3, #48	@ 0x30
 8008e5c:	2b09      	cmp	r3, #9
 8008e5e:	d94b      	bls.n	8008ef8 <_svfiprintf_r+0x17c>
 8008e60:	b1b0      	cbz	r0, 8008e90 <_svfiprintf_r+0x114>
 8008e62:	9207      	str	r2, [sp, #28]
 8008e64:	e014      	b.n	8008e90 <_svfiprintf_r+0x114>
 8008e66:	eba0 0308 	sub.w	r3, r0, r8
 8008e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	46a2      	mov	sl, r4
 8008e74:	e7d2      	b.n	8008e1c <_svfiprintf_r+0xa0>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	1d19      	adds	r1, r3, #4
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	9103      	str	r1, [sp, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfbb      	ittet	lt
 8008e82:	425b      	neglt	r3, r3
 8008e84:	f042 0202 	orrlt.w	r2, r2, #2
 8008e88:	9307      	strge	r3, [sp, #28]
 8008e8a:	9307      	strlt	r3, [sp, #28]
 8008e8c:	bfb8      	it	lt
 8008e8e:	9204      	strlt	r2, [sp, #16]
 8008e90:	7823      	ldrb	r3, [r4, #0]
 8008e92:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e94:	d10a      	bne.n	8008eac <_svfiprintf_r+0x130>
 8008e96:	7863      	ldrb	r3, [r4, #1]
 8008e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e9a:	d132      	bne.n	8008f02 <_svfiprintf_r+0x186>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	1d1a      	adds	r2, r3, #4
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	9203      	str	r2, [sp, #12]
 8008ea4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ea8:	3402      	adds	r4, #2
 8008eaa:	9305      	str	r3, [sp, #20]
 8008eac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f70 <_svfiprintf_r+0x1f4>
 8008eb0:	7821      	ldrb	r1, [r4, #0]
 8008eb2:	2203      	movs	r2, #3
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	f7f7 f9a3 	bl	8000200 <memchr>
 8008eba:	b138      	cbz	r0, 8008ecc <_svfiprintf_r+0x150>
 8008ebc:	9b04      	ldr	r3, [sp, #16]
 8008ebe:	eba0 000a 	sub.w	r0, r0, sl
 8008ec2:	2240      	movs	r2, #64	@ 0x40
 8008ec4:	4082      	lsls	r2, r0
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	3401      	adds	r4, #1
 8008eca:	9304      	str	r3, [sp, #16]
 8008ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed0:	4824      	ldr	r0, [pc, #144]	@ (8008f64 <_svfiprintf_r+0x1e8>)
 8008ed2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ed6:	2206      	movs	r2, #6
 8008ed8:	f7f7 f992 	bl	8000200 <memchr>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d036      	beq.n	8008f4e <_svfiprintf_r+0x1d2>
 8008ee0:	4b21      	ldr	r3, [pc, #132]	@ (8008f68 <_svfiprintf_r+0x1ec>)
 8008ee2:	bb1b      	cbnz	r3, 8008f2c <_svfiprintf_r+0x1b0>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	3307      	adds	r3, #7
 8008ee8:	f023 0307 	bic.w	r3, r3, #7
 8008eec:	3308      	adds	r3, #8
 8008eee:	9303      	str	r3, [sp, #12]
 8008ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef2:	4433      	add	r3, r6
 8008ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ef6:	e76a      	b.n	8008dce <_svfiprintf_r+0x52>
 8008ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008efc:	460c      	mov	r4, r1
 8008efe:	2001      	movs	r0, #1
 8008f00:	e7a8      	b.n	8008e54 <_svfiprintf_r+0xd8>
 8008f02:	2300      	movs	r3, #0
 8008f04:	3401      	adds	r4, #1
 8008f06:	9305      	str	r3, [sp, #20]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	f04f 0c0a 	mov.w	ip, #10
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f14:	3a30      	subs	r2, #48	@ 0x30
 8008f16:	2a09      	cmp	r2, #9
 8008f18:	d903      	bls.n	8008f22 <_svfiprintf_r+0x1a6>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0c6      	beq.n	8008eac <_svfiprintf_r+0x130>
 8008f1e:	9105      	str	r1, [sp, #20]
 8008f20:	e7c4      	b.n	8008eac <_svfiprintf_r+0x130>
 8008f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f26:	4604      	mov	r4, r0
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e7f0      	b.n	8008f0e <_svfiprintf_r+0x192>
 8008f2c:	ab03      	add	r3, sp, #12
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	462a      	mov	r2, r5
 8008f32:	4b0e      	ldr	r3, [pc, #56]	@ (8008f6c <_svfiprintf_r+0x1f0>)
 8008f34:	a904      	add	r1, sp, #16
 8008f36:	4638      	mov	r0, r7
 8008f38:	f7fc fc5c 	bl	80057f4 <_printf_float>
 8008f3c:	1c42      	adds	r2, r0, #1
 8008f3e:	4606      	mov	r6, r0
 8008f40:	d1d6      	bne.n	8008ef0 <_svfiprintf_r+0x174>
 8008f42:	89ab      	ldrh	r3, [r5, #12]
 8008f44:	065b      	lsls	r3, r3, #25
 8008f46:	f53f af2d 	bmi.w	8008da4 <_svfiprintf_r+0x28>
 8008f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f4c:	e72c      	b.n	8008da8 <_svfiprintf_r+0x2c>
 8008f4e:	ab03      	add	r3, sp, #12
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	462a      	mov	r2, r5
 8008f54:	4b05      	ldr	r3, [pc, #20]	@ (8008f6c <_svfiprintf_r+0x1f0>)
 8008f56:	a904      	add	r1, sp, #16
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7fc fee3 	bl	8005d24 <_printf_i>
 8008f5e:	e7ed      	b.n	8008f3c <_svfiprintf_r+0x1c0>
 8008f60:	0801d9f9 	.word	0x0801d9f9
 8008f64:	0801da03 	.word	0x0801da03
 8008f68:	080057f5 	.word	0x080057f5
 8008f6c:	08008cc5 	.word	0x08008cc5
 8008f70:	0801d9ff 	.word	0x0801d9ff

08008f74 <__sfputc_r>:
 8008f74:	6893      	ldr	r3, [r2, #8]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	b410      	push	{r4}
 8008f7c:	6093      	str	r3, [r2, #8]
 8008f7e:	da08      	bge.n	8008f92 <__sfputc_r+0x1e>
 8008f80:	6994      	ldr	r4, [r2, #24]
 8008f82:	42a3      	cmp	r3, r4
 8008f84:	db01      	blt.n	8008f8a <__sfputc_r+0x16>
 8008f86:	290a      	cmp	r1, #10
 8008f88:	d103      	bne.n	8008f92 <__sfputc_r+0x1e>
 8008f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f8e:	f7fd bb8c 	b.w	80066aa <__swbuf_r>
 8008f92:	6813      	ldr	r3, [r2, #0]
 8008f94:	1c58      	adds	r0, r3, #1
 8008f96:	6010      	str	r0, [r2, #0]
 8008f98:	7019      	strb	r1, [r3, #0]
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <__sfputs_r>:
 8008fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	460f      	mov	r7, r1
 8008fa8:	4614      	mov	r4, r2
 8008faa:	18d5      	adds	r5, r2, r3
 8008fac:	42ac      	cmp	r4, r5
 8008fae:	d101      	bne.n	8008fb4 <__sfputs_r+0x12>
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e007      	b.n	8008fc4 <__sfputs_r+0x22>
 8008fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb8:	463a      	mov	r2, r7
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7ff ffda 	bl	8008f74 <__sfputc_r>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d1f3      	bne.n	8008fac <__sfputs_r+0xa>
 8008fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fc8 <_vfiprintf_r>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	460d      	mov	r5, r1
 8008fce:	b09d      	sub	sp, #116	@ 0x74
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	4698      	mov	r8, r3
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	b118      	cbz	r0, 8008fe0 <_vfiprintf_r+0x18>
 8008fd8:	6a03      	ldr	r3, [r0, #32]
 8008fda:	b90b      	cbnz	r3, 8008fe0 <_vfiprintf_r+0x18>
 8008fdc:	f7fd fa5a 	bl	8006494 <__sinit>
 8008fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fe2:	07d9      	lsls	r1, r3, #31
 8008fe4:	d405      	bmi.n	8008ff2 <_vfiprintf_r+0x2a>
 8008fe6:	89ab      	ldrh	r3, [r5, #12]
 8008fe8:	059a      	lsls	r2, r3, #22
 8008fea:	d402      	bmi.n	8008ff2 <_vfiprintf_r+0x2a>
 8008fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fee:	f7fd fc7e 	bl	80068ee <__retarget_lock_acquire_recursive>
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	071b      	lsls	r3, r3, #28
 8008ff6:	d501      	bpl.n	8008ffc <_vfiprintf_r+0x34>
 8008ff8:	692b      	ldr	r3, [r5, #16]
 8008ffa:	b99b      	cbnz	r3, 8009024 <_vfiprintf_r+0x5c>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7fd fb92 	bl	8006728 <__swsetup_r>
 8009004:	b170      	cbz	r0, 8009024 <_vfiprintf_r+0x5c>
 8009006:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009008:	07dc      	lsls	r4, r3, #31
 800900a:	d504      	bpl.n	8009016 <_vfiprintf_r+0x4e>
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	b01d      	add	sp, #116	@ 0x74
 8009012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	0598      	lsls	r0, r3, #22
 800901a:	d4f7      	bmi.n	800900c <_vfiprintf_r+0x44>
 800901c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800901e:	f7fd fc67 	bl	80068f0 <__retarget_lock_release_recursive>
 8009022:	e7f3      	b.n	800900c <_vfiprintf_r+0x44>
 8009024:	2300      	movs	r3, #0
 8009026:	9309      	str	r3, [sp, #36]	@ 0x24
 8009028:	2320      	movs	r3, #32
 800902a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800902e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009032:	2330      	movs	r3, #48	@ 0x30
 8009034:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091e4 <_vfiprintf_r+0x21c>
 8009038:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800903c:	f04f 0901 	mov.w	r9, #1
 8009040:	4623      	mov	r3, r4
 8009042:	469a      	mov	sl, r3
 8009044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009048:	b10a      	cbz	r2, 800904e <_vfiprintf_r+0x86>
 800904a:	2a25      	cmp	r2, #37	@ 0x25
 800904c:	d1f9      	bne.n	8009042 <_vfiprintf_r+0x7a>
 800904e:	ebba 0b04 	subs.w	fp, sl, r4
 8009052:	d00b      	beq.n	800906c <_vfiprintf_r+0xa4>
 8009054:	465b      	mov	r3, fp
 8009056:	4622      	mov	r2, r4
 8009058:	4629      	mov	r1, r5
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff ffa1 	bl	8008fa2 <__sfputs_r>
 8009060:	3001      	adds	r0, #1
 8009062:	f000 80a7 	beq.w	80091b4 <_vfiprintf_r+0x1ec>
 8009066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009068:	445a      	add	r2, fp
 800906a:	9209      	str	r2, [sp, #36]	@ 0x24
 800906c:	f89a 3000 	ldrb.w	r3, [sl]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 809f 	beq.w	80091b4 <_vfiprintf_r+0x1ec>
 8009076:	2300      	movs	r3, #0
 8009078:	f04f 32ff 	mov.w	r2, #4294967295
 800907c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009080:	f10a 0a01 	add.w	sl, sl, #1
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800908c:	931a      	str	r3, [sp, #104]	@ 0x68
 800908e:	4654      	mov	r4, sl
 8009090:	2205      	movs	r2, #5
 8009092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009096:	4853      	ldr	r0, [pc, #332]	@ (80091e4 <_vfiprintf_r+0x21c>)
 8009098:	f7f7 f8b2 	bl	8000200 <memchr>
 800909c:	9a04      	ldr	r2, [sp, #16]
 800909e:	b9d8      	cbnz	r0, 80090d8 <_vfiprintf_r+0x110>
 80090a0:	06d1      	lsls	r1, r2, #27
 80090a2:	bf44      	itt	mi
 80090a4:	2320      	movmi	r3, #32
 80090a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090aa:	0713      	lsls	r3, r2, #28
 80090ac:	bf44      	itt	mi
 80090ae:	232b      	movmi	r3, #43	@ 0x2b
 80090b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090b4:	f89a 3000 	ldrb.w	r3, [sl]
 80090b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ba:	d015      	beq.n	80090e8 <_vfiprintf_r+0x120>
 80090bc:	9a07      	ldr	r2, [sp, #28]
 80090be:	4654      	mov	r4, sl
 80090c0:	2000      	movs	r0, #0
 80090c2:	f04f 0c0a 	mov.w	ip, #10
 80090c6:	4621      	mov	r1, r4
 80090c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090cc:	3b30      	subs	r3, #48	@ 0x30
 80090ce:	2b09      	cmp	r3, #9
 80090d0:	d94b      	bls.n	800916a <_vfiprintf_r+0x1a2>
 80090d2:	b1b0      	cbz	r0, 8009102 <_vfiprintf_r+0x13a>
 80090d4:	9207      	str	r2, [sp, #28]
 80090d6:	e014      	b.n	8009102 <_vfiprintf_r+0x13a>
 80090d8:	eba0 0308 	sub.w	r3, r0, r8
 80090dc:	fa09 f303 	lsl.w	r3, r9, r3
 80090e0:	4313      	orrs	r3, r2
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	46a2      	mov	sl, r4
 80090e6:	e7d2      	b.n	800908e <_vfiprintf_r+0xc6>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d19      	adds	r1, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9103      	str	r1, [sp, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfbb      	ittet	lt
 80090f4:	425b      	neglt	r3, r3
 80090f6:	f042 0202 	orrlt.w	r2, r2, #2
 80090fa:	9307      	strge	r3, [sp, #28]
 80090fc:	9307      	strlt	r3, [sp, #28]
 80090fe:	bfb8      	it	lt
 8009100:	9204      	strlt	r2, [sp, #16]
 8009102:	7823      	ldrb	r3, [r4, #0]
 8009104:	2b2e      	cmp	r3, #46	@ 0x2e
 8009106:	d10a      	bne.n	800911e <_vfiprintf_r+0x156>
 8009108:	7863      	ldrb	r3, [r4, #1]
 800910a:	2b2a      	cmp	r3, #42	@ 0x2a
 800910c:	d132      	bne.n	8009174 <_vfiprintf_r+0x1ac>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	1d1a      	adds	r2, r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9203      	str	r2, [sp, #12]
 8009116:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800911a:	3402      	adds	r4, #2
 800911c:	9305      	str	r3, [sp, #20]
 800911e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091f4 <_vfiprintf_r+0x22c>
 8009122:	7821      	ldrb	r1, [r4, #0]
 8009124:	2203      	movs	r2, #3
 8009126:	4650      	mov	r0, sl
 8009128:	f7f7 f86a 	bl	8000200 <memchr>
 800912c:	b138      	cbz	r0, 800913e <_vfiprintf_r+0x176>
 800912e:	9b04      	ldr	r3, [sp, #16]
 8009130:	eba0 000a 	sub.w	r0, r0, sl
 8009134:	2240      	movs	r2, #64	@ 0x40
 8009136:	4082      	lsls	r2, r0
 8009138:	4313      	orrs	r3, r2
 800913a:	3401      	adds	r4, #1
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009142:	4829      	ldr	r0, [pc, #164]	@ (80091e8 <_vfiprintf_r+0x220>)
 8009144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009148:	2206      	movs	r2, #6
 800914a:	f7f7 f859 	bl	8000200 <memchr>
 800914e:	2800      	cmp	r0, #0
 8009150:	d03f      	beq.n	80091d2 <_vfiprintf_r+0x20a>
 8009152:	4b26      	ldr	r3, [pc, #152]	@ (80091ec <_vfiprintf_r+0x224>)
 8009154:	bb1b      	cbnz	r3, 800919e <_vfiprintf_r+0x1d6>
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	3307      	adds	r3, #7
 800915a:	f023 0307 	bic.w	r3, r3, #7
 800915e:	3308      	adds	r3, #8
 8009160:	9303      	str	r3, [sp, #12]
 8009162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009164:	443b      	add	r3, r7
 8009166:	9309      	str	r3, [sp, #36]	@ 0x24
 8009168:	e76a      	b.n	8009040 <_vfiprintf_r+0x78>
 800916a:	fb0c 3202 	mla	r2, ip, r2, r3
 800916e:	460c      	mov	r4, r1
 8009170:	2001      	movs	r0, #1
 8009172:	e7a8      	b.n	80090c6 <_vfiprintf_r+0xfe>
 8009174:	2300      	movs	r3, #0
 8009176:	3401      	adds	r4, #1
 8009178:	9305      	str	r3, [sp, #20]
 800917a:	4619      	mov	r1, r3
 800917c:	f04f 0c0a 	mov.w	ip, #10
 8009180:	4620      	mov	r0, r4
 8009182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009186:	3a30      	subs	r2, #48	@ 0x30
 8009188:	2a09      	cmp	r2, #9
 800918a:	d903      	bls.n	8009194 <_vfiprintf_r+0x1cc>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0c6      	beq.n	800911e <_vfiprintf_r+0x156>
 8009190:	9105      	str	r1, [sp, #20]
 8009192:	e7c4      	b.n	800911e <_vfiprintf_r+0x156>
 8009194:	fb0c 2101 	mla	r1, ip, r1, r2
 8009198:	4604      	mov	r4, r0
 800919a:	2301      	movs	r3, #1
 800919c:	e7f0      	b.n	8009180 <_vfiprintf_r+0x1b8>
 800919e:	ab03      	add	r3, sp, #12
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	462a      	mov	r2, r5
 80091a4:	4b12      	ldr	r3, [pc, #72]	@ (80091f0 <_vfiprintf_r+0x228>)
 80091a6:	a904      	add	r1, sp, #16
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7fc fb23 	bl	80057f4 <_printf_float>
 80091ae:	4607      	mov	r7, r0
 80091b0:	1c78      	adds	r0, r7, #1
 80091b2:	d1d6      	bne.n	8009162 <_vfiprintf_r+0x19a>
 80091b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091b6:	07d9      	lsls	r1, r3, #31
 80091b8:	d405      	bmi.n	80091c6 <_vfiprintf_r+0x1fe>
 80091ba:	89ab      	ldrh	r3, [r5, #12]
 80091bc:	059a      	lsls	r2, r3, #22
 80091be:	d402      	bmi.n	80091c6 <_vfiprintf_r+0x1fe>
 80091c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091c2:	f7fd fb95 	bl	80068f0 <__retarget_lock_release_recursive>
 80091c6:	89ab      	ldrh	r3, [r5, #12]
 80091c8:	065b      	lsls	r3, r3, #25
 80091ca:	f53f af1f 	bmi.w	800900c <_vfiprintf_r+0x44>
 80091ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091d0:	e71e      	b.n	8009010 <_vfiprintf_r+0x48>
 80091d2:	ab03      	add	r3, sp, #12
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	462a      	mov	r2, r5
 80091d8:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <_vfiprintf_r+0x228>)
 80091da:	a904      	add	r1, sp, #16
 80091dc:	4630      	mov	r0, r6
 80091de:	f7fc fda1 	bl	8005d24 <_printf_i>
 80091e2:	e7e4      	b.n	80091ae <_vfiprintf_r+0x1e6>
 80091e4:	0801d9f9 	.word	0x0801d9f9
 80091e8:	0801da03 	.word	0x0801da03
 80091ec:	080057f5 	.word	0x080057f5
 80091f0:	08008fa3 	.word	0x08008fa3
 80091f4:	0801d9ff 	.word	0x0801d9ff

080091f8 <__sflush_r>:
 80091f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	0716      	lsls	r6, r2, #28
 8009202:	4605      	mov	r5, r0
 8009204:	460c      	mov	r4, r1
 8009206:	d454      	bmi.n	80092b2 <__sflush_r+0xba>
 8009208:	684b      	ldr	r3, [r1, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	dc02      	bgt.n	8009214 <__sflush_r+0x1c>
 800920e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009210:	2b00      	cmp	r3, #0
 8009212:	dd48      	ble.n	80092a6 <__sflush_r+0xae>
 8009214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009216:	2e00      	cmp	r6, #0
 8009218:	d045      	beq.n	80092a6 <__sflush_r+0xae>
 800921a:	2300      	movs	r3, #0
 800921c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009220:	682f      	ldr	r7, [r5, #0]
 8009222:	6a21      	ldr	r1, [r4, #32]
 8009224:	602b      	str	r3, [r5, #0]
 8009226:	d030      	beq.n	800928a <__sflush_r+0x92>
 8009228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	0759      	lsls	r1, r3, #29
 800922e:	d505      	bpl.n	800923c <__sflush_r+0x44>
 8009230:	6863      	ldr	r3, [r4, #4]
 8009232:	1ad2      	subs	r2, r2, r3
 8009234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009236:	b10b      	cbz	r3, 800923c <__sflush_r+0x44>
 8009238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800923a:	1ad2      	subs	r2, r2, r3
 800923c:	2300      	movs	r3, #0
 800923e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009240:	6a21      	ldr	r1, [r4, #32]
 8009242:	4628      	mov	r0, r5
 8009244:	47b0      	blx	r6
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	d106      	bne.n	800925a <__sflush_r+0x62>
 800924c:	6829      	ldr	r1, [r5, #0]
 800924e:	291d      	cmp	r1, #29
 8009250:	d82b      	bhi.n	80092aa <__sflush_r+0xb2>
 8009252:	4a2a      	ldr	r2, [pc, #168]	@ (80092fc <__sflush_r+0x104>)
 8009254:	40ca      	lsrs	r2, r1
 8009256:	07d6      	lsls	r6, r2, #31
 8009258:	d527      	bpl.n	80092aa <__sflush_r+0xb2>
 800925a:	2200      	movs	r2, #0
 800925c:	6062      	str	r2, [r4, #4]
 800925e:	04d9      	lsls	r1, r3, #19
 8009260:	6922      	ldr	r2, [r4, #16]
 8009262:	6022      	str	r2, [r4, #0]
 8009264:	d504      	bpl.n	8009270 <__sflush_r+0x78>
 8009266:	1c42      	adds	r2, r0, #1
 8009268:	d101      	bne.n	800926e <__sflush_r+0x76>
 800926a:	682b      	ldr	r3, [r5, #0]
 800926c:	b903      	cbnz	r3, 8009270 <__sflush_r+0x78>
 800926e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009272:	602f      	str	r7, [r5, #0]
 8009274:	b1b9      	cbz	r1, 80092a6 <__sflush_r+0xae>
 8009276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800927a:	4299      	cmp	r1, r3
 800927c:	d002      	beq.n	8009284 <__sflush_r+0x8c>
 800927e:	4628      	mov	r0, r5
 8009280:	f7fe f9a6 	bl	80075d0 <_free_r>
 8009284:	2300      	movs	r3, #0
 8009286:	6363      	str	r3, [r4, #52]	@ 0x34
 8009288:	e00d      	b.n	80092a6 <__sflush_r+0xae>
 800928a:	2301      	movs	r3, #1
 800928c:	4628      	mov	r0, r5
 800928e:	47b0      	blx	r6
 8009290:	4602      	mov	r2, r0
 8009292:	1c50      	adds	r0, r2, #1
 8009294:	d1c9      	bne.n	800922a <__sflush_r+0x32>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0c6      	beq.n	800922a <__sflush_r+0x32>
 800929c:	2b1d      	cmp	r3, #29
 800929e:	d001      	beq.n	80092a4 <__sflush_r+0xac>
 80092a0:	2b16      	cmp	r3, #22
 80092a2:	d11e      	bne.n	80092e2 <__sflush_r+0xea>
 80092a4:	602f      	str	r7, [r5, #0]
 80092a6:	2000      	movs	r0, #0
 80092a8:	e022      	b.n	80092f0 <__sflush_r+0xf8>
 80092aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ae:	b21b      	sxth	r3, r3
 80092b0:	e01b      	b.n	80092ea <__sflush_r+0xf2>
 80092b2:	690f      	ldr	r7, [r1, #16]
 80092b4:	2f00      	cmp	r7, #0
 80092b6:	d0f6      	beq.n	80092a6 <__sflush_r+0xae>
 80092b8:	0793      	lsls	r3, r2, #30
 80092ba:	680e      	ldr	r6, [r1, #0]
 80092bc:	bf08      	it	eq
 80092be:	694b      	ldreq	r3, [r1, #20]
 80092c0:	600f      	str	r7, [r1, #0]
 80092c2:	bf18      	it	ne
 80092c4:	2300      	movne	r3, #0
 80092c6:	eba6 0807 	sub.w	r8, r6, r7
 80092ca:	608b      	str	r3, [r1, #8]
 80092cc:	f1b8 0f00 	cmp.w	r8, #0
 80092d0:	dde9      	ble.n	80092a6 <__sflush_r+0xae>
 80092d2:	6a21      	ldr	r1, [r4, #32]
 80092d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092d6:	4643      	mov	r3, r8
 80092d8:	463a      	mov	r2, r7
 80092da:	4628      	mov	r0, r5
 80092dc:	47b0      	blx	r6
 80092de:	2800      	cmp	r0, #0
 80092e0:	dc08      	bgt.n	80092f4 <__sflush_r+0xfc>
 80092e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295
 80092f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f4:	4407      	add	r7, r0
 80092f6:	eba8 0800 	sub.w	r8, r8, r0
 80092fa:	e7e7      	b.n	80092cc <__sflush_r+0xd4>
 80092fc:	20400001 	.word	0x20400001

08009300 <_fflush_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	690b      	ldr	r3, [r1, #16]
 8009304:	4605      	mov	r5, r0
 8009306:	460c      	mov	r4, r1
 8009308:	b913      	cbnz	r3, 8009310 <_fflush_r+0x10>
 800930a:	2500      	movs	r5, #0
 800930c:	4628      	mov	r0, r5
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	b118      	cbz	r0, 800931a <_fflush_r+0x1a>
 8009312:	6a03      	ldr	r3, [r0, #32]
 8009314:	b90b      	cbnz	r3, 800931a <_fflush_r+0x1a>
 8009316:	f7fd f8bd 	bl	8006494 <__sinit>
 800931a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0f3      	beq.n	800930a <_fflush_r+0xa>
 8009322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009324:	07d0      	lsls	r0, r2, #31
 8009326:	d404      	bmi.n	8009332 <_fflush_r+0x32>
 8009328:	0599      	lsls	r1, r3, #22
 800932a:	d402      	bmi.n	8009332 <_fflush_r+0x32>
 800932c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800932e:	f7fd fade 	bl	80068ee <__retarget_lock_acquire_recursive>
 8009332:	4628      	mov	r0, r5
 8009334:	4621      	mov	r1, r4
 8009336:	f7ff ff5f 	bl	80091f8 <__sflush_r>
 800933a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800933c:	07da      	lsls	r2, r3, #31
 800933e:	4605      	mov	r5, r0
 8009340:	d4e4      	bmi.n	800930c <_fflush_r+0xc>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	059b      	lsls	r3, r3, #22
 8009346:	d4e1      	bmi.n	800930c <_fflush_r+0xc>
 8009348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800934a:	f7fd fad1 	bl	80068f0 <__retarget_lock_release_recursive>
 800934e:	e7dd      	b.n	800930c <_fflush_r+0xc>

08009350 <__swhatbuf_r>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	460c      	mov	r4, r1
 8009354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009358:	2900      	cmp	r1, #0
 800935a:	b096      	sub	sp, #88	@ 0x58
 800935c:	4615      	mov	r5, r2
 800935e:	461e      	mov	r6, r3
 8009360:	da0d      	bge.n	800937e <__swhatbuf_r+0x2e>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009368:	f04f 0100 	mov.w	r1, #0
 800936c:	bf14      	ite	ne
 800936e:	2340      	movne	r3, #64	@ 0x40
 8009370:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009374:	2000      	movs	r0, #0
 8009376:	6031      	str	r1, [r6, #0]
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	b016      	add	sp, #88	@ 0x58
 800937c:	bd70      	pop	{r4, r5, r6, pc}
 800937e:	466a      	mov	r2, sp
 8009380:	f000 f874 	bl	800946c <_fstat_r>
 8009384:	2800      	cmp	r0, #0
 8009386:	dbec      	blt.n	8009362 <__swhatbuf_r+0x12>
 8009388:	9901      	ldr	r1, [sp, #4]
 800938a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800938e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009392:	4259      	negs	r1, r3
 8009394:	4159      	adcs	r1, r3
 8009396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800939a:	e7eb      	b.n	8009374 <__swhatbuf_r+0x24>

0800939c <__smakebuf_r>:
 800939c:	898b      	ldrh	r3, [r1, #12]
 800939e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093a0:	079d      	lsls	r5, r3, #30
 80093a2:	4606      	mov	r6, r0
 80093a4:	460c      	mov	r4, r1
 80093a6:	d507      	bpl.n	80093b8 <__smakebuf_r+0x1c>
 80093a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	6123      	str	r3, [r4, #16]
 80093b0:	2301      	movs	r3, #1
 80093b2:	6163      	str	r3, [r4, #20]
 80093b4:	b003      	add	sp, #12
 80093b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093b8:	ab01      	add	r3, sp, #4
 80093ba:	466a      	mov	r2, sp
 80093bc:	f7ff ffc8 	bl	8009350 <__swhatbuf_r>
 80093c0:	9f00      	ldr	r7, [sp, #0]
 80093c2:	4605      	mov	r5, r0
 80093c4:	4639      	mov	r1, r7
 80093c6:	4630      	mov	r0, r6
 80093c8:	f7fc f8e8 	bl	800559c <_malloc_r>
 80093cc:	b948      	cbnz	r0, 80093e2 <__smakebuf_r+0x46>
 80093ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d2:	059a      	lsls	r2, r3, #22
 80093d4:	d4ee      	bmi.n	80093b4 <__smakebuf_r+0x18>
 80093d6:	f023 0303 	bic.w	r3, r3, #3
 80093da:	f043 0302 	orr.w	r3, r3, #2
 80093de:	81a3      	strh	r3, [r4, #12]
 80093e0:	e7e2      	b.n	80093a8 <__smakebuf_r+0xc>
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	6020      	str	r0, [r4, #0]
 80093e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093f2:	b15b      	cbz	r3, 800940c <__smakebuf_r+0x70>
 80093f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093f8:	4630      	mov	r0, r6
 80093fa:	f000 f849 	bl	8009490 <_isatty_r>
 80093fe:	b128      	cbz	r0, 800940c <__smakebuf_r+0x70>
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	f023 0303 	bic.w	r3, r3, #3
 8009406:	f043 0301 	orr.w	r3, r3, #1
 800940a:	81a3      	strh	r3, [r4, #12]
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	431d      	orrs	r5, r3
 8009410:	81a5      	strh	r5, [r4, #12]
 8009412:	e7cf      	b.n	80093b4 <__smakebuf_r+0x18>

08009414 <memmove>:
 8009414:	4288      	cmp	r0, r1
 8009416:	b510      	push	{r4, lr}
 8009418:	eb01 0402 	add.w	r4, r1, r2
 800941c:	d902      	bls.n	8009424 <memmove+0x10>
 800941e:	4284      	cmp	r4, r0
 8009420:	4623      	mov	r3, r4
 8009422:	d807      	bhi.n	8009434 <memmove+0x20>
 8009424:	1e43      	subs	r3, r0, #1
 8009426:	42a1      	cmp	r1, r4
 8009428:	d008      	beq.n	800943c <memmove+0x28>
 800942a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800942e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009432:	e7f8      	b.n	8009426 <memmove+0x12>
 8009434:	4402      	add	r2, r0
 8009436:	4601      	mov	r1, r0
 8009438:	428a      	cmp	r2, r1
 800943a:	d100      	bne.n	800943e <memmove+0x2a>
 800943c:	bd10      	pop	{r4, pc}
 800943e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009446:	e7f7      	b.n	8009438 <memmove+0x24>

08009448 <strncmp>:
 8009448:	b510      	push	{r4, lr}
 800944a:	b16a      	cbz	r2, 8009468 <strncmp+0x20>
 800944c:	3901      	subs	r1, #1
 800944e:	1884      	adds	r4, r0, r2
 8009450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009454:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009458:	429a      	cmp	r2, r3
 800945a:	d103      	bne.n	8009464 <strncmp+0x1c>
 800945c:	42a0      	cmp	r0, r4
 800945e:	d001      	beq.n	8009464 <strncmp+0x1c>
 8009460:	2a00      	cmp	r2, #0
 8009462:	d1f5      	bne.n	8009450 <strncmp+0x8>
 8009464:	1ad0      	subs	r0, r2, r3
 8009466:	bd10      	pop	{r4, pc}
 8009468:	4610      	mov	r0, r2
 800946a:	e7fc      	b.n	8009466 <strncmp+0x1e>

0800946c <_fstat_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d07      	ldr	r5, [pc, #28]	@ (800948c <_fstat_r+0x20>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	4611      	mov	r1, r2
 8009478:	602b      	str	r3, [r5, #0]
 800947a:	f7f8 ffdc 	bl	8002436 <_fstat>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	d102      	bne.n	8009488 <_fstat_r+0x1c>
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	b103      	cbz	r3, 8009488 <_fstat_r+0x1c>
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	bd38      	pop	{r3, r4, r5, pc}
 800948a:	bf00      	nop
 800948c:	2005c664 	.word	0x2005c664

08009490 <_isatty_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d06      	ldr	r5, [pc, #24]	@ (80094ac <_isatty_r+0x1c>)
 8009494:	2300      	movs	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	4608      	mov	r0, r1
 800949a:	602b      	str	r3, [r5, #0]
 800949c:	f7f8 ffdb 	bl	8002456 <_isatty>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_isatty_r+0x1a>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_isatty_r+0x1a>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	2005c664 	.word	0x2005c664

080094b0 <nan>:
 80094b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80094b8 <nan+0x8>
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	00000000 	.word	0x00000000
 80094bc:	7ff80000 	.word	0x7ff80000

080094c0 <__assert_func>:
 80094c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094c2:	4614      	mov	r4, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	4b09      	ldr	r3, [pc, #36]	@ (80094ec <__assert_func+0x2c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4605      	mov	r5, r0
 80094cc:	68d8      	ldr	r0, [r3, #12]
 80094ce:	b14c      	cbz	r4, 80094e4 <__assert_func+0x24>
 80094d0:	4b07      	ldr	r3, [pc, #28]	@ (80094f0 <__assert_func+0x30>)
 80094d2:	9100      	str	r1, [sp, #0]
 80094d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094d8:	4906      	ldr	r1, [pc, #24]	@ (80094f4 <__assert_func+0x34>)
 80094da:	462b      	mov	r3, r5
 80094dc:	f000 fba8 	bl	8009c30 <fiprintf>
 80094e0:	f000 fbb8 	bl	8009c54 <abort>
 80094e4:	4b04      	ldr	r3, [pc, #16]	@ (80094f8 <__assert_func+0x38>)
 80094e6:	461c      	mov	r4, r3
 80094e8:	e7f3      	b.n	80094d2 <__assert_func+0x12>
 80094ea:	bf00      	nop
 80094ec:	20040018 	.word	0x20040018
 80094f0:	0801da12 	.word	0x0801da12
 80094f4:	0801da1f 	.word	0x0801da1f
 80094f8:	0801da4d 	.word	0x0801da4d

080094fc <_calloc_r>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	fba1 5402 	umull	r5, r4, r1, r2
 8009502:	b934      	cbnz	r4, 8009512 <_calloc_r+0x16>
 8009504:	4629      	mov	r1, r5
 8009506:	f7fc f849 	bl	800559c <_malloc_r>
 800950a:	4606      	mov	r6, r0
 800950c:	b928      	cbnz	r0, 800951a <_calloc_r+0x1e>
 800950e:	4630      	mov	r0, r6
 8009510:	bd70      	pop	{r4, r5, r6, pc}
 8009512:	220c      	movs	r2, #12
 8009514:	6002      	str	r2, [r0, #0]
 8009516:	2600      	movs	r6, #0
 8009518:	e7f9      	b.n	800950e <_calloc_r+0x12>
 800951a:	462a      	mov	r2, r5
 800951c:	4621      	mov	r1, r4
 800951e:	f7fd f959 	bl	80067d4 <memset>
 8009522:	e7f4      	b.n	800950e <_calloc_r+0x12>

08009524 <rshift>:
 8009524:	6903      	ldr	r3, [r0, #16]
 8009526:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800952a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800952e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009532:	f100 0414 	add.w	r4, r0, #20
 8009536:	dd45      	ble.n	80095c4 <rshift+0xa0>
 8009538:	f011 011f 	ands.w	r1, r1, #31
 800953c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009540:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009544:	d10c      	bne.n	8009560 <rshift+0x3c>
 8009546:	f100 0710 	add.w	r7, r0, #16
 800954a:	4629      	mov	r1, r5
 800954c:	42b1      	cmp	r1, r6
 800954e:	d334      	bcc.n	80095ba <rshift+0x96>
 8009550:	1a9b      	subs	r3, r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	1eea      	subs	r2, r5, #3
 8009556:	4296      	cmp	r6, r2
 8009558:	bf38      	it	cc
 800955a:	2300      	movcc	r3, #0
 800955c:	4423      	add	r3, r4
 800955e:	e015      	b.n	800958c <rshift+0x68>
 8009560:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009564:	f1c1 0820 	rsb	r8, r1, #32
 8009568:	40cf      	lsrs	r7, r1
 800956a:	f105 0e04 	add.w	lr, r5, #4
 800956e:	46a1      	mov	r9, r4
 8009570:	4576      	cmp	r6, lr
 8009572:	46f4      	mov	ip, lr
 8009574:	d815      	bhi.n	80095a2 <rshift+0x7e>
 8009576:	1a9a      	subs	r2, r3, r2
 8009578:	0092      	lsls	r2, r2, #2
 800957a:	3a04      	subs	r2, #4
 800957c:	3501      	adds	r5, #1
 800957e:	42ae      	cmp	r6, r5
 8009580:	bf38      	it	cc
 8009582:	2200      	movcc	r2, #0
 8009584:	18a3      	adds	r3, r4, r2
 8009586:	50a7      	str	r7, [r4, r2]
 8009588:	b107      	cbz	r7, 800958c <rshift+0x68>
 800958a:	3304      	adds	r3, #4
 800958c:	1b1a      	subs	r2, r3, r4
 800958e:	42a3      	cmp	r3, r4
 8009590:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009594:	bf08      	it	eq
 8009596:	2300      	moveq	r3, #0
 8009598:	6102      	str	r2, [r0, #16]
 800959a:	bf08      	it	eq
 800959c:	6143      	streq	r3, [r0, #20]
 800959e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095a2:	f8dc c000 	ldr.w	ip, [ip]
 80095a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80095aa:	ea4c 0707 	orr.w	r7, ip, r7
 80095ae:	f849 7b04 	str.w	r7, [r9], #4
 80095b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095b6:	40cf      	lsrs	r7, r1
 80095b8:	e7da      	b.n	8009570 <rshift+0x4c>
 80095ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80095be:	f847 cf04 	str.w	ip, [r7, #4]!
 80095c2:	e7c3      	b.n	800954c <rshift+0x28>
 80095c4:	4623      	mov	r3, r4
 80095c6:	e7e1      	b.n	800958c <rshift+0x68>

080095c8 <__hexdig_fun>:
 80095c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80095cc:	2b09      	cmp	r3, #9
 80095ce:	d802      	bhi.n	80095d6 <__hexdig_fun+0xe>
 80095d0:	3820      	subs	r0, #32
 80095d2:	b2c0      	uxtb	r0, r0
 80095d4:	4770      	bx	lr
 80095d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80095da:	2b05      	cmp	r3, #5
 80095dc:	d801      	bhi.n	80095e2 <__hexdig_fun+0x1a>
 80095de:	3847      	subs	r0, #71	@ 0x47
 80095e0:	e7f7      	b.n	80095d2 <__hexdig_fun+0xa>
 80095e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80095e6:	2b05      	cmp	r3, #5
 80095e8:	d801      	bhi.n	80095ee <__hexdig_fun+0x26>
 80095ea:	3827      	subs	r0, #39	@ 0x27
 80095ec:	e7f1      	b.n	80095d2 <__hexdig_fun+0xa>
 80095ee:	2000      	movs	r0, #0
 80095f0:	4770      	bx	lr
	...

080095f4 <__gethex>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	b085      	sub	sp, #20
 80095fa:	468a      	mov	sl, r1
 80095fc:	9302      	str	r3, [sp, #8]
 80095fe:	680b      	ldr	r3, [r1, #0]
 8009600:	9001      	str	r0, [sp, #4]
 8009602:	4690      	mov	r8, r2
 8009604:	1c9c      	adds	r4, r3, #2
 8009606:	46a1      	mov	r9, r4
 8009608:	f814 0b01 	ldrb.w	r0, [r4], #1
 800960c:	2830      	cmp	r0, #48	@ 0x30
 800960e:	d0fa      	beq.n	8009606 <__gethex+0x12>
 8009610:	eba9 0303 	sub.w	r3, r9, r3
 8009614:	f1a3 0b02 	sub.w	fp, r3, #2
 8009618:	f7ff ffd6 	bl	80095c8 <__hexdig_fun>
 800961c:	4605      	mov	r5, r0
 800961e:	2800      	cmp	r0, #0
 8009620:	d168      	bne.n	80096f4 <__gethex+0x100>
 8009622:	49a0      	ldr	r1, [pc, #640]	@ (80098a4 <__gethex+0x2b0>)
 8009624:	2201      	movs	r2, #1
 8009626:	4648      	mov	r0, r9
 8009628:	f7ff ff0e 	bl	8009448 <strncmp>
 800962c:	4607      	mov	r7, r0
 800962e:	2800      	cmp	r0, #0
 8009630:	d167      	bne.n	8009702 <__gethex+0x10e>
 8009632:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009636:	4626      	mov	r6, r4
 8009638:	f7ff ffc6 	bl	80095c8 <__hexdig_fun>
 800963c:	2800      	cmp	r0, #0
 800963e:	d062      	beq.n	8009706 <__gethex+0x112>
 8009640:	4623      	mov	r3, r4
 8009642:	7818      	ldrb	r0, [r3, #0]
 8009644:	2830      	cmp	r0, #48	@ 0x30
 8009646:	4699      	mov	r9, r3
 8009648:	f103 0301 	add.w	r3, r3, #1
 800964c:	d0f9      	beq.n	8009642 <__gethex+0x4e>
 800964e:	f7ff ffbb 	bl	80095c8 <__hexdig_fun>
 8009652:	fab0 f580 	clz	r5, r0
 8009656:	096d      	lsrs	r5, r5, #5
 8009658:	f04f 0b01 	mov.w	fp, #1
 800965c:	464a      	mov	r2, r9
 800965e:	4616      	mov	r6, r2
 8009660:	3201      	adds	r2, #1
 8009662:	7830      	ldrb	r0, [r6, #0]
 8009664:	f7ff ffb0 	bl	80095c8 <__hexdig_fun>
 8009668:	2800      	cmp	r0, #0
 800966a:	d1f8      	bne.n	800965e <__gethex+0x6a>
 800966c:	498d      	ldr	r1, [pc, #564]	@ (80098a4 <__gethex+0x2b0>)
 800966e:	2201      	movs	r2, #1
 8009670:	4630      	mov	r0, r6
 8009672:	f7ff fee9 	bl	8009448 <strncmp>
 8009676:	2800      	cmp	r0, #0
 8009678:	d13f      	bne.n	80096fa <__gethex+0x106>
 800967a:	b944      	cbnz	r4, 800968e <__gethex+0x9a>
 800967c:	1c74      	adds	r4, r6, #1
 800967e:	4622      	mov	r2, r4
 8009680:	4616      	mov	r6, r2
 8009682:	3201      	adds	r2, #1
 8009684:	7830      	ldrb	r0, [r6, #0]
 8009686:	f7ff ff9f 	bl	80095c8 <__hexdig_fun>
 800968a:	2800      	cmp	r0, #0
 800968c:	d1f8      	bne.n	8009680 <__gethex+0x8c>
 800968e:	1ba4      	subs	r4, r4, r6
 8009690:	00a7      	lsls	r7, r4, #2
 8009692:	7833      	ldrb	r3, [r6, #0]
 8009694:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009698:	2b50      	cmp	r3, #80	@ 0x50
 800969a:	d13e      	bne.n	800971a <__gethex+0x126>
 800969c:	7873      	ldrb	r3, [r6, #1]
 800969e:	2b2b      	cmp	r3, #43	@ 0x2b
 80096a0:	d033      	beq.n	800970a <__gethex+0x116>
 80096a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80096a4:	d034      	beq.n	8009710 <__gethex+0x11c>
 80096a6:	1c71      	adds	r1, r6, #1
 80096a8:	2400      	movs	r4, #0
 80096aa:	7808      	ldrb	r0, [r1, #0]
 80096ac:	f7ff ff8c 	bl	80095c8 <__hexdig_fun>
 80096b0:	1e43      	subs	r3, r0, #1
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b18      	cmp	r3, #24
 80096b6:	d830      	bhi.n	800971a <__gethex+0x126>
 80096b8:	f1a0 0210 	sub.w	r2, r0, #16
 80096bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80096c0:	f7ff ff82 	bl	80095c8 <__hexdig_fun>
 80096c4:	f100 3cff 	add.w	ip, r0, #4294967295
 80096c8:	fa5f fc8c 	uxtb.w	ip, ip
 80096cc:	f1bc 0f18 	cmp.w	ip, #24
 80096d0:	f04f 030a 	mov.w	r3, #10
 80096d4:	d91e      	bls.n	8009714 <__gethex+0x120>
 80096d6:	b104      	cbz	r4, 80096da <__gethex+0xe6>
 80096d8:	4252      	negs	r2, r2
 80096da:	4417      	add	r7, r2
 80096dc:	f8ca 1000 	str.w	r1, [sl]
 80096e0:	b1ed      	cbz	r5, 800971e <__gethex+0x12a>
 80096e2:	f1bb 0f00 	cmp.w	fp, #0
 80096e6:	bf0c      	ite	eq
 80096e8:	2506      	moveq	r5, #6
 80096ea:	2500      	movne	r5, #0
 80096ec:	4628      	mov	r0, r5
 80096ee:	b005      	add	sp, #20
 80096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f4:	2500      	movs	r5, #0
 80096f6:	462c      	mov	r4, r5
 80096f8:	e7b0      	b.n	800965c <__gethex+0x68>
 80096fa:	2c00      	cmp	r4, #0
 80096fc:	d1c7      	bne.n	800968e <__gethex+0x9a>
 80096fe:	4627      	mov	r7, r4
 8009700:	e7c7      	b.n	8009692 <__gethex+0x9e>
 8009702:	464e      	mov	r6, r9
 8009704:	462f      	mov	r7, r5
 8009706:	2501      	movs	r5, #1
 8009708:	e7c3      	b.n	8009692 <__gethex+0x9e>
 800970a:	2400      	movs	r4, #0
 800970c:	1cb1      	adds	r1, r6, #2
 800970e:	e7cc      	b.n	80096aa <__gethex+0xb6>
 8009710:	2401      	movs	r4, #1
 8009712:	e7fb      	b.n	800970c <__gethex+0x118>
 8009714:	fb03 0002 	mla	r0, r3, r2, r0
 8009718:	e7ce      	b.n	80096b8 <__gethex+0xc4>
 800971a:	4631      	mov	r1, r6
 800971c:	e7de      	b.n	80096dc <__gethex+0xe8>
 800971e:	eba6 0309 	sub.w	r3, r6, r9
 8009722:	3b01      	subs	r3, #1
 8009724:	4629      	mov	r1, r5
 8009726:	2b07      	cmp	r3, #7
 8009728:	dc0a      	bgt.n	8009740 <__gethex+0x14c>
 800972a:	9801      	ldr	r0, [sp, #4]
 800972c:	f7fd ff9a 	bl	8007664 <_Balloc>
 8009730:	4604      	mov	r4, r0
 8009732:	b940      	cbnz	r0, 8009746 <__gethex+0x152>
 8009734:	4b5c      	ldr	r3, [pc, #368]	@ (80098a8 <__gethex+0x2b4>)
 8009736:	4602      	mov	r2, r0
 8009738:	21e4      	movs	r1, #228	@ 0xe4
 800973a:	485c      	ldr	r0, [pc, #368]	@ (80098ac <__gethex+0x2b8>)
 800973c:	f7ff fec0 	bl	80094c0 <__assert_func>
 8009740:	3101      	adds	r1, #1
 8009742:	105b      	asrs	r3, r3, #1
 8009744:	e7ef      	b.n	8009726 <__gethex+0x132>
 8009746:	f100 0a14 	add.w	sl, r0, #20
 800974a:	2300      	movs	r3, #0
 800974c:	4655      	mov	r5, sl
 800974e:	469b      	mov	fp, r3
 8009750:	45b1      	cmp	r9, r6
 8009752:	d337      	bcc.n	80097c4 <__gethex+0x1d0>
 8009754:	f845 bb04 	str.w	fp, [r5], #4
 8009758:	eba5 050a 	sub.w	r5, r5, sl
 800975c:	10ad      	asrs	r5, r5, #2
 800975e:	6125      	str	r5, [r4, #16]
 8009760:	4658      	mov	r0, fp
 8009762:	f7fe f871 	bl	8007848 <__hi0bits>
 8009766:	016d      	lsls	r5, r5, #5
 8009768:	f8d8 6000 	ldr.w	r6, [r8]
 800976c:	1a2d      	subs	r5, r5, r0
 800976e:	42b5      	cmp	r5, r6
 8009770:	dd54      	ble.n	800981c <__gethex+0x228>
 8009772:	1bad      	subs	r5, r5, r6
 8009774:	4629      	mov	r1, r5
 8009776:	4620      	mov	r0, r4
 8009778:	f7fe fbfd 	bl	8007f76 <__any_on>
 800977c:	4681      	mov	r9, r0
 800977e:	b178      	cbz	r0, 80097a0 <__gethex+0x1ac>
 8009780:	1e6b      	subs	r3, r5, #1
 8009782:	1159      	asrs	r1, r3, #5
 8009784:	f003 021f 	and.w	r2, r3, #31
 8009788:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800978c:	f04f 0901 	mov.w	r9, #1
 8009790:	fa09 f202 	lsl.w	r2, r9, r2
 8009794:	420a      	tst	r2, r1
 8009796:	d003      	beq.n	80097a0 <__gethex+0x1ac>
 8009798:	454b      	cmp	r3, r9
 800979a:	dc36      	bgt.n	800980a <__gethex+0x216>
 800979c:	f04f 0902 	mov.w	r9, #2
 80097a0:	4629      	mov	r1, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7ff febe 	bl	8009524 <rshift>
 80097a8:	442f      	add	r7, r5
 80097aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097ae:	42bb      	cmp	r3, r7
 80097b0:	da42      	bge.n	8009838 <__gethex+0x244>
 80097b2:	9801      	ldr	r0, [sp, #4]
 80097b4:	4621      	mov	r1, r4
 80097b6:	f7fd ff95 	bl	80076e4 <_Bfree>
 80097ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097bc:	2300      	movs	r3, #0
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	25a3      	movs	r5, #163	@ 0xa3
 80097c2:	e793      	b.n	80096ec <__gethex+0xf8>
 80097c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80097c8:	2a2e      	cmp	r2, #46	@ 0x2e
 80097ca:	d012      	beq.n	80097f2 <__gethex+0x1fe>
 80097cc:	2b20      	cmp	r3, #32
 80097ce:	d104      	bne.n	80097da <__gethex+0x1e6>
 80097d0:	f845 bb04 	str.w	fp, [r5], #4
 80097d4:	f04f 0b00 	mov.w	fp, #0
 80097d8:	465b      	mov	r3, fp
 80097da:	7830      	ldrb	r0, [r6, #0]
 80097dc:	9303      	str	r3, [sp, #12]
 80097de:	f7ff fef3 	bl	80095c8 <__hexdig_fun>
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	f000 000f 	and.w	r0, r0, #15
 80097e8:	4098      	lsls	r0, r3
 80097ea:	ea4b 0b00 	orr.w	fp, fp, r0
 80097ee:	3304      	adds	r3, #4
 80097f0:	e7ae      	b.n	8009750 <__gethex+0x15c>
 80097f2:	45b1      	cmp	r9, r6
 80097f4:	d8ea      	bhi.n	80097cc <__gethex+0x1d8>
 80097f6:	492b      	ldr	r1, [pc, #172]	@ (80098a4 <__gethex+0x2b0>)
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	2201      	movs	r2, #1
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff fe23 	bl	8009448 <strncmp>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	2800      	cmp	r0, #0
 8009806:	d1e1      	bne.n	80097cc <__gethex+0x1d8>
 8009808:	e7a2      	b.n	8009750 <__gethex+0x15c>
 800980a:	1ea9      	subs	r1, r5, #2
 800980c:	4620      	mov	r0, r4
 800980e:	f7fe fbb2 	bl	8007f76 <__any_on>
 8009812:	2800      	cmp	r0, #0
 8009814:	d0c2      	beq.n	800979c <__gethex+0x1a8>
 8009816:	f04f 0903 	mov.w	r9, #3
 800981a:	e7c1      	b.n	80097a0 <__gethex+0x1ac>
 800981c:	da09      	bge.n	8009832 <__gethex+0x23e>
 800981e:	1b75      	subs	r5, r6, r5
 8009820:	4621      	mov	r1, r4
 8009822:	9801      	ldr	r0, [sp, #4]
 8009824:	462a      	mov	r2, r5
 8009826:	f7fe f96d 	bl	8007b04 <__lshift>
 800982a:	1b7f      	subs	r7, r7, r5
 800982c:	4604      	mov	r4, r0
 800982e:	f100 0a14 	add.w	sl, r0, #20
 8009832:	f04f 0900 	mov.w	r9, #0
 8009836:	e7b8      	b.n	80097aa <__gethex+0x1b6>
 8009838:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800983c:	42bd      	cmp	r5, r7
 800983e:	dd6f      	ble.n	8009920 <__gethex+0x32c>
 8009840:	1bed      	subs	r5, r5, r7
 8009842:	42ae      	cmp	r6, r5
 8009844:	dc34      	bgt.n	80098b0 <__gethex+0x2bc>
 8009846:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800984a:	2b02      	cmp	r3, #2
 800984c:	d022      	beq.n	8009894 <__gethex+0x2a0>
 800984e:	2b03      	cmp	r3, #3
 8009850:	d024      	beq.n	800989c <__gethex+0x2a8>
 8009852:	2b01      	cmp	r3, #1
 8009854:	d115      	bne.n	8009882 <__gethex+0x28e>
 8009856:	42ae      	cmp	r6, r5
 8009858:	d113      	bne.n	8009882 <__gethex+0x28e>
 800985a:	2e01      	cmp	r6, #1
 800985c:	d10b      	bne.n	8009876 <__gethex+0x282>
 800985e:	9a02      	ldr	r2, [sp, #8]
 8009860:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	2301      	movs	r3, #1
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	f8ca 3000 	str.w	r3, [sl]
 800986e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009870:	2562      	movs	r5, #98	@ 0x62
 8009872:	601c      	str	r4, [r3, #0]
 8009874:	e73a      	b.n	80096ec <__gethex+0xf8>
 8009876:	1e71      	subs	r1, r6, #1
 8009878:	4620      	mov	r0, r4
 800987a:	f7fe fb7c 	bl	8007f76 <__any_on>
 800987e:	2800      	cmp	r0, #0
 8009880:	d1ed      	bne.n	800985e <__gethex+0x26a>
 8009882:	9801      	ldr	r0, [sp, #4]
 8009884:	4621      	mov	r1, r4
 8009886:	f7fd ff2d 	bl	80076e4 <_Bfree>
 800988a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800988c:	2300      	movs	r3, #0
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	2550      	movs	r5, #80	@ 0x50
 8009892:	e72b      	b.n	80096ec <__gethex+0xf8>
 8009894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1f3      	bne.n	8009882 <__gethex+0x28e>
 800989a:	e7e0      	b.n	800985e <__gethex+0x26a>
 800989c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1dd      	bne.n	800985e <__gethex+0x26a>
 80098a2:	e7ee      	b.n	8009882 <__gethex+0x28e>
 80098a4:	0801d9f7 	.word	0x0801d9f7
 80098a8:	0801d98d 	.word	0x0801d98d
 80098ac:	0801da4e 	.word	0x0801da4e
 80098b0:	1e6f      	subs	r7, r5, #1
 80098b2:	f1b9 0f00 	cmp.w	r9, #0
 80098b6:	d130      	bne.n	800991a <__gethex+0x326>
 80098b8:	b127      	cbz	r7, 80098c4 <__gethex+0x2d0>
 80098ba:	4639      	mov	r1, r7
 80098bc:	4620      	mov	r0, r4
 80098be:	f7fe fb5a 	bl	8007f76 <__any_on>
 80098c2:	4681      	mov	r9, r0
 80098c4:	117a      	asrs	r2, r7, #5
 80098c6:	2301      	movs	r3, #1
 80098c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80098cc:	f007 071f 	and.w	r7, r7, #31
 80098d0:	40bb      	lsls	r3, r7
 80098d2:	4213      	tst	r3, r2
 80098d4:	4629      	mov	r1, r5
 80098d6:	4620      	mov	r0, r4
 80098d8:	bf18      	it	ne
 80098da:	f049 0902 	orrne.w	r9, r9, #2
 80098de:	f7ff fe21 	bl	8009524 <rshift>
 80098e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80098e6:	1b76      	subs	r6, r6, r5
 80098e8:	2502      	movs	r5, #2
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	d047      	beq.n	8009980 <__gethex+0x38c>
 80098f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d015      	beq.n	8009924 <__gethex+0x330>
 80098f8:	2b03      	cmp	r3, #3
 80098fa:	d017      	beq.n	800992c <__gethex+0x338>
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d109      	bne.n	8009914 <__gethex+0x320>
 8009900:	f019 0f02 	tst.w	r9, #2
 8009904:	d006      	beq.n	8009914 <__gethex+0x320>
 8009906:	f8da 3000 	ldr.w	r3, [sl]
 800990a:	ea49 0903 	orr.w	r9, r9, r3
 800990e:	f019 0f01 	tst.w	r9, #1
 8009912:	d10e      	bne.n	8009932 <__gethex+0x33e>
 8009914:	f045 0510 	orr.w	r5, r5, #16
 8009918:	e032      	b.n	8009980 <__gethex+0x38c>
 800991a:	f04f 0901 	mov.w	r9, #1
 800991e:	e7d1      	b.n	80098c4 <__gethex+0x2d0>
 8009920:	2501      	movs	r5, #1
 8009922:	e7e2      	b.n	80098ea <__gethex+0x2f6>
 8009924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009926:	f1c3 0301 	rsb	r3, r3, #1
 800992a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800992c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0f0      	beq.n	8009914 <__gethex+0x320>
 8009932:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009936:	f104 0314 	add.w	r3, r4, #20
 800993a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800993e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009942:	f04f 0c00 	mov.w	ip, #0
 8009946:	4618      	mov	r0, r3
 8009948:	f853 2b04 	ldr.w	r2, [r3], #4
 800994c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009950:	d01b      	beq.n	800998a <__gethex+0x396>
 8009952:	3201      	adds	r2, #1
 8009954:	6002      	str	r2, [r0, #0]
 8009956:	2d02      	cmp	r5, #2
 8009958:	f104 0314 	add.w	r3, r4, #20
 800995c:	d13c      	bne.n	80099d8 <__gethex+0x3e4>
 800995e:	f8d8 2000 	ldr.w	r2, [r8]
 8009962:	3a01      	subs	r2, #1
 8009964:	42b2      	cmp	r2, r6
 8009966:	d109      	bne.n	800997c <__gethex+0x388>
 8009968:	1171      	asrs	r1, r6, #5
 800996a:	2201      	movs	r2, #1
 800996c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009970:	f006 061f 	and.w	r6, r6, #31
 8009974:	fa02 f606 	lsl.w	r6, r2, r6
 8009978:	421e      	tst	r6, r3
 800997a:	d13a      	bne.n	80099f2 <__gethex+0x3fe>
 800997c:	f045 0520 	orr.w	r5, r5, #32
 8009980:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009982:	601c      	str	r4, [r3, #0]
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	601f      	str	r7, [r3, #0]
 8009988:	e6b0      	b.n	80096ec <__gethex+0xf8>
 800998a:	4299      	cmp	r1, r3
 800998c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009990:	d8d9      	bhi.n	8009946 <__gethex+0x352>
 8009992:	68a3      	ldr	r3, [r4, #8]
 8009994:	459b      	cmp	fp, r3
 8009996:	db17      	blt.n	80099c8 <__gethex+0x3d4>
 8009998:	6861      	ldr	r1, [r4, #4]
 800999a:	9801      	ldr	r0, [sp, #4]
 800999c:	3101      	adds	r1, #1
 800999e:	f7fd fe61 	bl	8007664 <_Balloc>
 80099a2:	4681      	mov	r9, r0
 80099a4:	b918      	cbnz	r0, 80099ae <__gethex+0x3ba>
 80099a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009a10 <__gethex+0x41c>)
 80099a8:	4602      	mov	r2, r0
 80099aa:	2184      	movs	r1, #132	@ 0x84
 80099ac:	e6c5      	b.n	800973a <__gethex+0x146>
 80099ae:	6922      	ldr	r2, [r4, #16]
 80099b0:	3202      	adds	r2, #2
 80099b2:	f104 010c 	add.w	r1, r4, #12
 80099b6:	0092      	lsls	r2, r2, #2
 80099b8:	300c      	adds	r0, #12
 80099ba:	f7fc ff9a 	bl	80068f2 <memcpy>
 80099be:	4621      	mov	r1, r4
 80099c0:	9801      	ldr	r0, [sp, #4]
 80099c2:	f7fd fe8f 	bl	80076e4 <_Bfree>
 80099c6:	464c      	mov	r4, r9
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099d0:	6122      	str	r2, [r4, #16]
 80099d2:	2201      	movs	r2, #1
 80099d4:	615a      	str	r2, [r3, #20]
 80099d6:	e7be      	b.n	8009956 <__gethex+0x362>
 80099d8:	6922      	ldr	r2, [r4, #16]
 80099da:	455a      	cmp	r2, fp
 80099dc:	dd0b      	ble.n	80099f6 <__gethex+0x402>
 80099de:	2101      	movs	r1, #1
 80099e0:	4620      	mov	r0, r4
 80099e2:	f7ff fd9f 	bl	8009524 <rshift>
 80099e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099ea:	3701      	adds	r7, #1
 80099ec:	42bb      	cmp	r3, r7
 80099ee:	f6ff aee0 	blt.w	80097b2 <__gethex+0x1be>
 80099f2:	2501      	movs	r5, #1
 80099f4:	e7c2      	b.n	800997c <__gethex+0x388>
 80099f6:	f016 061f 	ands.w	r6, r6, #31
 80099fa:	d0fa      	beq.n	80099f2 <__gethex+0x3fe>
 80099fc:	4453      	add	r3, sl
 80099fe:	f1c6 0620 	rsb	r6, r6, #32
 8009a02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a06:	f7fd ff1f 	bl	8007848 <__hi0bits>
 8009a0a:	42b0      	cmp	r0, r6
 8009a0c:	dbe7      	blt.n	80099de <__gethex+0x3ea>
 8009a0e:	e7f0      	b.n	80099f2 <__gethex+0x3fe>
 8009a10:	0801d98d 	.word	0x0801d98d

08009a14 <L_shift>:
 8009a14:	f1c2 0208 	rsb	r2, r2, #8
 8009a18:	0092      	lsls	r2, r2, #2
 8009a1a:	b570      	push	{r4, r5, r6, lr}
 8009a1c:	f1c2 0620 	rsb	r6, r2, #32
 8009a20:	6843      	ldr	r3, [r0, #4]
 8009a22:	6804      	ldr	r4, [r0, #0]
 8009a24:	fa03 f506 	lsl.w	r5, r3, r6
 8009a28:	432c      	orrs	r4, r5
 8009a2a:	40d3      	lsrs	r3, r2
 8009a2c:	6004      	str	r4, [r0, #0]
 8009a2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a32:	4288      	cmp	r0, r1
 8009a34:	d3f4      	bcc.n	8009a20 <L_shift+0xc>
 8009a36:	bd70      	pop	{r4, r5, r6, pc}

08009a38 <__match>:
 8009a38:	b530      	push	{r4, r5, lr}
 8009a3a:	6803      	ldr	r3, [r0, #0]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a42:	b914      	cbnz	r4, 8009a4a <__match+0x12>
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	2001      	movs	r0, #1
 8009a48:	bd30      	pop	{r4, r5, pc}
 8009a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009a52:	2d19      	cmp	r5, #25
 8009a54:	bf98      	it	ls
 8009a56:	3220      	addls	r2, #32
 8009a58:	42a2      	cmp	r2, r4
 8009a5a:	d0f0      	beq.n	8009a3e <__match+0x6>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e7f3      	b.n	8009a48 <__match+0x10>

08009a60 <__hexnan>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	680b      	ldr	r3, [r1, #0]
 8009a66:	6801      	ldr	r1, [r0, #0]
 8009a68:	115e      	asrs	r6, r3, #5
 8009a6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a6e:	f013 031f 	ands.w	r3, r3, #31
 8009a72:	b087      	sub	sp, #28
 8009a74:	bf18      	it	ne
 8009a76:	3604      	addne	r6, #4
 8009a78:	2500      	movs	r5, #0
 8009a7a:	1f37      	subs	r7, r6, #4
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	4690      	mov	r8, r2
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a86:	46b9      	mov	r9, r7
 8009a88:	463c      	mov	r4, r7
 8009a8a:	9502      	str	r5, [sp, #8]
 8009a8c:	46ab      	mov	fp, r5
 8009a8e:	784a      	ldrb	r2, [r1, #1]
 8009a90:	1c4b      	adds	r3, r1, #1
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	b342      	cbz	r2, 8009ae8 <__hexnan+0x88>
 8009a96:	4610      	mov	r0, r2
 8009a98:	9105      	str	r1, [sp, #20]
 8009a9a:	9204      	str	r2, [sp, #16]
 8009a9c:	f7ff fd94 	bl	80095c8 <__hexdig_fun>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d151      	bne.n	8009b48 <__hexnan+0xe8>
 8009aa4:	9a04      	ldr	r2, [sp, #16]
 8009aa6:	9905      	ldr	r1, [sp, #20]
 8009aa8:	2a20      	cmp	r2, #32
 8009aaa:	d818      	bhi.n	8009ade <__hexnan+0x7e>
 8009aac:	9b02      	ldr	r3, [sp, #8]
 8009aae:	459b      	cmp	fp, r3
 8009ab0:	dd13      	ble.n	8009ada <__hexnan+0x7a>
 8009ab2:	454c      	cmp	r4, r9
 8009ab4:	d206      	bcs.n	8009ac4 <__hexnan+0x64>
 8009ab6:	2d07      	cmp	r5, #7
 8009ab8:	dc04      	bgt.n	8009ac4 <__hexnan+0x64>
 8009aba:	462a      	mov	r2, r5
 8009abc:	4649      	mov	r1, r9
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f7ff ffa8 	bl	8009a14 <L_shift>
 8009ac4:	4544      	cmp	r4, r8
 8009ac6:	d952      	bls.n	8009b6e <__hexnan+0x10e>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f1a4 0904 	sub.w	r9, r4, #4
 8009ace:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ad2:	f8cd b008 	str.w	fp, [sp, #8]
 8009ad6:	464c      	mov	r4, r9
 8009ad8:	461d      	mov	r5, r3
 8009ada:	9903      	ldr	r1, [sp, #12]
 8009adc:	e7d7      	b.n	8009a8e <__hexnan+0x2e>
 8009ade:	2a29      	cmp	r2, #41	@ 0x29
 8009ae0:	d157      	bne.n	8009b92 <__hexnan+0x132>
 8009ae2:	3102      	adds	r1, #2
 8009ae4:	f8ca 1000 	str.w	r1, [sl]
 8009ae8:	f1bb 0f00 	cmp.w	fp, #0
 8009aec:	d051      	beq.n	8009b92 <__hexnan+0x132>
 8009aee:	454c      	cmp	r4, r9
 8009af0:	d206      	bcs.n	8009b00 <__hexnan+0xa0>
 8009af2:	2d07      	cmp	r5, #7
 8009af4:	dc04      	bgt.n	8009b00 <__hexnan+0xa0>
 8009af6:	462a      	mov	r2, r5
 8009af8:	4649      	mov	r1, r9
 8009afa:	4620      	mov	r0, r4
 8009afc:	f7ff ff8a 	bl	8009a14 <L_shift>
 8009b00:	4544      	cmp	r4, r8
 8009b02:	d936      	bls.n	8009b72 <__hexnan+0x112>
 8009b04:	f1a8 0204 	sub.w	r2, r8, #4
 8009b08:	4623      	mov	r3, r4
 8009b0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b0e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b12:	429f      	cmp	r7, r3
 8009b14:	d2f9      	bcs.n	8009b0a <__hexnan+0xaa>
 8009b16:	1b3b      	subs	r3, r7, r4
 8009b18:	f023 0303 	bic.w	r3, r3, #3
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	3401      	adds	r4, #1
 8009b20:	3e03      	subs	r6, #3
 8009b22:	42b4      	cmp	r4, r6
 8009b24:	bf88      	it	hi
 8009b26:	2304      	movhi	r3, #4
 8009b28:	4443      	add	r3, r8
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f843 2b04 	str.w	r2, [r3], #4
 8009b30:	429f      	cmp	r7, r3
 8009b32:	d2fb      	bcs.n	8009b2c <__hexnan+0xcc>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	b91b      	cbnz	r3, 8009b40 <__hexnan+0xe0>
 8009b38:	4547      	cmp	r7, r8
 8009b3a:	d128      	bne.n	8009b8e <__hexnan+0x12e>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	603b      	str	r3, [r7, #0]
 8009b40:	2005      	movs	r0, #5
 8009b42:	b007      	add	sp, #28
 8009b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b48:	3501      	adds	r5, #1
 8009b4a:	2d08      	cmp	r5, #8
 8009b4c:	f10b 0b01 	add.w	fp, fp, #1
 8009b50:	dd06      	ble.n	8009b60 <__hexnan+0x100>
 8009b52:	4544      	cmp	r4, r8
 8009b54:	d9c1      	bls.n	8009ada <__hexnan+0x7a>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b5c:	2501      	movs	r5, #1
 8009b5e:	3c04      	subs	r4, #4
 8009b60:	6822      	ldr	r2, [r4, #0]
 8009b62:	f000 000f 	and.w	r0, r0, #15
 8009b66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009b6a:	6020      	str	r0, [r4, #0]
 8009b6c:	e7b5      	b.n	8009ada <__hexnan+0x7a>
 8009b6e:	2508      	movs	r5, #8
 8009b70:	e7b3      	b.n	8009ada <__hexnan+0x7a>
 8009b72:	9b01      	ldr	r3, [sp, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0dd      	beq.n	8009b34 <__hexnan+0xd4>
 8009b78:	f1c3 0320 	rsb	r3, r3, #32
 8009b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b80:	40da      	lsrs	r2, r3
 8009b82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009b86:	4013      	ands	r3, r2
 8009b88:	f846 3c04 	str.w	r3, [r6, #-4]
 8009b8c:	e7d2      	b.n	8009b34 <__hexnan+0xd4>
 8009b8e:	3f04      	subs	r7, #4
 8009b90:	e7d0      	b.n	8009b34 <__hexnan+0xd4>
 8009b92:	2004      	movs	r0, #4
 8009b94:	e7d5      	b.n	8009b42 <__hexnan+0xe2>

08009b96 <__ascii_mbtowc>:
 8009b96:	b082      	sub	sp, #8
 8009b98:	b901      	cbnz	r1, 8009b9c <__ascii_mbtowc+0x6>
 8009b9a:	a901      	add	r1, sp, #4
 8009b9c:	b142      	cbz	r2, 8009bb0 <__ascii_mbtowc+0x1a>
 8009b9e:	b14b      	cbz	r3, 8009bb4 <__ascii_mbtowc+0x1e>
 8009ba0:	7813      	ldrb	r3, [r2, #0]
 8009ba2:	600b      	str	r3, [r1, #0]
 8009ba4:	7812      	ldrb	r2, [r2, #0]
 8009ba6:	1e10      	subs	r0, r2, #0
 8009ba8:	bf18      	it	ne
 8009baa:	2001      	movne	r0, #1
 8009bac:	b002      	add	sp, #8
 8009bae:	4770      	bx	lr
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	e7fb      	b.n	8009bac <__ascii_mbtowc+0x16>
 8009bb4:	f06f 0001 	mvn.w	r0, #1
 8009bb8:	e7f8      	b.n	8009bac <__ascii_mbtowc+0x16>

08009bba <_realloc_r>:
 8009bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	b921      	cbnz	r1, 8009bd0 <_realloc_r+0x16>
 8009bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bca:	4611      	mov	r1, r2
 8009bcc:	f7fb bce6 	b.w	800559c <_malloc_r>
 8009bd0:	b92a      	cbnz	r2, 8009bde <_realloc_r+0x24>
 8009bd2:	f7fd fcfd 	bl	80075d0 <_free_r>
 8009bd6:	4625      	mov	r5, r4
 8009bd8:	4628      	mov	r0, r5
 8009bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bde:	f000 f840 	bl	8009c62 <_malloc_usable_size_r>
 8009be2:	4284      	cmp	r4, r0
 8009be4:	4606      	mov	r6, r0
 8009be6:	d802      	bhi.n	8009bee <_realloc_r+0x34>
 8009be8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bec:	d8f4      	bhi.n	8009bd8 <_realloc_r+0x1e>
 8009bee:	4621      	mov	r1, r4
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	f7fb fcd3 	bl	800559c <_malloc_r>
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	b908      	cbnz	r0, 8009bfe <_realloc_r+0x44>
 8009bfa:	4645      	mov	r5, r8
 8009bfc:	e7ec      	b.n	8009bd8 <_realloc_r+0x1e>
 8009bfe:	42b4      	cmp	r4, r6
 8009c00:	4622      	mov	r2, r4
 8009c02:	4629      	mov	r1, r5
 8009c04:	bf28      	it	cs
 8009c06:	4632      	movcs	r2, r6
 8009c08:	f7fc fe73 	bl	80068f2 <memcpy>
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f7fd fcde 	bl	80075d0 <_free_r>
 8009c14:	e7f1      	b.n	8009bfa <_realloc_r+0x40>

08009c16 <__ascii_wctomb>:
 8009c16:	4603      	mov	r3, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	b141      	cbz	r1, 8009c2e <__ascii_wctomb+0x18>
 8009c1c:	2aff      	cmp	r2, #255	@ 0xff
 8009c1e:	d904      	bls.n	8009c2a <__ascii_wctomb+0x14>
 8009c20:	228a      	movs	r2, #138	@ 0x8a
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	4770      	bx	lr
 8009c2a:	700a      	strb	r2, [r1, #0]
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	4770      	bx	lr

08009c30 <fiprintf>:
 8009c30:	b40e      	push	{r1, r2, r3}
 8009c32:	b503      	push	{r0, r1, lr}
 8009c34:	4601      	mov	r1, r0
 8009c36:	ab03      	add	r3, sp, #12
 8009c38:	4805      	ldr	r0, [pc, #20]	@ (8009c50 <fiprintf+0x20>)
 8009c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c3e:	6800      	ldr	r0, [r0, #0]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	f7ff f9c1 	bl	8008fc8 <_vfiprintf_r>
 8009c46:	b002      	add	sp, #8
 8009c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c4c:	b003      	add	sp, #12
 8009c4e:	4770      	bx	lr
 8009c50:	20040018 	.word	0x20040018

08009c54 <abort>:
 8009c54:	b508      	push	{r3, lr}
 8009c56:	2006      	movs	r0, #6
 8009c58:	f000 f834 	bl	8009cc4 <raise>
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	f7f8 fb9a 	bl	8002396 <_exit>

08009c62 <_malloc_usable_size_r>:
 8009c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c66:	1f18      	subs	r0, r3, #4
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bfbc      	itt	lt
 8009c6c:	580b      	ldrlt	r3, [r1, r0]
 8009c6e:	18c0      	addlt	r0, r0, r3
 8009c70:	4770      	bx	lr

08009c72 <_raise_r>:
 8009c72:	291f      	cmp	r1, #31
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4605      	mov	r5, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	d904      	bls.n	8009c86 <_raise_r+0x14>
 8009c7c:	2316      	movs	r3, #22
 8009c7e:	6003      	str	r3, [r0, #0]
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
 8009c86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c88:	b112      	cbz	r2, 8009c90 <_raise_r+0x1e>
 8009c8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c8e:	b94b      	cbnz	r3, 8009ca4 <_raise_r+0x32>
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 f831 	bl	8009cf8 <_getpid_r>
 8009c96:	4622      	mov	r2, r4
 8009c98:	4601      	mov	r1, r0
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ca0:	f000 b818 	b.w	8009cd4 <_kill_r>
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d00a      	beq.n	8009cbe <_raise_r+0x4c>
 8009ca8:	1c59      	adds	r1, r3, #1
 8009caa:	d103      	bne.n	8009cb4 <_raise_r+0x42>
 8009cac:	2316      	movs	r3, #22
 8009cae:	6003      	str	r3, [r0, #0]
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	e7e7      	b.n	8009c84 <_raise_r+0x12>
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	4798      	blx	r3
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e7e0      	b.n	8009c84 <_raise_r+0x12>
	...

08009cc4 <raise>:
 8009cc4:	4b02      	ldr	r3, [pc, #8]	@ (8009cd0 <raise+0xc>)
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	f7ff bfd2 	b.w	8009c72 <_raise_r>
 8009cce:	bf00      	nop
 8009cd0:	20040018 	.word	0x20040018

08009cd4 <_kill_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4d07      	ldr	r5, [pc, #28]	@ (8009cf4 <_kill_r+0x20>)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	4611      	mov	r1, r2
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	f7f8 fb48 	bl	8002376 <_kill>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	d102      	bne.n	8009cf0 <_kill_r+0x1c>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	b103      	cbz	r3, 8009cf0 <_kill_r+0x1c>
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	bd38      	pop	{r3, r4, r5, pc}
 8009cf2:	bf00      	nop
 8009cf4:	2005c664 	.word	0x2005c664

08009cf8 <_getpid_r>:
 8009cf8:	f7f8 bb35 	b.w	8002366 <_getpid>

08009cfc <_init>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	bf00      	nop
 8009d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d02:	bc08      	pop	{r3}
 8009d04:	469e      	mov	lr, r3
 8009d06:	4770      	bx	lr

08009d08 <_fini>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr
