
smartwatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002214  0800af78  0800af78  0000bf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d18c  0800d18c  0000f1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d18c  0800d18c  0000e18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d194  0800d194  0000f1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d194  0800d194  0000e194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d198  0800d198  0000e198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20040000  0800d19c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c474  200401dc  0800d378  0000f1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2005c650  0800d378  0000f650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012641  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6b  00000000  00000000  0002184d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000242b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002b7d3  00000000  00000000  00025568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000155fc  00000000  00000000  00050d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010d4ac  00000000  00000000  00066337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001737e3  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000e5e  00000000  00000000  00173826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063fc  00000000  00000000  00174684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0017aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200401dc 	.word	0x200401dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800af5c 	.word	0x0800af5c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200401e0 	.word	0x200401e0
 80001fc:	0800af5c 	.word	0x0800af5c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	4611      	mov	r1, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	4623      	mov	r3, r4
 8000d34:	80fb      	strh	r3, [r7, #6]
 8000d36:	4603      	mov	r3, r0
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	807b      	strh	r3, [r7, #2]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000d48:	4a1a      	ldr	r2, [pc, #104]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 8000d4e:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d50:	883b      	ldrh	r3, [r7, #0]
 8000d52:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8000d54:	4a17      	ldr	r2, [pc, #92]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 8000d5a:	4a16      	ldr	r2, [pc, #88]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d5c:	88bb      	ldrh	r3, [r7, #4]
 8000d5e:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d62:	8a5b      	ldrh	r3, [r3, #18]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d6a:	8a9b      	ldrh	r3, [r3, #20]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <Paint_NewImage+0x94>)
 8000d72:	f006 fcf5 	bl	8007760 <iprintf>

    Paint.Rotate = Rotate;
 8000d76:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <Paint_NewImage+0x6a>
 8000d88:	887b      	ldrh	r3, [r7, #2]
 8000d8a:	2bb4      	cmp	r3, #180	@ 0xb4
 8000d8c:	d106      	bne.n	8000d9c <Paint_NewImage+0x78>
        Paint.Width = Width;
 8000d8e:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000d94:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	80d3      	strh	r3, [r2, #6]
 8000d9a:	e006      	b.n	8000daa <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8000d9c:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <Paint_NewImage+0x90>)
 8000d9e:	88bb      	ldrh	r3, [r7, #4]
 8000da0:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <Paint_NewImage+0x90>)
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	80d3      	strh	r3, [r2, #6]
    }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200401f8 	.word	0x200401f8
 8000db8:	0800af78 	.word	0x0800af78

08000dbc <Paint_SetClearFunction>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion
******************************************************************************/
void Paint_SetClearFunction(void (*Clear)(uint16_t))
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <Paint_SetClearFunction+0x1c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20040214 	.word	0x20040214

08000ddc <Paint_SetDisplayFunction>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion
******************************************************************************/
void Paint_SetDisplayFunction(void (*Display)(uint16_t,uint16_t,uint16_t))
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <Paint_SetDisplayFunction+0x1c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20040210 	.word	0x20040210

08000dfc <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
 8000e06:	460b      	mov	r3, r1
 8000e08:	80bb      	strh	r3, [r7, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000e0e:	4b50      	ldr	r3, [pc, #320]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	88fa      	ldrh	r2, [r7, #6]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d805      	bhi.n	8000e26 <Paint_SetPixel+0x2a>
 8000e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000e1c:	88db      	ldrh	r3, [r3, #6]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	88ba      	ldrh	r2, [r7, #4]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d903      	bls.n	8000e2e <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8000e26:	484b      	ldr	r0, [pc, #300]	@ (8000f54 <Paint_SetPixel+0x158>)
 8000e28:	f006 fd02 	bl	8007830 <puts>
        return;
 8000e2c:	e08c      	b.n	8000f48 <Paint_SetPixel+0x14c>
    }
    uint16_t X, Y;

    switch(Paint.Rotate) {
 8000e2e:	4b48      	ldr	r3, [pc, #288]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000e30:	89db      	ldrh	r3, [r3, #14]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000e38:	d02d      	beq.n	8000e96 <Paint_SetPixel+0x9a>
 8000e3a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000e3e:	f300 8080 	bgt.w	8000f42 <Paint_SetPixel+0x146>
 8000e42:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e44:	d016      	beq.n	8000e74 <Paint_SetPixel+0x78>
 8000e46:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e48:	dc7b      	bgt.n	8000f42 <Paint_SetPixel+0x146>
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <Paint_SetPixel+0x58>
 8000e4e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000e50:	d005      	beq.n	8000e5e <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8000e52:	e076      	b.n	8000f42 <Paint_SetPixel+0x146>
        X = Xpoint;
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	81bb      	strh	r3, [r7, #12]
        break;
 8000e5c:	e026      	b.n	8000eac <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8000e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000e60:	891b      	ldrh	r3, [r3, #8]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	81bb      	strh	r3, [r7, #12]
        break;
 8000e72:	e01b      	b.n	8000eac <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8000e74:	4b36      	ldr	r3, [pc, #216]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000e76:	891b      	ldrh	r3, [r3, #8]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000e84:	4b32      	ldr	r3, [pc, #200]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000e86:	895b      	ldrh	r3, [r3, #10]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	81bb      	strh	r3, [r7, #12]
        break;
 8000e94:	e00a      	b.n	8000eac <Paint_SetPixel+0xb0>
        X = Ypoint;
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000e9c:	895b      	ldrh	r3, [r3, #10]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	81bb      	strh	r3, [r7, #12]
        break;
 8000eaa:	bf00      	nop
    }

    switch(Paint.Mirror) {
 8000eac:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000eae:	8a1b      	ldrh	r3, [r3, #16]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d847      	bhi.n	8000f46 <Paint_SetPixel+0x14a>
 8000eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ebc <Paint_SetPixel+0xc0>)
 8000eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebc:	08000f13 	.word	0x08000f13
 8000ec0:	08000ecd 	.word	0x08000ecd
 8000ec4:	08000edf 	.word	0x08000edf
 8000ec8:	08000ef1 	.word	0x08000ef1
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000ecc:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000ece:	891b      	ldrh	r3, [r3, #8]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	81fb      	strh	r3, [r7, #14]
        break;
 8000edc:	e01a      	b.n	8000f14 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000ee0:	895b      	ldrh	r3, [r3, #10]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	89bb      	ldrh	r3, [r7, #12]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3b01      	subs	r3, #1
 8000eec:	81bb      	strh	r3, [r7, #12]
        break;
 8000eee:	e011      	b.n	8000f14 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000ef2:	891b      	ldrh	r3, [r3, #8]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	3b01      	subs	r3, #1
 8000efe:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000f00:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000f02:	895b      	ldrh	r3, [r3, #10]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	89bb      	ldrh	r3, [r7, #12]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	81bb      	strh	r3, [r7, #12]
        break;
 8000f10:	e000      	b.n	8000f14 <Paint_SetPixel+0x118>
        break;
 8000f12:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000f16:	891b      	ldrh	r3, [r3, #8]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	89fa      	ldrh	r2, [r7, #14]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d805      	bhi.n	8000f2c <Paint_SetPixel+0x130>
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <Paint_SetPixel+0x154>)
 8000f22:	895b      	ldrh	r3, [r3, #10]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	89ba      	ldrh	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d903      	bls.n	8000f34 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <Paint_SetPixel+0x158>)
 8000f2e:	f006 fc7f 	bl	8007830 <puts>
        return;
 8000f32:	e009      	b.n	8000f48 <Paint_SetPixel+0x14c>
    }

   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <Paint_SetPixel+0x15c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	89b9      	ldrh	r1, [r7, #12]
 8000f3c:	89f8      	ldrh	r0, [r7, #14]
 8000f3e:	4798      	blx	r3
 8000f40:	e002      	b.n	8000f48 <Paint_SetPixel+0x14c>
        return;
 8000f42:	bf00      	nop
 8000f44:	e000      	b.n	8000f48 <Paint_SetPixel+0x14c>
        return;
 8000f46:	bf00      	nop
}
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200401f8 	.word	0x200401f8
 8000f54:	0800b078 	.word	0x0800b078
 8000f58:	20040210 	.word	0x20040210

08000f5c <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4603      	mov	r3, r0
 8000f66:	81fb      	strh	r3, [r7, #14]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	81bb      	strh	r3, [r7, #12]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000f70:	4b4e      	ldr	r3, [pc, #312]	@ (80010ac <Paint_DrawChar+0x150>)
 8000f72:	889b      	ldrh	r3, [r3, #4]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	89fa      	ldrh	r2, [r7, #14]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d805      	bhi.n	8000f88 <Paint_DrawChar+0x2c>
 8000f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80010ac <Paint_DrawChar+0x150>)
 8000f7e:	88db      	ldrh	r3, [r3, #6]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	89ba      	ldrh	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d903      	bls.n	8000f90 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8000f88:	4849      	ldr	r0, [pc, #292]	@ (80010b0 <Paint_DrawChar+0x154>)
 8000f8a:	f006 fc51 	bl	8007830 <puts>
        return;
 8000f8e:	e089      	b.n	80010a4 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000f90:	7afb      	ldrb	r3, [r7, #11]
 8000f92:	3b20      	subs	r3, #32
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	88d2      	ldrh	r2, [r2, #6]
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	8892      	ldrh	r2, [r2, #4]
 8000fa0:	08d2      	lsrs	r2, r2, #3
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	8892      	ldrh	r2, [r2, #4]
 8000faa:	f002 0207 	and.w	r2, r2, #7
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	2a00      	cmp	r2, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2201      	movne	r2, #1
 8000fb6:	2200      	moveq	r2, #0
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440a      	add	r2, r1
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4413      	add	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	83fb      	strh	r3, [r7, #30]
 8000fd0:	e063      	b.n	800109a <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	83bb      	strh	r3, [r7, #28]
 8000fd6:	e04e      	b.n	8001076 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000fd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d118      	bne.n	8001014 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	8bbb      	ldrh	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	fa42 f303 	asr.w	r3, r2, r3
 8000ff4:	400b      	ands	r3, r1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d031      	beq.n	800105e <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000ffa:	89fa      	ldrh	r2, [r7, #14]
 8000ffc:	8bbb      	ldrh	r3, [r7, #28]
 8000ffe:	4413      	add	r3, r2
 8001000:	b298      	uxth	r0, r3
 8001002:	89ba      	ldrh	r2, [r7, #12]
 8001004:	8bfb      	ldrh	r3, [r7, #30]
 8001006:	4413      	add	r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fef5 	bl	8000dfc <Paint_SetPixel>
 8001012:	e024      	b.n	800105e <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	8bbb      	ldrh	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	fa42 f303 	asr.w	r3, r2, r3
 8001026:	400b      	ands	r3, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00c      	beq.n	8001046 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800102c:	89fa      	ldrh	r2, [r7, #14]
 800102e:	8bbb      	ldrh	r3, [r7, #28]
 8001030:	4413      	add	r3, r2
 8001032:	b298      	uxth	r0, r3
 8001034:	89ba      	ldrh	r2, [r7, #12]
 8001036:	8bfb      	ldrh	r3, [r7, #30]
 8001038:	4413      	add	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fedc 	bl	8000dfc <Paint_SetPixel>
 8001044:	e00b      	b.n	800105e <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001046:	89fa      	ldrh	r2, [r7, #14]
 8001048:	8bbb      	ldrh	r3, [r7, #28]
 800104a:	4413      	add	r3, r2
 800104c:	b298      	uxth	r0, r3
 800104e:	89ba      	ldrh	r2, [r7, #12]
 8001050:	8bfb      	ldrh	r3, [r7, #30]
 8001052:	4413      	add	r3, r2
 8001054:	b29b      	uxth	r3, r3
 8001056:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fecf 	bl	8000dfc <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800105e:	8bbb      	ldrh	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b29b      	uxth	r3, r3
 8001066:	2b07      	cmp	r3, #7
 8001068:	d102      	bne.n	8001070 <Paint_DrawChar+0x114>
                ptr++;
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	3301      	adds	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001070:	8bbb      	ldrh	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	83bb      	strh	r3, [r7, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	889b      	ldrh	r3, [r3, #4]
 800107a:	8bba      	ldrh	r2, [r7, #28]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3ab      	bcc.n	8000fd8 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	889b      	ldrh	r3, [r3, #4]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	b29b      	uxth	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <Paint_DrawChar+0x138>
            ptr++;
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	3301      	adds	r3, #1
 8001092:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001094:	8bfb      	ldrh	r3, [r7, #30]
 8001096:	3301      	adds	r3, #1
 8001098:	83fb      	strh	r3, [r7, #30]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	88db      	ldrh	r3, [r3, #6]
 800109e:	8bfa      	ldrh	r2, [r7, #30]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d396      	bcc.n	8000fd2 <Paint_DrawChar+0x76>
    }// Write all
}
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200401f8 	.word	0x200401f8
 80010b0:	0800b194 	.word	0x0800b194

080010b4 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	60ba      	str	r2, [r7, #8]
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4603      	mov	r3, r0
 80010c0:	81fb      	strh	r3, [r7, #14]
 80010c2:	460b      	mov	r3, r1
 80010c4:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 80010c6:	89fb      	ldrh	r3, [r7, #14]
 80010c8:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 80010ca:	89bb      	ldrh	r3, [r7, #12]
 80010cc:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <Paint_DrawString_EN+0xa8>)
 80010d0:	889b      	ldrh	r3, [r3, #4]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	89fa      	ldrh	r2, [r7, #14]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d805      	bhi.n	80010e6 <Paint_DrawString_EN+0x32>
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <Paint_DrawString_EN+0xa8>)
 80010dc:	88db      	ldrh	r3, [r3, #6]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	89ba      	ldrh	r2, [r7, #12]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d933      	bls.n	800114e <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80010e6:	481e      	ldr	r0, [pc, #120]	@ (8001160 <Paint_DrawString_EN+0xac>)
 80010e8:	f006 fba2 	bl	8007830 <puts>
        return;
 80010ec:	e033      	b.n	8001156 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80010ee:	8afb      	ldrh	r3, [r7, #22]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	8892      	ldrh	r2, [r2, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a19      	ldr	r2, [pc, #100]	@ (800115c <Paint_DrawString_EN+0xa8>)
 80010f8:	8892      	ldrh	r2, [r2, #4]
 80010fa:	b292      	uxth	r2, r2
 80010fc:	4293      	cmp	r3, r2
 80010fe:	dd06      	ble.n	800110e <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	88da      	ldrh	r2, [r3, #6]
 8001108:	8abb      	ldrh	r3, [r7, #20]
 800110a:	4413      	add	r3, r2
 800110c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	88d2      	ldrh	r2, [r2, #6]
 8001114:	4413      	add	r3, r2
 8001116:	4a11      	ldr	r2, [pc, #68]	@ (800115c <Paint_DrawString_EN+0xa8>)
 8001118:	88d2      	ldrh	r2, [r2, #6]
 800111a:	b292      	uxth	r2, r2
 800111c:	4293      	cmp	r3, r2
 800111e:	dd03      	ble.n	8001128 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8001120:	89fb      	ldrh	r3, [r7, #14]
 8001122:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001124:	89bb      	ldrh	r3, [r7, #12]
 8001126:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	8ab9      	ldrh	r1, [r7, #20]
 800112e:	8af8      	ldrh	r0, [r7, #22]
 8001130:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	8c3b      	ldrh	r3, [r7, #32]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f7ff ff0f 	bl	8000f5c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3301      	adds	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	889a      	ldrh	r2, [r3, #4]
 8001148:	8afb      	ldrh	r3, [r7, #22]
 800114a:	4413      	add	r3, r2
 800114c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1cb      	bne.n	80010ee <Paint_DrawString_EN+0x3a>
    }
}
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200401f8 	.word	0x200401f8
 8001160:	0800b1d4 	.word	0x0800b1d4

08001164 <_update_delta>:
uint16_t dt_y_min;
uint16_t dt_y_max;

uint16_t pixels[LCD_1IN28_HEIGHT][LCD_1IN28_WIDTH] = {};

static void _update_delta(uint16_t min_x, uint16_t min_y, uint16_t max_x, uint16_t max_y) {
 8001164:	b490      	push	{r4, r7}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4604      	mov	r4, r0
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4623      	mov	r3, r4
 8001174:	80fb      	strh	r3, [r7, #6]
 8001176:	4603      	mov	r3, r0
 8001178:	80bb      	strh	r3, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]
 800117e:	4613      	mov	r3, r2
 8001180:	803b      	strh	r3, [r7, #0]
	if (!delta_modified || min_x < dt_x_min) dt_x_min = min_x;
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <_update_delta+0x90>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d004      	beq.n	8001194 <_update_delta+0x30>
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <_update_delta+0x94>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	429a      	cmp	r2, r3
 8001192:	d202      	bcs.n	800119a <_update_delta+0x36>
 8001194:	4a18      	ldr	r2, [pc, #96]	@ (80011f8 <_update_delta+0x94>)
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	8013      	strh	r3, [r2, #0]
	if (!delta_modified || max_x > dt_x_max) dt_x_max = max_x;
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <_update_delta+0x90>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <_update_delta+0x48>
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <_update_delta+0x98>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d902      	bls.n	80011b2 <_update_delta+0x4e>
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <_update_delta+0x98>)
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	8013      	strh	r3, [r2, #0]
	if (!delta_modified || min_y < dt_y_min) dt_y_min = min_y;
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <_update_delta+0x90>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <_update_delta+0x60>
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <_update_delta+0x9c>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	88ba      	ldrh	r2, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d202      	bcs.n	80011ca <_update_delta+0x66>
 80011c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <_update_delta+0x9c>)
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	8013      	strh	r3, [r2, #0]
	if (!delta_modified || max_y > dt_y_max) dt_y_max = max_y;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <_update_delta+0x90>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <_update_delta+0x78>
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <_update_delta+0xa0>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	883a      	ldrh	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d902      	bls.n	80011e2 <_update_delta+0x7e>
 80011dc:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <_update_delta+0xa0>)
 80011de:	883b      	ldrh	r3, [r7, #0]
 80011e0:	8013      	strh	r3, [r2, #0]
	delta_modified = 1;
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <_update_delta+0x90>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc90      	pop	{r4, r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2004021e 	.word	0x2004021e
 80011f8:	20040220 	.word	0x20040220
 80011fc:	20040222 	.word	0x20040222
 8001200:	20040224 	.word	0x20040224
 8001204:	20040226 	.word	0x20040226

08001208 <screen_render>:

void screen_render() {
 8001208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800120c:	b08a      	sub	sp, #40	@ 0x28
 800120e:	af00      	add	r7, sp, #0
 8001210:	466b      	mov	r3, sp
 8001212:	4698      	mov	r8, r3
	uint16_t y_diff = dt_y_max - dt_y_min + 1;
 8001214:	4b64      	ldr	r3, [pc, #400]	@ (80013a8 <screen_render+0x1a0>)
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	4b64      	ldr	r3, [pc, #400]	@ (80013ac <screen_render+0x1a4>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	b29b      	uxth	r3, r3
 8001220:	3301      	adds	r3, #1
 8001222:	827b      	strh	r3, [r7, #18]
	uint16_t x_diff = dt_x_max - dt_x_min + 1;
 8001224:	4b62      	ldr	r3, [pc, #392]	@ (80013b0 <screen_render+0x1a8>)
 8001226:	881a      	ldrh	r2, [r3, #0]
 8001228:	4b62      	ldr	r3, [pc, #392]	@ (80013b4 <screen_render+0x1ac>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b29b      	uxth	r3, r3
 8001230:	3301      	adds	r3, #1
 8001232:	823b      	strh	r3, [r7, #16]
	uint32_t n_pix = y_diff * x_diff;
 8001234:	8a7b      	ldrh	r3, [r7, #18]
 8001236:	8a3a      	ldrh	r2, [r7, #16]
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	60fb      	str	r3, [r7, #12]

	int index = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t buf[n_pix] = {};
 8001242:	68fe      	ldr	r6, [r7, #12]
 8001244:	4633      	mov	r3, r6
 8001246:	3b01      	subs	r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	2300      	movs	r3, #0
 800124c:	4634      	mov	r4, r6
 800124e:	461d      	mov	r5, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	012b      	lsls	r3, r5, #4
 800125a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800125e:	0122      	lsls	r2, r4, #4
 8001260:	0074      	lsls	r4, r6, #1
 8001262:	2300      	movs	r3, #0
 8001264:	4630      	mov	r0, r6
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	010b      	lsls	r3, r1, #4
 8001272:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001276:	0102      	lsls	r2, r0, #4
 8001278:	0073      	lsls	r3, r6, #1
 800127a:	3307      	adds	r3, #7
 800127c:	08db      	lsrs	r3, r3, #3
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	ebad 0d03 	sub.w	sp, sp, r3
 8001284:	466b      	mov	r3, sp
 8001286:	3301      	adds	r3, #1
 8001288:	085b      	lsrs	r3, r3, #1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4622      	mov	r2, r4
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f006 fbcd 	bl	8007a34 <memset>
	for (int i = dt_y_min; i <= dt_y_max; i++) {
 800129a:	4b44      	ldr	r3, [pc, #272]	@ (80013ac <screen_render+0x1a4>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	623b      	str	r3, [r7, #32]
 80012a0:	e01f      	b.n	80012e2 <screen_render+0xda>
		for (int j = dt_x_min; j <= dt_x_max; j++) buf[index++] = pixels[i][j];
 80012a2:	4b44      	ldr	r3, [pc, #272]	@ (80013b4 <screen_render+0x1ac>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	e012      	b.n	80012d0 <screen_render+0xc8>
 80012aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ac:	1c53      	adds	r3, r2, #1
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b0:	4841      	ldr	r0, [pc, #260]	@ (80013b8 <screen_render+0x1b0>)
 80012b2:	6a39      	ldr	r1, [r7, #32]
 80012b4:	460b      	mov	r3, r1
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	69f9      	ldr	r1, [r7, #28]
 80012be:	440b      	add	r3, r1
 80012c0:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	4b37      	ldr	r3, [pc, #220]	@ (80013b0 <screen_render+0x1a8>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	4293      	cmp	r3, r2
 80012da:	dde6      	ble.n	80012aa <screen_render+0xa2>
	for (int i = dt_y_min; i <= dt_y_max; i++) {
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	3301      	adds	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	4b31      	ldr	r3, [pc, #196]	@ (80013a8 <screen_render+0x1a0>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	ddd9      	ble.n	80012a2 <screen_render+0x9a>
	}

	screen_set_windows(dt_x_min, dt_y_min, dt_x_max, dt_y_max);
 80012ee:	4b31      	ldr	r3, [pc, #196]	@ (80013b4 <screen_render+0x1ac>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <screen_render+0x1a4>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <screen_render+0x1a8>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <screen_render+0x1a0>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	f000 fb5a 	bl	80019bc <screen_set_windows>
    SET_DC_HIGH;
 8001308:	2201      	movs	r2, #1
 800130a:	2120      	movs	r1, #32
 800130c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001310:	f001 fe08 	bl	8002f24 <HAL_GPIO_WritePin>
    SET_CS_LOW;
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800131a:	4828      	ldr	r0, [pc, #160]	@ (80013bc <screen_render+0x1b4>)
 800131c:	f001 fe02 	bl	8002f24 <HAL_GPIO_WritePin>
	uint32_t bytes_remaining = n_pix * 2;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
	uint32_t offset = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
	while (bytes_remaining > 0) {
 800132a:	e025      	b.n	8001378 <screen_render+0x170>
		if (bytes_remaining > 60000) {
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001332:	4293      	cmp	r3, r2
 8001334:	d914      	bls.n	8001360 <screen_render+0x158>
			HAL_SPI_Transmit(&hspi1, (uint8_t*) buf + offset, 60000, HAL_MAX_DELAY);
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	18d1      	adds	r1, r2, r3
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001344:	481e      	ldr	r0, [pc, #120]	@ (80013c0 <screen_render+0x1b8>)
 8001346:	f003 ffa2 	bl	800528e <HAL_SPI_Transmit>
			offset += 60000;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001350:	3360      	adds	r3, #96	@ 0x60
 8001352:	617b      	str	r3, [r7, #20]
			bytes_remaining -= 60000;
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 800135a:	3b60      	subs	r3, #96	@ 0x60
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	e00b      	b.n	8001378 <screen_render+0x170>
		} else {
			HAL_SPI_Transmit(&hspi1, (uint8_t*) buf + offset, bytes_remaining, HAL_MAX_DELAY);
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	18d1      	adds	r1, r2, r3
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	b29a      	uxth	r2, r3
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	4814      	ldr	r0, [pc, #80]	@ (80013c0 <screen_render+0x1b8>)
 8001370:	f003 ff8d 	bl	800528e <HAL_SPI_Transmit>
			bytes_remaining = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
	while (bytes_remaining > 0) {
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1d6      	bne.n	800132c <screen_render+0x124>
		}
	}
    SET_DC_LOW;
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001386:	f001 fdcd 	bl	8002f24 <HAL_GPIO_WritePin>
    SET_CS_HIGH;
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001390:	480a      	ldr	r0, [pc, #40]	@ (80013bc <screen_render+0x1b4>)
 8001392:	f001 fdc7 	bl	8002f24 <HAL_GPIO_WritePin>


	delta_modified = 0;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <screen_render+0x1bc>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	46c5      	mov	sp, r8
}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a8:	20040226 	.word	0x20040226
 80013ac:	20040224 	.word	0x20040224
 80013b0:	20040222 	.word	0x20040222
 80013b4:	20040220 	.word	0x20040220
 80013b8:	20040228 	.word	0x20040228
 80013bc:	48000400 	.word	0x48000400
 80013c0:	2005c44c 	.word	0x2005c44c
 80013c4:	2004021e 	.word	0x2004021e

080013c8 <screen_reset>:
/******************************************************************************
 function :	Hardware reset
 parameter:
 ******************************************************************************/
static void screen_reset(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	SET_RST_HIGH;
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <screen_reset+0x40>)
 80013d4:	f001 fda6 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013d8:	2064      	movs	r0, #100	@ 0x64
 80013da:	f001 fadb 	bl	8002994 <HAL_Delay>
	SET_RST_LOW;
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <screen_reset+0x40>)
 80013e6:	f001 fd9d 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013ea:	2064      	movs	r0, #100	@ 0x64
 80013ec:	f001 fad2 	bl	8002994 <HAL_Delay>
	SET_RST_HIGH;
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f6:	4804      	ldr	r0, [pc, #16]	@ (8001408 <screen_reset+0x40>)
 80013f8:	f001 fd94 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013fc:	2064      	movs	r0, #100	@ 0x64
 80013fe:	f001 fac9 	bl	8002994 <HAL_Delay>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	48000400 	.word	0x48000400

0800140c <LCD_1IN28_SendCommand>:
/******************************************************************************
 function :	send command
 parameter:
 Reg : Command register
 ******************************************************************************/
static void LCD_1IN28_SendCommand(uint8_t reg) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	SET_DC_LOW;
 8001416:	2200      	movs	r2, #0
 8001418:	2120      	movs	r1, #32
 800141a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141e:	f001 fd81 	bl	8002f24 <HAL_GPIO_WritePin>
	SET_CS_LOW;
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001428:	480b      	ldr	r0, [pc, #44]	@ (8001458 <LCD_1IN28_SendCommand+0x4c>)
 800142a:	f001 fd7b 	bl	8002f24 <HAL_GPIO_WritePin>
	uint8_t buf[1] = { reg };
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 500);
 8001432:	f107 010c 	add.w	r1, r7, #12
 8001436:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800143a:	2201      	movs	r2, #1
 800143c:	4807      	ldr	r0, [pc, #28]	@ (800145c <LCD_1IN28_SendCommand+0x50>)
 800143e:	f003 ff26 	bl	800528e <HAL_SPI_Transmit>
	SET_CS_HIGH;
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001448:	4803      	ldr	r0, [pc, #12]	@ (8001458 <LCD_1IN28_SendCommand+0x4c>)
 800144a:	f001 fd6b 	bl	8002f24 <HAL_GPIO_WritePin>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	48000400 	.word	0x48000400
 800145c:	2005c44c 	.word	0x2005c44c

08001460 <LCD_1IN28_SendData_8Bit>:
/******************************************************************************
 function :	send data
 parameter:
 Data : Write data
 ******************************************************************************/
static void LCD_1IN28_SendData_8Bit(uint8_t data) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	SET_DC_HIGH;
 800146a:	2201      	movs	r2, #1
 800146c:	2120      	movs	r1, #32
 800146e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001472:	f001 fd57 	bl	8002f24 <HAL_GPIO_WritePin>
	SET_CS_LOW;
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800147c:	480b      	ldr	r0, [pc, #44]	@ (80014ac <LCD_1IN28_SendData_8Bit+0x4c>)
 800147e:	f001 fd51 	bl	8002f24 <HAL_GPIO_WritePin>
	uint8_t buf[1] = { data };
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 500);
 8001486:	f107 010c 	add.w	r1, r7, #12
 800148a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800148e:	2201      	movs	r2, #1
 8001490:	4807      	ldr	r0, [pc, #28]	@ (80014b0 <LCD_1IN28_SendData_8Bit+0x50>)
 8001492:	f003 fefc 	bl	800528e <HAL_SPI_Transmit>
	SET_CS_HIGH;
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149c:	4803      	ldr	r0, [pc, #12]	@ (80014ac <LCD_1IN28_SendData_8Bit+0x4c>)
 800149e:	f001 fd41 	bl	8002f24 <HAL_GPIO_WritePin>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	48000400 	.word	0x48000400
 80014b0:	2005c44c 	.word	0x2005c44c

080014b4 <LCD_1IN28_InitReg>:

/******************************************************************************
 function :	Initialize the lcd register
 parameter:
 ******************************************************************************/
static void LCD_1IN28_InitReg(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	LCD_1IN28_SendCommand(0xEF);
 80014b8:	20ef      	movs	r0, #239	@ 0xef
 80014ba:	f7ff ffa7 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 80014be:	20eb      	movs	r0, #235	@ 0xeb
 80014c0:	f7ff ffa4 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14);
 80014c4:	2014      	movs	r0, #20
 80014c6:	f7ff ffcb 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFE);
 80014ca:	20fe      	movs	r0, #254	@ 0xfe
 80014cc:	f7ff ff9e 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF);
 80014d0:	20ef      	movs	r0, #239	@ 0xef
 80014d2:	f7ff ff9b 	bl	800140c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);
 80014d6:	20eb      	movs	r0, #235	@ 0xeb
 80014d8:	f7ff ff98 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14);
 80014dc:	2014      	movs	r0, #20
 80014de:	f7ff ffbf 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);
 80014e2:	2084      	movs	r0, #132	@ 0x84
 80014e4:	f7ff ff92 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40);
 80014e8:	2040      	movs	r0, #64	@ 0x40
 80014ea:	f7ff ffb9 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);
 80014ee:	2085      	movs	r0, #133	@ 0x85
 80014f0:	f7ff ff8c 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 80014f4:	20ff      	movs	r0, #255	@ 0xff
 80014f6:	f7ff ffb3 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);
 80014fa:	2086      	movs	r0, #134	@ 0x86
 80014fc:	f7ff ff86 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8001500:	20ff      	movs	r0, #255	@ 0xff
 8001502:	f7ff ffad 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);
 8001506:	2087      	movs	r0, #135	@ 0x87
 8001508:	f7ff ff80 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 800150c:	20ff      	movs	r0, #255	@ 0xff
 800150e:	f7ff ffa7 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);
 8001512:	2088      	movs	r0, #136	@ 0x88
 8001514:	f7ff ff7a 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8001518:	200a      	movs	r0, #10
 800151a:	f7ff ffa1 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);
 800151e:	2089      	movs	r0, #137	@ 0x89
 8001520:	f7ff ff74 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8001524:	2021      	movs	r0, #33	@ 0x21
 8001526:	f7ff ff9b 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);
 800152a:	208a      	movs	r0, #138	@ 0x8a
 800152c:	f7ff ff6e 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff ff95 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);
 8001536:	208b      	movs	r0, #139	@ 0x8b
 8001538:	f7ff ff68 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80);
 800153c:	2080      	movs	r0, #128	@ 0x80
 800153e:	f7ff ff8f 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);
 8001542:	208c      	movs	r0, #140	@ 0x8c
 8001544:	f7ff ff62 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01);
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff ff89 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);
 800154e:	208d      	movs	r0, #141	@ 0x8d
 8001550:	f7ff ff5c 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ff83 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);
 800155a:	208e      	movs	r0, #142	@ 0x8e
 800155c:	f7ff ff56 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8001560:	20ff      	movs	r0, #255	@ 0xff
 8001562:	f7ff ff7d 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);
 8001566:	208f      	movs	r0, #143	@ 0x8f
 8001568:	f7ff ff50 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 800156c:	20ff      	movs	r0, #255	@ 0xff
 800156e:	f7ff ff77 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xB6);
 8001572:	20b6      	movs	r0, #182	@ 0xb6
 8001574:	f7ff ff4a 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff71 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 800157e:	2020      	movs	r0, #32
 8001580:	f7ff ff6e 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8001584:	2036      	movs	r0, #54	@ 0x36
 8001586:	f7ff ff41 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08); //Set as vertical screen
 800158a:	2008      	movs	r0, #8
 800158c:	f7ff ff68 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);
 8001590:	203a      	movs	r0, #58	@ 0x3a
 8001592:	f7ff ff3b 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05);
 8001596:	2005      	movs	r0, #5
 8001598:	f7ff ff62 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x90);
 800159c:	2090      	movs	r0, #144	@ 0x90
 800159e:	f7ff ff35 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 80015a2:	2008      	movs	r0, #8
 80015a4:	f7ff ff5c 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80015a8:	2008      	movs	r0, #8
 80015aa:	f7ff ff59 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80015ae:	2008      	movs	r0, #8
 80015b0:	f7ff ff56 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80015b4:	2008      	movs	r0, #8
 80015b6:	f7ff ff53 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);
 80015ba:	20bd      	movs	r0, #189	@ 0xbd
 80015bc:	f7ff ff26 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 80015c0:	2006      	movs	r0, #6
 80015c2:	f7ff ff4d 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBC);
 80015c6:	20bc      	movs	r0, #188	@ 0xbc
 80015c8:	f7ff ff20 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ff47 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);
 80015d2:	20ff      	movs	r0, #255	@ 0xff
 80015d4:	f7ff ff1a 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 80015d8:	2060      	movs	r0, #96	@ 0x60
 80015da:	f7ff ff41 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff ff3e 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 80015e4:	2004      	movs	r0, #4
 80015e6:	f7ff ff3b 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);
 80015ea:	20c3      	movs	r0, #195	@ 0xc3
 80015ec:	f7ff ff0e 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80015f0:	2013      	movs	r0, #19
 80015f2:	f7ff ff35 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);
 80015f6:	20c4      	movs	r0, #196	@ 0xc4
 80015f8:	f7ff ff08 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 80015fc:	2013      	movs	r0, #19
 80015fe:	f7ff ff2f 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);
 8001602:	20c9      	movs	r0, #201	@ 0xc9
 8001604:	f7ff ff02 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001608:	2022      	movs	r0, #34	@ 0x22
 800160a:	f7ff ff29 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);
 800160e:	20be      	movs	r0, #190	@ 0xbe
 8001610:	f7ff fefc 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11);
 8001614:	2011      	movs	r0, #17
 8001616:	f7ff ff23 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);
 800161a:	20e1      	movs	r0, #225	@ 0xe1
 800161c:	f7ff fef6 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001620:	2010      	movs	r0, #16
 8001622:	f7ff ff1d 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8001626:	200e      	movs	r0, #14
 8001628:	f7ff ff1a 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);
 800162c:	20df      	movs	r0, #223	@ 0xdf
 800162e:	f7ff feed 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8001632:	2021      	movs	r0, #33	@ 0x21
 8001634:	f7ff ff14 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001638:	200c      	movs	r0, #12
 800163a:	f7ff ff11 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 800163e:	2002      	movs	r0, #2
 8001640:	f7ff ff0e 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);
 8001644:	20f0      	movs	r0, #240	@ 0xf0
 8001646:	f7ff fee1 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 800164a:	2045      	movs	r0, #69	@ 0x45
 800164c:	f7ff ff08 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001650:	2009      	movs	r0, #9
 8001652:	f7ff ff05 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001656:	2008      	movs	r0, #8
 8001658:	f7ff ff02 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800165c:	2008      	movs	r0, #8
 800165e:	f7ff feff 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8001662:	2026      	movs	r0, #38	@ 0x26
 8001664:	f7ff fefc 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x2A);
 8001668:	202a      	movs	r0, #42	@ 0x2a
 800166a:	f7ff fef9 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF1);
 800166e:	20f1      	movs	r0, #241	@ 0xf1
 8001670:	f7ff fecc 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x43);
 8001674:	2043      	movs	r0, #67	@ 0x43
 8001676:	f7ff fef3 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800167a:	2070      	movs	r0, #112	@ 0x70
 800167c:	f7ff fef0 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x72);
 8001680:	2072      	movs	r0, #114	@ 0x72
 8001682:	f7ff feed 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x36);
 8001686:	2036      	movs	r0, #54	@ 0x36
 8001688:	f7ff feea 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x37);
 800168c:	2037      	movs	r0, #55	@ 0x37
 800168e:	f7ff fee7 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x6F);
 8001692:	206f      	movs	r0, #111	@ 0x6f
 8001694:	f7ff fee4 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF2);
 8001698:	20f2      	movs	r0, #242	@ 0xf2
 800169a:	f7ff feb7 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 800169e:	2045      	movs	r0, #69	@ 0x45
 80016a0:	f7ff fede 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80016a4:	2009      	movs	r0, #9
 80016a6:	f7ff fedb 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80016aa:	2008      	movs	r0, #8
 80016ac:	f7ff fed8 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80016b0:	2008      	movs	r0, #8
 80016b2:	f7ff fed5 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 80016b6:	2026      	movs	r0, #38	@ 0x26
 80016b8:	f7ff fed2 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x2A);
 80016bc:	202a      	movs	r0, #42	@ 0x2a
 80016be:	f7ff fecf 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF3);
 80016c2:	20f3      	movs	r0, #243	@ 0xf3
 80016c4:	f7ff fea2 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x43);
 80016c8:	2043      	movs	r0, #67	@ 0x43
 80016ca:	f7ff fec9 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80016ce:	2070      	movs	r0, #112	@ 0x70
 80016d0:	f7ff fec6 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x72);
 80016d4:	2072      	movs	r0, #114	@ 0x72
 80016d6:	f7ff fec3 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x36);
 80016da:	2036      	movs	r0, #54	@ 0x36
 80016dc:	f7ff fec0 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x37);
 80016e0:	2037      	movs	r0, #55	@ 0x37
 80016e2:	f7ff febd 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x6F);
 80016e6:	206f      	movs	r0, #111	@ 0x6f
 80016e8:	f7ff feba 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);
 80016ec:	20ed      	movs	r0, #237	@ 0xed
 80016ee:	f7ff fe8d 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B);
 80016f2:	201b      	movs	r0, #27
 80016f4:	f7ff feb4 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B);
 80016f8:	200b      	movs	r0, #11
 80016fa:	f7ff feb1 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);
 80016fe:	20ae      	movs	r0, #174	@ 0xae
 8001700:	f7ff fe84 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001704:	2077      	movs	r0, #119	@ 0x77
 8001706:	f7ff feab 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xCD);
 800170a:	20cd      	movs	r0, #205	@ 0xcd
 800170c:	f7ff fe7e 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);
 8001710:	2063      	movs	r0, #99	@ 0x63
 8001712:	f7ff fea5 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x70);
 8001716:	2070      	movs	r0, #112	@ 0x70
 8001718:	f7ff fe78 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 800171c:	2007      	movs	r0, #7
 800171e:	f7ff fe9f 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001722:	2007      	movs	r0, #7
 8001724:	f7ff fe9c 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001728:	2004      	movs	r0, #4
 800172a:	f7ff fe99 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 800172e:	200e      	movs	r0, #14
 8001730:	f7ff fe96 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8001734:	200f      	movs	r0, #15
 8001736:	f7ff fe93 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 800173a:	2009      	movs	r0, #9
 800173c:	f7ff fe90 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001740:	2007      	movs	r0, #7
 8001742:	f7ff fe8d 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001746:	2008      	movs	r0, #8
 8001748:	f7ff fe8a 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 800174c:	2003      	movs	r0, #3
 800174e:	f7ff fe87 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);
 8001752:	20e8      	movs	r0, #232	@ 0xe8
 8001754:	f7ff fe5a 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001758:	2034      	movs	r0, #52	@ 0x34
 800175a:	f7ff fe81 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);
 800175e:	2062      	movs	r0, #98	@ 0x62
 8001760:	f7ff fe54 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001764:	2018      	movs	r0, #24
 8001766:	f7ff fe7b 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 800176a:	200d      	movs	r0, #13
 800176c:	f7ff fe78 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001770:	2071      	movs	r0, #113	@ 0x71
 8001772:	f7ff fe75 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001776:	20ed      	movs	r0, #237	@ 0xed
 8001778:	f7ff fe72 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800177c:	2070      	movs	r0, #112	@ 0x70
 800177e:	f7ff fe6f 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001782:	2070      	movs	r0, #112	@ 0x70
 8001784:	f7ff fe6c 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001788:	2018      	movs	r0, #24
 800178a:	f7ff fe69 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 800178e:	200f      	movs	r0, #15
 8001790:	f7ff fe66 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001794:	2071      	movs	r0, #113	@ 0x71
 8001796:	f7ff fe63 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 800179a:	20ef      	movs	r0, #239	@ 0xef
 800179c:	f7ff fe60 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80017a0:	2070      	movs	r0, #112	@ 0x70
 80017a2:	f7ff fe5d 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80017a6:	2070      	movs	r0, #112	@ 0x70
 80017a8:	f7ff fe5a 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);
 80017ac:	2063      	movs	r0, #99	@ 0x63
 80017ae:	f7ff fe2d 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80017b2:	2018      	movs	r0, #24
 80017b4:	f7ff fe54 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 80017b8:	2011      	movs	r0, #17
 80017ba:	f7ff fe51 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80017be:	2071      	movs	r0, #113	@ 0x71
 80017c0:	f7ff fe4e 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80017c4:	20f1      	movs	r0, #241	@ 0xf1
 80017c6:	f7ff fe4b 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80017ca:	2070      	movs	r0, #112	@ 0x70
 80017cc:	f7ff fe48 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80017d0:	2070      	movs	r0, #112	@ 0x70
 80017d2:	f7ff fe45 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80017d6:	2018      	movs	r0, #24
 80017d8:	f7ff fe42 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 80017dc:	2013      	movs	r0, #19
 80017de:	f7ff fe3f 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80017e2:	2071      	movs	r0, #113	@ 0x71
 80017e4:	f7ff fe3c 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 80017e8:	20f3      	movs	r0, #243	@ 0xf3
 80017ea:	f7ff fe39 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80017ee:	2070      	movs	r0, #112	@ 0x70
 80017f0:	f7ff fe36 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80017f4:	2070      	movs	r0, #112	@ 0x70
 80017f6:	f7ff fe33 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);
 80017fa:	2064      	movs	r0, #100	@ 0x64
 80017fc:	f7ff fe06 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8001800:	2028      	movs	r0, #40	@ 0x28
 8001802:	f7ff fe2d 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001806:	2029      	movs	r0, #41	@ 0x29
 8001808:	f7ff fe2a 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 800180c:	20f1      	movs	r0, #241	@ 0xf1
 800180e:	f7ff fe27 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff fe24 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001818:	20f1      	movs	r0, #241	@ 0xf1
 800181a:	f7ff fe21 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fe1e 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001824:	2007      	movs	r0, #7
 8001826:	f7ff fe1b 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);
 800182a:	2066      	movs	r0, #102	@ 0x66
 800182c:	f7ff fdee 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001830:	203c      	movs	r0, #60	@ 0x3c
 8001832:	f7ff fe15 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fe12 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 800183c:	20cd      	movs	r0, #205	@ 0xcd
 800183e:	f7ff fe0f 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8001842:	2067      	movs	r0, #103	@ 0x67
 8001844:	f7ff fe0c 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001848:	2045      	movs	r0, #69	@ 0x45
 800184a:	f7ff fe09 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 800184e:	2045      	movs	r0, #69	@ 0x45
 8001850:	f7ff fe06 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001854:	2010      	movs	r0, #16
 8001856:	f7ff fe03 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff fe00 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fdfd 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff fdfa 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);
 800186c:	2067      	movs	r0, #103	@ 0x67
 800186e:	f7ff fdcd 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fdf4 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001878:	203c      	movs	r0, #60	@ 0x3c
 800187a:	f7ff fdf1 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fdee 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fdeb 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fde8 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fde5 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001896:	2054      	movs	r0, #84	@ 0x54
 8001898:	f7ff fde2 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 800189c:	2010      	movs	r0, #16
 800189e:	f7ff fddf 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 80018a2:	2032      	movs	r0, #50	@ 0x32
 80018a4:	f7ff fddc 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 80018a8:	2098      	movs	r0, #152	@ 0x98
 80018aa:	f7ff fdd9 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);
 80018ae:	2074      	movs	r0, #116	@ 0x74
 80018b0:	f7ff fdac 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 80018b4:	2010      	movs	r0, #16
 80018b6:	f7ff fdd3 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);
 80018ba:	2085      	movs	r0, #133	@ 0x85
 80018bc:	f7ff fdd0 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 80018c0:	2080      	movs	r0, #128	@ 0x80
 80018c2:	f7ff fdcd 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff fdca 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fdc7 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 80018d2:	204e      	movs	r0, #78	@ 0x4e
 80018d4:	f7ff fdc4 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fdc1 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x98);
 80018de:	2098      	movs	r0, #152	@ 0x98
 80018e0:	f7ff fd94 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 80018e4:	203e      	movs	r0, #62	@ 0x3e
 80018e6:	f7ff fdbb 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80018ea:	2007      	movs	r0, #7
 80018ec:	f7ff fdb8 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);
 80018f0:	2035      	movs	r0, #53	@ 0x35
 80018f2:	f7ff fd8b 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 80018f6:	2021      	movs	r0, #33	@ 0x21
 80018f8:	f7ff fd88 	bl	800140c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 80018fc:	2011      	movs	r0, #17
 80018fe:	f7ff fd85 	bl	800140c <LCD_1IN28_SendCommand>
	HAL_Delay(120);
 8001902:	2078      	movs	r0, #120	@ 0x78
 8001904:	f001 f846 	bl	8002994 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8001908:	2029      	movs	r0, #41	@ 0x29
 800190a:	f7ff fd7f 	bl	800140c <LCD_1IN28_SendCommand>
	HAL_Delay(20);
 800190e:	2014      	movs	r0, #20
 8001910:	f001 f840 	bl	8002994 <HAL_Delay>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <LCD_1IN28_SetAttributes>:
/********************************************************************************
 function:	Set the resolution and scanning method of the screen
 parameter:
 Scan_dir:   Scan direction
 ********************************************************************************/
static void LCD_1IN28_SetAttributes(uint8_t scan_dir) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	LCD_1IN28.SCAN_DIR = scan_dir;
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <LCD_1IN28_SetAttributes+0x54>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	7113      	strb	r3, [r2, #4]
	uint8_t MemoryAccessReg = 0x08;
 8001928:	2308      	movs	r3, #8
 800192a:	73fb      	strb	r3, [r7, #15]

	//Get GRAM and LCD width and height
	if (scan_dir == HORIZONTAL) {
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d108      	bne.n	8001944 <LCD_1IN28_SetAttributes+0x2c>
		LCD_1IN28.HEIGHT = LCD_1IN28_HEIGHT;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <LCD_1IN28_SetAttributes+0x54>)
 8001934:	22f0      	movs	r2, #240	@ 0xf0
 8001936:	805a      	strh	r2, [r3, #2]
		LCD_1IN28.WIDTH = LCD_1IN28_WIDTH;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <LCD_1IN28_SetAttributes+0x54>)
 800193a:	22f0      	movs	r2, #240	@ 0xf0
 800193c:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0XC8;
 800193e:	23c8      	movs	r3, #200	@ 0xc8
 8001940:	73fb      	strb	r3, [r7, #15]
 8001942:	e007      	b.n	8001954 <LCD_1IN28_SetAttributes+0x3c>
	} else {
		LCD_1IN28.HEIGHT = LCD_1IN28_WIDTH;
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <LCD_1IN28_SetAttributes+0x54>)
 8001946:	22f0      	movs	r2, #240	@ 0xf0
 8001948:	805a      	strh	r2, [r3, #2]
		LCD_1IN28.WIDTH = LCD_1IN28_HEIGHT;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <LCD_1IN28_SetAttributes+0x54>)
 800194c:	22f0      	movs	r2, #240	@ 0xf0
 800194e:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0X68;
 8001950:	2368      	movs	r3, #104	@ 0x68
 8001952:	73fb      	strb	r3, [r7, #15]
	}

	// Set the read / write scan direction of the frame memory
	LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8001954:	2036      	movs	r0, #54	@ 0x36
 8001956:	f7ff fd59 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fd7f 	bl	8001460 <LCD_1IN28_SendData_8Bit>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20040218 	.word	0x20040218

08001970 <screen_init>:

/********************************************************************************
 function :	Initialize the lcd
 parameter:
 ********************************************************************************/
void screen_init(uint8_t scan_dir) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	SET_DC_HIGH;
 800197a:	2201      	movs	r2, #1
 800197c:	2120      	movs	r1, #32
 800197e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001982:	f001 facf 	bl	8002f24 <HAL_GPIO_WritePin>
	SET_CS_HIGH;
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800198c:	480a      	ldr	r0, [pc, #40]	@ (80019b8 <screen_init+0x48>)
 800198e:	f001 fac9 	bl	8002f24 <HAL_GPIO_WritePin>
	SET_RST_HIGH;
 8001992:	2201      	movs	r2, #1
 8001994:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001998:	4807      	ldr	r0, [pc, #28]	@ (80019b8 <screen_init+0x48>)
 800199a:	f001 fac3 	bl	8002f24 <HAL_GPIO_WritePin>
	//Hardware reset
	screen_reset();
 800199e:	f7ff fd13 	bl	80013c8 <screen_reset>
	//Set the resolution and scanning method of the screen
	LCD_1IN28_SetAttributes(scan_dir);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ffb7 	bl	8001918 <LCD_1IN28_SetAttributes>
	//Set the initialization register
	LCD_1IN28_InitReg();
 80019aa:	f7ff fd83 	bl	80014b4 <LCD_1IN28_InitReg>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	48000400 	.word	0x48000400

080019bc <screen_set_windows>:
 Ystart  :   Y direction Start coordinates
 Xend    :   X direction end coordinates
 Yend    :   Y direction end coordinates
 ********************************************************************************/
void screen_set_windows(uint8_t Xstart, uint8_t Ystart, uint8_t Xend,
		uint8_t Yend) {
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4604      	mov	r4, r0
 80019c4:	4608      	mov	r0, r1
 80019c6:	4611      	mov	r1, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	4603      	mov	r3, r0
 80019d0:	71bb      	strb	r3, [r7, #6]
 80019d2:	460b      	mov	r3, r1
 80019d4:	717b      	strb	r3, [r7, #5]
 80019d6:	4613      	mov	r3, r2
 80019d8:	713b      	strb	r3, [r7, #4]
	//set the X coordinates
	LCD_1IN28_SendCommand(0x2A);
 80019da:	202a      	movs	r0, #42	@ 0x2a
 80019dc:	f7ff fd16 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fd3d 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Xstart);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fd39 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff fd36 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Xend);
 80019f4:	797b      	ldrb	r3, [r7, #5]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fd32 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	//set the Y coordinates
	LCD_1IN28_SendCommand(0x2B);
 80019fc:	202b      	movs	r0, #43	@ 0x2b
 80019fe:	f7ff fd05 	bl	800140c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff fd2c 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Ystart);
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd28 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fd25 	bl	8001460 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Yend);
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fd21 	bl	8001460 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0X2C);
 8001a1e:	202c      	movs	r0, #44	@ 0x2c
 8001a20:	f7ff fcf4 	bl	800140c <LCD_1IN28_SendCommand>
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}

08001a2c <screen_clear>:

/******************************************************************************
 function :	Clear screen
 parameter:
 ******************************************************************************/
void screen_clear(uint16_t color) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 240; i++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e016      	b.n	8001a6a <screen_clear+0x3e>
		for (int j = 0; j < 240; j++) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	e00d      	b.n	8001a5e <screen_clear+0x32>
			pixels[i][j] = color;
 8001a42:	4910      	ldr	r1, [pc, #64]	@ (8001a84 <screen_clear+0x58>)
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	4413      	add	r3, r2
 8001a52:	88fa      	ldrh	r2, [r7, #6]
 8001a54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < 240; j++) {
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2bef      	cmp	r3, #239	@ 0xef
 8001a62:	ddee      	ble.n	8001a42 <screen_clear+0x16>
	for (int i = 0; i < 240; i++) {
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3301      	adds	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2bef      	cmp	r3, #239	@ 0xef
 8001a6e:	dde5      	ble.n	8001a3c <screen_clear+0x10>
		}
	}
	_update_delta(0, 0, 239, 239);
 8001a70:	23ef      	movs	r3, #239	@ 0xef
 8001a72:	22ef      	movs	r2, #239	@ 0xef
 8001a74:	2100      	movs	r1, #0
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff fb74 	bl	8001164 <_update_delta>
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20040228 	.word	0x20040228

08001a88 <screen_set_point>:

void screen_set_point(uint16_t x, uint16_t y, uint16_t color) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	460b      	mov	r3, r1
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	807b      	strh	r3, [r7, #2]
	pixels[y][x] = color;
 8001a9a:	88ba      	ldrh	r2, [r7, #4]
 8001a9c:	88f9      	ldrh	r1, [r7, #6]
 8001a9e:	4809      	ldr	r0, [pc, #36]	@ (8001ac4 <screen_set_point+0x3c>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	440b      	add	r3, r1
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	_update_delta(x, y, x, y);
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	88b9      	ldrh	r1, [r7, #4]
 8001ab6:	88f8      	ldrh	r0, [r7, #6]
 8001ab8:	f7ff fb54 	bl	8001164 <_update_delta>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20040228 	.word	0x20040228

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001acc:	f000 feed 	bl	80028aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad0:	f000 f820 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad4:	f000 f9e2 	bl	8001e9c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ad8:	f000 f932 	bl	8001d40 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001adc:	f000 f8f2 	bl	8001cc4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001ae0:	f000 f860 	bl	8001ba4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  screen_init(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff ff43 	bl	8001970 <screen_init>
  screen_clear(0x0);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff ff9e 	bl	8001a2c <screen_clear>
  Paint_SetClearFunction(&screen_clear);
 8001af0:	4806      	ldr	r0, [pc, #24]	@ (8001b0c <main+0x44>)
 8001af2:	f7ff f963 	bl	8000dbc <Paint_SetClearFunction>
  Paint_SetDisplayFunction(&screen_set_point);
 8001af6:	4806      	ldr	r0, [pc, #24]	@ (8001b10 <main+0x48>)
 8001af8:	f7ff f970 	bl	8000ddc <Paint_SetDisplayFunction>
  Paint_NewImage(240, 240, ROTATE_0, BLACK);
 8001afc:	2300      	movs	r3, #0
 8001afe:	2200      	movs	r2, #0
 8001b00:	21f0      	movs	r1, #240	@ 0xf0
 8001b02:	20f0      	movs	r0, #240	@ 0xf0
 8001b04:	f7ff f90e 	bl	8000d24 <Paint_NewImage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <main+0x40>
 8001b0c:	08001a2d 	.word	0x08001a2d
 8001b10:	08001a89 	.word	0x08001a89

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b096      	sub	sp, #88	@ 0x58
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	2244      	movs	r2, #68	@ 0x44
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f005 ff86 	bl	8007a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b3a:	f001 fa2b 	bl	8002f94 <HAL_PWREx_ControlVoltageScaling>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b44:	f000 fbec 	bl	8002320 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001b48:	2318      	movs	r3, #24
 8001b4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b58:	2360      	movs	r3, #96	@ 0x60
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 fac9 	bl	80030fc <HAL_RCC_OscConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001b70:	f000 fbd6 	bl	8002320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b74:	230f      	movs	r3, #15
 8001b76:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f001 fecf 	bl	8003930 <HAL_RCC_ClockConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001b98:	f000 fbc2 	bl	8002320 <Error_Handler>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3758      	adds	r7, #88	@ 0x58
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b092      	sub	sp, #72	@ 0x48
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001baa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bba:	2300      	movs	r3, #0
 8001bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	222c      	movs	r2, #44	@ 0x2c
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f005 ff35 	bl	8007a34 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bca:	4b3c      	ldr	r3, [pc, #240]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc0 <MX_RTC_Init+0x11c>)
 8001bce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bd6:	4b39      	ldr	r3, [pc, #228]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001bd8:	227f      	movs	r2, #127	@ 0x7f
 8001bda:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bdc:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001bde:	22ff      	movs	r2, #255	@ 0xff
 8001be0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001be2:	4b36      	ldr	r3, [pc, #216]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001be8:	4b34      	ldr	r3, [pc, #208]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bee:	4b33      	ldr	r3, [pc, #204]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bf4:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bfa:	4830      	ldr	r0, [pc, #192]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001bfc:	f002 fe36 	bl	800486c <HAL_RTC_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c06:	f000 fb8b 	bl	8002320 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x6;
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x50;
 8001c10:	2350      	movs	r3, #80	@ 0x50
 8001c12:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4823      	ldr	r0, [pc, #140]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001c2e:	f002 fea5 	bl	800497c <HAL_RTC_SetTime>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001c38:	f000 fb72 	bl	8002320 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_MARCH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x18;
 8001c48:	2318      	movs	r3, #24
 8001c4a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x25;
 8001c4e:	2325      	movs	r3, #37	@ 0x25
 8001c50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4817      	ldr	r0, [pc, #92]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001c5e:	f002 ff86 	bl	8004b6e <HAL_RTC_SetDate>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001c68:	f000 fb5a 	bl	8002320 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS;
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001c96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	@ (8001cbc <MX_RTC_Init+0x118>)
 8001ca4:	f002 ffea 	bl	8004c7c <HAL_RTC_SetAlarm_IT>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001cae:	f000 fb37 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	3748      	adds	r7, #72	@ 0x48
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2005c428 	.word	0x2005c428
 8001cc0:	40002800 	.word	0x40002800

08001cc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cca:	4a1c      	ldr	r2, [pc, #112]	@ (8001d3c <MX_SPI1_Init+0x78>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cde:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ce2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cea:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d12:	2207      	movs	r2, #7
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d1e:	2208      	movs	r2, #8
 8001d20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d24:	f003 fa10 	bl	8005148 <HAL_SPI_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d2e:	f000 faf7 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2005c44c 	.word	0x2005c44c
 8001d3c:	40013000 	.word	0x40013000

08001d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b09a      	sub	sp, #104	@ 0x68
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
 8001d70:	615a      	str	r2, [r3, #20]
 8001d72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	222c      	movs	r2, #44	@ 0x2c
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f005 fe5a 	bl	8007a34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d80:	4b44      	ldr	r3, [pc, #272]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001d82:	4a45      	ldr	r2, [pc, #276]	@ (8001e98 <MX_TIM1_Init+0x158>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 299;
 8001d86:	4b43      	ldr	r3, [pc, #268]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001d88:	f240 122b 	movw	r2, #299	@ 0x12b
 8001d8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8e:	4b41      	ldr	r3, [pc, #260]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d94:	4b3f      	ldr	r3, [pc, #252]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001d96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001da2:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da8:	4b3a      	ldr	r3, [pc, #232]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001daa:	2280      	movs	r2, #128	@ 0x80
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dae:	4839      	ldr	r0, [pc, #228]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001db0:	f003 fd48 	bl	8005844 <HAL_TIM_Base_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001dba:	f000 fab1 	bl	8002320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dc4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4832      	ldr	r0, [pc, #200]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001dcc:	f003 ff06 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001dd6:	f000 faa3 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dda:	482e      	ldr	r0, [pc, #184]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001ddc:	f003 fd89 	bl	80058f2 <HAL_TIM_PWM_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001de6:	f000 fa9b 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4825      	ldr	r0, [pc, #148]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001dfe:	f004 fbcd 	bl	800659c <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001e08:	f000 fa8a 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0c:	2360      	movs	r3, #96	@ 0x60
 8001e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4818      	ldr	r0, [pc, #96]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001e32:	f003 fdbf 	bl	80059b4 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e3c:	f000 fa70 	bl	8002320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001e76:	f004 fc19 	bl	80066ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001e80:	f000 fa4e 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e84:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <MX_TIM1_Init+0x154>)
 8001e86:	f000 fb65 	bl	8002554 <HAL_TIM_MspPostInit>

}
 8001e8a:	bf00      	nop
 8001e8c:	3768      	adds	r7, #104	@ 0x68
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2005c4b0 	.word	0x2005c4b0
 8001e98:	40012c00 	.word	0x40012c00

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08e      	sub	sp, #56	@ 0x38
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eb2:	4bb4      	ldr	r3, [pc, #720]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	4ab3      	ldr	r2, [pc, #716]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001eb8:	f043 0310 	orr.w	r3, r3, #16
 8001ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ebe:	4bb1      	ldr	r3, [pc, #708]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	4bae      	ldr	r3, [pc, #696]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	4aad      	ldr	r2, [pc, #692]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed6:	4bab      	ldr	r3, [pc, #684]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ee2:	4ba8      	ldr	r3, [pc, #672]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	4aa7      	ldr	r2, [pc, #668]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001ee8:	f043 0320 	orr.w	r3, r3, #32
 8001eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eee:	4ba5      	ldr	r3, [pc, #660]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efa:	4ba2      	ldr	r3, [pc, #648]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efe:	4aa1      	ldr	r2, [pc, #644]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f06:	4b9f      	ldr	r3, [pc, #636]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4b9c      	ldr	r3, [pc, #624]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	4a9b      	ldr	r2, [pc, #620]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f1e:	4b99      	ldr	r3, [pc, #612]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	4b96      	ldr	r3, [pc, #600]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	4a95      	ldr	r2, [pc, #596]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f36:	4b93      	ldr	r3, [pc, #588]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f42:	4b90      	ldr	r3, [pc, #576]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	4a8f      	ldr	r2, [pc, #572]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	4a89      	ldr	r2, [pc, #548]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f66:	4b87      	ldr	r3, [pc, #540]	@ (8002184 <MX_GPIO_Init+0x2e8>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001f72:	f001 f8b3 	bl	80030dc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCRN_DC_Pin|RST_Screen_Pin|DC_Screen_Pin|CS_S_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 6162 	mov.w	r1, #3616	@ 0xe20
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f80:	f000 ffd0 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_Shutdown_GPIO_Port, ACC_Shutdown_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2104      	movs	r1, #4
 8001f88:	487f      	ldr	r0, [pc, #508]	@ (8002188 <MX_GPIO_Init+0x2ec>)
 8001f8a:	f000 ffcb 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCRN_CS_Pin|SCRN_RST_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001f94:	487d      	ldr	r0, [pc, #500]	@ (800218c <MX_GPIO_Init+0x2f0>)
 8001f96:	f000 ffc5 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001faa:	230d      	movs	r3, #13
 8001fac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4876      	ldr	r0, [pc, #472]	@ (8002190 <MX_GPIO_Init+0x2f4>)
 8001fb6:	f000 fe23 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fbe:	2312      	movs	r3, #18
 8001fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	486f      	ldr	r0, [pc, #444]	@ (8002194 <MX_GPIO_Init+0x2f8>)
 8001fd6:	f000 fe13 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fea:	230d      	movs	r3, #13
 8001fec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4867      	ldr	r0, [pc, #412]	@ (8002194 <MX_GPIO_Init+0x2f8>)
 8001ff6:	f000 fe03 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ffa:	230f      	movs	r3, #15
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ffe:	230b      	movs	r3, #11
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200a:	4619      	mov	r1, r3
 800200c:	4862      	ldr	r0, [pc, #392]	@ (8002198 <MX_GPIO_Init+0x2fc>)
 800200e:	f000 fdf7 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_Haptic_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_Haptic_Pin;
 8002012:	2301      	movs	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002022:	2301      	movs	r3, #1
 8002024:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TIM2_CH1_Haptic_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002030:	f000 fde6 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002034:	2308      	movs	r3, #8
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002038:	230b      	movs	r3, #11
 800203a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800204a:	f000 fdd9 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCRN_DC_Pin RST_Screen_Pin DC_Screen_Pin CS_S_Pin */
  GPIO_InitStruct.Pin = SCRN_DC_Pin|RST_Screen_Pin|DC_Screen_Pin|CS_S_Pin;
 800204e:	f44f 6362 	mov.w	r3, #3616	@ 0xe20
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800206a:	f000 fdc9 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800206e:	2330      	movs	r3, #48	@ 0x30
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800207e:	2307      	movs	r3, #7
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	4843      	ldr	r0, [pc, #268]	@ (8002198 <MX_GPIO_Init+0x2fc>)
 800208a:	f000 fdb9 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800208e:	2301      	movs	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800209e:	2302      	movs	r3, #2
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	4838      	ldr	r0, [pc, #224]	@ (800218c <MX_GPIO_Init+0x2f0>)
 80020aa:	f000 fda9 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020ae:	2302      	movs	r3, #2
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020b2:	230b      	movs	r3, #11
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020be:	4619      	mov	r1, r3
 80020c0:	4832      	ldr	r0, [pc, #200]	@ (800218c <MX_GPIO_Init+0x2f0>)
 80020c2:	f000 fd9d 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020c6:	2304      	movs	r3, #4
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ca:	2303      	movs	r3, #3
 80020cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	482c      	ldr	r0, [pc, #176]	@ (800218c <MX_GPIO_Init+0x2f0>)
 80020da:	f000 fd91 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020f0:	2301      	movs	r3, #1
 80020f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f8:	4619      	mov	r1, r3
 80020fa:	4824      	ldr	r0, [pc, #144]	@ (800218c <MX_GPIO_Init+0x2f0>)
 80020fc:	f000 fd80 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002100:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002112:	230d      	movs	r3, #13
 8002114:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	481b      	ldr	r0, [pc, #108]	@ (800218c <MX_GPIO_Init+0x2f0>)
 800211e:	f000 fd6f 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002122:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002134:	230e      	movs	r3, #14
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4813      	ldr	r0, [pc, #76]	@ (800218c <MX_GPIO_Init+0x2f0>)
 8002140:	f000 fd5e 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002144:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002156:	2302      	movs	r3, #2
 8002158:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215e:	4619      	mov	r1, r3
 8002160:	4809      	ldr	r0, [pc, #36]	@ (8002188 <MX_GPIO_Init+0x2ec>)
 8002162:	f000 fd4d 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002166:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002178:	2308      	movs	r3, #8
 800217a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800217c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002180:	e00c      	b.n	800219c <MX_GPIO_Init+0x300>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	48000c00 	.word	0x48000c00
 800218c:	48000400 	.word	0x48000400
 8002190:	48001000 	.word	0x48001000
 8002194:	48001400 	.word	0x48001400
 8002198:	48000800 	.word	0x48000800
 800219c:	4619      	mov	r1, r3
 800219e:	485b      	ldr	r0, [pc, #364]	@ (800230c <MX_GPIO_Init+0x470>)
 80021a0:	f000 fd2e 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a4:	2340      	movs	r3, #64	@ 0x40
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80021b4:	230d      	movs	r3, #13
 80021b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021bc:	4619      	mov	r1, r3
 80021be:	4854      	ldr	r0, [pc, #336]	@ (8002310 <MX_GPIO_Init+0x474>)
 80021c0:	f000 fd1e 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d4:	2302      	movs	r3, #2
 80021d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021dc:	4619      	mov	r1, r3
 80021de:	484c      	ldr	r0, [pc, #304]	@ (8002310 <MX_GPIO_Init+0x474>)
 80021e0:	f000 fd0e 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80021e4:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021f6:	230c      	movs	r3, #12
 80021f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4843      	ldr	r0, [pc, #268]	@ (8002310 <MX_GPIO_Init+0x474>)
 8002202:	f000 fcfd 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002206:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002218:	2306      	movs	r3, #6
 800221a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	483b      	ldr	r0, [pc, #236]	@ (8002310 <MX_GPIO_Init+0x474>)
 8002224:	f000 fcec 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002228:	2301      	movs	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002238:	2309      	movs	r3, #9
 800223a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002240:	4619      	mov	r1, r3
 8002242:	4834      	ldr	r0, [pc, #208]	@ (8002314 <MX_GPIO_Init+0x478>)
 8002244:	f000 fcdc 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_Shutdown_Pin */
  GPIO_InitStruct.Pin = ACC_Shutdown_Pin;
 8002248:	2304      	movs	r3, #4
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACC_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	482d      	ldr	r0, [pc, #180]	@ (8002314 <MX_GPIO_Init+0x478>)
 8002260:	f000 fcce 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002264:	2378      	movs	r3, #120	@ 0x78
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002274:	2307      	movs	r3, #7
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800227c:	4619      	mov	r1, r3
 800227e:	4825      	ldr	r0, [pc, #148]	@ (8002314 <MX_GPIO_Init+0x478>)
 8002280:	f000 fcbe 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002284:	2310      	movs	r3, #16
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002294:	2306      	movs	r3, #6
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	481e      	ldr	r0, [pc, #120]	@ (8002318 <MX_GPIO_Init+0x47c>)
 80022a0:	f000 fcae 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a4:	23c0      	movs	r3, #192	@ 0xc0
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a8:	2312      	movs	r3, #18
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022b4:	2304      	movs	r3, #4
 80022b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022bc:	4619      	mov	r1, r3
 80022be:	4816      	ldr	r0, [pc, #88]	@ (8002318 <MX_GPIO_Init+0x47c>)
 80022c0:	f000 fc9e 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCRN_CS_Pin SCRN_RST_Pin */
  GPIO_InitStruct.Pin = SCRN_CS_Pin|SCRN_RST_Pin;
 80022c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	480e      	ldr	r0, [pc, #56]	@ (8002318 <MX_GPIO_Init+0x47c>)
 80022de:	f000 fc8f 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022e2:	2301      	movs	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022f2:	2302      	movs	r3, #2
 80022f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022fa:	4619      	mov	r1, r3
 80022fc:	4807      	ldr	r0, [pc, #28]	@ (800231c <MX_GPIO_Init+0x480>)
 80022fe:	f000 fc7f 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002302:	bf00      	nop
 8002304:	3738      	adds	r7, #56	@ 0x38
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	48001800 	.word	0x48001800
 8002310:	48000800 	.word	0x48000800
 8002314:	48000c00 	.word	0x48000c00
 8002318:	48000400 	.word	0x48000400
 800231c:	48001000 	.word	0x48001000

08002320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <Error_Handler+0x8>

0800232c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <HAL_MspInit+0x44>)
 8002334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002336:	4a0e      	ldr	r2, [pc, #56]	@ (8002370 <HAL_MspInit+0x44>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6613      	str	r3, [r2, #96]	@ 0x60
 800233e:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <HAL_MspInit+0x44>)
 8002340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_MspInit+0x44>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	4a08      	ldr	r2, [pc, #32]	@ (8002370 <HAL_MspInit+0x44>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002354:	6593      	str	r3, [r2, #88]	@ 0x58
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_MspInit+0x44>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0a8      	sub	sp, #160	@ 0xa0
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2294      	movs	r2, #148	@ 0x94
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f005 fb55 	bl	8007a34 <memset>
  if(hrtc->Instance==RTC)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a14      	ldr	r2, [pc, #80]	@ (80023e0 <HAL_RTC_MspInit+0x6c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d120      	bne.n	80023d6 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002394:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002398:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800239a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800239e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 fd48 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80023b2:	f7ff ffb5 	bl	8002320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_RTC_MspInit+0x70>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023bc:	4a09      	ldr	r2, [pc, #36]	@ (80023e4 <HAL_RTC_MspInit+0x70>)
 80023be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2029      	movs	r0, #41	@ 0x29
 80023cc:	f000 fbe1 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023d0:	2029      	movs	r0, #41	@ 0x29
 80023d2:	f000 fbfa 	bl	8002bca <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80023d6:	bf00      	nop
 80023d8:	37a0      	adds	r7, #160	@ 0xa0
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40002800 	.word	0x40002800
 80023e4:	40021000 	.word	0x40021000

080023e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a25      	ldr	r2, [pc, #148]	@ (800249c <HAL_SPI_MspInit+0xb4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d144      	bne.n	8002494 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800240a:	4b25      	ldr	r3, [pc, #148]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 800240c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240e:	4a24      	ldr	r2, [pc, #144]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 8002410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002414:	6613      	str	r3, [r2, #96]	@ 0x60
 8002416:	4b22      	ldr	r3, [pc, #136]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b1f      	ldr	r3, [pc, #124]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002426:	4a1e      	ldr	r2, [pc, #120]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242e:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	4a18      	ldr	r2, [pc, #96]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002446:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <HAL_SPI_MspInit+0xb8>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002452:	2350      	movs	r3, #80	@ 0x50
 8002454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245e:	2303      	movs	r3, #3
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002462:	2305      	movs	r3, #5
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002470:	f000 fbc6 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002474:	2328      	movs	r3, #40	@ 0x28
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002484:	2305      	movs	r3, #5
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <HAL_SPI_MspInit+0xbc>)
 8002490:	f000 fbb6 	bl	8002c00 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40013000 	.word	0x40013000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000400 	.word	0x48000400

080024a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a20      	ldr	r2, [pc, #128]	@ (8002548 <HAL_TIM_Base_MspInit+0xa0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d139      	bne.n	800253e <HAL_TIM_Base_MspInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ca:	4b20      	ldr	r3, [pc, #128]	@ (800254c <HAL_TIM_Base_MspInit+0xa4>)
 80024cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ce:	4a1f      	ldr	r2, [pc, #124]	@ (800254c <HAL_TIM_Base_MspInit+0xa4>)
 80024d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <HAL_TIM_Base_MspInit+0xa4>)
 80024d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <HAL_TIM_Base_MspInit+0xa4>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	4a19      	ldr	r2, [pc, #100]	@ (800254c <HAL_TIM_Base_MspInit+0xa4>)
 80024e8:	f043 0310 	orr.w	r3, r3, #16
 80024ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ee:	4b17      	ldr	r3, [pc, #92]	@ (800254c <HAL_TIM_Base_MspInit+0xa4>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 80024fa:	f44f 5322 	mov.w	r3, #10368	@ 0x2880
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800250c:	2301      	movs	r3, #1
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	480e      	ldr	r0, [pc, #56]	@ (8002550 <HAL_TIM_Base_MspInit+0xa8>)
 8002518:	f000 fb72 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800251c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800252e:	2303      	movs	r3, #3
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	@ (8002550 <HAL_TIM_Base_MspInit+0xa8>)
 800253a:	f000 fb61 	bl	8002c00 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	@ 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40021000 	.word	0x40021000
 8002550:	48001000 	.word	0x48001000

08002554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a20      	ldr	r2, [pc, #128]	@ (80025f4 <HAL_TIM_MspPostInit+0xa0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d13a      	bne.n	80025ec <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_TIM_MspPostInit+0xa4>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257a:	4a1f      	ldr	r2, [pc, #124]	@ (80025f8 <HAL_TIM_MspPostInit+0xa4>)
 800257c:	f043 0310 	orr.w	r3, r3, #16
 8002580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002582:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <HAL_TIM_MspPostInit+0xa4>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <HAL_TIM_MspPostInit+0xa4>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	4a19      	ldr	r2, [pc, #100]	@ (80025f8 <HAL_TIM_MspPostInit+0xa4>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800259a:	4b17      	ldr	r3, [pc, #92]	@ (80025f8 <HAL_TIM_MspPostInit+0xa4>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 80025a6:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 80025aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4619      	mov	r1, r3
 80025c2:	480e      	ldr	r0, [pc, #56]	@ (80025fc <HAL_TIM_MspPostInit+0xa8>)
 80025c4:	f000 fb1c 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025da:	2301      	movs	r3, #1
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e8:	f000 fb0a 	bl	8002c00 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	@ 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48001000 	.word	0x48001000

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <NMI_Handler+0x4>

08002608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <HardFault_Handler+0x4>

08002610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <MemManage_Handler+0x4>

08002618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <BusFault_Handler+0x4>

08002620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <UsageFault_Handler+0x4>

08002628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002656:	f000 f97d 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2201      	movs	r2, #1
 800266a:	4619      	mov	r1, r3
 800266c:	480c      	ldr	r0, [pc, #48]	@ (80026a0 <RTC_Alarm_IRQHandler+0x40>)
 800266e:	f002 fa22 	bl	8004ab6 <HAL_RTC_GetTime>


	Paint_DrawString_EN(50, 100, (const char*) time.Seconds + '0', &Font24, BLACK, WHITE);
 8002672:	79bb      	ldrb	r3, [r7, #6]
 8002674:	3330      	adds	r3, #48	@ 0x30
 8002676:	461a      	mov	r2, r3
 8002678:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <RTC_Alarm_IRQHandler+0x44>)
 8002684:	2164      	movs	r1, #100	@ 0x64
 8002686:	2032      	movs	r0, #50	@ 0x32
 8002688:	f7fe fd14 	bl	80010b4 <Paint_DrawString_EN>
	screen_render();
 800268c:	f7fe fdbc 	bl	8001208 <screen_render>

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002690:	4803      	ldr	r0, [pc, #12]	@ (80026a0 <RTC_Alarm_IRQHandler+0x40>)
 8002692:	f002 fc2f 	bl	8004ef4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2005c428 	.word	0x2005c428
 80026a4:	20040000 	.word	0x20040000

080026a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return 1;
 80026ac:	2301      	movs	r3, #1
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_kill>:

int _kill(int pid, int sig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026c2:	f005 fa19 	bl	8007af8 <__errno>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2216      	movs	r2, #22
 80026ca:	601a      	str	r2, [r3, #0]
  return -1;
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_exit>:

void _exit (int status)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ffe7 	bl	80026b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026ea:	bf00      	nop
 80026ec:	e7fd      	b.n	80026ea <_exit+0x12>

080026ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e00a      	b.n	8002716 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002700:	f3af 8000 	nop.w
 8002704:	4601      	mov	r1, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	60ba      	str	r2, [r7, #8]
 800270c:	b2ca      	uxtb	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	dbf0      	blt.n	8002700 <_read+0x12>
  }

  return len;
 800271e:	687b      	ldr	r3, [r7, #4]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e009      	b.n	800274e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	60ba      	str	r2, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3301      	adds	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	dbf1      	blt.n	800273a <_write+0x12>
  }
  return len;
 8002756:	687b      	ldr	r3, [r7, #4]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_close>:

int _close(int file)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002788:	605a      	str	r2, [r3, #4]
  return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_isatty>:

int _isatty(int file)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a0:	2301      	movs	r3, #1
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	@ (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f005 f97e 	bl	8007af8 <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	@ (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	@ (800282c <_sbrk+0x64>)
 8002818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200a0000 	.word	0x200a0000
 8002828:	00000400 	.word	0x00000400
 800282c:	2005c4fc 	.word	0x2005c4fc
 8002830:	2005c650 	.word	0x2005c650

08002834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <SystemInit+0x20>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	4a05      	ldr	r2, [pc, #20]	@ (8002854 <SystemInit+0x20>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002890 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800285c:	f7ff ffea 	bl	8002834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002860:	480c      	ldr	r0, [pc, #48]	@ (8002894 <LoopForever+0x6>)
  ldr r1, =_edata
 8002862:	490d      	ldr	r1, [pc, #52]	@ (8002898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <LoopForever+0xe>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002868:	e002      	b.n	8002870 <LoopCopyDataInit>

0800286a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800286c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286e:	3304      	adds	r3, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002874:	d3f9      	bcc.n	800286a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002878:	4c0a      	ldr	r4, [pc, #40]	@ (80028a4 <LoopForever+0x16>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800287c:	e001      	b.n	8002882 <LoopFillZerobss>

0800287e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002880:	3204      	adds	r2, #4

08002882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002886:	f005 f93d 	bl	8007b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800288a:	f7ff f91d 	bl	8001ac8 <main>

0800288e <LoopForever>:

LoopForever:
    b LoopForever
 800288e:	e7fe      	b.n	800288e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002890:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002894:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8002898:	200401dc 	.word	0x200401dc
  ldr r2, =_sidata
 800289c:	0800d19c 	.word	0x0800d19c
  ldr r2, =_sbss
 80028a0:	200401dc 	.word	0x200401dc
  ldr r4, =_ebss
 80028a4:	2005c650 	.word	0x2005c650

080028a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028a8:	e7fe      	b.n	80028a8 <ADC1_IRQHandler>

080028aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f000 f961 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ba:	2000      	movs	r0, #0
 80028bc:	f000 f80e 	bl	80028dc <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	71fb      	strb	r3, [r7, #7]
 80028ca:	e001      	b.n	80028d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028cc:	f7ff fd2e 	bl	800232c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028d0:	79fb      	ldrb	r3, [r7, #7]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028e8:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <HAL_InitTick+0x6c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d023      	beq.n	8002938 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <HAL_InitTick+0x70>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <HAL_InitTick+0x6c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f96d 	bl	8002be6 <HAL_SYSTICK_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d809      	bhi.n	800292c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f000 f937 	bl	8002b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002924:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <HAL_InitTick+0x74>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e007      	b.n	800293c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e004      	b.n	800293c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e001      	b.n	800293c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20040010 	.word	0x20040010
 800294c:	20040008 	.word	0x20040008
 8002950:	2004000c 	.word	0x2004000c

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20040010 	.word	0x20040010
 8002978:	2005c500 	.word	0x2005c500

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	2005c500 	.word	0x2005c500

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20040010 	.word	0x20040010

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	@ (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	@ (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	@ (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	@ 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	@ 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff29 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff3e 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff31 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ffa2 	bl	8002b38 <SysTick_Config>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0e:	e166      	b.n	8002ede <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8158 	beq.w	8002ed8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d005      	beq.n	8002c40 <HAL_GPIO_Init+0x40>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d130      	bne.n	8002ca2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c76:	2201      	movs	r2, #1
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	f003 0201 	and.w	r2, r3, #1
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d017      	beq.n	8002cde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d123      	bne.n	8002d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	08da      	lsrs	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3208      	adds	r2, #8
 8002cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	220f      	movs	r2, #15
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	08da      	lsrs	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3208      	adds	r2, #8
 8002d2c:	6939      	ldr	r1, [r7, #16]
 8002d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80b2 	beq.w	8002ed8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d74:	4b61      	ldr	r3, [pc, #388]	@ (8002efc <HAL_GPIO_Init+0x2fc>)
 8002d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d78:	4a60      	ldr	r2, [pc, #384]	@ (8002efc <HAL_GPIO_Init+0x2fc>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d80:	4b5e      	ldr	r3, [pc, #376]	@ (8002efc <HAL_GPIO_Init+0x2fc>)
 8002d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f00 <HAL_GPIO_Init+0x300>)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002db6:	d02b      	beq.n	8002e10 <HAL_GPIO_Init+0x210>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a52      	ldr	r2, [pc, #328]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d025      	beq.n	8002e0c <HAL_GPIO_Init+0x20c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a51      	ldr	r2, [pc, #324]	@ (8002f08 <HAL_GPIO_Init+0x308>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01f      	beq.n	8002e08 <HAL_GPIO_Init+0x208>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a50      	ldr	r2, [pc, #320]	@ (8002f0c <HAL_GPIO_Init+0x30c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d019      	beq.n	8002e04 <HAL_GPIO_Init+0x204>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a4f      	ldr	r2, [pc, #316]	@ (8002f10 <HAL_GPIO_Init+0x310>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <HAL_GPIO_Init+0x200>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a4e      	ldr	r2, [pc, #312]	@ (8002f14 <HAL_GPIO_Init+0x314>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00d      	beq.n	8002dfc <HAL_GPIO_Init+0x1fc>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a4d      	ldr	r2, [pc, #308]	@ (8002f18 <HAL_GPIO_Init+0x318>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <HAL_GPIO_Init+0x1f8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a4c      	ldr	r2, [pc, #304]	@ (8002f1c <HAL_GPIO_Init+0x31c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_GPIO_Init+0x1f4>
 8002df0:	2307      	movs	r3, #7
 8002df2:	e00e      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002df4:	2308      	movs	r3, #8
 8002df6:	e00c      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002df8:	2306      	movs	r3, #6
 8002dfa:	e00a      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002dfc:	2305      	movs	r3, #5
 8002dfe:	e008      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e006      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e04:	2303      	movs	r3, #3
 8002e06:	e004      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e002      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e10:	2300      	movs	r3, #0
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e22:	4937      	ldr	r1, [pc, #220]	@ (8002f00 <HAL_GPIO_Init+0x300>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e5a:	4b31      	ldr	r3, [pc, #196]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e7e:	4a28      	ldr	r2, [pc, #160]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e84:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed2:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <HAL_GPIO_Init+0x320>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f ae91 	bne.w	8002c10 <HAL_GPIO_Init+0x10>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010000 	.word	0x40010000
 8002f04:	48000400 	.word	0x48000400
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000c00 	.word	0x48000c00
 8002f10:	48001000 	.word	0x48001000
 8002f14:	48001400 	.word	0x48001400
 8002f18:	48001800 	.word	0x48001800
 8002f1c:	48001c00 	.word	0x48001c00
 8002f20:	40010400 	.word	0x40010400

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f58:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f64:	d102      	bne.n	8002f6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f6a:	e00b      	b.n	8002f84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f6c:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f7a:	d102      	bne.n	8002f82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f80:	e000      	b.n	8002f84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000

08002f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d141      	bne.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d131      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb0:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fb6:	4a46      	ldr	r2, [pc, #280]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc0:	4b43      	ldr	r3, [pc, #268]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fc8:	4a41      	ldr	r2, [pc, #260]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fd0:	4b40      	ldr	r3, [pc, #256]	@ (80030d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2232      	movs	r2, #50	@ 0x32
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	4a3f      	ldr	r2, [pc, #252]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0c9b      	lsrs	r3, r3, #18
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe6:	e002      	b.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fee:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffa:	d102      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f2      	bne.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003002:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d158      	bne.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e057      	b.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003014:	4b2e      	ldr	r3, [pc, #184]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800301a:	4a2d      	ldr	r2, [pc, #180]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003024:	e04d      	b.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800302c:	d141      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800302e:	4b28      	ldr	r3, [pc, #160]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303a:	d131      	bne.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800303c:	4b24      	ldr	r3, [pc, #144]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003042:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800304c:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003054:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800305a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800305c:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2232      	movs	r2, #50	@ 0x32
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	0c9b      	lsrs	r3, r3, #18
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003072:	e002      	b.n	800307a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3b01      	subs	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800307a:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003086:	d102      	bne.n	800308e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f2      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800308e:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309a:	d112      	bne.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e011      	b.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030a6:	4a0a      	ldr	r2, [pc, #40]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030b0:	e007      	b.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030b2:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030ba:	4a05      	ldr	r2, [pc, #20]	@ (80030d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40007000 	.word	0x40007000
 80030d4:	20040008 	.word	0x20040008
 80030d8:	431bde83 	.word	0x431bde83

080030dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ea:	6053      	str	r3, [r2, #4]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40007000 	.word	0x40007000

080030fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f000 bc08 	b.w	8003920 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003110:	4b96      	ldr	r3, [pc, #600]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800311a:	4b94      	ldr	r3, [pc, #592]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80e4 	beq.w	80032fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_RCC_OscConfig+0x4c>
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	f040 808b 	bne.w	8003256 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b01      	cmp	r3, #1
 8003144:	f040 8087 	bne.w	8003256 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003148:	4b88      	ldr	r3, [pc, #544]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_OscConfig+0x64>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e3df      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1a      	ldr	r2, [r3, #32]
 8003164:	4b81      	ldr	r3, [pc, #516]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <HAL_RCC_OscConfig+0x7e>
 8003170:	4b7e      	ldr	r3, [pc, #504]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003178:	e005      	b.n	8003186 <HAL_RCC_OscConfig+0x8a>
 800317a:	4b7c      	ldr	r3, [pc, #496]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 800317c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003186:	4293      	cmp	r3, r2
 8003188:	d223      	bcs.n	80031d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fd94 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e3c0      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319e:	4b73      	ldr	r3, [pc, #460]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a72      	ldr	r2, [pc, #456]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031a4:	f043 0308 	orr.w	r3, r3, #8
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b70      	ldr	r3, [pc, #448]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	496d      	ldr	r1, [pc, #436]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031bc:	4b6b      	ldr	r3, [pc, #428]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	4968      	ldr	r1, [pc, #416]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e025      	b.n	800321e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d2:	4b66      	ldr	r3, [pc, #408]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a65      	ldr	r2, [pc, #404]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031d8:	f043 0308 	orr.w	r3, r3, #8
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b63      	ldr	r3, [pc, #396]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4960      	ldr	r1, [pc, #384]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f0:	4b5e      	ldr	r3, [pc, #376]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	495b      	ldr	r1, [pc, #364]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fd54 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e380      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800321e:	f000 fcc1 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003222:	4602      	mov	r2, r0
 8003224:	4b51      	ldr	r3, [pc, #324]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	4950      	ldr	r1, [pc, #320]	@ (8003370 <HAL_RCC_OscConfig+0x274>)
 8003230:	5ccb      	ldrb	r3, [r1, r3]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	4a4e      	ldr	r2, [pc, #312]	@ (8003374 <HAL_RCC_OscConfig+0x278>)
 800323c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800323e:	4b4e      	ldr	r3, [pc, #312]	@ (8003378 <HAL_RCC_OscConfig+0x27c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fb4a 	bl	80028dc <HAL_InitTick>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d052      	beq.n	80032f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	e364      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d032      	beq.n	80032c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800325e:	4b43      	ldr	r3, [pc, #268]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a42      	ldr	r2, [pc, #264]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800326a:	f7ff fb87 	bl	800297c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003272:	f7ff fb83 	bl	800297c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e34d      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003284:	4b39      	ldr	r3, [pc, #228]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003290:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a35      	ldr	r2, [pc, #212]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003296:	f043 0308 	orr.w	r3, r3, #8
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b33      	ldr	r3, [pc, #204]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4930      	ldr	r1, [pc, #192]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ae:	4b2f      	ldr	r3, [pc, #188]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	492b      	ldr	r1, [pc, #172]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
 80032c2:	e01a      	b.n	80032fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032c4:	4b29      	ldr	r3, [pc, #164]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a28      	ldr	r2, [pc, #160]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d0:	f7ff fb54 	bl	800297c <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d8:	f7ff fb50 	bl	800297c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e31a      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ea:	4b20      	ldr	r3, [pc, #128]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1dc>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d073      	beq.n	80033ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d005      	beq.n	8003318 <HAL_RCC_OscConfig+0x21c>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d10e      	bne.n	8003330 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d10b      	bne.n	8003330 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	4b14      	ldr	r3, [pc, #80]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d063      	beq.n	80033ec <HAL_RCC_OscConfig+0x2f0>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d15f      	bne.n	80033ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e2f7      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003338:	d106      	bne.n	8003348 <HAL_RCC_OscConfig+0x24c>
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a0b      	ldr	r2, [pc, #44]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e025      	b.n	8003394 <HAL_RCC_OscConfig+0x298>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003350:	d114      	bne.n	800337c <HAL_RCC_OscConfig+0x280>
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a05      	ldr	r2, [pc, #20]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b03      	ldr	r3, [pc, #12]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a02      	ldr	r2, [pc, #8]	@ (800336c <HAL_RCC_OscConfig+0x270>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0x298>
 800336c:	40021000 	.word	0x40021000
 8003370:	0800cd24 	.word	0x0800cd24
 8003374:	20040008 	.word	0x20040008
 8003378:	2004000c 	.word	0x2004000c
 800337c:	4ba0      	ldr	r3, [pc, #640]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a9f      	ldr	r2, [pc, #636]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b9d      	ldr	r3, [pc, #628]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a9c      	ldr	r2, [pc, #624]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7ff faee 	bl	800297c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff faea 	bl	800297c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e2b4      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b6:	4b92      	ldr	r3, [pc, #584]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x2a8>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7ff fada 	bl	800297c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7ff fad6 	bl	800297c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e2a0      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033de:	4b88      	ldr	r3, [pc, #544]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x2d0>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d060      	beq.n	80034bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d005      	beq.n	800340c <HAL_RCC_OscConfig+0x310>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d119      	bne.n	800343a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d116      	bne.n	800343a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800340c:	4b7c      	ldr	r3, [pc, #496]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_OscConfig+0x328>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e27d      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003424:	4b76      	ldr	r3, [pc, #472]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	4973      	ldr	r1, [pc, #460]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003438:	e040      	b.n	80034bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d023      	beq.n	800348a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003442:	4b6f      	ldr	r3, [pc, #444]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6e      	ldr	r2, [pc, #440]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7ff fa95 	bl	800297c <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003456:	f7ff fa91 	bl	800297c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e25b      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003468:	4b65      	ldr	r3, [pc, #404]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003474:	4b62      	ldr	r3, [pc, #392]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	495f      	ldr	r1, [pc, #380]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
 8003488:	e018      	b.n	80034bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348a:	4b5d      	ldr	r3, [pc, #372]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5c      	ldr	r2, [pc, #368]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7ff fa71 	bl	800297c <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7ff fa6d 	bl	800297c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e237      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b0:	4b53      	ldr	r3, [pc, #332]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03c      	beq.n	8003542 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01c      	beq.n	800350a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7ff fa4c 	bl	800297c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e8:	f7ff fa48 	bl	800297c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e212      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fa:	4b41      	ldr	r3, [pc, #260]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ef      	beq.n	80034e8 <HAL_RCC_OscConfig+0x3ec>
 8003508:	e01b      	b.n	8003542 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350a:	4b3d      	ldr	r3, [pc, #244]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003510:	4a3b      	ldr	r2, [pc, #236]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7ff fa2f 	bl	800297c <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003522:	f7ff fa2b 	bl	800297c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e1f5      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003534:	4b32      	ldr	r3, [pc, #200]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ef      	bne.n	8003522 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80a6 	beq.w	800369c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003550:	2300      	movs	r3, #0
 8003552:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003554:	4b2a      	ldr	r3, [pc, #168]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b27      	ldr	r3, [pc, #156]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	4a26      	ldr	r2, [pc, #152]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356a:	6593      	str	r3, [r2, #88]	@ 0x58
 800356c:	4b24      	ldr	r3, [pc, #144]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003578:	2301      	movs	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357c:	4b21      	ldr	r3, [pc, #132]	@ (8003604 <HAL_RCC_OscConfig+0x508>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d118      	bne.n	80035ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003588:	4b1e      	ldr	r3, [pc, #120]	@ (8003604 <HAL_RCC_OscConfig+0x508>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <HAL_RCC_OscConfig+0x508>)
 800358e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003592:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003594:	f7ff f9f2 	bl	800297c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359c:	f7ff f9ee 	bl	800297c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1b8      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ae:	4b15      	ldr	r3, [pc, #84]	@ (8003604 <HAL_RCC_OscConfig+0x508>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d108      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4d8>
 80035c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035d2:	e029      	b.n	8003628 <HAL_RCC_OscConfig+0x52c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d115      	bne.n	8003608 <HAL_RCC_OscConfig+0x50c>
 80035dc:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	4a07      	ldr	r2, [pc, #28]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ec:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	4a03      	ldr	r2, [pc, #12]	@ (8003600 <HAL_RCC_OscConfig+0x504>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x52c>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	40007000 	.word	0x40007000
 8003608:	4b9d      	ldr	r3, [pc, #628]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	4a9c      	ldr	r2, [pc, #624]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003618:	4b99      	ldr	r3, [pc, #612]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	4a98      	ldr	r2, [pc, #608]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d016      	beq.n	800365e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7ff f9a4 	bl	800297c <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7ff f9a0 	bl	800297c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e168      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364e:	4b8c      	ldr	r3, [pc, #560]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ed      	beq.n	8003638 <HAL_RCC_OscConfig+0x53c>
 800365c:	e015      	b.n	800368a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7ff f98d 	bl	800297c <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7ff f989 	bl	800297c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e151      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800367c:	4b80      	ldr	r3, [pc, #512]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ed      	bne.n	8003666 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7ffb      	ldrb	r3, [r7, #31]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b7b      	ldr	r3, [pc, #492]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	4a7a      	ldr	r2, [pc, #488]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800369a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03c      	beq.n	8003722 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036b0:	4b73      	ldr	r3, [pc, #460]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036b6:	4a72      	ldr	r2, [pc, #456]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7ff f95c 	bl	800297c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036c8:	f7ff f958 	bl	800297c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e122      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036da:	4b69      	ldr	r3, [pc, #420]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCC_OscConfig+0x5cc>
 80036e8:	e01b      	b.n	8003722 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ea:	4b65      	ldr	r3, [pc, #404]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036f0:	4a63      	ldr	r2, [pc, #396]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7ff f93f 	bl	800297c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003702:	f7ff f93b 	bl	800297c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e105      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003714:	4b5a      	ldr	r3, [pc, #360]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ef      	bne.n	8003702 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80f9 	beq.w	800391e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	2b02      	cmp	r3, #2
 8003732:	f040 80cf 	bne.w	80038d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003736:	4b52      	ldr	r3, [pc, #328]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	429a      	cmp	r2, r3
 8003748:	d12c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	3b01      	subs	r3, #1
 8003756:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d123      	bne.n	80037a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003766:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d11b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d113      	bne.n	80037a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d109      	bne.n	80037a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3b01      	subs	r3, #1
 800379e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d071      	beq.n	8003888 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d068      	beq.n	800387c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037aa:	4b35      	ldr	r3, [pc, #212]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037b6:	4b32      	ldr	r3, [pc, #200]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0ac      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037d2:	f7ff f8d3 	bl	800297c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7ff f8cf 	bl	800297c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e099      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	4b24      	ldr	r3, [pc, #144]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f8:	4b21      	ldr	r3, [pc, #132]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4b21      	ldr	r3, [pc, #132]	@ (8003884 <HAL_RCC_OscConfig+0x788>)
 80037fe:	4013      	ands	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003808:	3a01      	subs	r2, #1
 800380a:	0112      	lsls	r2, r2, #4
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003812:	0212      	lsls	r2, r2, #8
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800381a:	0852      	lsrs	r2, r2, #1
 800381c:	3a01      	subs	r2, #1
 800381e:	0552      	lsls	r2, r2, #21
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003826:	0852      	lsrs	r2, r2, #1
 8003828:	3a01      	subs	r2, #1
 800382a:	0652      	lsls	r2, r2, #25
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003832:	06d2      	lsls	r2, r2, #27
 8003834:	430a      	orrs	r2, r1
 8003836:	4912      	ldr	r1, [pc, #72]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003838:	4313      	orrs	r3, r2
 800383a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800383c:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0f      	ldr	r2, [pc, #60]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003842:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003846:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003848:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a0c      	ldr	r2, [pc, #48]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003852:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003854:	f7ff f892 	bl	800297c <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7ff f88e 	bl	800297c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e058      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386e:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800387a:	e050      	b.n	800391e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e04f      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
 8003880:	40021000 	.word	0x40021000
 8003884:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003888:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d144      	bne.n	800391e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003894:	4b24      	ldr	r3, [pc, #144]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a23      	ldr	r2, [pc, #140]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800389e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a0:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a20      	ldr	r2, [pc, #128]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 80038a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038ac:	f7ff f866 	bl	800297c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b4:	f7ff f862 	bl	800297c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e02c      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c6:	4b18      	ldr	r3, [pc, #96]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x7b8>
 80038d2:	e024      	b.n	800391e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d01f      	beq.n	800391a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 80038e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7ff f849 	bl	800297c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ee:	f7ff f845 	bl	800297c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e00f      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003900:	4b09      	ldr	r3, [pc, #36]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	4905      	ldr	r1, [pc, #20]	@ (8003928 <HAL_RCC_OscConfig+0x82c>)
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_RCC_OscConfig+0x830>)
 8003914:	4013      	ands	r3, r2
 8003916:	60cb      	str	r3, [r1, #12]
 8003918:	e001      	b.n	800391e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	feeefffc 	.word	0xfeeefffc

08003930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e11d      	b.n	8003b84 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b90      	ldr	r3, [pc, #576]	@ (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d910      	bls.n	8003978 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b8d      	ldr	r3, [pc, #564]	@ (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 020f 	bic.w	r2, r3, #15
 800395e:	498b      	ldr	r1, [pc, #556]	@ (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b89      	ldr	r3, [pc, #548]	@ (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e105      	b.n	8003b84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d010      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	4b81      	ldr	r3, [pc, #516]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003990:	429a      	cmp	r2, r3
 8003992:	d908      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b7e      	ldr	r3, [pc, #504]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	497b      	ldr	r1, [pc, #492]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d079      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d11e      	bne.n	80039f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ba:	4b75      	ldr	r3, [pc, #468]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0dc      	b.n	8003b84 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80039ca:	f000 f9d1 	bl	8003d70 <RCC_GetSysClockFreqFromPLLSource>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4a70      	ldr	r2, [pc, #448]	@ (8003b94 <HAL_RCC_ClockConfig+0x264>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d946      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d140      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ea:	4a69      	ldr	r2, [pc, #420]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039f2:	2380      	movs	r3, #128	@ 0x80
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e035      	b.n	8003a64 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a00:	4b63      	ldr	r3, [pc, #396]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d115      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b9      	b.n	8003b84 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a18:	4b5d      	ldr	r3, [pc, #372]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0ad      	b.n	8003b84 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a28:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0a5      	b.n	8003b84 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a38:	f000 f8b4 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4a55      	ldr	r2, [pc, #340]	@ (8003b94 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d90f      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a44:	4b52      	ldr	r3, [pc, #328]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a50:	4b4f      	ldr	r3, [pc, #316]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a58:	4a4d      	ldr	r2, [pc, #308]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a5e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a60:	2380      	movs	r3, #128	@ 0x80
 8003a62:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a64:	4b4a      	ldr	r3, [pc, #296]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 0203 	bic.w	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4947      	ldr	r1, [pc, #284]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a76:	f7fe ff81 	bl	800297c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7e:	f7fe ff7d 	bl	800297c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e077      	b.n	8003b84 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a94:	4b3e      	ldr	r3, [pc, #248]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 020c 	and.w	r2, r3, #12
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d1eb      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b80      	cmp	r3, #128	@ 0x80
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003aac:	4b38      	ldr	r3, [pc, #224]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a37      	ldr	r2, [pc, #220]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003ab2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ab6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d010      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d208      	bcs.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	492b      	ldr	r1, [pc, #172]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae6:	4b29      	ldr	r3, [pc, #164]	@ (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d210      	bcs.n	8003b16 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 020f 	bic.w	r2, r3, #15
 8003afc:	4923      	ldr	r1, [pc, #140]	@ (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b04:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <HAL_RCC_ClockConfig+0x25c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e036      	b.n	8003b84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4918      	ldr	r1, [pc, #96]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b40:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4910      	ldr	r1, [pc, #64]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b54:	f000 f826 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	490c      	ldr	r1, [pc, #48]	@ (8003b98 <HAL_RCC_ClockConfig+0x268>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	4a0a      	ldr	r2, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x26c>)
 8003b72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x270>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe feaf 	bl	80028dc <HAL_InitTick>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40021000 	.word	0x40021000
 8003b94:	04c4b400 	.word	0x04c4b400
 8003b98:	0800cd24 	.word	0x0800cd24
 8003b9c:	20040008 	.word	0x20040008
 8003ba0:	2004000c 	.word	0x2004000c

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	@ 0x24
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d121      	bne.n	8003c16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d11e      	bne.n	8003c16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bd8:	4b34      	ldr	r3, [pc, #208]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003be4:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e005      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c00:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d102      	bne.n	8003c22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c1c:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	e004      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c28:	4b23      	ldr	r3, [pc, #140]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d134      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c32:	4b1e      	ldr	r3, [pc, #120]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d003      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0xa6>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d003      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0xac>
 8003c48:	e005      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c4c:	617b      	str	r3, [r7, #20]
      break;
 8003c4e:	e005      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c50:	4b19      	ldr	r3, [pc, #100]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c52:	617b      	str	r3, [r7, #20]
      break;
 8003c54:	e002      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	617b      	str	r3, [r7, #20]
      break;
 8003c5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c5c:	4b13      	ldr	r3, [pc, #76]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3301      	adds	r3, #1
 8003c68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c6a:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	fb03 f202 	mul.w	r2, r3, r2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c82:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x108>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	0e5b      	lsrs	r3, r3, #25
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c9c:	69bb      	ldr	r3, [r7, #24]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	@ 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	0800cd34 	.word	0x0800cd34
 8003cb4:	00f42400 	.word	0x00f42400
 8003cb8:	007a1200 	.word	0x007a1200

08003cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cc8:	4b27      	ldr	r3, [pc, #156]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cd4:	f7ff f93e 	bl	8002f54 <HAL_PWREx_GetVoltageRange>
 8003cd8:	6178      	str	r0, [r7, #20]
 8003cda:	e014      	b.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b22      	ldr	r3, [pc, #136]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	4a21      	ldr	r2, [pc, #132]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cf4:	f7ff f92e 	bl	8002f54 <HAL_PWREx_GetVoltageRange>
 8003cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0c:	d10b      	bne.n	8003d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b80      	cmp	r3, #128	@ 0x80
 8003d12:	d913      	bls.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d18:	d902      	bls.n	8003d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	e00d      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	e00a      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d2a:	d902      	bls.n	8003d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	e004      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b70      	cmp	r3, #112	@ 0x70
 8003d36:	d101      	bne.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d38:	2301      	movs	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 020f 	bic.w	r2, r3, #15
 8003d44:	4909      	ldr	r1, [pc, #36]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d4c:	4b07      	ldr	r3, [pc, #28]	@ (8003d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d001      	beq.n	8003d5e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40022000 	.word	0x40022000

08003d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d76:	4b2d      	ldr	r3, [pc, #180]	@ (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d00b      	beq.n	8003d9e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d825      	bhi.n	8003dd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d008      	beq.n	8003da4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d11f      	bne.n	8003dd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d98:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d9a:	613b      	str	r3, [r7, #16]
    break;
 8003d9c:	e01f      	b.n	8003dde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d9e:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003da0:	613b      	str	r3, [r7, #16]
    break;
 8003da2:	e01c      	b.n	8003dde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003da4:	4b21      	ldr	r3, [pc, #132]	@ (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d107      	bne.n	8003dc0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003db0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e005      	b.n	8003dcc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8003e38 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	613b      	str	r3, [r7, #16]
    break;
 8003dd6:	e002      	b.n	8003dde <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
    break;
 8003ddc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dde:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	3301      	adds	r3, #1
 8003dea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dec:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	fb03 f202 	mul.w	r2, r3, r2
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e04:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0e5b      	lsrs	r3, r3, #25
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e1e:	683b      	ldr	r3, [r7, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200
 8003e38:	0800cd34 	.word	0x0800cd34

08003e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e44:	2300      	movs	r3, #0
 8003e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d040      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e5c:	2b80      	cmp	r3, #128	@ 0x80
 8003e5e:	d02a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e60:	2b80      	cmp	r3, #128	@ 0x80
 8003e62:	d825      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e64:	2b60      	cmp	r3, #96	@ 0x60
 8003e66:	d026      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e68:	2b60      	cmp	r3, #96	@ 0x60
 8003e6a:	d821      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	d006      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e70:	2b40      	cmp	r3, #64	@ 0x40
 8003e72:	d81d      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d009      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d010      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e7e:	4b89      	ldr	r3, [pc, #548]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	4a88      	ldr	r2, [pc, #544]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e88:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e8a:	e015      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fb02 	bl	800449c <RCCEx_PLLSAI1_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e9c:	e00c      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3320      	adds	r3, #32
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fbed 	bl	8004684 <RCCEx_PLLSAI2_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	74fb      	strb	r3, [r7, #19]
      break;
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ebe:	4b79      	ldr	r3, [pc, #484]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ec4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ecc:	4975      	ldr	r1, [pc, #468]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003ed4:	e001      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d047      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eee:	d030      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef4:	d82a      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efa:	d02a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003efc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f00:	d824      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f06:	d008      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f0c:	d81e      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f16:	d010      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f18:	e018      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f1a:	4b62      	ldr	r3, [pc, #392]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4a61      	ldr	r2, [pc, #388]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f24:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f26:	e015      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fab4 	bl	800449c <RCCEx_PLLSAI1_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f38:	e00c      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3320      	adds	r3, #32
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fb9f 	bl	8004684 <RCCEx_PLLSAI2_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f4a:	e003      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	74fb      	strb	r3, [r7, #19]
      break;
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f5a:	4b52      	ldr	r3, [pc, #328]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f68:	494e      	ldr	r1, [pc, #312]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003f70:	e001      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 809f 	beq.w	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f84:	2300      	movs	r3, #0
 8003f86:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f88:	4b46      	ldr	r3, [pc, #280]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	4b41      	ldr	r3, [pc, #260]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	4a40      	ldr	r2, [pc, #256]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003faa:	4b3e      	ldr	r3, [pc, #248]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fba:	4b3b      	ldr	r3, [pc, #236]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3a      	ldr	r2, [pc, #232]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc6:	f7fe fcd9 	bl	800297c <HAL_GetTick>
 8003fca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fcc:	e009      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fce:	f7fe fcd5 	bl	800297c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d902      	bls.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	74fb      	strb	r3, [r7, #19]
        break;
 8003fe0:	e005      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fe2:	4b31      	ldr	r3, [pc, #196]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0ef      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d15b      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01f      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	429a      	cmp	r2, r3
 8004010:	d019      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004012:	4b24      	ldr	r3, [pc, #144]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800401c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800401e:	4b21      	ldr	r3, [pc, #132]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004024:	4a1f      	ldr	r2, [pc, #124]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800402a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800402e:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004034:	4a1b      	ldr	r2, [pc, #108]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800403a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800403e:	4a19      	ldr	r2, [pc, #100]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d016      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fc94 	bl	800297c <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004056:	e00b      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7fe fc90 	bl	800297c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d902      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	74fb      	strb	r3, [r7, #19]
            break;
 800406e:	e006      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004070:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ec      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10c      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004084:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004094:	4903      	ldr	r1, [pc, #12]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800409c:	e008      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	74bb      	strb	r3, [r7, #18]
 80040a2:	e005      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b0:	7c7b      	ldrb	r3, [r7, #17]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b6:	4ba0      	ldr	r3, [pc, #640]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	4a9f      	ldr	r2, [pc, #636]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ce:	4b9a      	ldr	r3, [pc, #616]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d4:	f023 0203 	bic.w	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	4996      	ldr	r1, [pc, #600]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040f0:	4b91      	ldr	r3, [pc, #580]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f6:	f023 020c 	bic.w	r2, r3, #12
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	498e      	ldr	r1, [pc, #568]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004112:	4b89      	ldr	r3, [pc, #548]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004118:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004120:	4985      	ldr	r1, [pc, #532]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004134:	4b80      	ldr	r3, [pc, #512]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004142:	497d      	ldr	r1, [pc, #500]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004156:	4b78      	ldr	r3, [pc, #480]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004164:	4974      	ldr	r1, [pc, #464]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004178:	4b6f      	ldr	r3, [pc, #444]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004186:	496c      	ldr	r1, [pc, #432]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419a:	4b67      	ldr	r3, [pc, #412]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041a8:	4963      	ldr	r1, [pc, #396]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ca:	495b      	ldr	r1, [pc, #364]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041de:	4b56      	ldr	r3, [pc, #344]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	4952      	ldr	r1, [pc, #328]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004200:	4b4d      	ldr	r3, [pc, #308]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420e:	494a      	ldr	r1, [pc, #296]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004222:	4b45      	ldr	r3, [pc, #276]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004228:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004230:	4941      	ldr	r1, [pc, #260]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004244:	4b3c      	ldr	r3, [pc, #240]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800424a:	f023 0203 	bic.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004252:	4939      	ldr	r1, [pc, #228]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d028      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004266:	4b34      	ldr	r3, [pc, #208]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004274:	4930      	ldr	r1, [pc, #192]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004284:	d106      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004286:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4a2b      	ldr	r2, [pc, #172]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004290:	60d3      	str	r3, [r2, #12]
 8004292:	e011      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004298:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800429c:	d10c      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2101      	movs	r1, #1
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f8f9 	bl	800449c <RCCEx_PLLSAI1_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042ae:	7cfb      	ldrb	r3, [r7, #19]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d04d      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042cc:	d108      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80042ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042d4:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042da:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80042de:	e012      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80042e0:	4b15      	ldr	r3, [pc, #84]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042e6:	4a14      	ldr	r2, [pc, #80]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042ec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80042f0:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042fe:	490e      	ldr	r1, [pc, #56]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800430a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800430e:	d106      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004310:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a08      	ldr	r2, [pc, #32]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800431a:	60d3      	str	r3, [r2, #12]
 800431c:	e020      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004326:	d109      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004328:	4b03      	ldr	r3, [pc, #12]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a02      	ldr	r2, [pc, #8]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004332:	60d3      	str	r3, [r2, #12]
 8004334:	e014      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004344:	d10c      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f000 f8a5 	bl	800449c <RCCEx_PLLSAI1_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d028      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800436c:	4b4a      	ldr	r3, [pc, #296]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800437a:	4947      	ldr	r1, [pc, #284]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800438a:	d106      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b42      	ldr	r3, [pc, #264]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a41      	ldr	r2, [pc, #260]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
 8004398:	e011      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800439e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a2:	d10c      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2101      	movs	r1, #1
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f876 	bl	800449c <RCCEx_PLLSAI1_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01e      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ca:	4b33      	ldr	r3, [pc, #204]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043da:	492f      	ldr	r1, [pc, #188]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2102      	movs	r1, #2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 f851 	bl	800449c <RCCEx_PLLSAI1_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fe:	7cfb      	ldrb	r3, [r7, #19]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004414:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800441a:	f023 0204 	bic.w	r2, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004424:	491c      	ldr	r1, [pc, #112]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004438:	4b17      	ldr	r3, [pc, #92]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800443e:	f023 0218 	bic.w	r2, r3, #24
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004448:	4913      	ldr	r1, [pc, #76]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d017      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800445c:	4b0e      	ldr	r3, [pc, #56]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004462:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800446c:	490a      	ldr	r1, [pc, #40]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800447a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800447e:	d105      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800448a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800448c:	7cbb      	ldrb	r3, [r7, #18]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000

0800449c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044aa:	4b72      	ldr	r3, [pc, #456]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00e      	beq.n	80044d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0203 	and.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d103      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
       ||
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d142      	bne.n	8004554 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	e03f      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d018      	beq.n	800450e <RCCEx_PLLSAI1_Config+0x72>
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d825      	bhi.n	800452c <RCCEx_PLLSAI1_Config+0x90>
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d002      	beq.n	80044ea <RCCEx_PLLSAI1_Config+0x4e>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d009      	beq.n	80044fc <RCCEx_PLLSAI1_Config+0x60>
 80044e8:	e020      	b.n	800452c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ea:	4b62      	ldr	r3, [pc, #392]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11d      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fa:	e01a      	b.n	8004532 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044fc:	4b5d      	ldr	r3, [pc, #372]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450c:	e013      	b.n	8004536 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800450e:	4b59      	ldr	r3, [pc, #356]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800451a:	4b56      	ldr	r3, [pc, #344]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800452a:	e006      	b.n	800453a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      break;
 8004530:	e004      	b.n	800453c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004532:	bf00      	nop
 8004534:	e002      	b.n	800453c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004536:	bf00      	nop
 8004538:	e000      	b.n	800453c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800453a:	bf00      	nop
    }

    if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004542:	4b4c      	ldr	r3, [pc, #304]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 0203 	bic.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4949      	ldr	r1, [pc, #292]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 8086 	bne.w	8004668 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800455c:	4b45      	ldr	r3, [pc, #276]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a44      	ldr	r2, [pc, #272]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004568:	f7fe fa08 	bl	800297c <HAL_GetTick>
 800456c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456e:	e009      	b.n	8004584 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004570:	f7fe fa04 	bl	800297c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d902      	bls.n	8004584 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	73fb      	strb	r3, [r7, #15]
        break;
 8004582:	e005      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004584:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ef      	bne.n	8004570 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d168      	bne.n	8004668 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d113      	bne.n	80045c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459c:	4b35      	ldr	r3, [pc, #212]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6892      	ldr	r2, [r2, #8]
 80045a8:	0211      	lsls	r1, r2, #8
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	06d2      	lsls	r2, r2, #27
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6852      	ldr	r2, [r2, #4]
 80045b6:	3a01      	subs	r2, #1
 80045b8:	0112      	lsls	r2, r2, #4
 80045ba:	430a      	orrs	r2, r1
 80045bc:	492d      	ldr	r1, [pc, #180]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	610b      	str	r3, [r1, #16]
 80045c2:	e02d      	b.n	8004620 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d115      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6892      	ldr	r2, [r2, #8]
 80045d6:	0211      	lsls	r1, r2, #8
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6912      	ldr	r2, [r2, #16]
 80045dc:	0852      	lsrs	r2, r2, #1
 80045de:	3a01      	subs	r2, #1
 80045e0:	0552      	lsls	r2, r2, #21
 80045e2:	4311      	orrs	r1, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6852      	ldr	r2, [r2, #4]
 80045e8:	3a01      	subs	r2, #1
 80045ea:	0112      	lsls	r2, r2, #4
 80045ec:	430a      	orrs	r2, r1
 80045ee:	4921      	ldr	r1, [pc, #132]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	610b      	str	r3, [r1, #16]
 80045f4:	e014      	b.n	8004620 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	4b21      	ldr	r3, [pc, #132]	@ (8004680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6892      	ldr	r2, [r2, #8]
 8004602:	0211      	lsls	r1, r2, #8
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6952      	ldr	r2, [r2, #20]
 8004608:	0852      	lsrs	r2, r2, #1
 800460a:	3a01      	subs	r2, #1
 800460c:	0652      	lsls	r2, r2, #25
 800460e:	4311      	orrs	r1, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6852      	ldr	r2, [r2, #4]
 8004614:	3a01      	subs	r2, #1
 8004616:	0112      	lsls	r2, r2, #4
 8004618:	430a      	orrs	r2, r1
 800461a:	4916      	ldr	r1, [pc, #88]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800461c:	4313      	orrs	r3, r2
 800461e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004620:	4b14      	ldr	r3, [pc, #80]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a13      	ldr	r2, [pc, #76]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004626:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800462a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fe f9a6 	bl	800297c <HAL_GetTick>
 8004630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004632:	e009      	b.n	8004648 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004634:	f7fe f9a2 	bl	800297c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d902      	bls.n	8004648 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	73fb      	strb	r3, [r7, #15]
          break;
 8004646:	e005      	b.n	8004654 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004648:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ef      	beq.n	8004634 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800465a:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	4904      	ldr	r1, [pc, #16]	@ (8004674 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	07ff800f 	.word	0x07ff800f
 800467c:	ff9f800f 	.word	0xff9f800f
 8004680:	f9ff800f 	.word	0xf9ff800f

08004684 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004692:	4b72      	ldr	r3, [pc, #456]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800469e:	4b6f      	ldr	r3, [pc, #444]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0203 	and.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d103      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
       ||
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d142      	bne.n	800473c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
 80046ba:	e03f      	b.n	800473c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d018      	beq.n	80046f6 <RCCEx_PLLSAI2_Config+0x72>
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d825      	bhi.n	8004714 <RCCEx_PLLSAI2_Config+0x90>
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d002      	beq.n	80046d2 <RCCEx_PLLSAI2_Config+0x4e>
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d009      	beq.n	80046e4 <RCCEx_PLLSAI2_Config+0x60>
 80046d0:	e020      	b.n	8004714 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046d2:	4b62      	ldr	r3, [pc, #392]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11d      	bne.n	800471a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e2:	e01a      	b.n	800471a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046e4:	4b5d      	ldr	r3, [pc, #372]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d116      	bne.n	800471e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f4:	e013      	b.n	800471e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046f6:	4b59      	ldr	r3, [pc, #356]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004702:	4b56      	ldr	r3, [pc, #344]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004712:	e006      	b.n	8004722 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      break;
 8004718:	e004      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800471a:	bf00      	nop
 800471c:	e002      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004722:	bf00      	nop
    }

    if(status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d108      	bne.n	800473c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800472a:	4b4c      	ldr	r3, [pc, #304]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4949      	ldr	r1, [pc, #292]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 8086 	bne.w	8004850 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004744:	4b45      	ldr	r3, [pc, #276]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a44      	ldr	r2, [pc, #272]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 800474a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800474e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004750:	f7fe f914 	bl	800297c <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004756:	e009      	b.n	800476c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004758:	f7fe f910 	bl	800297c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d902      	bls.n	800476c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	73fb      	strb	r3, [r7, #15]
        break;
 800476a:	e005      	b.n	8004778 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800476c:	4b3b      	ldr	r3, [pc, #236]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ef      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d168      	bne.n	8004850 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d113      	bne.n	80047ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004784:	4b35      	ldr	r3, [pc, #212]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	4b35      	ldr	r3, [pc, #212]	@ (8004860 <RCCEx_PLLSAI2_Config+0x1dc>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	0211      	lsls	r1, r2, #8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68d2      	ldr	r2, [r2, #12]
 8004796:	06d2      	lsls	r2, r2, #27
 8004798:	4311      	orrs	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6852      	ldr	r2, [r2, #4]
 800479e:	3a01      	subs	r2, #1
 80047a0:	0112      	lsls	r2, r2, #4
 80047a2:	430a      	orrs	r2, r1
 80047a4:	492d      	ldr	r1, [pc, #180]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	614b      	str	r3, [r1, #20]
 80047aa:	e02d      	b.n	8004808 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d115      	bne.n	80047de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b2:	4b2a      	ldr	r3, [pc, #168]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <RCCEx_PLLSAI2_Config+0x1e0>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6892      	ldr	r2, [r2, #8]
 80047be:	0211      	lsls	r1, r2, #8
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6912      	ldr	r2, [r2, #16]
 80047c4:	0852      	lsrs	r2, r2, #1
 80047c6:	3a01      	subs	r2, #1
 80047c8:	0552      	lsls	r2, r2, #21
 80047ca:	4311      	orrs	r1, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6852      	ldr	r2, [r2, #4]
 80047d0:	3a01      	subs	r2, #1
 80047d2:	0112      	lsls	r2, r2, #4
 80047d4:	430a      	orrs	r2, r1
 80047d6:	4921      	ldr	r1, [pc, #132]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	614b      	str	r3, [r1, #20]
 80047dc:	e014      	b.n	8004808 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047de:	4b1f      	ldr	r3, [pc, #124]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	4b21      	ldr	r3, [pc, #132]	@ (8004868 <RCCEx_PLLSAI2_Config+0x1e4>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6892      	ldr	r2, [r2, #8]
 80047ea:	0211      	lsls	r1, r2, #8
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6952      	ldr	r2, [r2, #20]
 80047f0:	0852      	lsrs	r2, r2, #1
 80047f2:	3a01      	subs	r2, #1
 80047f4:	0652      	lsls	r2, r2, #25
 80047f6:	4311      	orrs	r1, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6852      	ldr	r2, [r2, #4]
 80047fc:	3a01      	subs	r2, #1
 80047fe:	0112      	lsls	r2, r2, #4
 8004800:	430a      	orrs	r2, r1
 8004802:	4916      	ldr	r1, [pc, #88]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004804:	4313      	orrs	r3, r2
 8004806:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004808:	4b14      	ldr	r3, [pc, #80]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a13      	ldr	r2, [pc, #76]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 800480e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004812:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fe f8b2 	bl	800297c <HAL_GetTick>
 8004818:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800481a:	e009      	b.n	8004830 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800481c:	f7fe f8ae 	bl	800297c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d902      	bls.n	8004830 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	73fb      	strb	r3, [r7, #15]
          break;
 800482e:	e005      	b.n	800483c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004830:	4b0a      	ldr	r3, [pc, #40]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ef      	beq.n	800481c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	4904      	ldr	r1, [pc, #16]	@ (800485c <RCCEx_PLLSAI2_Config+0x1d8>)
 800484c:	4313      	orrs	r3, r2
 800484e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	07ff800f 	.word	0x07ff800f
 8004864:	ff9f800f 	.word	0xff9f800f
 8004868:	f9ff800f 	.word	0xf9ff800f

0800486c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d079      	beq.n	8004972 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fd fd6e 	bl	8002374 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d058      	beq.n	8004960 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	22ca      	movs	r2, #202	@ 0xca
 80048b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2253      	movs	r2, #83	@ 0x53
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fb8c 	bl	8004fdc <RTC_EnterInitMode>
 80048c4:	4603      	mov	r3, r0
 80048c6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d127      	bne.n	800491e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80048dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048e0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6899      	ldr	r1, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68d2      	ldr	r2, [r2, #12]
 8004908:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6919      	ldr	r1, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	041a      	lsls	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fb90 	bl	8005044 <RTC_ExitInitMode>
 8004924:	4603      	mov	r3, r0
 8004926:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d113      	bne.n	8004956 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0203 	bic.w	r2, r2, #3
 800493c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	22ff      	movs	r2, #255	@ 0xff
 800495c:	625a      	str	r2, [r3, #36]	@ 0x24
 800495e:	e001      	b.n	8004964 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_RTC_SetTime+0x1a>
 8004992:	2302      	movs	r3, #2
 8004994:	e08b      	b.n	8004aae <HAL_RTC_SetTime+0x132>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	22ca      	movs	r2, #202	@ 0xca
 80049ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2253      	movs	r2, #83	@ 0x53
 80049b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fb10 	bl	8004fdc <RTC_EnterInitMode>
 80049bc:	4603      	mov	r3, r0
 80049be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d163      	bne.n	8004a8e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d126      	bne.n	8004a1a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fb6b 	bl	80050c0 <RTC_ByteToBcd2>
 80049ea:	4603      	mov	r3, r0
 80049ec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fb64 	bl	80050c0 <RTC_ByteToBcd2>
 80049f8:	4603      	mov	r3, r0
 80049fa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049fc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	789b      	ldrb	r3, [r3, #2]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fb5c 	bl	80050c0 <RTC_ByteToBcd2>
 8004a08:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a0a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	78db      	ldrb	r3, [r3, #3]
 8004a12:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e018      	b.n	8004a4c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a3a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a40:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	78db      	ldrb	r3, [r3, #3]
 8004a46:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004a56:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004a5a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a6a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fadd 	bl	8005044 <RTC_ExitInitMode>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	22ff      	movs	r2, #255	@ 0xff
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd90      	pop	{r4, r7, pc}

08004ab6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004ae4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	0d9b      	lsrs	r3, r3, #22
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11a      	bne.n	8004b64 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fae4 	bl	8005100 <RTC_Bcd2ToByte>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fadb 	bl	8005100 <RTC_Bcd2ToByte>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	789b      	ldrb	r3, [r3, #2]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fad2 	bl	8005100 <RTC_Bcd2ToByte>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b6e:	b590      	push	{r4, r7, lr}
 8004b70:	b087      	sub	sp, #28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_RTC_SetDate+0x1a>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e075      	b.n	8004c74 <HAL_RTC_SetDate+0x106>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10e      	bne.n	8004bbc <HAL_RTC_SetDate+0x4e>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	f023 0310 	bic.w	r3, r3, #16
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	330a      	adds	r3, #10
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d11c      	bne.n	8004bfc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	78db      	ldrb	r3, [r3, #3]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fa7a 	bl	80050c0 <RTC_ByteToBcd2>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fa73 	bl	80050c0 <RTC_ByteToBcd2>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bde:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	789b      	ldrb	r3, [r3, #2]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fa6b 	bl	80050c0 <RTC_ByteToBcd2>
 8004bea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e00e      	b.n	8004c1a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c08:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	22ca      	movs	r2, #202	@ 0xca
 8004c20:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2253      	movs	r2, #83	@ 0x53
 8004c28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f9d6 	bl	8004fdc <RTC_EnterInitMode>
 8004c30:	4603      	mov	r3, r0
 8004c32:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c48:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f9fa 	bl	8005044 <RTC_ExitInitMode>
 8004c50:	4603      	mov	r3, r0
 8004c52:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	22ff      	movs	r2, #255	@ 0xff
 8004c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd90      	pop	{r4, r7, pc}

08004c7c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b089      	sub	sp, #36	@ 0x24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_RTC_SetAlarm_IT+0x1a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e127      	b.n	8004ee6 <HAL_RTC_SetAlarm_IT+0x26a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d137      	bne.n	8004d1c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f9fb 	bl	80050c0 <RTC_ByteToBcd2>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f9f4 	bl	80050c0 <RTC_ByteToBcd2>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cdc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	789b      	ldrb	r3, [r3, #2]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f9ec 	bl	80050c0 <RTC_ByteToBcd2>
 8004ce8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004cea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	78db      	ldrb	r3, [r3, #3]
 8004cf2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004cf4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f9de 	bl	80050c0 <RTC_ByteToBcd2>
 8004d04:	4603      	mov	r3, r0
 8004d06:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d08:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e023      	b.n	8004d64 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	785b      	ldrb	r3, [r3, #1]
 8004d3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d3c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	78db      	ldrb	r3, [r3, #3]
 8004d48:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	22ca      	movs	r2, #202	@ 0xca
 8004d76:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2253      	movs	r2, #83	@ 0x53
 8004d7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d88:	d14a      	bne.n	8004e20 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d98:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004daa:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004dac:	f7fd fde6 	bl	800297c <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004db2:	e015      	b.n	8004de0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004db4:	f7fd fde2 	bl	800297c <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dc2:	d90d      	bls.n	8004de0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	22ff      	movs	r2, #255	@ 0xff
 8004dca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2203      	movs	r2, #3
 8004dd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e082      	b.n	8004ee6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0e2      	beq.n	8004db4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e0c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	e049      	b.n	8004eb4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e2e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004e40:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004e42:	f7fd fd9b 	bl	800297c <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e48:	e015      	b.n	8004e76 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e4a:	f7fd fd97 	bl	800297c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e58:	d90d      	bls.n	8004e76 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	22ff      	movs	r2, #255	@ 0xff
 8004e60:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2203      	movs	r2, #3
 8004e66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e037      	b.n	8004ee6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0e2      	beq.n	8004e4a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ea2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004eba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004ec6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004eca:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	22ff      	movs	r2, #255	@ 0xff
 8004ed2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3724      	adds	r7, #36	@ 0x24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd90      	pop	{r4, r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40010400 	.word	0x40010400

08004ef4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004efc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f7c <HAL_RTC_AlarmIRQHandler+0x88>)
 8004efe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004f02:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d012      	beq.n	8004f38 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004f30:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f824 	bl	8004f80 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d012      	beq.n	8004f6c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004f64:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f8e4 	bl	8005134 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40010400 	.word	0x40010400

08004f80 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd8 <HAL_RTC_WaitForSynchro+0x44>)
 8004fa2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004fa4:	f7fd fcea 	bl	800297c <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004faa:	e009      	b.n	8004fc0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fac:	f7fd fce6 	bl	800297c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fba:	d901      	bls.n	8004fc0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e007      	b.n	8004fd0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ee      	beq.n	8004fac <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	0003ff5f 	.word	0x0003ff5f

08004fdc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d120      	bne.n	8005038 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005000:	f7fd fcbc 	bl	800297c <HAL_GetTick>
 8005004:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005006:	e00d      	b.n	8005024 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005008:	f7fd fcb8 	bl	800297c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005016:	d905      	bls.n	8005024 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2203      	movs	r2, #3
 8005020:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <RTC_EnterInitMode+0x5c>
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d1e7      	bne.n	8005008 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005050:	4b1a      	ldr	r3, [pc, #104]	@ (80050bc <RTC_ExitInitMode+0x78>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <RTC_ExitInitMode+0x78>)
 8005056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <RTC_ExitInitMode+0x78>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10c      	bne.n	8005082 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff ff93 	bl	8004f94 <HAL_RTC_WaitForSynchro>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01e      	beq.n	80050b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2203      	movs	r2, #3
 8005078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	73fb      	strb	r3, [r7, #15]
 8005080:	e017      	b.n	80050b2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005082:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <RTC_ExitInitMode+0x78>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4a0d      	ldr	r2, [pc, #52]	@ (80050bc <RTC_ExitInitMode+0x78>)
 8005088:	f023 0320 	bic.w	r3, r3, #32
 800508c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff ff80 	bl	8004f94 <HAL_RTC_WaitForSynchro>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2203      	movs	r2, #3
 800509e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050a6:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <RTC_ExitInitMode+0x78>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4a04      	ldr	r2, [pc, #16]	@ (80050bc <RTC_ExitInitMode+0x78>)
 80050ac:	f043 0320 	orr.w	r3, r3, #32
 80050b0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40002800 	.word	0x40002800

080050c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80050d2:	e005      	b.n	80050e0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	3b0a      	subs	r3, #10
 80050de:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80050e0:	7afb      	ldrb	r3, [r7, #11]
 80050e2:	2b09      	cmp	r3, #9
 80050e4:	d8f6      	bhi.n	80050d4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	b2db      	uxtb	r3, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	0092      	lsls	r2, r2, #2
 8005114:	4413      	add	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	b2da      	uxtb	r2, r3
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	4413      	add	r3, r2
 8005126:	b2db      	uxtb	r3, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e095      	b.n	8005286 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800516a:	d009      	beq.n	8005180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	61da      	str	r2, [r3, #28]
 8005172:	e005      	b.n	8005180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd f924 	bl	80023e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051c0:	d902      	bls.n	80051c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e002      	b.n	80051ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_Init+0xa0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051e0:	d002      	beq.n	80051e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522a:	ea42 0103 	orr.w	r1, r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005232:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	f003 0204 	and.w	r2, r3, #4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005264:	ea42 0103 	orr.w	r1, r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b088      	sub	sp, #32
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800529e:	f7fd fb6d 	bl	800297c <HAL_GetTick>
 80052a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d001      	beq.n	80052b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
 80052b6:	e15c      	b.n	8005572 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_Transmit+0x36>
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e154      	b.n	8005572 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Transmit+0x48>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e14d      	b.n	8005572 <HAL_SPI_Transmit+0x2e4>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2203      	movs	r2, #3
 80052e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	88fa      	ldrh	r2, [r7, #6]
 80052f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005328:	d10f      	bne.n	800534a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005338:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005348:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005354:	2b40      	cmp	r3, #64	@ 0x40
 8005356:	d007      	beq.n	8005368 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005370:	d952      	bls.n	8005418 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_SPI_Transmit+0xf2>
 800537a:	8b7b      	ldrh	r3, [r7, #26]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d145      	bne.n	800540c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	881a      	ldrh	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	1c9a      	adds	r2, r3, #2
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053a4:	e032      	b.n	800540c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d112      	bne.n	80053da <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	881a      	ldrh	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	1c9a      	adds	r2, r3, #2
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053d8:	e018      	b.n	800540c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053da:	f7fd facf 	bl	800297c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d803      	bhi.n	80053f2 <HAL_SPI_Transmit+0x164>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d102      	bne.n	80053f8 <HAL_SPI_Transmit+0x16a>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0b2      	b.n	8005572 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1c7      	bne.n	80053a6 <HAL_SPI_Transmit+0x118>
 8005416:	e083      	b.n	8005520 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_SPI_Transmit+0x198>
 8005420:	8b7b      	ldrh	r3, [r7, #26]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d177      	bne.n	8005516 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d912      	bls.n	8005456 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	1c9a      	adds	r2, r3, #2
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b02      	subs	r3, #2
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005454:	e05f      	b.n	8005516 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800547c:	e04b      	b.n	8005516 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d12b      	bne.n	80054e4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d912      	bls.n	80054bc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	881a      	ldrh	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a6:	1c9a      	adds	r2, r3, #2
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b02      	subs	r3, #2
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054ba:	e02c      	b.n	8005516 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054e2:	e018      	b.n	8005516 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e4:	f7fd fa4a 	bl	800297c <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d803      	bhi.n	80054fc <HAL_SPI_Transmit+0x26e>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d102      	bne.n	8005502 <HAL_SPI_Transmit+0x274>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e02d      	b.n	8005572 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ae      	bne.n	800547e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f947 	bl	80057b8 <SPI_EndRxTxTransaction>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005570:	2300      	movs	r3, #0
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800558c:	f7fd f9f6 	bl	800297c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	4413      	add	r3, r2
 800559a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800559c:	f7fd f9ee 	bl	800297c <HAL_GetTick>
 80055a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055a2:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	015b      	lsls	r3, r3, #5
 80055a8:	0d1b      	lsrs	r3, r3, #20
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b2:	e054      	b.n	800565e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d050      	beq.n	800565e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055bc:	f7fd f9de 	bl	800297c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d902      	bls.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d13d      	bne.n	800564e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ea:	d111      	bne.n	8005610 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f4:	d004      	beq.n	8005600 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055fe:	d107      	bne.n	8005610 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800560e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005618:	d10f      	bne.n	800563a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e017      	b.n	800567e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3b01      	subs	r3, #1
 800565c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	429a      	cmp	r2, r3
 800567a:	d19b      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20040008 	.word	0x20040008

0800568c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	@ 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800569e:	f7fd f96d 	bl	800297c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	4413      	add	r3, r2
 80056ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80056ae:	f7fd f965 	bl	800297c <HAL_GetTick>
 80056b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80056bc:	4b3d      	ldr	r3, [pc, #244]	@ (80057b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	00da      	lsls	r2, r3, #3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	0d1b      	lsrs	r3, r3, #20
 80056cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056d4:	e060      	b.n	8005798 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056dc:	d107      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d050      	beq.n	8005798 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056f6:	f7fd f941 	bl	800297c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005702:	429a      	cmp	r2, r3
 8005704:	d902      	bls.n	800570c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d13d      	bne.n	8005788 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800571a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005724:	d111      	bne.n	800574a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800572e:	d004      	beq.n	800573a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005738:	d107      	bne.n	800574a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005748:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005752:	d10f      	bne.n	8005774 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005772:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e010      	b.n	80057aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	3b01      	subs	r3, #1
 8005796:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d196      	bne.n	80056d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3728      	adds	r7, #40	@ 0x28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20040008 	.word	0x20040008

080057b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff ff5b 	bl	800568c <SPI_WaitFifoStateUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e027      	b.n	800583c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	2180      	movs	r1, #128	@ 0x80
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff fec0 	bl	800557c <SPI_WaitFlagStateUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e014      	b.n	800583c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2200      	movs	r2, #0
 800581a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7ff ff34 	bl	800568c <SPI_WaitFifoStateUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800582e:	f043 0220 	orr.w	r2, r3, #32
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e000      	b.n	800583c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e049      	b.n	80058ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fc fe1c 	bl	80024a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 fa74 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e049      	b.n	8005998 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f841 	bl	80059a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f000 fa1d 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e0ff      	b.n	8005bd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b14      	cmp	r3, #20
 80059de:	f200 80f0 	bhi.w	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059e2:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	08005bc3 	.word	0x08005bc3
 80059f0:	08005bc3 	.word	0x08005bc3
 80059f4:	08005bc3 	.word	0x08005bc3
 80059f8:	08005a7d 	.word	0x08005a7d
 80059fc:	08005bc3 	.word	0x08005bc3
 8005a00:	08005bc3 	.word	0x08005bc3
 8005a04:	08005bc3 	.word	0x08005bc3
 8005a08:	08005abf 	.word	0x08005abf
 8005a0c:	08005bc3 	.word	0x08005bc3
 8005a10:	08005bc3 	.word	0x08005bc3
 8005a14:	08005bc3 	.word	0x08005bc3
 8005a18:	08005aff 	.word	0x08005aff
 8005a1c:	08005bc3 	.word	0x08005bc3
 8005a20:	08005bc3 	.word	0x08005bc3
 8005a24:	08005bc3 	.word	0x08005bc3
 8005a28:	08005b41 	.word	0x08005b41
 8005a2c:	08005bc3 	.word	0x08005bc3
 8005a30:	08005bc3 	.word	0x08005bc3
 8005a34:	08005bc3 	.word	0x08005bc3
 8005a38:	08005b81 	.word	0x08005b81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fa3a 	bl	8005ebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0208 	orr.w	r2, r2, #8
 8005a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0204 	bic.w	r2, r2, #4
 8005a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6999      	ldr	r1, [r3, #24]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	619a      	str	r2, [r3, #24]
      break;
 8005a7a:	e0a5      	b.n	8005bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 faaa 	bl	8005fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6999      	ldr	r1, [r3, #24]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	021a      	lsls	r2, r3, #8
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	619a      	str	r2, [r3, #24]
      break;
 8005abc:	e084      	b.n	8005bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fb13 	bl	80060f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0208 	orr.w	r2, r2, #8
 8005ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0204 	bic.w	r2, r2, #4
 8005ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69d9      	ldr	r1, [r3, #28]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	61da      	str	r2, [r3, #28]
      break;
 8005afc:	e064      	b.n	8005bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fb7b 	bl	8006200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69d9      	ldr	r1, [r3, #28]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	021a      	lsls	r2, r3, #8
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	61da      	str	r2, [r3, #28]
      break;
 8005b3e:	e043      	b.n	8005bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fbc4 	bl	80062d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0208 	orr.w	r2, r2, #8
 8005b5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0204 	bic.w	r2, r2, #4
 8005b6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b7e:	e023      	b.n	8005bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fc08 	bl	800639c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005baa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	021a      	lsls	r2, r3, #8
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bc0:	e002      	b.n	8005bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop

08005bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0b6      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x18a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c34:	d03e      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0xd8>
 8005c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c3a:	f200 8087 	bhi.w	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c42:	f000 8086 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x176>
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4a:	d87f      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c4c:	2b70      	cmp	r3, #112	@ 0x70
 8005c4e:	d01a      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0xaa>
 8005c50:	2b70      	cmp	r3, #112	@ 0x70
 8005c52:	d87b      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c54:	2b60      	cmp	r3, #96	@ 0x60
 8005c56:	d050      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x11e>
 8005c58:	2b60      	cmp	r3, #96	@ 0x60
 8005c5a:	d877      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c5c:	2b50      	cmp	r3, #80	@ 0x50
 8005c5e:	d03c      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0xfe>
 8005c60:	2b50      	cmp	r3, #80	@ 0x50
 8005c62:	d873      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d058      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x13e>
 8005c68:	2b40      	cmp	r3, #64	@ 0x40
 8005c6a:	d86f      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c6c:	2b30      	cmp	r3, #48	@ 0x30
 8005c6e:	d064      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x15e>
 8005c70:	2b30      	cmp	r3, #48	@ 0x30
 8005c72:	d86b      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d060      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x15e>
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d867      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05c      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x15e>
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d05a      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x15e>
 8005c84:	e062      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c96:	f000 fc61 	bl	800655c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	609a      	str	r2, [r3, #8]
      break;
 8005cb2:	e04f      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc4:	f000 fc4a 	bl	800655c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cd6:	609a      	str	r2, [r3, #8]
      break;
 8005cd8:	e03c      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 fbbe 	bl	8006468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2150      	movs	r1, #80	@ 0x50
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fc17 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e02c      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d06:	461a      	mov	r2, r3
 8005d08:	f000 fbdd 	bl	80064c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2160      	movs	r1, #96	@ 0x60
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fc07 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 8005d18:	e01c      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d26:	461a      	mov	r2, r3
 8005d28:	f000 fb9e 	bl	8006468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2140      	movs	r1, #64	@ 0x40
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fbf7 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 8005d38:	e00c      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f000 fbee 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 8005d4a:	e003      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	e000      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a46      	ldr	r2, [pc, #280]	@ (8005e9c <TIM_Base_SetConfig+0x12c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8e:	d00f      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a43      	ldr	r2, [pc, #268]	@ (8005ea0 <TIM_Base_SetConfig+0x130>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a42      	ldr	r2, [pc, #264]	@ (8005ea4 <TIM_Base_SetConfig+0x134>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d007      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a41      	ldr	r2, [pc, #260]	@ (8005ea8 <TIM_Base_SetConfig+0x138>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a40      	ldr	r2, [pc, #256]	@ (8005eac <TIM_Base_SetConfig+0x13c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a35      	ldr	r2, [pc, #212]	@ (8005e9c <TIM_Base_SetConfig+0x12c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01f      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd0:	d01b      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a32      	ldr	r2, [pc, #200]	@ (8005ea0 <TIM_Base_SetConfig+0x130>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d017      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a31      	ldr	r2, [pc, #196]	@ (8005ea4 <TIM_Base_SetConfig+0x134>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a30      	ldr	r2, [pc, #192]	@ (8005ea8 <TIM_Base_SetConfig+0x138>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00f      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2f      	ldr	r2, [pc, #188]	@ (8005eac <TIM_Base_SetConfig+0x13c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00b      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a2e      	ldr	r2, [pc, #184]	@ (8005eb0 <TIM_Base_SetConfig+0x140>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb4 <TIM_Base_SetConfig+0x144>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb8 <TIM_Base_SetConfig+0x148>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d108      	bne.n	8005e1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a16      	ldr	r2, [pc, #88]	@ (8005e9c <TIM_Base_SetConfig+0x12c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00f      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a18      	ldr	r2, [pc, #96]	@ (8005eac <TIM_Base_SetConfig+0x13c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00b      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a17      	ldr	r2, [pc, #92]	@ (8005eb0 <TIM_Base_SetConfig+0x140>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d007      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a16      	ldr	r2, [pc, #88]	@ (8005eb4 <TIM_Base_SetConfig+0x144>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a15      	ldr	r2, [pc, #84]	@ (8005eb8 <TIM_Base_SetConfig+0x148>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d103      	bne.n	8005e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d105      	bne.n	8005e8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f023 0201 	bic.w	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	611a      	str	r2, [r3, #16]
  }
}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40013400 	.word	0x40013400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40014400 	.word	0x40014400
 8005eb8:	40014800 	.word	0x40014800

08005ebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f023 0201 	bic.w	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 0302 	bic.w	r3, r3, #2
 8005f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc8 <TIM_OC1_SetConfig+0x10c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00f      	beq.n	8005f3c <TIM_OC1_SetConfig+0x80>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005fcc <TIM_OC1_SetConfig+0x110>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <TIM_OC1_SetConfig+0x80>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a2a      	ldr	r2, [pc, #168]	@ (8005fd0 <TIM_OC1_SetConfig+0x114>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_OC1_SetConfig+0x80>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a29      	ldr	r2, [pc, #164]	@ (8005fd4 <TIM_OC1_SetConfig+0x118>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_OC1_SetConfig+0x80>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a28      	ldr	r2, [pc, #160]	@ (8005fd8 <TIM_OC1_SetConfig+0x11c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d10c      	bne.n	8005f56 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0308 	bic.w	r3, r3, #8
 8005f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 0304 	bic.w	r3, r3, #4
 8005f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc8 <TIM_OC1_SetConfig+0x10c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00f      	beq.n	8005f7e <TIM_OC1_SetConfig+0xc2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1a      	ldr	r2, [pc, #104]	@ (8005fcc <TIM_OC1_SetConfig+0x110>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00b      	beq.n	8005f7e <TIM_OC1_SetConfig+0xc2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a19      	ldr	r2, [pc, #100]	@ (8005fd0 <TIM_OC1_SetConfig+0x114>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <TIM_OC1_SetConfig+0xc2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a18      	ldr	r2, [pc, #96]	@ (8005fd4 <TIM_OC1_SetConfig+0x118>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_OC1_SetConfig+0xc2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a17      	ldr	r2, [pc, #92]	@ (8005fd8 <TIM_OC1_SetConfig+0x11c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d111      	bne.n	8005fa2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	621a      	str	r2, [r3, #32]
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40012c00 	.word	0x40012c00
 8005fcc:	40013400 	.word	0x40013400
 8005fd0:	40014000 	.word	0x40014000
 8005fd4:	40014400 	.word	0x40014400
 8005fd8:	40014800 	.word	0x40014800

08005fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f023 0210 	bic.w	r2, r3, #16
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0320 	bic.w	r3, r3, #32
 800602a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a28      	ldr	r2, [pc, #160]	@ (80060dc <TIM_OC2_SetConfig+0x100>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d003      	beq.n	8006048 <TIM_OC2_SetConfig+0x6c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a27      	ldr	r2, [pc, #156]	@ (80060e0 <TIM_OC2_SetConfig+0x104>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d10d      	bne.n	8006064 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800604e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006062:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a1d      	ldr	r2, [pc, #116]	@ (80060dc <TIM_OC2_SetConfig+0x100>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00f      	beq.n	800608c <TIM_OC2_SetConfig+0xb0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a1c      	ldr	r2, [pc, #112]	@ (80060e0 <TIM_OC2_SetConfig+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_OC2_SetConfig+0xb0>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a1b      	ldr	r2, [pc, #108]	@ (80060e4 <TIM_OC2_SetConfig+0x108>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_OC2_SetConfig+0xb0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a1a      	ldr	r2, [pc, #104]	@ (80060e8 <TIM_OC2_SetConfig+0x10c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC2_SetConfig+0xb0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <TIM_OC2_SetConfig+0x110>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d113      	bne.n	80060b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800609a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800611e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800613c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a27      	ldr	r2, [pc, #156]	@ (80061ec <TIM_OC3_SetConfig+0xfc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_OC3_SetConfig+0x6a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a26      	ldr	r2, [pc, #152]	@ (80061f0 <TIM_OC3_SetConfig+0x100>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d10d      	bne.n	8006176 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a1c      	ldr	r2, [pc, #112]	@ (80061ec <TIM_OC3_SetConfig+0xfc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00f      	beq.n	800619e <TIM_OC3_SetConfig+0xae>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a1b      	ldr	r2, [pc, #108]	@ (80061f0 <TIM_OC3_SetConfig+0x100>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00b      	beq.n	800619e <TIM_OC3_SetConfig+0xae>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1a      	ldr	r2, [pc, #104]	@ (80061f4 <TIM_OC3_SetConfig+0x104>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d007      	beq.n	800619e <TIM_OC3_SetConfig+0xae>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a19      	ldr	r2, [pc, #100]	@ (80061f8 <TIM_OC3_SetConfig+0x108>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_OC3_SetConfig+0xae>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a18      	ldr	r2, [pc, #96]	@ (80061fc <TIM_OC3_SetConfig+0x10c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d113      	bne.n	80061c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	621a      	str	r2, [r3, #32]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800624e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	031b      	lsls	r3, r3, #12
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a18      	ldr	r2, [pc, #96]	@ (80062c0 <TIM_OC4_SetConfig+0xc0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00f      	beq.n	8006284 <TIM_OC4_SetConfig+0x84>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a17      	ldr	r2, [pc, #92]	@ (80062c4 <TIM_OC4_SetConfig+0xc4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_OC4_SetConfig+0x84>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a16      	ldr	r2, [pc, #88]	@ (80062c8 <TIM_OC4_SetConfig+0xc8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_OC4_SetConfig+0x84>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a15      	ldr	r2, [pc, #84]	@ (80062cc <TIM_OC4_SetConfig+0xcc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC4_SetConfig+0x84>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a14      	ldr	r2, [pc, #80]	@ (80062d0 <TIM_OC4_SetConfig+0xd0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d109      	bne.n	8006298 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800628a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800

080062d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006318:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <TIM_OC5_SetConfig+0xb4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00f      	beq.n	800634e <TIM_OC5_SetConfig+0x7a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a16      	ldr	r2, [pc, #88]	@ (800638c <TIM_OC5_SetConfig+0xb8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00b      	beq.n	800634e <TIM_OC5_SetConfig+0x7a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a15      	ldr	r2, [pc, #84]	@ (8006390 <TIM_OC5_SetConfig+0xbc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d007      	beq.n	800634e <TIM_OC5_SetConfig+0x7a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a14      	ldr	r2, [pc, #80]	@ (8006394 <TIM_OC5_SetConfig+0xc0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d003      	beq.n	800634e <TIM_OC5_SetConfig+0x7a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a13      	ldr	r2, [pc, #76]	@ (8006398 <TIM_OC5_SetConfig+0xc4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d109      	bne.n	8006362 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006354:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	621a      	str	r2, [r3, #32]
}
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40013400 	.word	0x40013400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800

0800639c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	051b      	lsls	r3, r3, #20
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a18      	ldr	r2, [pc, #96]	@ (8006454 <TIM_OC6_SetConfig+0xb8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00f      	beq.n	8006418 <TIM_OC6_SetConfig+0x7c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a17      	ldr	r2, [pc, #92]	@ (8006458 <TIM_OC6_SetConfig+0xbc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00b      	beq.n	8006418 <TIM_OC6_SetConfig+0x7c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a16      	ldr	r2, [pc, #88]	@ (800645c <TIM_OC6_SetConfig+0xc0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d007      	beq.n	8006418 <TIM_OC6_SetConfig+0x7c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a15      	ldr	r2, [pc, #84]	@ (8006460 <TIM_OC6_SetConfig+0xc4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_OC6_SetConfig+0x7c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a14      	ldr	r2, [pc, #80]	@ (8006464 <TIM_OC6_SetConfig+0xc8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d109      	bne.n	800642c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800641e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	029b      	lsls	r3, r3, #10
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40012c00 	.word	0x40012c00
 8006458:	40013400 	.word	0x40013400
 800645c:	40014000 	.word	0x40014000
 8006460:	40014400 	.word	0x40014400
 8006464:	40014800 	.word	0x40014800

08006468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f023 030a 	bic.w	r3, r3, #10
 80064a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	621a      	str	r2, [r3, #32]
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f023 0210 	bic.w	r2, r3, #16
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	031b      	lsls	r3, r3, #12
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006502:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	621a      	str	r2, [r3, #32]
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	f043 0307 	orr.w	r3, r3, #7
 8006548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	609a      	str	r2, [r3, #8]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	021a      	lsls	r2, r3, #8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	431a      	orrs	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4313      	orrs	r3, r2
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	bf00      	nop
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e068      	b.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a2d      	ldr	r2, [pc, #180]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d108      	bne.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1e      	ldr	r2, [pc, #120]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01d      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006626:	d018      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1b      	ldr	r2, [pc, #108]	@ (800669c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1a      	ldr	r2, [pc, #104]	@ (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a18      	ldr	r2, [pc, #96]	@ (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a13      	ldr	r2, [pc, #76]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a14      	ldr	r2, [pc, #80]	@ (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10c      	bne.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4313      	orrs	r3, r2
 800666a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40000c00 	.word	0x40000c00
 80066a8:	40014000 	.word	0x40014000

080066ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e065      	b.n	8006794 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	041b      	lsls	r3, r3, #16
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a16      	ldr	r2, [pc, #88]	@ (80067a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d004      	beq.n	8006756 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a14      	ldr	r2, [pc, #80]	@ (80067a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d115      	bne.n	8006782 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	051b      	lsls	r3, r3, #20
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40013400 	.word	0x40013400

080067a8 <malloc>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	@ (80067b4 <malloc+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f000 b825 	b.w	80067fc <_malloc_r>
 80067b2:	bf00      	nop
 80067b4:	20040020 	.word	0x20040020

080067b8 <sbrk_aligned>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	4e0f      	ldr	r6, [pc, #60]	@ (80067f8 <sbrk_aligned+0x40>)
 80067bc:	460c      	mov	r4, r1
 80067be:	6831      	ldr	r1, [r6, #0]
 80067c0:	4605      	mov	r5, r0
 80067c2:	b911      	cbnz	r1, 80067ca <sbrk_aligned+0x12>
 80067c4:	f001 f976 	bl	8007ab4 <_sbrk_r>
 80067c8:	6030      	str	r0, [r6, #0]
 80067ca:	4621      	mov	r1, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	f001 f971 	bl	8007ab4 <_sbrk_r>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	d103      	bne.n	80067de <sbrk_aligned+0x26>
 80067d6:	f04f 34ff 	mov.w	r4, #4294967295
 80067da:	4620      	mov	r0, r4
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	1cc4      	adds	r4, r0, #3
 80067e0:	f024 0403 	bic.w	r4, r4, #3
 80067e4:	42a0      	cmp	r0, r4
 80067e6:	d0f8      	beq.n	80067da <sbrk_aligned+0x22>
 80067e8:	1a21      	subs	r1, r4, r0
 80067ea:	4628      	mov	r0, r5
 80067ec:	f001 f962 	bl	8007ab4 <_sbrk_r>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d1f2      	bne.n	80067da <sbrk_aligned+0x22>
 80067f4:	e7ef      	b.n	80067d6 <sbrk_aligned+0x1e>
 80067f6:	bf00      	nop
 80067f8:	2005c504 	.word	0x2005c504

080067fc <_malloc_r>:
 80067fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006800:	1ccd      	adds	r5, r1, #3
 8006802:	f025 0503 	bic.w	r5, r5, #3
 8006806:	3508      	adds	r5, #8
 8006808:	2d0c      	cmp	r5, #12
 800680a:	bf38      	it	cc
 800680c:	250c      	movcc	r5, #12
 800680e:	2d00      	cmp	r5, #0
 8006810:	4606      	mov	r6, r0
 8006812:	db01      	blt.n	8006818 <_malloc_r+0x1c>
 8006814:	42a9      	cmp	r1, r5
 8006816:	d904      	bls.n	8006822 <_malloc_r+0x26>
 8006818:	230c      	movs	r3, #12
 800681a:	6033      	str	r3, [r6, #0]
 800681c:	2000      	movs	r0, #0
 800681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068f8 <_malloc_r+0xfc>
 8006826:	f000 f869 	bl	80068fc <__malloc_lock>
 800682a:	f8d8 3000 	ldr.w	r3, [r8]
 800682e:	461c      	mov	r4, r3
 8006830:	bb44      	cbnz	r4, 8006884 <_malloc_r+0x88>
 8006832:	4629      	mov	r1, r5
 8006834:	4630      	mov	r0, r6
 8006836:	f7ff ffbf 	bl	80067b8 <sbrk_aligned>
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	4604      	mov	r4, r0
 800683e:	d158      	bne.n	80068f2 <_malloc_r+0xf6>
 8006840:	f8d8 4000 	ldr.w	r4, [r8]
 8006844:	4627      	mov	r7, r4
 8006846:	2f00      	cmp	r7, #0
 8006848:	d143      	bne.n	80068d2 <_malloc_r+0xd6>
 800684a:	2c00      	cmp	r4, #0
 800684c:	d04b      	beq.n	80068e6 <_malloc_r+0xea>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	4639      	mov	r1, r7
 8006852:	4630      	mov	r0, r6
 8006854:	eb04 0903 	add.w	r9, r4, r3
 8006858:	f001 f92c 	bl	8007ab4 <_sbrk_r>
 800685c:	4581      	cmp	r9, r0
 800685e:	d142      	bne.n	80068e6 <_malloc_r+0xea>
 8006860:	6821      	ldr	r1, [r4, #0]
 8006862:	1a6d      	subs	r5, r5, r1
 8006864:	4629      	mov	r1, r5
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff ffa6 	bl	80067b8 <sbrk_aligned>
 800686c:	3001      	adds	r0, #1
 800686e:	d03a      	beq.n	80068e6 <_malloc_r+0xea>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	442b      	add	r3, r5
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	f8d8 3000 	ldr.w	r3, [r8]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	bb62      	cbnz	r2, 80068d8 <_malloc_r+0xdc>
 800687e:	f8c8 7000 	str.w	r7, [r8]
 8006882:	e00f      	b.n	80068a4 <_malloc_r+0xa8>
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	1b52      	subs	r2, r2, r5
 8006888:	d420      	bmi.n	80068cc <_malloc_r+0xd0>
 800688a:	2a0b      	cmp	r2, #11
 800688c:	d917      	bls.n	80068be <_malloc_r+0xc2>
 800688e:	1961      	adds	r1, r4, r5
 8006890:	42a3      	cmp	r3, r4
 8006892:	6025      	str	r5, [r4, #0]
 8006894:	bf18      	it	ne
 8006896:	6059      	strne	r1, [r3, #4]
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	bf08      	it	eq
 800689c:	f8c8 1000 	streq.w	r1, [r8]
 80068a0:	5162      	str	r2, [r4, r5]
 80068a2:	604b      	str	r3, [r1, #4]
 80068a4:	4630      	mov	r0, r6
 80068a6:	f000 f82f 	bl	8006908 <__malloc_unlock>
 80068aa:	f104 000b 	add.w	r0, r4, #11
 80068ae:	1d23      	adds	r3, r4, #4
 80068b0:	f020 0007 	bic.w	r0, r0, #7
 80068b4:	1ac2      	subs	r2, r0, r3
 80068b6:	bf1c      	itt	ne
 80068b8:	1a1b      	subne	r3, r3, r0
 80068ba:	50a3      	strne	r3, [r4, r2]
 80068bc:	e7af      	b.n	800681e <_malloc_r+0x22>
 80068be:	6862      	ldr	r2, [r4, #4]
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	bf0c      	ite	eq
 80068c4:	f8c8 2000 	streq.w	r2, [r8]
 80068c8:	605a      	strne	r2, [r3, #4]
 80068ca:	e7eb      	b.n	80068a4 <_malloc_r+0xa8>
 80068cc:	4623      	mov	r3, r4
 80068ce:	6864      	ldr	r4, [r4, #4]
 80068d0:	e7ae      	b.n	8006830 <_malloc_r+0x34>
 80068d2:	463c      	mov	r4, r7
 80068d4:	687f      	ldr	r7, [r7, #4]
 80068d6:	e7b6      	b.n	8006846 <_malloc_r+0x4a>
 80068d8:	461a      	mov	r2, r3
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d1fb      	bne.n	80068d8 <_malloc_r+0xdc>
 80068e0:	2300      	movs	r3, #0
 80068e2:	6053      	str	r3, [r2, #4]
 80068e4:	e7de      	b.n	80068a4 <_malloc_r+0xa8>
 80068e6:	230c      	movs	r3, #12
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	4630      	mov	r0, r6
 80068ec:	f000 f80c 	bl	8006908 <__malloc_unlock>
 80068f0:	e794      	b.n	800681c <_malloc_r+0x20>
 80068f2:	6005      	str	r5, [r0, #0]
 80068f4:	e7d6      	b.n	80068a4 <_malloc_r+0xa8>
 80068f6:	bf00      	nop
 80068f8:	2005c508 	.word	0x2005c508

080068fc <__malloc_lock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	@ (8006904 <__malloc_lock+0x8>)
 80068fe:	f001 b926 	b.w	8007b4e <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	2005c64c 	.word	0x2005c64c

08006908 <__malloc_unlock>:
 8006908:	4801      	ldr	r0, [pc, #4]	@ (8006910 <__malloc_unlock+0x8>)
 800690a:	f001 b921 	b.w	8007b50 <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	2005c64c 	.word	0x2005c64c

08006914 <__cvt>:
 8006914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	ec57 6b10 	vmov	r6, r7, d0
 800691c:	2f00      	cmp	r7, #0
 800691e:	460c      	mov	r4, r1
 8006920:	4619      	mov	r1, r3
 8006922:	463b      	mov	r3, r7
 8006924:	bfbb      	ittet	lt
 8006926:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800692a:	461f      	movlt	r7, r3
 800692c:	2300      	movge	r3, #0
 800692e:	232d      	movlt	r3, #45	@ 0x2d
 8006930:	700b      	strb	r3, [r1, #0]
 8006932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006934:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006938:	4691      	mov	r9, r2
 800693a:	f023 0820 	bic.w	r8, r3, #32
 800693e:	bfbc      	itt	lt
 8006940:	4632      	movlt	r2, r6
 8006942:	4616      	movlt	r6, r2
 8006944:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006948:	d005      	beq.n	8006956 <__cvt+0x42>
 800694a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800694e:	d100      	bne.n	8006952 <__cvt+0x3e>
 8006950:	3401      	adds	r4, #1
 8006952:	2102      	movs	r1, #2
 8006954:	e000      	b.n	8006958 <__cvt+0x44>
 8006956:	2103      	movs	r1, #3
 8006958:	ab03      	add	r3, sp, #12
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	ab02      	add	r3, sp, #8
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	ec47 6b10 	vmov	d0, r6, r7
 8006964:	4653      	mov	r3, sl
 8006966:	4622      	mov	r2, r4
 8006968:	f001 f992 	bl	8007c90 <_dtoa_r>
 800696c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006970:	4605      	mov	r5, r0
 8006972:	d119      	bne.n	80069a8 <__cvt+0x94>
 8006974:	f019 0f01 	tst.w	r9, #1
 8006978:	d00e      	beq.n	8006998 <__cvt+0x84>
 800697a:	eb00 0904 	add.w	r9, r0, r4
 800697e:	2200      	movs	r2, #0
 8006980:	2300      	movs	r3, #0
 8006982:	4630      	mov	r0, r6
 8006984:	4639      	mov	r1, r7
 8006986:	f7fa f8b7 	bl	8000af8 <__aeabi_dcmpeq>
 800698a:	b108      	cbz	r0, 8006990 <__cvt+0x7c>
 800698c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006990:	2230      	movs	r2, #48	@ 0x30
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	454b      	cmp	r3, r9
 8006996:	d31e      	bcc.n	80069d6 <__cvt+0xc2>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800699c:	1b5b      	subs	r3, r3, r5
 800699e:	4628      	mov	r0, r5
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	b004      	add	sp, #16
 80069a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069ac:	eb00 0904 	add.w	r9, r0, r4
 80069b0:	d1e5      	bne.n	800697e <__cvt+0x6a>
 80069b2:	7803      	ldrb	r3, [r0, #0]
 80069b4:	2b30      	cmp	r3, #48	@ 0x30
 80069b6:	d10a      	bne.n	80069ce <__cvt+0xba>
 80069b8:	2200      	movs	r2, #0
 80069ba:	2300      	movs	r3, #0
 80069bc:	4630      	mov	r0, r6
 80069be:	4639      	mov	r1, r7
 80069c0:	f7fa f89a 	bl	8000af8 <__aeabi_dcmpeq>
 80069c4:	b918      	cbnz	r0, 80069ce <__cvt+0xba>
 80069c6:	f1c4 0401 	rsb	r4, r4, #1
 80069ca:	f8ca 4000 	str.w	r4, [sl]
 80069ce:	f8da 3000 	ldr.w	r3, [sl]
 80069d2:	4499      	add	r9, r3
 80069d4:	e7d3      	b.n	800697e <__cvt+0x6a>
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	9103      	str	r1, [sp, #12]
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	e7d9      	b.n	8006992 <__cvt+0x7e>

080069de <__exponent>:
 80069de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069e0:	2900      	cmp	r1, #0
 80069e2:	bfba      	itte	lt
 80069e4:	4249      	neglt	r1, r1
 80069e6:	232d      	movlt	r3, #45	@ 0x2d
 80069e8:	232b      	movge	r3, #43	@ 0x2b
 80069ea:	2909      	cmp	r1, #9
 80069ec:	7002      	strb	r2, [r0, #0]
 80069ee:	7043      	strb	r3, [r0, #1]
 80069f0:	dd29      	ble.n	8006a46 <__exponent+0x68>
 80069f2:	f10d 0307 	add.w	r3, sp, #7
 80069f6:	461d      	mov	r5, r3
 80069f8:	270a      	movs	r7, #10
 80069fa:	461a      	mov	r2, r3
 80069fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a00:	fb07 1416 	mls	r4, r7, r6, r1
 8006a04:	3430      	adds	r4, #48	@ 0x30
 8006a06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	2c63      	cmp	r4, #99	@ 0x63
 8006a0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a12:	4631      	mov	r1, r6
 8006a14:	dcf1      	bgt.n	80069fa <__exponent+0x1c>
 8006a16:	3130      	adds	r1, #48	@ 0x30
 8006a18:	1e94      	subs	r4, r2, #2
 8006a1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a1e:	1c41      	adds	r1, r0, #1
 8006a20:	4623      	mov	r3, r4
 8006a22:	42ab      	cmp	r3, r5
 8006a24:	d30a      	bcc.n	8006a3c <__exponent+0x5e>
 8006a26:	f10d 0309 	add.w	r3, sp, #9
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	42ac      	cmp	r4, r5
 8006a2e:	bf88      	it	hi
 8006a30:	2300      	movhi	r3, #0
 8006a32:	3302      	adds	r3, #2
 8006a34:	4403      	add	r3, r0
 8006a36:	1a18      	subs	r0, r3, r0
 8006a38:	b003      	add	sp, #12
 8006a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a44:	e7ed      	b.n	8006a22 <__exponent+0x44>
 8006a46:	2330      	movs	r3, #48	@ 0x30
 8006a48:	3130      	adds	r1, #48	@ 0x30
 8006a4a:	7083      	strb	r3, [r0, #2]
 8006a4c:	70c1      	strb	r1, [r0, #3]
 8006a4e:	1d03      	adds	r3, r0, #4
 8006a50:	e7f1      	b.n	8006a36 <__exponent+0x58>
	...

08006a54 <_printf_float>:
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	b08d      	sub	sp, #52	@ 0x34
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a60:	4616      	mov	r6, r2
 8006a62:	461f      	mov	r7, r3
 8006a64:	4605      	mov	r5, r0
 8006a66:	f000 ffed 	bl	8007a44 <_localeconv_r>
 8006a6a:	6803      	ldr	r3, [r0, #0]
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7f9 fc16 	bl	80002a0 <strlen>
 8006a74:	2300      	movs	r3, #0
 8006a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a78:	f8d8 3000 	ldr.w	r3, [r8]
 8006a7c:	9005      	str	r0, [sp, #20]
 8006a7e:	3307      	adds	r3, #7
 8006a80:	f023 0307 	bic.w	r3, r3, #7
 8006a84:	f103 0208 	add.w	r2, r3, #8
 8006a88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a8c:	f8d4 b000 	ldr.w	fp, [r4]
 8006a90:	f8c8 2000 	str.w	r2, [r8]
 8006a94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a9c:	9307      	str	r3, [sp, #28]
 8006a9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006aa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006aa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aaa:	4b9c      	ldr	r3, [pc, #624]	@ (8006d1c <_printf_float+0x2c8>)
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	f7fa f854 	bl	8000b5c <__aeabi_dcmpun>
 8006ab4:	bb70      	cbnz	r0, 8006b14 <_printf_float+0xc0>
 8006ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aba:	4b98      	ldr	r3, [pc, #608]	@ (8006d1c <_printf_float+0x2c8>)
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac0:	f7fa f82e 	bl	8000b20 <__aeabi_dcmple>
 8006ac4:	bb30      	cbnz	r0, 8006b14 <_printf_float+0xc0>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7fa f81d 	bl	8000b0c <__aeabi_dcmplt>
 8006ad2:	b110      	cbz	r0, 8006ada <_printf_float+0x86>
 8006ad4:	232d      	movs	r3, #45	@ 0x2d
 8006ad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ada:	4a91      	ldr	r2, [pc, #580]	@ (8006d20 <_printf_float+0x2cc>)
 8006adc:	4b91      	ldr	r3, [pc, #580]	@ (8006d24 <_printf_float+0x2d0>)
 8006ade:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ae2:	bf8c      	ite	hi
 8006ae4:	4690      	movhi	r8, r2
 8006ae6:	4698      	movls	r8, r3
 8006ae8:	2303      	movs	r3, #3
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	f02b 0304 	bic.w	r3, fp, #4
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	9700      	str	r7, [sp, #0]
 8006af8:	4633      	mov	r3, r6
 8006afa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006afc:	4621      	mov	r1, r4
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 f9d2 	bl	8006ea8 <_printf_common>
 8006b04:	3001      	adds	r0, #1
 8006b06:	f040 808d 	bne.w	8006c24 <_printf_float+0x1d0>
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	b00d      	add	sp, #52	@ 0x34
 8006b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	f7fa f81e 	bl	8000b5c <__aeabi_dcmpun>
 8006b20:	b140      	cbz	r0, 8006b34 <_printf_float+0xe0>
 8006b22:	464b      	mov	r3, r9
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfbc      	itt	lt
 8006b28:	232d      	movlt	r3, #45	@ 0x2d
 8006b2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d28 <_printf_float+0x2d4>)
 8006b30:	4b7e      	ldr	r3, [pc, #504]	@ (8006d2c <_printf_float+0x2d8>)
 8006b32:	e7d4      	b.n	8006ade <_printf_float+0x8a>
 8006b34:	6863      	ldr	r3, [r4, #4]
 8006b36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b3a:	9206      	str	r2, [sp, #24]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	d13b      	bne.n	8006bb8 <_printf_float+0x164>
 8006b40:	2306      	movs	r3, #6
 8006b42:	6063      	str	r3, [r4, #4]
 8006b44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	9303      	str	r3, [sp, #12]
 8006b4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b54:	ab09      	add	r3, sp, #36	@ 0x24
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	6861      	ldr	r1, [r4, #4]
 8006b5a:	ec49 8b10 	vmov	d0, r8, r9
 8006b5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7ff fed6 	bl	8006914 <__cvt>
 8006b68:	9b06      	ldr	r3, [sp, #24]
 8006b6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b6c:	2b47      	cmp	r3, #71	@ 0x47
 8006b6e:	4680      	mov	r8, r0
 8006b70:	d129      	bne.n	8006bc6 <_printf_float+0x172>
 8006b72:	1cc8      	adds	r0, r1, #3
 8006b74:	db02      	blt.n	8006b7c <_printf_float+0x128>
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	4299      	cmp	r1, r3
 8006b7a:	dd41      	ble.n	8006c00 <_printf_float+0x1ac>
 8006b7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b80:	fa5f fa8a 	uxtb.w	sl, sl
 8006b84:	3901      	subs	r1, #1
 8006b86:	4652      	mov	r2, sl
 8006b88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b8e:	f7ff ff26 	bl	80069de <__exponent>
 8006b92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b94:	1813      	adds	r3, r2, r0
 8006b96:	2a01      	cmp	r2, #1
 8006b98:	4681      	mov	r9, r0
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	dc02      	bgt.n	8006ba4 <_printf_float+0x150>
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	07d2      	lsls	r2, r2, #31
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_float+0x154>
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0a2      	beq.n	8006af6 <_printf_float+0xa2>
 8006bb0:	232d      	movs	r3, #45	@ 0x2d
 8006bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb6:	e79e      	b.n	8006af6 <_printf_float+0xa2>
 8006bb8:	9a06      	ldr	r2, [sp, #24]
 8006bba:	2a47      	cmp	r2, #71	@ 0x47
 8006bbc:	d1c2      	bne.n	8006b44 <_printf_float+0xf0>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1c0      	bne.n	8006b44 <_printf_float+0xf0>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e7bd      	b.n	8006b42 <_printf_float+0xee>
 8006bc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bca:	d9db      	bls.n	8006b84 <_printf_float+0x130>
 8006bcc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bd0:	d118      	bne.n	8006c04 <_printf_float+0x1b0>
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	dd0b      	ble.n	8006bf0 <_printf_float+0x19c>
 8006bd8:	6121      	str	r1, [r4, #16]
 8006bda:	b913      	cbnz	r3, 8006be2 <_printf_float+0x18e>
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	07d0      	lsls	r0, r2, #31
 8006be0:	d502      	bpl.n	8006be8 <_printf_float+0x194>
 8006be2:	3301      	adds	r3, #1
 8006be4:	440b      	add	r3, r1
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006bea:	f04f 0900 	mov.w	r9, #0
 8006bee:	e7db      	b.n	8006ba8 <_printf_float+0x154>
 8006bf0:	b913      	cbnz	r3, 8006bf8 <_printf_float+0x1a4>
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	07d2      	lsls	r2, r2, #31
 8006bf6:	d501      	bpl.n	8006bfc <_printf_float+0x1a8>
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	e7f4      	b.n	8006be6 <_printf_float+0x192>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e7f2      	b.n	8006be6 <_printf_float+0x192>
 8006c00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c06:	4299      	cmp	r1, r3
 8006c08:	db05      	blt.n	8006c16 <_printf_float+0x1c2>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	6121      	str	r1, [r4, #16]
 8006c0e:	07d8      	lsls	r0, r3, #31
 8006c10:	d5ea      	bpl.n	8006be8 <_printf_float+0x194>
 8006c12:	1c4b      	adds	r3, r1, #1
 8006c14:	e7e7      	b.n	8006be6 <_printf_float+0x192>
 8006c16:	2900      	cmp	r1, #0
 8006c18:	bfd4      	ite	le
 8006c1a:	f1c1 0202 	rsble	r2, r1, #2
 8006c1e:	2201      	movgt	r2, #1
 8006c20:	4413      	add	r3, r2
 8006c22:	e7e0      	b.n	8006be6 <_printf_float+0x192>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	055a      	lsls	r2, r3, #21
 8006c28:	d407      	bmi.n	8006c3a <_printf_float+0x1e6>
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	d12b      	bne.n	8006c90 <_printf_float+0x23c>
 8006c38:	e767      	b.n	8006b0a <_printf_float+0xb6>
 8006c3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c3e:	f240 80dd 	bls.w	8006dfc <_printf_float+0x3a8>
 8006c42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c46:	2200      	movs	r2, #0
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f7f9 ff55 	bl	8000af8 <__aeabi_dcmpeq>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d033      	beq.n	8006cba <_printf_float+0x266>
 8006c52:	4a37      	ldr	r2, [pc, #220]	@ (8006d30 <_printf_float+0x2dc>)
 8006c54:	2301      	movs	r3, #1
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f43f af54 	beq.w	8006b0a <_printf_float+0xb6>
 8006c62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c66:	4543      	cmp	r3, r8
 8006c68:	db02      	blt.n	8006c70 <_printf_float+0x21c>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	07d8      	lsls	r0, r3, #31
 8006c6e:	d50f      	bpl.n	8006c90 <_printf_float+0x23c>
 8006c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c74:	4631      	mov	r1, r6
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	f43f af45 	beq.w	8006b0a <_printf_float+0xb6>
 8006c80:	f04f 0900 	mov.w	r9, #0
 8006c84:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c88:	f104 0a1a 	add.w	sl, r4, #26
 8006c8c:	45c8      	cmp	r8, r9
 8006c8e:	dc09      	bgt.n	8006ca4 <_printf_float+0x250>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	079b      	lsls	r3, r3, #30
 8006c94:	f100 8103 	bmi.w	8006e9e <_printf_float+0x44a>
 8006c98:	68e0      	ldr	r0, [r4, #12]
 8006c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c9c:	4298      	cmp	r0, r3
 8006c9e:	bfb8      	it	lt
 8006ca0:	4618      	movlt	r0, r3
 8006ca2:	e734      	b.n	8006b0e <_printf_float+0xba>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4652      	mov	r2, sl
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b8      	blx	r7
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f43f af2b 	beq.w	8006b0a <_printf_float+0xb6>
 8006cb4:	f109 0901 	add.w	r9, r9, #1
 8006cb8:	e7e8      	b.n	8006c8c <_printf_float+0x238>
 8006cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dc39      	bgt.n	8006d34 <_printf_float+0x2e0>
 8006cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d30 <_printf_float+0x2dc>)
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b8      	blx	r7
 8006cca:	3001      	adds	r0, #1
 8006ccc:	f43f af1d 	beq.w	8006b0a <_printf_float+0xb6>
 8006cd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006cd4:	ea59 0303 	orrs.w	r3, r9, r3
 8006cd8:	d102      	bne.n	8006ce0 <_printf_float+0x28c>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	07d9      	lsls	r1, r3, #31
 8006cde:	d5d7      	bpl.n	8006c90 <_printf_float+0x23c>
 8006ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	47b8      	blx	r7
 8006cea:	3001      	adds	r0, #1
 8006cec:	f43f af0d 	beq.w	8006b0a <_printf_float+0xb6>
 8006cf0:	f04f 0a00 	mov.w	sl, #0
 8006cf4:	f104 0b1a 	add.w	fp, r4, #26
 8006cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfa:	425b      	negs	r3, r3
 8006cfc:	4553      	cmp	r3, sl
 8006cfe:	dc01      	bgt.n	8006d04 <_printf_float+0x2b0>
 8006d00:	464b      	mov	r3, r9
 8006d02:	e793      	b.n	8006c2c <_printf_float+0x1d8>
 8006d04:	2301      	movs	r3, #1
 8006d06:	465a      	mov	r2, fp
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	47b8      	blx	r7
 8006d0e:	3001      	adds	r0, #1
 8006d10:	f43f aefb 	beq.w	8006b0a <_printf_float+0xb6>
 8006d14:	f10a 0a01 	add.w	sl, sl, #1
 8006d18:	e7ee      	b.n	8006cf8 <_printf_float+0x2a4>
 8006d1a:	bf00      	nop
 8006d1c:	7fefffff 	.word	0x7fefffff
 8006d20:	0800cd68 	.word	0x0800cd68
 8006d24:	0800cd64 	.word	0x0800cd64
 8006d28:	0800cd70 	.word	0x0800cd70
 8006d2c:	0800cd6c 	.word	0x0800cd6c
 8006d30:	0800cd74 	.word	0x0800cd74
 8006d34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d3a:	4553      	cmp	r3, sl
 8006d3c:	bfa8      	it	ge
 8006d3e:	4653      	movge	r3, sl
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	4699      	mov	r9, r3
 8006d44:	dc36      	bgt.n	8006db4 <_printf_float+0x360>
 8006d46:	f04f 0b00 	mov.w	fp, #0
 8006d4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d4e:	f104 021a 	add.w	r2, r4, #26
 8006d52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d54:	9306      	str	r3, [sp, #24]
 8006d56:	eba3 0309 	sub.w	r3, r3, r9
 8006d5a:	455b      	cmp	r3, fp
 8006d5c:	dc31      	bgt.n	8006dc2 <_printf_float+0x36e>
 8006d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d60:	459a      	cmp	sl, r3
 8006d62:	dc3a      	bgt.n	8006dda <_printf_float+0x386>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	07da      	lsls	r2, r3, #31
 8006d68:	d437      	bmi.n	8006dda <_printf_float+0x386>
 8006d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6c:	ebaa 0903 	sub.w	r9, sl, r3
 8006d70:	9b06      	ldr	r3, [sp, #24]
 8006d72:	ebaa 0303 	sub.w	r3, sl, r3
 8006d76:	4599      	cmp	r9, r3
 8006d78:	bfa8      	it	ge
 8006d7a:	4699      	movge	r9, r3
 8006d7c:	f1b9 0f00 	cmp.w	r9, #0
 8006d80:	dc33      	bgt.n	8006dea <_printf_float+0x396>
 8006d82:	f04f 0800 	mov.w	r8, #0
 8006d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d8a:	f104 0b1a 	add.w	fp, r4, #26
 8006d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d90:	ebaa 0303 	sub.w	r3, sl, r3
 8006d94:	eba3 0309 	sub.w	r3, r3, r9
 8006d98:	4543      	cmp	r3, r8
 8006d9a:	f77f af79 	ble.w	8006c90 <_printf_float+0x23c>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	465a      	mov	r2, fp
 8006da2:	4631      	mov	r1, r6
 8006da4:	4628      	mov	r0, r5
 8006da6:	47b8      	blx	r7
 8006da8:	3001      	adds	r0, #1
 8006daa:	f43f aeae 	beq.w	8006b0a <_printf_float+0xb6>
 8006dae:	f108 0801 	add.w	r8, r8, #1
 8006db2:	e7ec      	b.n	8006d8e <_printf_float+0x33a>
 8006db4:	4642      	mov	r2, r8
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b8      	blx	r7
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d1c2      	bne.n	8006d46 <_printf_float+0x2f2>
 8006dc0:	e6a3      	b.n	8006b0a <_printf_float+0xb6>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	9206      	str	r2, [sp, #24]
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f43f ae9c 	beq.w	8006b0a <_printf_float+0xb6>
 8006dd2:	9a06      	ldr	r2, [sp, #24]
 8006dd4:	f10b 0b01 	add.w	fp, fp, #1
 8006dd8:	e7bb      	b.n	8006d52 <_printf_float+0x2fe>
 8006dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b8      	blx	r7
 8006de4:	3001      	adds	r0, #1
 8006de6:	d1c0      	bne.n	8006d6a <_printf_float+0x316>
 8006de8:	e68f      	b.n	8006b0a <_printf_float+0xb6>
 8006dea:	9a06      	ldr	r2, [sp, #24]
 8006dec:	464b      	mov	r3, r9
 8006dee:	4442      	add	r2, r8
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	d1c3      	bne.n	8006d82 <_printf_float+0x32e>
 8006dfa:	e686      	b.n	8006b0a <_printf_float+0xb6>
 8006dfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e00:	f1ba 0f01 	cmp.w	sl, #1
 8006e04:	dc01      	bgt.n	8006e0a <_printf_float+0x3b6>
 8006e06:	07db      	lsls	r3, r3, #31
 8006e08:	d536      	bpl.n	8006e78 <_printf_float+0x424>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	4631      	mov	r1, r6
 8006e10:	4628      	mov	r0, r5
 8006e12:	47b8      	blx	r7
 8006e14:	3001      	adds	r0, #1
 8006e16:	f43f ae78 	beq.w	8006b0a <_printf_float+0xb6>
 8006e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	f43f ae70 	beq.w	8006b0a <_printf_float+0xb6>
 8006e2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2300      	movs	r3, #0
 8006e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e36:	f7f9 fe5f 	bl	8000af8 <__aeabi_dcmpeq>
 8006e3a:	b9c0      	cbnz	r0, 8006e6e <_printf_float+0x41a>
 8006e3c:	4653      	mov	r3, sl
 8006e3e:	f108 0201 	add.w	r2, r8, #1
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d10c      	bne.n	8006e66 <_printf_float+0x412>
 8006e4c:	e65d      	b.n	8006b0a <_printf_float+0xb6>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	465a      	mov	r2, fp
 8006e52:	4631      	mov	r1, r6
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f43f ae56 	beq.w	8006b0a <_printf_float+0xb6>
 8006e5e:	f108 0801 	add.w	r8, r8, #1
 8006e62:	45d0      	cmp	r8, sl
 8006e64:	dbf3      	blt.n	8006e4e <_printf_float+0x3fa>
 8006e66:	464b      	mov	r3, r9
 8006e68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e6c:	e6df      	b.n	8006c2e <_printf_float+0x1da>
 8006e6e:	f04f 0800 	mov.w	r8, #0
 8006e72:	f104 0b1a 	add.w	fp, r4, #26
 8006e76:	e7f4      	b.n	8006e62 <_printf_float+0x40e>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	4642      	mov	r2, r8
 8006e7c:	e7e1      	b.n	8006e42 <_printf_float+0x3ee>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	464a      	mov	r2, r9
 8006e82:	4631      	mov	r1, r6
 8006e84:	4628      	mov	r0, r5
 8006e86:	47b8      	blx	r7
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f43f ae3e 	beq.w	8006b0a <_printf_float+0xb6>
 8006e8e:	f108 0801 	add.w	r8, r8, #1
 8006e92:	68e3      	ldr	r3, [r4, #12]
 8006e94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e96:	1a5b      	subs	r3, r3, r1
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	dcf0      	bgt.n	8006e7e <_printf_float+0x42a>
 8006e9c:	e6fc      	b.n	8006c98 <_printf_float+0x244>
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	f104 0919 	add.w	r9, r4, #25
 8006ea6:	e7f4      	b.n	8006e92 <_printf_float+0x43e>

08006ea8 <_printf_common>:
 8006ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eac:	4616      	mov	r6, r2
 8006eae:	4698      	mov	r8, r3
 8006eb0:	688a      	ldr	r2, [r1, #8]
 8006eb2:	690b      	ldr	r3, [r1, #16]
 8006eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	bfb8      	it	lt
 8006ebc:	4613      	movlt	r3, r2
 8006ebe:	6033      	str	r3, [r6, #0]
 8006ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	b10a      	cbz	r2, 8006ece <_printf_common+0x26>
 8006eca:	3301      	adds	r3, #1
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	0699      	lsls	r1, r3, #26
 8006ed2:	bf42      	ittt	mi
 8006ed4:	6833      	ldrmi	r3, [r6, #0]
 8006ed6:	3302      	addmi	r3, #2
 8006ed8:	6033      	strmi	r3, [r6, #0]
 8006eda:	6825      	ldr	r5, [r4, #0]
 8006edc:	f015 0506 	ands.w	r5, r5, #6
 8006ee0:	d106      	bne.n	8006ef0 <_printf_common+0x48>
 8006ee2:	f104 0a19 	add.w	sl, r4, #25
 8006ee6:	68e3      	ldr	r3, [r4, #12]
 8006ee8:	6832      	ldr	r2, [r6, #0]
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	42ab      	cmp	r3, r5
 8006eee:	dc26      	bgt.n	8006f3e <_printf_common+0x96>
 8006ef0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ef4:	6822      	ldr	r2, [r4, #0]
 8006ef6:	3b00      	subs	r3, #0
 8006ef8:	bf18      	it	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	0692      	lsls	r2, r2, #26
 8006efe:	d42b      	bmi.n	8006f58 <_printf_common+0xb0>
 8006f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f04:	4641      	mov	r1, r8
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c8      	blx	r9
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d01e      	beq.n	8006f4c <_printf_common+0xa4>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	6922      	ldr	r2, [r4, #16]
 8006f12:	f003 0306 	and.w	r3, r3, #6
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	bf02      	ittt	eq
 8006f1a:	68e5      	ldreq	r5, [r4, #12]
 8006f1c:	6833      	ldreq	r3, [r6, #0]
 8006f1e:	1aed      	subeq	r5, r5, r3
 8006f20:	68a3      	ldr	r3, [r4, #8]
 8006f22:	bf0c      	ite	eq
 8006f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f28:	2500      	movne	r5, #0
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	bfc4      	itt	gt
 8006f2e:	1a9b      	subgt	r3, r3, r2
 8006f30:	18ed      	addgt	r5, r5, r3
 8006f32:	2600      	movs	r6, #0
 8006f34:	341a      	adds	r4, #26
 8006f36:	42b5      	cmp	r5, r6
 8006f38:	d11a      	bne.n	8006f70 <_printf_common+0xc8>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	e008      	b.n	8006f50 <_printf_common+0xa8>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4652      	mov	r2, sl
 8006f42:	4641      	mov	r1, r8
 8006f44:	4638      	mov	r0, r7
 8006f46:	47c8      	blx	r9
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d103      	bne.n	8006f54 <_printf_common+0xac>
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f54:	3501      	adds	r5, #1
 8006f56:	e7c6      	b.n	8006ee6 <_printf_common+0x3e>
 8006f58:	18e1      	adds	r1, r4, r3
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	2030      	movs	r0, #48	@ 0x30
 8006f5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f62:	4422      	add	r2, r4
 8006f64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	e7c7      	b.n	8006f00 <_printf_common+0x58>
 8006f70:	2301      	movs	r3, #1
 8006f72:	4622      	mov	r2, r4
 8006f74:	4641      	mov	r1, r8
 8006f76:	4638      	mov	r0, r7
 8006f78:	47c8      	blx	r9
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d0e6      	beq.n	8006f4c <_printf_common+0xa4>
 8006f7e:	3601      	adds	r6, #1
 8006f80:	e7d9      	b.n	8006f36 <_printf_common+0x8e>
	...

08006f84 <_printf_i>:
 8006f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	7e0f      	ldrb	r7, [r1, #24]
 8006f8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f8c:	2f78      	cmp	r7, #120	@ 0x78
 8006f8e:	4691      	mov	r9, r2
 8006f90:	4680      	mov	r8, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	469a      	mov	sl, r3
 8006f96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f9a:	d807      	bhi.n	8006fac <_printf_i+0x28>
 8006f9c:	2f62      	cmp	r7, #98	@ 0x62
 8006f9e:	d80a      	bhi.n	8006fb6 <_printf_i+0x32>
 8006fa0:	2f00      	cmp	r7, #0
 8006fa2:	f000 80d1 	beq.w	8007148 <_printf_i+0x1c4>
 8006fa6:	2f58      	cmp	r7, #88	@ 0x58
 8006fa8:	f000 80b8 	beq.w	800711c <_printf_i+0x198>
 8006fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fb4:	e03a      	b.n	800702c <_printf_i+0xa8>
 8006fb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fba:	2b15      	cmp	r3, #21
 8006fbc:	d8f6      	bhi.n	8006fac <_printf_i+0x28>
 8006fbe:	a101      	add	r1, pc, #4	@ (adr r1, 8006fc4 <_printf_i+0x40>)
 8006fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fc4:	0800701d 	.word	0x0800701d
 8006fc8:	08007031 	.word	0x08007031
 8006fcc:	08006fad 	.word	0x08006fad
 8006fd0:	08006fad 	.word	0x08006fad
 8006fd4:	08006fad 	.word	0x08006fad
 8006fd8:	08006fad 	.word	0x08006fad
 8006fdc:	08007031 	.word	0x08007031
 8006fe0:	08006fad 	.word	0x08006fad
 8006fe4:	08006fad 	.word	0x08006fad
 8006fe8:	08006fad 	.word	0x08006fad
 8006fec:	08006fad 	.word	0x08006fad
 8006ff0:	0800712f 	.word	0x0800712f
 8006ff4:	0800705b 	.word	0x0800705b
 8006ff8:	080070e9 	.word	0x080070e9
 8006ffc:	08006fad 	.word	0x08006fad
 8007000:	08006fad 	.word	0x08006fad
 8007004:	08007151 	.word	0x08007151
 8007008:	08006fad 	.word	0x08006fad
 800700c:	0800705b 	.word	0x0800705b
 8007010:	08006fad 	.word	0x08006fad
 8007014:	08006fad 	.word	0x08006fad
 8007018:	080070f1 	.word	0x080070f1
 800701c:	6833      	ldr	r3, [r6, #0]
 800701e:	1d1a      	adds	r2, r3, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6032      	str	r2, [r6, #0]
 8007024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800702c:	2301      	movs	r3, #1
 800702e:	e09c      	b.n	800716a <_printf_i+0x1e6>
 8007030:	6833      	ldr	r3, [r6, #0]
 8007032:	6820      	ldr	r0, [r4, #0]
 8007034:	1d19      	adds	r1, r3, #4
 8007036:	6031      	str	r1, [r6, #0]
 8007038:	0606      	lsls	r6, r0, #24
 800703a:	d501      	bpl.n	8007040 <_printf_i+0xbc>
 800703c:	681d      	ldr	r5, [r3, #0]
 800703e:	e003      	b.n	8007048 <_printf_i+0xc4>
 8007040:	0645      	lsls	r5, r0, #25
 8007042:	d5fb      	bpl.n	800703c <_printf_i+0xb8>
 8007044:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007048:	2d00      	cmp	r5, #0
 800704a:	da03      	bge.n	8007054 <_printf_i+0xd0>
 800704c:	232d      	movs	r3, #45	@ 0x2d
 800704e:	426d      	negs	r5, r5
 8007050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007054:	4858      	ldr	r0, [pc, #352]	@ (80071b8 <_printf_i+0x234>)
 8007056:	230a      	movs	r3, #10
 8007058:	e011      	b.n	800707e <_printf_i+0xfa>
 800705a:	6821      	ldr	r1, [r4, #0]
 800705c:	6833      	ldr	r3, [r6, #0]
 800705e:	0608      	lsls	r0, r1, #24
 8007060:	f853 5b04 	ldr.w	r5, [r3], #4
 8007064:	d402      	bmi.n	800706c <_printf_i+0xe8>
 8007066:	0649      	lsls	r1, r1, #25
 8007068:	bf48      	it	mi
 800706a:	b2ad      	uxthmi	r5, r5
 800706c:	2f6f      	cmp	r7, #111	@ 0x6f
 800706e:	4852      	ldr	r0, [pc, #328]	@ (80071b8 <_printf_i+0x234>)
 8007070:	6033      	str	r3, [r6, #0]
 8007072:	bf14      	ite	ne
 8007074:	230a      	movne	r3, #10
 8007076:	2308      	moveq	r3, #8
 8007078:	2100      	movs	r1, #0
 800707a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800707e:	6866      	ldr	r6, [r4, #4]
 8007080:	60a6      	str	r6, [r4, #8]
 8007082:	2e00      	cmp	r6, #0
 8007084:	db05      	blt.n	8007092 <_printf_i+0x10e>
 8007086:	6821      	ldr	r1, [r4, #0]
 8007088:	432e      	orrs	r6, r5
 800708a:	f021 0104 	bic.w	r1, r1, #4
 800708e:	6021      	str	r1, [r4, #0]
 8007090:	d04b      	beq.n	800712a <_printf_i+0x1a6>
 8007092:	4616      	mov	r6, r2
 8007094:	fbb5 f1f3 	udiv	r1, r5, r3
 8007098:	fb03 5711 	mls	r7, r3, r1, r5
 800709c:	5dc7      	ldrb	r7, [r0, r7]
 800709e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070a2:	462f      	mov	r7, r5
 80070a4:	42bb      	cmp	r3, r7
 80070a6:	460d      	mov	r5, r1
 80070a8:	d9f4      	bls.n	8007094 <_printf_i+0x110>
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d10b      	bne.n	80070c6 <_printf_i+0x142>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	07df      	lsls	r7, r3, #31
 80070b2:	d508      	bpl.n	80070c6 <_printf_i+0x142>
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	6861      	ldr	r1, [r4, #4]
 80070b8:	4299      	cmp	r1, r3
 80070ba:	bfde      	ittt	le
 80070bc:	2330      	movle	r3, #48	@ 0x30
 80070be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070c6:	1b92      	subs	r2, r2, r6
 80070c8:	6122      	str	r2, [r4, #16]
 80070ca:	f8cd a000 	str.w	sl, [sp]
 80070ce:	464b      	mov	r3, r9
 80070d0:	aa03      	add	r2, sp, #12
 80070d2:	4621      	mov	r1, r4
 80070d4:	4640      	mov	r0, r8
 80070d6:	f7ff fee7 	bl	8006ea8 <_printf_common>
 80070da:	3001      	adds	r0, #1
 80070dc:	d14a      	bne.n	8007174 <_printf_i+0x1f0>
 80070de:	f04f 30ff 	mov.w	r0, #4294967295
 80070e2:	b004      	add	sp, #16
 80070e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	f043 0320 	orr.w	r3, r3, #32
 80070ee:	6023      	str	r3, [r4, #0]
 80070f0:	4832      	ldr	r0, [pc, #200]	@ (80071bc <_printf_i+0x238>)
 80070f2:	2778      	movs	r7, #120	@ 0x78
 80070f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	6831      	ldr	r1, [r6, #0]
 80070fc:	061f      	lsls	r7, r3, #24
 80070fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007102:	d402      	bmi.n	800710a <_printf_i+0x186>
 8007104:	065f      	lsls	r7, r3, #25
 8007106:	bf48      	it	mi
 8007108:	b2ad      	uxthmi	r5, r5
 800710a:	6031      	str	r1, [r6, #0]
 800710c:	07d9      	lsls	r1, r3, #31
 800710e:	bf44      	itt	mi
 8007110:	f043 0320 	orrmi.w	r3, r3, #32
 8007114:	6023      	strmi	r3, [r4, #0]
 8007116:	b11d      	cbz	r5, 8007120 <_printf_i+0x19c>
 8007118:	2310      	movs	r3, #16
 800711a:	e7ad      	b.n	8007078 <_printf_i+0xf4>
 800711c:	4826      	ldr	r0, [pc, #152]	@ (80071b8 <_printf_i+0x234>)
 800711e:	e7e9      	b.n	80070f4 <_printf_i+0x170>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	f023 0320 	bic.w	r3, r3, #32
 8007126:	6023      	str	r3, [r4, #0]
 8007128:	e7f6      	b.n	8007118 <_printf_i+0x194>
 800712a:	4616      	mov	r6, r2
 800712c:	e7bd      	b.n	80070aa <_printf_i+0x126>
 800712e:	6833      	ldr	r3, [r6, #0]
 8007130:	6825      	ldr	r5, [r4, #0]
 8007132:	6961      	ldr	r1, [r4, #20]
 8007134:	1d18      	adds	r0, r3, #4
 8007136:	6030      	str	r0, [r6, #0]
 8007138:	062e      	lsls	r6, r5, #24
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	d501      	bpl.n	8007142 <_printf_i+0x1be>
 800713e:	6019      	str	r1, [r3, #0]
 8007140:	e002      	b.n	8007148 <_printf_i+0x1c4>
 8007142:	0668      	lsls	r0, r5, #25
 8007144:	d5fb      	bpl.n	800713e <_printf_i+0x1ba>
 8007146:	8019      	strh	r1, [r3, #0]
 8007148:	2300      	movs	r3, #0
 800714a:	6123      	str	r3, [r4, #16]
 800714c:	4616      	mov	r6, r2
 800714e:	e7bc      	b.n	80070ca <_printf_i+0x146>
 8007150:	6833      	ldr	r3, [r6, #0]
 8007152:	1d1a      	adds	r2, r3, #4
 8007154:	6032      	str	r2, [r6, #0]
 8007156:	681e      	ldr	r6, [r3, #0]
 8007158:	6862      	ldr	r2, [r4, #4]
 800715a:	2100      	movs	r1, #0
 800715c:	4630      	mov	r0, r6
 800715e:	f7f9 f84f 	bl	8000200 <memchr>
 8007162:	b108      	cbz	r0, 8007168 <_printf_i+0x1e4>
 8007164:	1b80      	subs	r0, r0, r6
 8007166:	6060      	str	r0, [r4, #4]
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	6123      	str	r3, [r4, #16]
 800716c:	2300      	movs	r3, #0
 800716e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007172:	e7aa      	b.n	80070ca <_printf_i+0x146>
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	4632      	mov	r2, r6
 8007178:	4649      	mov	r1, r9
 800717a:	4640      	mov	r0, r8
 800717c:	47d0      	blx	sl
 800717e:	3001      	adds	r0, #1
 8007180:	d0ad      	beq.n	80070de <_printf_i+0x15a>
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	079b      	lsls	r3, r3, #30
 8007186:	d413      	bmi.n	80071b0 <_printf_i+0x22c>
 8007188:	68e0      	ldr	r0, [r4, #12]
 800718a:	9b03      	ldr	r3, [sp, #12]
 800718c:	4298      	cmp	r0, r3
 800718e:	bfb8      	it	lt
 8007190:	4618      	movlt	r0, r3
 8007192:	e7a6      	b.n	80070e2 <_printf_i+0x15e>
 8007194:	2301      	movs	r3, #1
 8007196:	4632      	mov	r2, r6
 8007198:	4649      	mov	r1, r9
 800719a:	4640      	mov	r0, r8
 800719c:	47d0      	blx	sl
 800719e:	3001      	adds	r0, #1
 80071a0:	d09d      	beq.n	80070de <_printf_i+0x15a>
 80071a2:	3501      	adds	r5, #1
 80071a4:	68e3      	ldr	r3, [r4, #12]
 80071a6:	9903      	ldr	r1, [sp, #12]
 80071a8:	1a5b      	subs	r3, r3, r1
 80071aa:	42ab      	cmp	r3, r5
 80071ac:	dcf2      	bgt.n	8007194 <_printf_i+0x210>
 80071ae:	e7eb      	b.n	8007188 <_printf_i+0x204>
 80071b0:	2500      	movs	r5, #0
 80071b2:	f104 0619 	add.w	r6, r4, #25
 80071b6:	e7f5      	b.n	80071a4 <_printf_i+0x220>
 80071b8:	0800cd76 	.word	0x0800cd76
 80071bc:	0800cd87 	.word	0x0800cd87

080071c0 <_scanf_float>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	b087      	sub	sp, #28
 80071c6:	4691      	mov	r9, r2
 80071c8:	9303      	str	r3, [sp, #12]
 80071ca:	688b      	ldr	r3, [r1, #8]
 80071cc:	1e5a      	subs	r2, r3, #1
 80071ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80071d2:	bf81      	itttt	hi
 80071d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80071d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80071dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80071e0:	608b      	strhi	r3, [r1, #8]
 80071e2:	680b      	ldr	r3, [r1, #0]
 80071e4:	460a      	mov	r2, r1
 80071e6:	f04f 0500 	mov.w	r5, #0
 80071ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80071ee:	f842 3b1c 	str.w	r3, [r2], #28
 80071f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80071f6:	4680      	mov	r8, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	bf98      	it	ls
 80071fc:	f04f 0b00 	movls.w	fp, #0
 8007200:	9201      	str	r2, [sp, #4]
 8007202:	4616      	mov	r6, r2
 8007204:	46aa      	mov	sl, r5
 8007206:	462f      	mov	r7, r5
 8007208:	9502      	str	r5, [sp, #8]
 800720a:	68a2      	ldr	r2, [r4, #8]
 800720c:	b15a      	cbz	r2, 8007226 <_scanf_float+0x66>
 800720e:	f8d9 3000 	ldr.w	r3, [r9]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b4e      	cmp	r3, #78	@ 0x4e
 8007216:	d863      	bhi.n	80072e0 <_scanf_float+0x120>
 8007218:	2b40      	cmp	r3, #64	@ 0x40
 800721a:	d83b      	bhi.n	8007294 <_scanf_float+0xd4>
 800721c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007220:	b2c8      	uxtb	r0, r1
 8007222:	280e      	cmp	r0, #14
 8007224:	d939      	bls.n	800729a <_scanf_float+0xda>
 8007226:	b11f      	cbz	r7, 8007230 <_scanf_float+0x70>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007234:	f1ba 0f01 	cmp.w	sl, #1
 8007238:	f200 8114 	bhi.w	8007464 <_scanf_float+0x2a4>
 800723c:	9b01      	ldr	r3, [sp, #4]
 800723e:	429e      	cmp	r6, r3
 8007240:	f200 8105 	bhi.w	800744e <_scanf_float+0x28e>
 8007244:	2001      	movs	r0, #1
 8007246:	b007      	add	sp, #28
 8007248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007250:	2a0d      	cmp	r2, #13
 8007252:	d8e8      	bhi.n	8007226 <_scanf_float+0x66>
 8007254:	a101      	add	r1, pc, #4	@ (adr r1, 800725c <_scanf_float+0x9c>)
 8007256:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800725a:	bf00      	nop
 800725c:	080073a5 	.word	0x080073a5
 8007260:	08007227 	.word	0x08007227
 8007264:	08007227 	.word	0x08007227
 8007268:	08007227 	.word	0x08007227
 800726c:	08007401 	.word	0x08007401
 8007270:	080073db 	.word	0x080073db
 8007274:	08007227 	.word	0x08007227
 8007278:	08007227 	.word	0x08007227
 800727c:	080073b3 	.word	0x080073b3
 8007280:	08007227 	.word	0x08007227
 8007284:	08007227 	.word	0x08007227
 8007288:	08007227 	.word	0x08007227
 800728c:	08007227 	.word	0x08007227
 8007290:	0800736f 	.word	0x0800736f
 8007294:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007298:	e7da      	b.n	8007250 <_scanf_float+0x90>
 800729a:	290e      	cmp	r1, #14
 800729c:	d8c3      	bhi.n	8007226 <_scanf_float+0x66>
 800729e:	a001      	add	r0, pc, #4	@ (adr r0, 80072a4 <_scanf_float+0xe4>)
 80072a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80072a4:	0800735f 	.word	0x0800735f
 80072a8:	08007227 	.word	0x08007227
 80072ac:	0800735f 	.word	0x0800735f
 80072b0:	080073ef 	.word	0x080073ef
 80072b4:	08007227 	.word	0x08007227
 80072b8:	08007301 	.word	0x08007301
 80072bc:	08007345 	.word	0x08007345
 80072c0:	08007345 	.word	0x08007345
 80072c4:	08007345 	.word	0x08007345
 80072c8:	08007345 	.word	0x08007345
 80072cc:	08007345 	.word	0x08007345
 80072d0:	08007345 	.word	0x08007345
 80072d4:	08007345 	.word	0x08007345
 80072d8:	08007345 	.word	0x08007345
 80072dc:	08007345 	.word	0x08007345
 80072e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80072e2:	d809      	bhi.n	80072f8 <_scanf_float+0x138>
 80072e4:	2b60      	cmp	r3, #96	@ 0x60
 80072e6:	d8b1      	bhi.n	800724c <_scanf_float+0x8c>
 80072e8:	2b54      	cmp	r3, #84	@ 0x54
 80072ea:	d07b      	beq.n	80073e4 <_scanf_float+0x224>
 80072ec:	2b59      	cmp	r3, #89	@ 0x59
 80072ee:	d19a      	bne.n	8007226 <_scanf_float+0x66>
 80072f0:	2d07      	cmp	r5, #7
 80072f2:	d198      	bne.n	8007226 <_scanf_float+0x66>
 80072f4:	2508      	movs	r5, #8
 80072f6:	e02f      	b.n	8007358 <_scanf_float+0x198>
 80072f8:	2b74      	cmp	r3, #116	@ 0x74
 80072fa:	d073      	beq.n	80073e4 <_scanf_float+0x224>
 80072fc:	2b79      	cmp	r3, #121	@ 0x79
 80072fe:	e7f6      	b.n	80072ee <_scanf_float+0x12e>
 8007300:	6821      	ldr	r1, [r4, #0]
 8007302:	05c8      	lsls	r0, r1, #23
 8007304:	d51e      	bpl.n	8007344 <_scanf_float+0x184>
 8007306:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800730a:	6021      	str	r1, [r4, #0]
 800730c:	3701      	adds	r7, #1
 800730e:	f1bb 0f00 	cmp.w	fp, #0
 8007312:	d003      	beq.n	800731c <_scanf_float+0x15c>
 8007314:	3201      	adds	r2, #1
 8007316:	f10b 3bff 	add.w	fp, fp, #4294967295
 800731a:	60a2      	str	r2, [r4, #8]
 800731c:	68a3      	ldr	r3, [r4, #8]
 800731e:	3b01      	subs	r3, #1
 8007320:	60a3      	str	r3, [r4, #8]
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	3301      	adds	r3, #1
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800732c:	3b01      	subs	r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	f8c9 3004 	str.w	r3, [r9, #4]
 8007334:	f340 8082 	ble.w	800743c <_scanf_float+0x27c>
 8007338:	f8d9 3000 	ldr.w	r3, [r9]
 800733c:	3301      	adds	r3, #1
 800733e:	f8c9 3000 	str.w	r3, [r9]
 8007342:	e762      	b.n	800720a <_scanf_float+0x4a>
 8007344:	eb1a 0105 	adds.w	r1, sl, r5
 8007348:	f47f af6d 	bne.w	8007226 <_scanf_float+0x66>
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007352:	6022      	str	r2, [r4, #0]
 8007354:	460d      	mov	r5, r1
 8007356:	468a      	mov	sl, r1
 8007358:	f806 3b01 	strb.w	r3, [r6], #1
 800735c:	e7de      	b.n	800731c <_scanf_float+0x15c>
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	0610      	lsls	r0, r2, #24
 8007362:	f57f af60 	bpl.w	8007226 <_scanf_float+0x66>
 8007366:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800736a:	6022      	str	r2, [r4, #0]
 800736c:	e7f4      	b.n	8007358 <_scanf_float+0x198>
 800736e:	f1ba 0f00 	cmp.w	sl, #0
 8007372:	d10c      	bne.n	800738e <_scanf_float+0x1ce>
 8007374:	b977      	cbnz	r7, 8007394 <_scanf_float+0x1d4>
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800737c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007380:	d108      	bne.n	8007394 <_scanf_float+0x1d4>
 8007382:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007386:	6022      	str	r2, [r4, #0]
 8007388:	f04f 0a01 	mov.w	sl, #1
 800738c:	e7e4      	b.n	8007358 <_scanf_float+0x198>
 800738e:	f1ba 0f02 	cmp.w	sl, #2
 8007392:	d050      	beq.n	8007436 <_scanf_float+0x276>
 8007394:	2d01      	cmp	r5, #1
 8007396:	d002      	beq.n	800739e <_scanf_float+0x1de>
 8007398:	2d04      	cmp	r5, #4
 800739a:	f47f af44 	bne.w	8007226 <_scanf_float+0x66>
 800739e:	3501      	adds	r5, #1
 80073a0:	b2ed      	uxtb	r5, r5
 80073a2:	e7d9      	b.n	8007358 <_scanf_float+0x198>
 80073a4:	f1ba 0f01 	cmp.w	sl, #1
 80073a8:	f47f af3d 	bne.w	8007226 <_scanf_float+0x66>
 80073ac:	f04f 0a02 	mov.w	sl, #2
 80073b0:	e7d2      	b.n	8007358 <_scanf_float+0x198>
 80073b2:	b975      	cbnz	r5, 80073d2 <_scanf_float+0x212>
 80073b4:	2f00      	cmp	r7, #0
 80073b6:	f47f af37 	bne.w	8007228 <_scanf_float+0x68>
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073c4:	f040 8103 	bne.w	80075ce <_scanf_float+0x40e>
 80073c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073cc:	6022      	str	r2, [r4, #0]
 80073ce:	2501      	movs	r5, #1
 80073d0:	e7c2      	b.n	8007358 <_scanf_float+0x198>
 80073d2:	2d03      	cmp	r5, #3
 80073d4:	d0e3      	beq.n	800739e <_scanf_float+0x1de>
 80073d6:	2d05      	cmp	r5, #5
 80073d8:	e7df      	b.n	800739a <_scanf_float+0x1da>
 80073da:	2d02      	cmp	r5, #2
 80073dc:	f47f af23 	bne.w	8007226 <_scanf_float+0x66>
 80073e0:	2503      	movs	r5, #3
 80073e2:	e7b9      	b.n	8007358 <_scanf_float+0x198>
 80073e4:	2d06      	cmp	r5, #6
 80073e6:	f47f af1e 	bne.w	8007226 <_scanf_float+0x66>
 80073ea:	2507      	movs	r5, #7
 80073ec:	e7b4      	b.n	8007358 <_scanf_float+0x198>
 80073ee:	6822      	ldr	r2, [r4, #0]
 80073f0:	0591      	lsls	r1, r2, #22
 80073f2:	f57f af18 	bpl.w	8007226 <_scanf_float+0x66>
 80073f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80073fa:	6022      	str	r2, [r4, #0]
 80073fc:	9702      	str	r7, [sp, #8]
 80073fe:	e7ab      	b.n	8007358 <_scanf_float+0x198>
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007406:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800740a:	d005      	beq.n	8007418 <_scanf_float+0x258>
 800740c:	0550      	lsls	r0, r2, #21
 800740e:	f57f af0a 	bpl.w	8007226 <_scanf_float+0x66>
 8007412:	2f00      	cmp	r7, #0
 8007414:	f000 80db 	beq.w	80075ce <_scanf_float+0x40e>
 8007418:	0591      	lsls	r1, r2, #22
 800741a:	bf58      	it	pl
 800741c:	9902      	ldrpl	r1, [sp, #8]
 800741e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007422:	bf58      	it	pl
 8007424:	1a79      	subpl	r1, r7, r1
 8007426:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800742a:	bf58      	it	pl
 800742c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	2700      	movs	r7, #0
 8007434:	e790      	b.n	8007358 <_scanf_float+0x198>
 8007436:	f04f 0a03 	mov.w	sl, #3
 800743a:	e78d      	b.n	8007358 <_scanf_float+0x198>
 800743c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007440:	4649      	mov	r1, r9
 8007442:	4640      	mov	r0, r8
 8007444:	4798      	blx	r3
 8007446:	2800      	cmp	r0, #0
 8007448:	f43f aedf 	beq.w	800720a <_scanf_float+0x4a>
 800744c:	e6eb      	b.n	8007226 <_scanf_float+0x66>
 800744e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007452:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007456:	464a      	mov	r2, r9
 8007458:	4640      	mov	r0, r8
 800745a:	4798      	blx	r3
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	3b01      	subs	r3, #1
 8007460:	6123      	str	r3, [r4, #16]
 8007462:	e6eb      	b.n	800723c <_scanf_float+0x7c>
 8007464:	1e6b      	subs	r3, r5, #1
 8007466:	2b06      	cmp	r3, #6
 8007468:	d824      	bhi.n	80074b4 <_scanf_float+0x2f4>
 800746a:	2d02      	cmp	r5, #2
 800746c:	d836      	bhi.n	80074dc <_scanf_float+0x31c>
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	429e      	cmp	r6, r3
 8007472:	f67f aee7 	bls.w	8007244 <_scanf_float+0x84>
 8007476:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800747a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800747e:	464a      	mov	r2, r9
 8007480:	4640      	mov	r0, r8
 8007482:	4798      	blx	r3
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	3b01      	subs	r3, #1
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	e7f0      	b.n	800746e <_scanf_float+0x2ae>
 800748c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007490:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007494:	464a      	mov	r2, r9
 8007496:	4640      	mov	r0, r8
 8007498:	4798      	blx	r3
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	3b01      	subs	r3, #1
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074a4:	fa5f fa8a 	uxtb.w	sl, sl
 80074a8:	f1ba 0f02 	cmp.w	sl, #2
 80074ac:	d1ee      	bne.n	800748c <_scanf_float+0x2cc>
 80074ae:	3d03      	subs	r5, #3
 80074b0:	b2ed      	uxtb	r5, r5
 80074b2:	1b76      	subs	r6, r6, r5
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	05da      	lsls	r2, r3, #23
 80074b8:	d530      	bpl.n	800751c <_scanf_float+0x35c>
 80074ba:	055b      	lsls	r3, r3, #21
 80074bc:	d511      	bpl.n	80074e2 <_scanf_float+0x322>
 80074be:	9b01      	ldr	r3, [sp, #4]
 80074c0:	429e      	cmp	r6, r3
 80074c2:	f67f aebf 	bls.w	8007244 <_scanf_float+0x84>
 80074c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074ce:	464a      	mov	r2, r9
 80074d0:	4640      	mov	r0, r8
 80074d2:	4798      	blx	r3
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	e7f0      	b.n	80074be <_scanf_float+0x2fe>
 80074dc:	46aa      	mov	sl, r5
 80074de:	46b3      	mov	fp, r6
 80074e0:	e7de      	b.n	80074a0 <_scanf_float+0x2e0>
 80074e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	2965      	cmp	r1, #101	@ 0x65
 80074ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80074ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	d00c      	beq.n	8007510 <_scanf_float+0x350>
 80074f6:	2945      	cmp	r1, #69	@ 0x45
 80074f8:	d00a      	beq.n	8007510 <_scanf_float+0x350>
 80074fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074fe:	464a      	mov	r2, r9
 8007500:	4640      	mov	r0, r8
 8007502:	4798      	blx	r3
 8007504:	6923      	ldr	r3, [r4, #16]
 8007506:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800750a:	3b01      	subs	r3, #1
 800750c:	1eb5      	subs	r5, r6, #2
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007514:	464a      	mov	r2, r9
 8007516:	4640      	mov	r0, r8
 8007518:	4798      	blx	r3
 800751a:	462e      	mov	r6, r5
 800751c:	6822      	ldr	r2, [r4, #0]
 800751e:	f012 0210 	ands.w	r2, r2, #16
 8007522:	d001      	beq.n	8007528 <_scanf_float+0x368>
 8007524:	2000      	movs	r0, #0
 8007526:	e68e      	b.n	8007246 <_scanf_float+0x86>
 8007528:	7032      	strb	r2, [r6, #0]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007534:	d125      	bne.n	8007582 <_scanf_float+0x3c2>
 8007536:	9b02      	ldr	r3, [sp, #8]
 8007538:	429f      	cmp	r7, r3
 800753a:	d00a      	beq.n	8007552 <_scanf_float+0x392>
 800753c:	1bda      	subs	r2, r3, r7
 800753e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007542:	429e      	cmp	r6, r3
 8007544:	bf28      	it	cs
 8007546:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800754a:	4922      	ldr	r1, [pc, #136]	@ (80075d4 <_scanf_float+0x414>)
 800754c:	4630      	mov	r0, r6
 800754e:	f000 f977 	bl	8007840 <siprintf>
 8007552:	9901      	ldr	r1, [sp, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	4640      	mov	r0, r8
 8007558:	f002 fc62 	bl	8009e20 <_strtod_r>
 800755c:	9b03      	ldr	r3, [sp, #12]
 800755e:	6821      	ldr	r1, [r4, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f011 0f02 	tst.w	r1, #2
 8007566:	ec57 6b10 	vmov	r6, r7, d0
 800756a:	f103 0204 	add.w	r2, r3, #4
 800756e:	d015      	beq.n	800759c <_scanf_float+0x3dc>
 8007570:	9903      	ldr	r1, [sp, #12]
 8007572:	600a      	str	r2, [r1, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	e9c3 6700 	strd	r6, r7, [r3]
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	3301      	adds	r3, #1
 800757e:	60e3      	str	r3, [r4, #12]
 8007580:	e7d0      	b.n	8007524 <_scanf_float+0x364>
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0e4      	beq.n	8007552 <_scanf_float+0x392>
 8007588:	9905      	ldr	r1, [sp, #20]
 800758a:	230a      	movs	r3, #10
 800758c:	3101      	adds	r1, #1
 800758e:	4640      	mov	r0, r8
 8007590:	f002 fcc6 	bl	8009f20 <_strtol_r>
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	9e05      	ldr	r6, [sp, #20]
 8007598:	1ac2      	subs	r2, r0, r3
 800759a:	e7d0      	b.n	800753e <_scanf_float+0x37e>
 800759c:	f011 0f04 	tst.w	r1, #4
 80075a0:	9903      	ldr	r1, [sp, #12]
 80075a2:	600a      	str	r2, [r1, #0]
 80075a4:	d1e6      	bne.n	8007574 <_scanf_float+0x3b4>
 80075a6:	681d      	ldr	r5, [r3, #0]
 80075a8:	4632      	mov	r2, r6
 80075aa:	463b      	mov	r3, r7
 80075ac:	4630      	mov	r0, r6
 80075ae:	4639      	mov	r1, r7
 80075b0:	f7f9 fad4 	bl	8000b5c <__aeabi_dcmpun>
 80075b4:	b128      	cbz	r0, 80075c2 <_scanf_float+0x402>
 80075b6:	4808      	ldr	r0, [pc, #32]	@ (80075d8 <_scanf_float+0x418>)
 80075b8:	f000 fada 	bl	8007b70 <nanf>
 80075bc:	ed85 0a00 	vstr	s0, [r5]
 80075c0:	e7db      	b.n	800757a <_scanf_float+0x3ba>
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f9 fb27 	bl	8000c18 <__aeabi_d2f>
 80075ca:	6028      	str	r0, [r5, #0]
 80075cc:	e7d5      	b.n	800757a <_scanf_float+0x3ba>
 80075ce:	2700      	movs	r7, #0
 80075d0:	e62e      	b.n	8007230 <_scanf_float+0x70>
 80075d2:	bf00      	nop
 80075d4:	0800cd98 	.word	0x0800cd98
 80075d8:	0800ced9 	.word	0x0800ced9

080075dc <std>:
 80075dc:	2300      	movs	r3, #0
 80075de:	b510      	push	{r4, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	e9c0 3300 	strd	r3, r3, [r0]
 80075e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ea:	6083      	str	r3, [r0, #8]
 80075ec:	8181      	strh	r1, [r0, #12]
 80075ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80075f0:	81c2      	strh	r2, [r0, #14]
 80075f2:	6183      	str	r3, [r0, #24]
 80075f4:	4619      	mov	r1, r3
 80075f6:	2208      	movs	r2, #8
 80075f8:	305c      	adds	r0, #92	@ 0x5c
 80075fa:	f000 fa1b 	bl	8007a34 <memset>
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <std+0x58>)
 8007600:	6263      	str	r3, [r4, #36]	@ 0x24
 8007602:	4b0d      	ldr	r3, [pc, #52]	@ (8007638 <std+0x5c>)
 8007604:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007606:	4b0d      	ldr	r3, [pc, #52]	@ (800763c <std+0x60>)
 8007608:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800760a:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <std+0x64>)
 800760c:	6323      	str	r3, [r4, #48]	@ 0x30
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <std+0x68>)
 8007610:	6224      	str	r4, [r4, #32]
 8007612:	429c      	cmp	r4, r3
 8007614:	d006      	beq.n	8007624 <std+0x48>
 8007616:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800761a:	4294      	cmp	r4, r2
 800761c:	d002      	beq.n	8007624 <std+0x48>
 800761e:	33d0      	adds	r3, #208	@ 0xd0
 8007620:	429c      	cmp	r4, r3
 8007622:	d105      	bne.n	8007630 <std+0x54>
 8007624:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800762c:	f000 ba8e 	b.w	8007b4c <__retarget_lock_init_recursive>
 8007630:	bd10      	pop	{r4, pc}
 8007632:	bf00      	nop
 8007634:	08007885 	.word	0x08007885
 8007638:	080078a7 	.word	0x080078a7
 800763c:	080078df 	.word	0x080078df
 8007640:	08007903 	.word	0x08007903
 8007644:	2005c50c 	.word	0x2005c50c

08007648 <stdio_exit_handler>:
 8007648:	4a02      	ldr	r2, [pc, #8]	@ (8007654 <stdio_exit_handler+0xc>)
 800764a:	4903      	ldr	r1, [pc, #12]	@ (8007658 <stdio_exit_handler+0x10>)
 800764c:	4803      	ldr	r0, [pc, #12]	@ (800765c <stdio_exit_handler+0x14>)
 800764e:	f000 b869 	b.w	8007724 <_fwalk_sglue>
 8007652:	bf00      	nop
 8007654:	20040014 	.word	0x20040014
 8007658:	0800a561 	.word	0x0800a561
 800765c:	20040024 	.word	0x20040024

08007660 <cleanup_stdio>:
 8007660:	6841      	ldr	r1, [r0, #4]
 8007662:	4b0c      	ldr	r3, [pc, #48]	@ (8007694 <cleanup_stdio+0x34>)
 8007664:	4299      	cmp	r1, r3
 8007666:	b510      	push	{r4, lr}
 8007668:	4604      	mov	r4, r0
 800766a:	d001      	beq.n	8007670 <cleanup_stdio+0x10>
 800766c:	f002 ff78 	bl	800a560 <_fflush_r>
 8007670:	68a1      	ldr	r1, [r4, #8]
 8007672:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <cleanup_stdio+0x38>)
 8007674:	4299      	cmp	r1, r3
 8007676:	d002      	beq.n	800767e <cleanup_stdio+0x1e>
 8007678:	4620      	mov	r0, r4
 800767a:	f002 ff71 	bl	800a560 <_fflush_r>
 800767e:	68e1      	ldr	r1, [r4, #12]
 8007680:	4b06      	ldr	r3, [pc, #24]	@ (800769c <cleanup_stdio+0x3c>)
 8007682:	4299      	cmp	r1, r3
 8007684:	d004      	beq.n	8007690 <cleanup_stdio+0x30>
 8007686:	4620      	mov	r0, r4
 8007688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768c:	f002 bf68 	b.w	800a560 <_fflush_r>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	bf00      	nop
 8007694:	2005c50c 	.word	0x2005c50c
 8007698:	2005c574 	.word	0x2005c574
 800769c:	2005c5dc 	.word	0x2005c5dc

080076a0 <global_stdio_init.part.0>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	4b0b      	ldr	r3, [pc, #44]	@ (80076d0 <global_stdio_init.part.0+0x30>)
 80076a4:	4c0b      	ldr	r4, [pc, #44]	@ (80076d4 <global_stdio_init.part.0+0x34>)
 80076a6:	4a0c      	ldr	r2, [pc, #48]	@ (80076d8 <global_stdio_init.part.0+0x38>)
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	4620      	mov	r0, r4
 80076ac:	2200      	movs	r2, #0
 80076ae:	2104      	movs	r1, #4
 80076b0:	f7ff ff94 	bl	80075dc <std>
 80076b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076b8:	2201      	movs	r2, #1
 80076ba:	2109      	movs	r1, #9
 80076bc:	f7ff ff8e 	bl	80075dc <std>
 80076c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076c4:	2202      	movs	r2, #2
 80076c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ca:	2112      	movs	r1, #18
 80076cc:	f7ff bf86 	b.w	80075dc <std>
 80076d0:	2005c644 	.word	0x2005c644
 80076d4:	2005c50c 	.word	0x2005c50c
 80076d8:	08007649 	.word	0x08007649

080076dc <__sfp_lock_acquire>:
 80076dc:	4801      	ldr	r0, [pc, #4]	@ (80076e4 <__sfp_lock_acquire+0x8>)
 80076de:	f000 ba36 	b.w	8007b4e <__retarget_lock_acquire_recursive>
 80076e2:	bf00      	nop
 80076e4:	2005c64d 	.word	0x2005c64d

080076e8 <__sfp_lock_release>:
 80076e8:	4801      	ldr	r0, [pc, #4]	@ (80076f0 <__sfp_lock_release+0x8>)
 80076ea:	f000 ba31 	b.w	8007b50 <__retarget_lock_release_recursive>
 80076ee:	bf00      	nop
 80076f0:	2005c64d 	.word	0x2005c64d

080076f4 <__sinit>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	4604      	mov	r4, r0
 80076f8:	f7ff fff0 	bl	80076dc <__sfp_lock_acquire>
 80076fc:	6a23      	ldr	r3, [r4, #32]
 80076fe:	b11b      	cbz	r3, 8007708 <__sinit+0x14>
 8007700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007704:	f7ff bff0 	b.w	80076e8 <__sfp_lock_release>
 8007708:	4b04      	ldr	r3, [pc, #16]	@ (800771c <__sinit+0x28>)
 800770a:	6223      	str	r3, [r4, #32]
 800770c:	4b04      	ldr	r3, [pc, #16]	@ (8007720 <__sinit+0x2c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f5      	bne.n	8007700 <__sinit+0xc>
 8007714:	f7ff ffc4 	bl	80076a0 <global_stdio_init.part.0>
 8007718:	e7f2      	b.n	8007700 <__sinit+0xc>
 800771a:	bf00      	nop
 800771c:	08007661 	.word	0x08007661
 8007720:	2005c644 	.word	0x2005c644

08007724 <_fwalk_sglue>:
 8007724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007728:	4607      	mov	r7, r0
 800772a:	4688      	mov	r8, r1
 800772c:	4614      	mov	r4, r2
 800772e:	2600      	movs	r6, #0
 8007730:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007734:	f1b9 0901 	subs.w	r9, r9, #1
 8007738:	d505      	bpl.n	8007746 <_fwalk_sglue+0x22>
 800773a:	6824      	ldr	r4, [r4, #0]
 800773c:	2c00      	cmp	r4, #0
 800773e:	d1f7      	bne.n	8007730 <_fwalk_sglue+0xc>
 8007740:	4630      	mov	r0, r6
 8007742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007746:	89ab      	ldrh	r3, [r5, #12]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d907      	bls.n	800775c <_fwalk_sglue+0x38>
 800774c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007750:	3301      	adds	r3, #1
 8007752:	d003      	beq.n	800775c <_fwalk_sglue+0x38>
 8007754:	4629      	mov	r1, r5
 8007756:	4638      	mov	r0, r7
 8007758:	47c0      	blx	r8
 800775a:	4306      	orrs	r6, r0
 800775c:	3568      	adds	r5, #104	@ 0x68
 800775e:	e7e9      	b.n	8007734 <_fwalk_sglue+0x10>

08007760 <iprintf>:
 8007760:	b40f      	push	{r0, r1, r2, r3}
 8007762:	b507      	push	{r0, r1, r2, lr}
 8007764:	4906      	ldr	r1, [pc, #24]	@ (8007780 <iprintf+0x20>)
 8007766:	ab04      	add	r3, sp, #16
 8007768:	6808      	ldr	r0, [r1, #0]
 800776a:	f853 2b04 	ldr.w	r2, [r3], #4
 800776e:	6881      	ldr	r1, [r0, #8]
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	f002 fd59 	bl	800a228 <_vfiprintf_r>
 8007776:	b003      	add	sp, #12
 8007778:	f85d eb04 	ldr.w	lr, [sp], #4
 800777c:	b004      	add	sp, #16
 800777e:	4770      	bx	lr
 8007780:	20040020 	.word	0x20040020

08007784 <_puts_r>:
 8007784:	6a03      	ldr	r3, [r0, #32]
 8007786:	b570      	push	{r4, r5, r6, lr}
 8007788:	6884      	ldr	r4, [r0, #8]
 800778a:	4605      	mov	r5, r0
 800778c:	460e      	mov	r6, r1
 800778e:	b90b      	cbnz	r3, 8007794 <_puts_r+0x10>
 8007790:	f7ff ffb0 	bl	80076f4 <__sinit>
 8007794:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007796:	07db      	lsls	r3, r3, #31
 8007798:	d405      	bmi.n	80077a6 <_puts_r+0x22>
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	0598      	lsls	r0, r3, #22
 800779e:	d402      	bmi.n	80077a6 <_puts_r+0x22>
 80077a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077a2:	f000 f9d4 	bl	8007b4e <__retarget_lock_acquire_recursive>
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	0719      	lsls	r1, r3, #28
 80077aa:	d502      	bpl.n	80077b2 <_puts_r+0x2e>
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d135      	bne.n	800781e <_puts_r+0x9a>
 80077b2:	4621      	mov	r1, r4
 80077b4:	4628      	mov	r0, r5
 80077b6:	f000 f8e7 	bl	8007988 <__swsetup_r>
 80077ba:	b380      	cbz	r0, 800781e <_puts_r+0x9a>
 80077bc:	f04f 35ff 	mov.w	r5, #4294967295
 80077c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077c2:	07da      	lsls	r2, r3, #31
 80077c4:	d405      	bmi.n	80077d2 <_puts_r+0x4e>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	059b      	lsls	r3, r3, #22
 80077ca:	d402      	bmi.n	80077d2 <_puts_r+0x4e>
 80077cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ce:	f000 f9bf 	bl	8007b50 <__retarget_lock_release_recursive>
 80077d2:	4628      	mov	r0, r5
 80077d4:	bd70      	pop	{r4, r5, r6, pc}
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	da04      	bge.n	80077e4 <_puts_r+0x60>
 80077da:	69a2      	ldr	r2, [r4, #24]
 80077dc:	429a      	cmp	r2, r3
 80077de:	dc17      	bgt.n	8007810 <_puts_r+0x8c>
 80077e0:	290a      	cmp	r1, #10
 80077e2:	d015      	beq.n	8007810 <_puts_r+0x8c>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	6022      	str	r2, [r4, #0]
 80077ea:	7019      	strb	r1, [r3, #0]
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077f2:	3b01      	subs	r3, #1
 80077f4:	60a3      	str	r3, [r4, #8]
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d1ed      	bne.n	80077d6 <_puts_r+0x52>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da11      	bge.n	8007822 <_puts_r+0x9e>
 80077fe:	4622      	mov	r2, r4
 8007800:	210a      	movs	r1, #10
 8007802:	4628      	mov	r0, r5
 8007804:	f000 f881 	bl	800790a <__swbuf_r>
 8007808:	3001      	adds	r0, #1
 800780a:	d0d7      	beq.n	80077bc <_puts_r+0x38>
 800780c:	250a      	movs	r5, #10
 800780e:	e7d7      	b.n	80077c0 <_puts_r+0x3c>
 8007810:	4622      	mov	r2, r4
 8007812:	4628      	mov	r0, r5
 8007814:	f000 f879 	bl	800790a <__swbuf_r>
 8007818:	3001      	adds	r0, #1
 800781a:	d1e7      	bne.n	80077ec <_puts_r+0x68>
 800781c:	e7ce      	b.n	80077bc <_puts_r+0x38>
 800781e:	3e01      	subs	r6, #1
 8007820:	e7e4      	b.n	80077ec <_puts_r+0x68>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	6022      	str	r2, [r4, #0]
 8007828:	220a      	movs	r2, #10
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e7ee      	b.n	800780c <_puts_r+0x88>
	...

08007830 <puts>:
 8007830:	4b02      	ldr	r3, [pc, #8]	@ (800783c <puts+0xc>)
 8007832:	4601      	mov	r1, r0
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	f7ff bfa5 	b.w	8007784 <_puts_r>
 800783a:	bf00      	nop
 800783c:	20040020 	.word	0x20040020

08007840 <siprintf>:
 8007840:	b40e      	push	{r1, r2, r3}
 8007842:	b510      	push	{r4, lr}
 8007844:	b09d      	sub	sp, #116	@ 0x74
 8007846:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007848:	9002      	str	r0, [sp, #8]
 800784a:	9006      	str	r0, [sp, #24]
 800784c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007850:	480a      	ldr	r0, [pc, #40]	@ (800787c <siprintf+0x3c>)
 8007852:	9107      	str	r1, [sp, #28]
 8007854:	9104      	str	r1, [sp, #16]
 8007856:	490a      	ldr	r1, [pc, #40]	@ (8007880 <siprintf+0x40>)
 8007858:	f853 2b04 	ldr.w	r2, [r3], #4
 800785c:	9105      	str	r1, [sp, #20]
 800785e:	2400      	movs	r4, #0
 8007860:	a902      	add	r1, sp, #8
 8007862:	6800      	ldr	r0, [r0, #0]
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007868:	f002 fbb8 	bl	8009fdc <_svfiprintf_r>
 800786c:	9b02      	ldr	r3, [sp, #8]
 800786e:	701c      	strb	r4, [r3, #0]
 8007870:	b01d      	add	sp, #116	@ 0x74
 8007872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007876:	b003      	add	sp, #12
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20040020 	.word	0x20040020
 8007880:	ffff0208 	.word	0xffff0208

08007884 <__sread>:
 8007884:	b510      	push	{r4, lr}
 8007886:	460c      	mov	r4, r1
 8007888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788c:	f000 f900 	bl	8007a90 <_read_r>
 8007890:	2800      	cmp	r0, #0
 8007892:	bfab      	itete	ge
 8007894:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007896:	89a3      	ldrhlt	r3, [r4, #12]
 8007898:	181b      	addge	r3, r3, r0
 800789a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800789e:	bfac      	ite	ge
 80078a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078a2:	81a3      	strhlt	r3, [r4, #12]
 80078a4:	bd10      	pop	{r4, pc}

080078a6 <__swrite>:
 80078a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078aa:	461f      	mov	r7, r3
 80078ac:	898b      	ldrh	r3, [r1, #12]
 80078ae:	05db      	lsls	r3, r3, #23
 80078b0:	4605      	mov	r5, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4616      	mov	r6, r2
 80078b6:	d505      	bpl.n	80078c4 <__swrite+0x1e>
 80078b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078bc:	2302      	movs	r3, #2
 80078be:	2200      	movs	r2, #0
 80078c0:	f000 f8d4 	bl	8007a6c <_lseek_r>
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078ce:	81a3      	strh	r3, [r4, #12]
 80078d0:	4632      	mov	r2, r6
 80078d2:	463b      	mov	r3, r7
 80078d4:	4628      	mov	r0, r5
 80078d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078da:	f000 b8fb 	b.w	8007ad4 <_write_r>

080078de <__sseek>:
 80078de:	b510      	push	{r4, lr}
 80078e0:	460c      	mov	r4, r1
 80078e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e6:	f000 f8c1 	bl	8007a6c <_lseek_r>
 80078ea:	1c43      	adds	r3, r0, #1
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	bf15      	itete	ne
 80078f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078fa:	81a3      	strheq	r3, [r4, #12]
 80078fc:	bf18      	it	ne
 80078fe:	81a3      	strhne	r3, [r4, #12]
 8007900:	bd10      	pop	{r4, pc}

08007902 <__sclose>:
 8007902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007906:	f000 b8a1 	b.w	8007a4c <_close_r>

0800790a <__swbuf_r>:
 800790a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790c:	460e      	mov	r6, r1
 800790e:	4614      	mov	r4, r2
 8007910:	4605      	mov	r5, r0
 8007912:	b118      	cbz	r0, 800791c <__swbuf_r+0x12>
 8007914:	6a03      	ldr	r3, [r0, #32]
 8007916:	b90b      	cbnz	r3, 800791c <__swbuf_r+0x12>
 8007918:	f7ff feec 	bl	80076f4 <__sinit>
 800791c:	69a3      	ldr	r3, [r4, #24]
 800791e:	60a3      	str	r3, [r4, #8]
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	071a      	lsls	r2, r3, #28
 8007924:	d501      	bpl.n	800792a <__swbuf_r+0x20>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	b943      	cbnz	r3, 800793c <__swbuf_r+0x32>
 800792a:	4621      	mov	r1, r4
 800792c:	4628      	mov	r0, r5
 800792e:	f000 f82b 	bl	8007988 <__swsetup_r>
 8007932:	b118      	cbz	r0, 800793c <__swbuf_r+0x32>
 8007934:	f04f 37ff 	mov.w	r7, #4294967295
 8007938:	4638      	mov	r0, r7
 800793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	1a98      	subs	r0, r3, r2
 8007942:	6963      	ldr	r3, [r4, #20]
 8007944:	b2f6      	uxtb	r6, r6
 8007946:	4283      	cmp	r3, r0
 8007948:	4637      	mov	r7, r6
 800794a:	dc05      	bgt.n	8007958 <__swbuf_r+0x4e>
 800794c:	4621      	mov	r1, r4
 800794e:	4628      	mov	r0, r5
 8007950:	f002 fe06 	bl	800a560 <_fflush_r>
 8007954:	2800      	cmp	r0, #0
 8007956:	d1ed      	bne.n	8007934 <__swbuf_r+0x2a>
 8007958:	68a3      	ldr	r3, [r4, #8]
 800795a:	3b01      	subs	r3, #1
 800795c:	60a3      	str	r3, [r4, #8]
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	6022      	str	r2, [r4, #0]
 8007964:	701e      	strb	r6, [r3, #0]
 8007966:	6962      	ldr	r2, [r4, #20]
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	429a      	cmp	r2, r3
 800796c:	d004      	beq.n	8007978 <__swbuf_r+0x6e>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	07db      	lsls	r3, r3, #31
 8007972:	d5e1      	bpl.n	8007938 <__swbuf_r+0x2e>
 8007974:	2e0a      	cmp	r6, #10
 8007976:	d1df      	bne.n	8007938 <__swbuf_r+0x2e>
 8007978:	4621      	mov	r1, r4
 800797a:	4628      	mov	r0, r5
 800797c:	f002 fdf0 	bl	800a560 <_fflush_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	d0d9      	beq.n	8007938 <__swbuf_r+0x2e>
 8007984:	e7d6      	b.n	8007934 <__swbuf_r+0x2a>
	...

08007988 <__swsetup_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4b29      	ldr	r3, [pc, #164]	@ (8007a30 <__swsetup_r+0xa8>)
 800798c:	4605      	mov	r5, r0
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	460c      	mov	r4, r1
 8007992:	b118      	cbz	r0, 800799c <__swsetup_r+0x14>
 8007994:	6a03      	ldr	r3, [r0, #32]
 8007996:	b90b      	cbnz	r3, 800799c <__swsetup_r+0x14>
 8007998:	f7ff feac 	bl	80076f4 <__sinit>
 800799c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a0:	0719      	lsls	r1, r3, #28
 80079a2:	d422      	bmi.n	80079ea <__swsetup_r+0x62>
 80079a4:	06da      	lsls	r2, r3, #27
 80079a6:	d407      	bmi.n	80079b8 <__swsetup_r+0x30>
 80079a8:	2209      	movs	r2, #9
 80079aa:	602a      	str	r2, [r5, #0]
 80079ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b0:	81a3      	strh	r3, [r4, #12]
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	e033      	b.n	8007a20 <__swsetup_r+0x98>
 80079b8:	0758      	lsls	r0, r3, #29
 80079ba:	d512      	bpl.n	80079e2 <__swsetup_r+0x5a>
 80079bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079be:	b141      	cbz	r1, 80079d2 <__swsetup_r+0x4a>
 80079c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079c4:	4299      	cmp	r1, r3
 80079c6:	d002      	beq.n	80079ce <__swsetup_r+0x46>
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 ff31 	bl	8008830 <_free_r>
 80079ce:	2300      	movs	r3, #0
 80079d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	2300      	movs	r3, #0
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f043 0308 	orr.w	r3, r3, #8
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	b94b      	cbnz	r3, 8007a02 <__swsetup_r+0x7a>
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079f8:	d003      	beq.n	8007a02 <__swsetup_r+0x7a>
 80079fa:	4621      	mov	r1, r4
 80079fc:	4628      	mov	r0, r5
 80079fe:	f002 fdfd 	bl	800a5fc <__smakebuf_r>
 8007a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a06:	f013 0201 	ands.w	r2, r3, #1
 8007a0a:	d00a      	beq.n	8007a22 <__swsetup_r+0x9a>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	60a2      	str	r2, [r4, #8]
 8007a10:	6962      	ldr	r2, [r4, #20]
 8007a12:	4252      	negs	r2, r2
 8007a14:	61a2      	str	r2, [r4, #24]
 8007a16:	6922      	ldr	r2, [r4, #16]
 8007a18:	b942      	cbnz	r2, 8007a2c <__swsetup_r+0xa4>
 8007a1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a1e:	d1c5      	bne.n	80079ac <__swsetup_r+0x24>
 8007a20:	bd38      	pop	{r3, r4, r5, pc}
 8007a22:	0799      	lsls	r1, r3, #30
 8007a24:	bf58      	it	pl
 8007a26:	6962      	ldrpl	r2, [r4, #20]
 8007a28:	60a2      	str	r2, [r4, #8]
 8007a2a:	e7f4      	b.n	8007a16 <__swsetup_r+0x8e>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	e7f7      	b.n	8007a20 <__swsetup_r+0x98>
 8007a30:	20040020 	.word	0x20040020

08007a34 <memset>:
 8007a34:	4402      	add	r2, r0
 8007a36:	4603      	mov	r3, r0
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d100      	bne.n	8007a3e <memset+0xa>
 8007a3c:	4770      	bx	lr
 8007a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a42:	e7f9      	b.n	8007a38 <memset+0x4>

08007a44 <_localeconv_r>:
 8007a44:	4800      	ldr	r0, [pc, #0]	@ (8007a48 <_localeconv_r+0x4>)
 8007a46:	4770      	bx	lr
 8007a48:	20040160 	.word	0x20040160

08007a4c <_close_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d06      	ldr	r5, [pc, #24]	@ (8007a68 <_close_r+0x1c>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	f7fa fe82 	bl	8002760 <_close>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_close_r+0x1a>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_close_r+0x1a>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	2005c648 	.word	0x2005c648

08007a6c <_lseek_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	@ (8007a8c <_lseek_r+0x20>)
 8007a70:	4604      	mov	r4, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7fa fe97 	bl	80027ae <_lseek>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_lseek_r+0x1e>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_lseek_r+0x1e>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	2005c648 	.word	0x2005c648

08007a90 <_read_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	@ (8007ab0 <_read_r+0x20>)
 8007a94:	4604      	mov	r4, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	602a      	str	r2, [r5, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f7fa fe25 	bl	80026ee <_read>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_read_r+0x1e>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_read_r+0x1e>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	2005c648 	.word	0x2005c648

08007ab4 <_sbrk_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d06      	ldr	r5, [pc, #24]	@ (8007ad0 <_sbrk_r+0x1c>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7fa fe82 	bl	80027c8 <_sbrk>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_sbrk_r+0x1a>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_sbrk_r+0x1a>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	2005c648 	.word	0x2005c648

08007ad4 <_write_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d07      	ldr	r5, [pc, #28]	@ (8007af4 <_write_r+0x20>)
 8007ad8:	4604      	mov	r4, r0
 8007ada:	4608      	mov	r0, r1
 8007adc:	4611      	mov	r1, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	602a      	str	r2, [r5, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f7fa fe20 	bl	8002728 <_write>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_write_r+0x1e>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_write_r+0x1e>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	2005c648 	.word	0x2005c648

08007af8 <__errno>:
 8007af8:	4b01      	ldr	r3, [pc, #4]	@ (8007b00 <__errno+0x8>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20040020 	.word	0x20040020

08007b04 <__libc_init_array>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4d0d      	ldr	r5, [pc, #52]	@ (8007b3c <__libc_init_array+0x38>)
 8007b08:	4c0d      	ldr	r4, [pc, #52]	@ (8007b40 <__libc_init_array+0x3c>)
 8007b0a:	1b64      	subs	r4, r4, r5
 8007b0c:	10a4      	asrs	r4, r4, #2
 8007b0e:	2600      	movs	r6, #0
 8007b10:	42a6      	cmp	r6, r4
 8007b12:	d109      	bne.n	8007b28 <__libc_init_array+0x24>
 8007b14:	4d0b      	ldr	r5, [pc, #44]	@ (8007b44 <__libc_init_array+0x40>)
 8007b16:	4c0c      	ldr	r4, [pc, #48]	@ (8007b48 <__libc_init_array+0x44>)
 8007b18:	f003 fa20 	bl	800af5c <_init>
 8007b1c:	1b64      	subs	r4, r4, r5
 8007b1e:	10a4      	asrs	r4, r4, #2
 8007b20:	2600      	movs	r6, #0
 8007b22:	42a6      	cmp	r6, r4
 8007b24:	d105      	bne.n	8007b32 <__libc_init_array+0x2e>
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2c:	4798      	blx	r3
 8007b2e:	3601      	adds	r6, #1
 8007b30:	e7ee      	b.n	8007b10 <__libc_init_array+0xc>
 8007b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b36:	4798      	blx	r3
 8007b38:	3601      	adds	r6, #1
 8007b3a:	e7f2      	b.n	8007b22 <__libc_init_array+0x1e>
 8007b3c:	0800d194 	.word	0x0800d194
 8007b40:	0800d194 	.word	0x0800d194
 8007b44:	0800d194 	.word	0x0800d194
 8007b48:	0800d198 	.word	0x0800d198

08007b4c <__retarget_lock_init_recursive>:
 8007b4c:	4770      	bx	lr

08007b4e <__retarget_lock_acquire_recursive>:
 8007b4e:	4770      	bx	lr

08007b50 <__retarget_lock_release_recursive>:
 8007b50:	4770      	bx	lr

08007b52 <memcpy>:
 8007b52:	440a      	add	r2, r1
 8007b54:	4291      	cmp	r1, r2
 8007b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b5a:	d100      	bne.n	8007b5e <memcpy+0xc>
 8007b5c:	4770      	bx	lr
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b68:	4291      	cmp	r1, r2
 8007b6a:	d1f9      	bne.n	8007b60 <memcpy+0xe>
 8007b6c:	bd10      	pop	{r4, pc}
	...

08007b70 <nanf>:
 8007b70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b78 <nanf+0x8>
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	7fc00000 	.word	0x7fc00000

08007b7c <quorem>:
 8007b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	6903      	ldr	r3, [r0, #16]
 8007b82:	690c      	ldr	r4, [r1, #16]
 8007b84:	42a3      	cmp	r3, r4
 8007b86:	4607      	mov	r7, r0
 8007b88:	db7e      	blt.n	8007c88 <quorem+0x10c>
 8007b8a:	3c01      	subs	r4, #1
 8007b8c:	f101 0814 	add.w	r8, r1, #20
 8007b90:	00a3      	lsls	r3, r4, #2
 8007b92:	f100 0514 	add.w	r5, r0, #20
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ba2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bae:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bb2:	d32e      	bcc.n	8007c12 <quorem+0x96>
 8007bb4:	f04f 0a00 	mov.w	sl, #0
 8007bb8:	46c4      	mov	ip, r8
 8007bba:	46ae      	mov	lr, r5
 8007bbc:	46d3      	mov	fp, sl
 8007bbe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bc2:	b298      	uxth	r0, r3
 8007bc4:	fb06 a000 	mla	r0, r6, r0, sl
 8007bc8:	0c02      	lsrs	r2, r0, #16
 8007bca:	0c1b      	lsrs	r3, r3, #16
 8007bcc:	fb06 2303 	mla	r3, r6, r3, r2
 8007bd0:	f8de 2000 	ldr.w	r2, [lr]
 8007bd4:	b280      	uxth	r0, r0
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	1a12      	subs	r2, r2, r0
 8007bda:	445a      	add	r2, fp
 8007bdc:	f8de 0000 	ldr.w	r0, [lr]
 8007be0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bf4:	45e1      	cmp	r9, ip
 8007bf6:	f84e 2b04 	str.w	r2, [lr], #4
 8007bfa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bfe:	d2de      	bcs.n	8007bbe <quorem+0x42>
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	58eb      	ldr	r3, [r5, r3]
 8007c04:	b92b      	cbnz	r3, 8007c12 <quorem+0x96>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	3b04      	subs	r3, #4
 8007c0a:	429d      	cmp	r5, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	d32f      	bcc.n	8007c70 <quorem+0xf4>
 8007c10:	613c      	str	r4, [r7, #16]
 8007c12:	4638      	mov	r0, r7
 8007c14:	f001 f912 	bl	8008e3c <__mcmp>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	db25      	blt.n	8007c68 <quorem+0xec>
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c24:	f8d1 c000 	ldr.w	ip, [r1]
 8007c28:	fa1f fe82 	uxth.w	lr, r2
 8007c2c:	fa1f f38c 	uxth.w	r3, ip
 8007c30:	eba3 030e 	sub.w	r3, r3, lr
 8007c34:	4403      	add	r3, r0
 8007c36:	0c12      	lsrs	r2, r2, #16
 8007c38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c46:	45c1      	cmp	r9, r8
 8007c48:	f841 3b04 	str.w	r3, [r1], #4
 8007c4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c50:	d2e6      	bcs.n	8007c20 <quorem+0xa4>
 8007c52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c5a:	b922      	cbnz	r2, 8007c66 <quorem+0xea>
 8007c5c:	3b04      	subs	r3, #4
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	d30b      	bcc.n	8007c7c <quorem+0x100>
 8007c64:	613c      	str	r4, [r7, #16]
 8007c66:	3601      	adds	r6, #1
 8007c68:	4630      	mov	r0, r6
 8007c6a:	b003      	add	sp, #12
 8007c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c70:	6812      	ldr	r2, [r2, #0]
 8007c72:	3b04      	subs	r3, #4
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d1cb      	bne.n	8007c10 <quorem+0x94>
 8007c78:	3c01      	subs	r4, #1
 8007c7a:	e7c6      	b.n	8007c0a <quorem+0x8e>
 8007c7c:	6812      	ldr	r2, [r2, #0]
 8007c7e:	3b04      	subs	r3, #4
 8007c80:	2a00      	cmp	r2, #0
 8007c82:	d1ef      	bne.n	8007c64 <quorem+0xe8>
 8007c84:	3c01      	subs	r4, #1
 8007c86:	e7ea      	b.n	8007c5e <quorem+0xe2>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e7ee      	b.n	8007c6a <quorem+0xee>
 8007c8c:	0000      	movs	r0, r0
	...

08007c90 <_dtoa_r>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	69c7      	ldr	r7, [r0, #28]
 8007c96:	b097      	sub	sp, #92	@ 0x5c
 8007c98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c9c:	ec55 4b10 	vmov	r4, r5, d0
 8007ca0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007ca2:	9107      	str	r1, [sp, #28]
 8007ca4:	4681      	mov	r9, r0
 8007ca6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ca8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007caa:	b97f      	cbnz	r7, 8007ccc <_dtoa_r+0x3c>
 8007cac:	2010      	movs	r0, #16
 8007cae:	f7fe fd7b 	bl	80067a8 <malloc>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	f8c9 001c 	str.w	r0, [r9, #28]
 8007cb8:	b920      	cbnz	r0, 8007cc4 <_dtoa_r+0x34>
 8007cba:	4ba9      	ldr	r3, [pc, #676]	@ (8007f60 <_dtoa_r+0x2d0>)
 8007cbc:	21ef      	movs	r1, #239	@ 0xef
 8007cbe:	48a9      	ldr	r0, [pc, #676]	@ (8007f64 <_dtoa_r+0x2d4>)
 8007cc0:	f002 fd2e 	bl	800a720 <__assert_func>
 8007cc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cc8:	6007      	str	r7, [r0, #0]
 8007cca:	60c7      	str	r7, [r0, #12]
 8007ccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	b159      	cbz	r1, 8007cec <_dtoa_r+0x5c>
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	604a      	str	r2, [r1, #4]
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4093      	lsls	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	4648      	mov	r0, r9
 8007ce0:	f000 fe30 	bl	8008944 <_Bfree>
 8007ce4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	1e2b      	subs	r3, r5, #0
 8007cee:	bfb9      	ittee	lt
 8007cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cf4:	9305      	strlt	r3, [sp, #20]
 8007cf6:	2300      	movge	r3, #0
 8007cf8:	6033      	strge	r3, [r6, #0]
 8007cfa:	9f05      	ldr	r7, [sp, #20]
 8007cfc:	4b9a      	ldr	r3, [pc, #616]	@ (8007f68 <_dtoa_r+0x2d8>)
 8007cfe:	bfbc      	itt	lt
 8007d00:	2201      	movlt	r2, #1
 8007d02:	6032      	strlt	r2, [r6, #0]
 8007d04:	43bb      	bics	r3, r7
 8007d06:	d112      	bne.n	8007d2e <_dtoa_r+0x9e>
 8007d08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d14:	4323      	orrs	r3, r4
 8007d16:	f000 855a 	beq.w	80087ce <_dtoa_r+0xb3e>
 8007d1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007f7c <_dtoa_r+0x2ec>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 855c 	beq.w	80087de <_dtoa_r+0xb4e>
 8007d26:	f10a 0303 	add.w	r3, sl, #3
 8007d2a:	f000 bd56 	b.w	80087da <_dtoa_r+0xb4a>
 8007d2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d32:	2200      	movs	r2, #0
 8007d34:	ec51 0b17 	vmov	r0, r1, d7
 8007d38:	2300      	movs	r3, #0
 8007d3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007d3e:	f7f8 fedb 	bl	8000af8 <__aeabi_dcmpeq>
 8007d42:	4680      	mov	r8, r0
 8007d44:	b158      	cbz	r0, 8007d5e <_dtoa_r+0xce>
 8007d46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d48:	2301      	movs	r3, #1
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d4e:	b113      	cbz	r3, 8007d56 <_dtoa_r+0xc6>
 8007d50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007d52:	4b86      	ldr	r3, [pc, #536]	@ (8007f6c <_dtoa_r+0x2dc>)
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007f80 <_dtoa_r+0x2f0>
 8007d5a:	f000 bd40 	b.w	80087de <_dtoa_r+0xb4e>
 8007d5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007d62:	aa14      	add	r2, sp, #80	@ 0x50
 8007d64:	a915      	add	r1, sp, #84	@ 0x54
 8007d66:	4648      	mov	r0, r9
 8007d68:	f001 f988 	bl	800907c <__d2b>
 8007d6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d70:	9002      	str	r0, [sp, #8]
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	d078      	beq.n	8007e68 <_dtoa_r+0x1d8>
 8007d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d90:	4619      	mov	r1, r3
 8007d92:	2200      	movs	r2, #0
 8007d94:	4b76      	ldr	r3, [pc, #472]	@ (8007f70 <_dtoa_r+0x2e0>)
 8007d96:	f7f8 fa8f 	bl	80002b8 <__aeabi_dsub>
 8007d9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007f48 <_dtoa_r+0x2b8>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fc42 	bl	8000628 <__aeabi_dmul>
 8007da4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007f50 <_dtoa_r+0x2c0>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 fa87 	bl	80002bc <__adddf3>
 8007dae:	4604      	mov	r4, r0
 8007db0:	4630      	mov	r0, r6
 8007db2:	460d      	mov	r5, r1
 8007db4:	f7f8 fbce 	bl	8000554 <__aeabi_i2d>
 8007db8:	a367      	add	r3, pc, #412	@ (adr r3, 8007f58 <_dtoa_r+0x2c8>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 fc33 	bl	8000628 <__aeabi_dmul>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fa77 	bl	80002bc <__adddf3>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	460d      	mov	r5, r1
 8007dd2:	f7f8 fed9 	bl	8000b88 <__aeabi_d2iz>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4607      	mov	r7, r0
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7f8 fe94 	bl	8000b0c <__aeabi_dcmplt>
 8007de4:	b140      	cbz	r0, 8007df8 <_dtoa_r+0x168>
 8007de6:	4638      	mov	r0, r7
 8007de8:	f7f8 fbb4 	bl	8000554 <__aeabi_i2d>
 8007dec:	4622      	mov	r2, r4
 8007dee:	462b      	mov	r3, r5
 8007df0:	f7f8 fe82 	bl	8000af8 <__aeabi_dcmpeq>
 8007df4:	b900      	cbnz	r0, 8007df8 <_dtoa_r+0x168>
 8007df6:	3f01      	subs	r7, #1
 8007df8:	2f16      	cmp	r7, #22
 8007dfa:	d852      	bhi.n	8007ea2 <_dtoa_r+0x212>
 8007dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8007f74 <_dtoa_r+0x2e4>)
 8007dfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e0a:	f7f8 fe7f 	bl	8000b0c <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d049      	beq.n	8007ea6 <_dtoa_r+0x216>
 8007e12:	3f01      	subs	r7, #1
 8007e14:	2300      	movs	r3, #0
 8007e16:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e1a:	1b9b      	subs	r3, r3, r6
 8007e1c:	1e5a      	subs	r2, r3, #1
 8007e1e:	bf45      	ittet	mi
 8007e20:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e24:	9300      	strmi	r3, [sp, #0]
 8007e26:	2300      	movpl	r3, #0
 8007e28:	2300      	movmi	r3, #0
 8007e2a:	9206      	str	r2, [sp, #24]
 8007e2c:	bf54      	ite	pl
 8007e2e:	9300      	strpl	r3, [sp, #0]
 8007e30:	9306      	strmi	r3, [sp, #24]
 8007e32:	2f00      	cmp	r7, #0
 8007e34:	db39      	blt.n	8007eaa <_dtoa_r+0x21a>
 8007e36:	9b06      	ldr	r3, [sp, #24]
 8007e38:	970d      	str	r7, [sp, #52]	@ 0x34
 8007e3a:	443b      	add	r3, r7
 8007e3c:	9306      	str	r3, [sp, #24]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9308      	str	r3, [sp, #32]
 8007e42:	9b07      	ldr	r3, [sp, #28]
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d863      	bhi.n	8007f10 <_dtoa_r+0x280>
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	bfc4      	itt	gt
 8007e4c:	3b04      	subgt	r3, #4
 8007e4e:	9307      	strgt	r3, [sp, #28]
 8007e50:	9b07      	ldr	r3, [sp, #28]
 8007e52:	f1a3 0302 	sub.w	r3, r3, #2
 8007e56:	bfcc      	ite	gt
 8007e58:	2400      	movgt	r4, #0
 8007e5a:	2401      	movle	r4, #1
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d863      	bhi.n	8007f28 <_dtoa_r+0x298>
 8007e60:	e8df f003 	tbb	[pc, r3]
 8007e64:	2b375452 	.word	0x2b375452
 8007e68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e6c:	441e      	add	r6, r3
 8007e6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	bfc1      	itttt	gt
 8007e76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e7a:	409f      	lslgt	r7, r3
 8007e7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e80:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e84:	bfd6      	itet	le
 8007e86:	f1c3 0320 	rsble	r3, r3, #32
 8007e8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e8e:	fa04 f003 	lslle.w	r0, r4, r3
 8007e92:	f7f8 fb4f 	bl	8000534 <__aeabi_ui2d>
 8007e96:	2201      	movs	r2, #1
 8007e98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e9c:	3e01      	subs	r6, #1
 8007e9e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007ea0:	e776      	b.n	8007d90 <_dtoa_r+0x100>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e7b7      	b.n	8007e16 <_dtoa_r+0x186>
 8007ea6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007ea8:	e7b6      	b.n	8007e18 <_dtoa_r+0x188>
 8007eaa:	9b00      	ldr	r3, [sp, #0]
 8007eac:	1bdb      	subs	r3, r3, r7
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	427b      	negs	r3, r7
 8007eb2:	9308      	str	r3, [sp, #32]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007eb8:	e7c3      	b.n	8007e42 <_dtoa_r+0x1b2>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ebe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ec0:	eb07 0b03 	add.w	fp, r7, r3
 8007ec4:	f10b 0301 	add.w	r3, fp, #1
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	9303      	str	r3, [sp, #12]
 8007ecc:	bfb8      	it	lt
 8007ece:	2301      	movlt	r3, #1
 8007ed0:	e006      	b.n	8007ee0 <_dtoa_r+0x250>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dd28      	ble.n	8007f2e <_dtoa_r+0x29e>
 8007edc:	469b      	mov	fp, r3
 8007ede:	9303      	str	r3, [sp, #12]
 8007ee0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	f102 0514 	add.w	r5, r2, #20
 8007eec:	429d      	cmp	r5, r3
 8007eee:	d926      	bls.n	8007f3e <_dtoa_r+0x2ae>
 8007ef0:	6041      	str	r1, [r0, #4]
 8007ef2:	4648      	mov	r0, r9
 8007ef4:	f000 fce6 	bl	80088c4 <_Balloc>
 8007ef8:	4682      	mov	sl, r0
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d142      	bne.n	8007f84 <_dtoa_r+0x2f4>
 8007efe:	4b1e      	ldr	r3, [pc, #120]	@ (8007f78 <_dtoa_r+0x2e8>)
 8007f00:	4602      	mov	r2, r0
 8007f02:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f06:	e6da      	b.n	8007cbe <_dtoa_r+0x2e>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e7e3      	b.n	8007ed4 <_dtoa_r+0x244>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e7d5      	b.n	8007ebc <_dtoa_r+0x22c>
 8007f10:	2401      	movs	r4, #1
 8007f12:	2300      	movs	r3, #0
 8007f14:	9307      	str	r3, [sp, #28]
 8007f16:	9409      	str	r4, [sp, #36]	@ 0x24
 8007f18:	f04f 3bff 	mov.w	fp, #4294967295
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f22:	2312      	movs	r3, #18
 8007f24:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f26:	e7db      	b.n	8007ee0 <_dtoa_r+0x250>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2c:	e7f4      	b.n	8007f18 <_dtoa_r+0x288>
 8007f2e:	f04f 0b01 	mov.w	fp, #1
 8007f32:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f36:	465b      	mov	r3, fp
 8007f38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007f3c:	e7d0      	b.n	8007ee0 <_dtoa_r+0x250>
 8007f3e:	3101      	adds	r1, #1
 8007f40:	0052      	lsls	r2, r2, #1
 8007f42:	e7d1      	b.n	8007ee8 <_dtoa_r+0x258>
 8007f44:	f3af 8000 	nop.w
 8007f48:	636f4361 	.word	0x636f4361
 8007f4c:	3fd287a7 	.word	0x3fd287a7
 8007f50:	8b60c8b3 	.word	0x8b60c8b3
 8007f54:	3fc68a28 	.word	0x3fc68a28
 8007f58:	509f79fb 	.word	0x509f79fb
 8007f5c:	3fd34413 	.word	0x3fd34413
 8007f60:	0800cdaa 	.word	0x0800cdaa
 8007f64:	0800cdc1 	.word	0x0800cdc1
 8007f68:	7ff00000 	.word	0x7ff00000
 8007f6c:	0800cd75 	.word	0x0800cd75
 8007f70:	3ff80000 	.word	0x3ff80000
 8007f74:	0800cf70 	.word	0x0800cf70
 8007f78:	0800ce19 	.word	0x0800ce19
 8007f7c:	0800cda6 	.word	0x0800cda6
 8007f80:	0800cd74 	.word	0x0800cd74
 8007f84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f88:	6018      	str	r0, [r3, #0]
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	2b0e      	cmp	r3, #14
 8007f8e:	f200 80a1 	bhi.w	80080d4 <_dtoa_r+0x444>
 8007f92:	2c00      	cmp	r4, #0
 8007f94:	f000 809e 	beq.w	80080d4 <_dtoa_r+0x444>
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	dd33      	ble.n	8008004 <_dtoa_r+0x374>
 8007f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8008210 <_dtoa_r+0x580>)
 8007f9e:	f007 020f 	and.w	r2, r7, #15
 8007fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa6:	ed93 7b00 	vldr	d7, [r3]
 8007faa:	05f8      	lsls	r0, r7, #23
 8007fac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007fb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fb4:	d516      	bpl.n	8007fe4 <_dtoa_r+0x354>
 8007fb6:	4b97      	ldr	r3, [pc, #604]	@ (8008214 <_dtoa_r+0x584>)
 8007fb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fc0:	f7f8 fc5c 	bl	800087c <__aeabi_ddiv>
 8007fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fc8:	f004 040f 	and.w	r4, r4, #15
 8007fcc:	2603      	movs	r6, #3
 8007fce:	4d91      	ldr	r5, [pc, #580]	@ (8008214 <_dtoa_r+0x584>)
 8007fd0:	b954      	cbnz	r4, 8007fe8 <_dtoa_r+0x358>
 8007fd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fda:	f7f8 fc4f 	bl	800087c <__aeabi_ddiv>
 8007fde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fe2:	e028      	b.n	8008036 <_dtoa_r+0x3a6>
 8007fe4:	2602      	movs	r6, #2
 8007fe6:	e7f2      	b.n	8007fce <_dtoa_r+0x33e>
 8007fe8:	07e1      	lsls	r1, r4, #31
 8007fea:	d508      	bpl.n	8007ffe <_dtoa_r+0x36e>
 8007fec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007ff0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ff4:	f7f8 fb18 	bl	8000628 <__aeabi_dmul>
 8007ff8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ffc:	3601      	adds	r6, #1
 8007ffe:	1064      	asrs	r4, r4, #1
 8008000:	3508      	adds	r5, #8
 8008002:	e7e5      	b.n	8007fd0 <_dtoa_r+0x340>
 8008004:	f000 80af 	beq.w	8008166 <_dtoa_r+0x4d6>
 8008008:	427c      	negs	r4, r7
 800800a:	4b81      	ldr	r3, [pc, #516]	@ (8008210 <_dtoa_r+0x580>)
 800800c:	4d81      	ldr	r5, [pc, #516]	@ (8008214 <_dtoa_r+0x584>)
 800800e:	f004 020f 	and.w	r2, r4, #15
 8008012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800801e:	f7f8 fb03 	bl	8000628 <__aeabi_dmul>
 8008022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008026:	1124      	asrs	r4, r4, #4
 8008028:	2300      	movs	r3, #0
 800802a:	2602      	movs	r6, #2
 800802c:	2c00      	cmp	r4, #0
 800802e:	f040 808f 	bne.w	8008150 <_dtoa_r+0x4c0>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1d3      	bne.n	8007fde <_dtoa_r+0x34e>
 8008036:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008038:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8094 	beq.w	800816a <_dtoa_r+0x4da>
 8008042:	4b75      	ldr	r3, [pc, #468]	@ (8008218 <_dtoa_r+0x588>)
 8008044:	2200      	movs	r2, #0
 8008046:	4620      	mov	r0, r4
 8008048:	4629      	mov	r1, r5
 800804a:	f7f8 fd5f 	bl	8000b0c <__aeabi_dcmplt>
 800804e:	2800      	cmp	r0, #0
 8008050:	f000 808b 	beq.w	800816a <_dtoa_r+0x4da>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 8087 	beq.w	800816a <_dtoa_r+0x4da>
 800805c:	f1bb 0f00 	cmp.w	fp, #0
 8008060:	dd34      	ble.n	80080cc <_dtoa_r+0x43c>
 8008062:	4620      	mov	r0, r4
 8008064:	4b6d      	ldr	r3, [pc, #436]	@ (800821c <_dtoa_r+0x58c>)
 8008066:	2200      	movs	r2, #0
 8008068:	4629      	mov	r1, r5
 800806a:	f7f8 fadd 	bl	8000628 <__aeabi_dmul>
 800806e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008072:	f107 38ff 	add.w	r8, r7, #4294967295
 8008076:	3601      	adds	r6, #1
 8008078:	465c      	mov	r4, fp
 800807a:	4630      	mov	r0, r6
 800807c:	f7f8 fa6a 	bl	8000554 <__aeabi_i2d>
 8008080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008084:	f7f8 fad0 	bl	8000628 <__aeabi_dmul>
 8008088:	4b65      	ldr	r3, [pc, #404]	@ (8008220 <_dtoa_r+0x590>)
 800808a:	2200      	movs	r2, #0
 800808c:	f7f8 f916 	bl	80002bc <__adddf3>
 8008090:	4605      	mov	r5, r0
 8008092:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008096:	2c00      	cmp	r4, #0
 8008098:	d16a      	bne.n	8008170 <_dtoa_r+0x4e0>
 800809a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800809e:	4b61      	ldr	r3, [pc, #388]	@ (8008224 <_dtoa_r+0x594>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	f7f8 f909 	bl	80002b8 <__aeabi_dsub>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080ae:	462a      	mov	r2, r5
 80080b0:	4633      	mov	r3, r6
 80080b2:	f7f8 fd49 	bl	8000b48 <__aeabi_dcmpgt>
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f040 8298 	bne.w	80085ec <_dtoa_r+0x95c>
 80080bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080c0:	462a      	mov	r2, r5
 80080c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080c6:	f7f8 fd21 	bl	8000b0c <__aeabi_dcmplt>
 80080ca:	bb38      	cbnz	r0, 800811c <_dtoa_r+0x48c>
 80080cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80080d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f2c0 8157 	blt.w	800838a <_dtoa_r+0x6fa>
 80080dc:	2f0e      	cmp	r7, #14
 80080de:	f300 8154 	bgt.w	800838a <_dtoa_r+0x6fa>
 80080e2:	4b4b      	ldr	r3, [pc, #300]	@ (8008210 <_dtoa_r+0x580>)
 80080e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080e8:	ed93 7b00 	vldr	d7, [r3]
 80080ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	ed8d 7b00 	vstr	d7, [sp]
 80080f4:	f280 80e5 	bge.w	80082c2 <_dtoa_r+0x632>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f300 80e1 	bgt.w	80082c2 <_dtoa_r+0x632>
 8008100:	d10c      	bne.n	800811c <_dtoa_r+0x48c>
 8008102:	4b48      	ldr	r3, [pc, #288]	@ (8008224 <_dtoa_r+0x594>)
 8008104:	2200      	movs	r2, #0
 8008106:	ec51 0b17 	vmov	r0, r1, d7
 800810a:	f7f8 fa8d 	bl	8000628 <__aeabi_dmul>
 800810e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008112:	f7f8 fd0f 	bl	8000b34 <__aeabi_dcmpge>
 8008116:	2800      	cmp	r0, #0
 8008118:	f000 8266 	beq.w	80085e8 <_dtoa_r+0x958>
 800811c:	2400      	movs	r4, #0
 800811e:	4625      	mov	r5, r4
 8008120:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008122:	4656      	mov	r6, sl
 8008124:	ea6f 0803 	mvn.w	r8, r3
 8008128:	2700      	movs	r7, #0
 800812a:	4621      	mov	r1, r4
 800812c:	4648      	mov	r0, r9
 800812e:	f000 fc09 	bl	8008944 <_Bfree>
 8008132:	2d00      	cmp	r5, #0
 8008134:	f000 80bd 	beq.w	80082b2 <_dtoa_r+0x622>
 8008138:	b12f      	cbz	r7, 8008146 <_dtoa_r+0x4b6>
 800813a:	42af      	cmp	r7, r5
 800813c:	d003      	beq.n	8008146 <_dtoa_r+0x4b6>
 800813e:	4639      	mov	r1, r7
 8008140:	4648      	mov	r0, r9
 8008142:	f000 fbff 	bl	8008944 <_Bfree>
 8008146:	4629      	mov	r1, r5
 8008148:	4648      	mov	r0, r9
 800814a:	f000 fbfb 	bl	8008944 <_Bfree>
 800814e:	e0b0      	b.n	80082b2 <_dtoa_r+0x622>
 8008150:	07e2      	lsls	r2, r4, #31
 8008152:	d505      	bpl.n	8008160 <_dtoa_r+0x4d0>
 8008154:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008158:	f7f8 fa66 	bl	8000628 <__aeabi_dmul>
 800815c:	3601      	adds	r6, #1
 800815e:	2301      	movs	r3, #1
 8008160:	1064      	asrs	r4, r4, #1
 8008162:	3508      	adds	r5, #8
 8008164:	e762      	b.n	800802c <_dtoa_r+0x39c>
 8008166:	2602      	movs	r6, #2
 8008168:	e765      	b.n	8008036 <_dtoa_r+0x3a6>
 800816a:	9c03      	ldr	r4, [sp, #12]
 800816c:	46b8      	mov	r8, r7
 800816e:	e784      	b.n	800807a <_dtoa_r+0x3ea>
 8008170:	4b27      	ldr	r3, [pc, #156]	@ (8008210 <_dtoa_r+0x580>)
 8008172:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008174:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800817c:	4454      	add	r4, sl
 800817e:	2900      	cmp	r1, #0
 8008180:	d054      	beq.n	800822c <_dtoa_r+0x59c>
 8008182:	4929      	ldr	r1, [pc, #164]	@ (8008228 <_dtoa_r+0x598>)
 8008184:	2000      	movs	r0, #0
 8008186:	f7f8 fb79 	bl	800087c <__aeabi_ddiv>
 800818a:	4633      	mov	r3, r6
 800818c:	462a      	mov	r2, r5
 800818e:	f7f8 f893 	bl	80002b8 <__aeabi_dsub>
 8008192:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008196:	4656      	mov	r6, sl
 8008198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800819c:	f7f8 fcf4 	bl	8000b88 <__aeabi_d2iz>
 80081a0:	4605      	mov	r5, r0
 80081a2:	f7f8 f9d7 	bl	8000554 <__aeabi_i2d>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ae:	f7f8 f883 	bl	80002b8 <__aeabi_dsub>
 80081b2:	3530      	adds	r5, #48	@ 0x30
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081bc:	f806 5b01 	strb.w	r5, [r6], #1
 80081c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081c4:	f7f8 fca2 	bl	8000b0c <__aeabi_dcmplt>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d172      	bne.n	80082b2 <_dtoa_r+0x622>
 80081cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081d0:	4911      	ldr	r1, [pc, #68]	@ (8008218 <_dtoa_r+0x588>)
 80081d2:	2000      	movs	r0, #0
 80081d4:	f7f8 f870 	bl	80002b8 <__aeabi_dsub>
 80081d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081dc:	f7f8 fc96 	bl	8000b0c <__aeabi_dcmplt>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f040 80b4 	bne.w	800834e <_dtoa_r+0x6be>
 80081e6:	42a6      	cmp	r6, r4
 80081e8:	f43f af70 	beq.w	80080cc <_dtoa_r+0x43c>
 80081ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80081f0:	4b0a      	ldr	r3, [pc, #40]	@ (800821c <_dtoa_r+0x58c>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	f7f8 fa18 	bl	8000628 <__aeabi_dmul>
 80081f8:	4b08      	ldr	r3, [pc, #32]	@ (800821c <_dtoa_r+0x58c>)
 80081fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081fe:	2200      	movs	r2, #0
 8008200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008204:	f7f8 fa10 	bl	8000628 <__aeabi_dmul>
 8008208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800820c:	e7c4      	b.n	8008198 <_dtoa_r+0x508>
 800820e:	bf00      	nop
 8008210:	0800cf70 	.word	0x0800cf70
 8008214:	0800cf48 	.word	0x0800cf48
 8008218:	3ff00000 	.word	0x3ff00000
 800821c:	40240000 	.word	0x40240000
 8008220:	401c0000 	.word	0x401c0000
 8008224:	40140000 	.word	0x40140000
 8008228:	3fe00000 	.word	0x3fe00000
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	f7f8 f9fa 	bl	8000628 <__aeabi_dmul>
 8008234:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008238:	9413      	str	r4, [sp, #76]	@ 0x4c
 800823a:	4656      	mov	r6, sl
 800823c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008240:	f7f8 fca2 	bl	8000b88 <__aeabi_d2iz>
 8008244:	4605      	mov	r5, r0
 8008246:	f7f8 f985 	bl	8000554 <__aeabi_i2d>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008252:	f7f8 f831 	bl	80002b8 <__aeabi_dsub>
 8008256:	3530      	adds	r5, #48	@ 0x30
 8008258:	f806 5b01 	strb.w	r5, [r6], #1
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	42a6      	cmp	r6, r4
 8008262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008266:	f04f 0200 	mov.w	r2, #0
 800826a:	d124      	bne.n	80082b6 <_dtoa_r+0x626>
 800826c:	4baf      	ldr	r3, [pc, #700]	@ (800852c <_dtoa_r+0x89c>)
 800826e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008272:	f7f8 f823 	bl	80002bc <__adddf3>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800827e:	f7f8 fc63 	bl	8000b48 <__aeabi_dcmpgt>
 8008282:	2800      	cmp	r0, #0
 8008284:	d163      	bne.n	800834e <_dtoa_r+0x6be>
 8008286:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800828a:	49a8      	ldr	r1, [pc, #672]	@ (800852c <_dtoa_r+0x89c>)
 800828c:	2000      	movs	r0, #0
 800828e:	f7f8 f813 	bl	80002b8 <__aeabi_dsub>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800829a:	f7f8 fc37 	bl	8000b0c <__aeabi_dcmplt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f43f af14 	beq.w	80080cc <_dtoa_r+0x43c>
 80082a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80082a6:	1e73      	subs	r3, r6, #1
 80082a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082ae:	2b30      	cmp	r3, #48	@ 0x30
 80082b0:	d0f8      	beq.n	80082a4 <_dtoa_r+0x614>
 80082b2:	4647      	mov	r7, r8
 80082b4:	e03b      	b.n	800832e <_dtoa_r+0x69e>
 80082b6:	4b9e      	ldr	r3, [pc, #632]	@ (8008530 <_dtoa_r+0x8a0>)
 80082b8:	f7f8 f9b6 	bl	8000628 <__aeabi_dmul>
 80082bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082c0:	e7bc      	b.n	800823c <_dtoa_r+0x5ac>
 80082c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80082c6:	4656      	mov	r6, sl
 80082c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f8 fad4 	bl	800087c <__aeabi_ddiv>
 80082d4:	f7f8 fc58 	bl	8000b88 <__aeabi_d2iz>
 80082d8:	4680      	mov	r8, r0
 80082da:	f7f8 f93b 	bl	8000554 <__aeabi_i2d>
 80082de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082e2:	f7f8 f9a1 	bl	8000628 <__aeabi_dmul>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4620      	mov	r0, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80082f2:	f7f7 ffe1 	bl	80002b8 <__aeabi_dsub>
 80082f6:	f806 4b01 	strb.w	r4, [r6], #1
 80082fa:	9d03      	ldr	r5, [sp, #12]
 80082fc:	eba6 040a 	sub.w	r4, r6, sl
 8008300:	42a5      	cmp	r5, r4
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	d133      	bne.n	8008370 <_dtoa_r+0x6e0>
 8008308:	f7f7 ffd8 	bl	80002bc <__adddf3>
 800830c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008310:	4604      	mov	r4, r0
 8008312:	460d      	mov	r5, r1
 8008314:	f7f8 fc18 	bl	8000b48 <__aeabi_dcmpgt>
 8008318:	b9c0      	cbnz	r0, 800834c <_dtoa_r+0x6bc>
 800831a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800831e:	4620      	mov	r0, r4
 8008320:	4629      	mov	r1, r5
 8008322:	f7f8 fbe9 	bl	8000af8 <__aeabi_dcmpeq>
 8008326:	b110      	cbz	r0, 800832e <_dtoa_r+0x69e>
 8008328:	f018 0f01 	tst.w	r8, #1
 800832c:	d10e      	bne.n	800834c <_dtoa_r+0x6bc>
 800832e:	9902      	ldr	r1, [sp, #8]
 8008330:	4648      	mov	r0, r9
 8008332:	f000 fb07 	bl	8008944 <_Bfree>
 8008336:	2300      	movs	r3, #0
 8008338:	7033      	strb	r3, [r6, #0]
 800833a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800833c:	3701      	adds	r7, #1
 800833e:	601f      	str	r7, [r3, #0]
 8008340:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 824b 	beq.w	80087de <_dtoa_r+0xb4e>
 8008348:	601e      	str	r6, [r3, #0]
 800834a:	e248      	b.n	80087de <_dtoa_r+0xb4e>
 800834c:	46b8      	mov	r8, r7
 800834e:	4633      	mov	r3, r6
 8008350:	461e      	mov	r6, r3
 8008352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008356:	2a39      	cmp	r2, #57	@ 0x39
 8008358:	d106      	bne.n	8008368 <_dtoa_r+0x6d8>
 800835a:	459a      	cmp	sl, r3
 800835c:	d1f8      	bne.n	8008350 <_dtoa_r+0x6c0>
 800835e:	2230      	movs	r2, #48	@ 0x30
 8008360:	f108 0801 	add.w	r8, r8, #1
 8008364:	f88a 2000 	strb.w	r2, [sl]
 8008368:	781a      	ldrb	r2, [r3, #0]
 800836a:	3201      	adds	r2, #1
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e7a0      	b.n	80082b2 <_dtoa_r+0x622>
 8008370:	4b6f      	ldr	r3, [pc, #444]	@ (8008530 <_dtoa_r+0x8a0>)
 8008372:	2200      	movs	r2, #0
 8008374:	f7f8 f958 	bl	8000628 <__aeabi_dmul>
 8008378:	2200      	movs	r2, #0
 800837a:	2300      	movs	r3, #0
 800837c:	4604      	mov	r4, r0
 800837e:	460d      	mov	r5, r1
 8008380:	f7f8 fbba 	bl	8000af8 <__aeabi_dcmpeq>
 8008384:	2800      	cmp	r0, #0
 8008386:	d09f      	beq.n	80082c8 <_dtoa_r+0x638>
 8008388:	e7d1      	b.n	800832e <_dtoa_r+0x69e>
 800838a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800838c:	2a00      	cmp	r2, #0
 800838e:	f000 80ea 	beq.w	8008566 <_dtoa_r+0x8d6>
 8008392:	9a07      	ldr	r2, [sp, #28]
 8008394:	2a01      	cmp	r2, #1
 8008396:	f300 80cd 	bgt.w	8008534 <_dtoa_r+0x8a4>
 800839a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800839c:	2a00      	cmp	r2, #0
 800839e:	f000 80c1 	beq.w	8008524 <_dtoa_r+0x894>
 80083a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083a6:	9c08      	ldr	r4, [sp, #32]
 80083a8:	9e00      	ldr	r6, [sp, #0]
 80083aa:	9a00      	ldr	r2, [sp, #0]
 80083ac:	441a      	add	r2, r3
 80083ae:	9200      	str	r2, [sp, #0]
 80083b0:	9a06      	ldr	r2, [sp, #24]
 80083b2:	2101      	movs	r1, #1
 80083b4:	441a      	add	r2, r3
 80083b6:	4648      	mov	r0, r9
 80083b8:	9206      	str	r2, [sp, #24]
 80083ba:	f000 fbc1 	bl	8008b40 <__i2b>
 80083be:	4605      	mov	r5, r0
 80083c0:	b166      	cbz	r6, 80083dc <_dtoa_r+0x74c>
 80083c2:	9b06      	ldr	r3, [sp, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dd09      	ble.n	80083dc <_dtoa_r+0x74c>
 80083c8:	42b3      	cmp	r3, r6
 80083ca:	9a00      	ldr	r2, [sp, #0]
 80083cc:	bfa8      	it	ge
 80083ce:	4633      	movge	r3, r6
 80083d0:	1ad2      	subs	r2, r2, r3
 80083d2:	9200      	str	r2, [sp, #0]
 80083d4:	9a06      	ldr	r2, [sp, #24]
 80083d6:	1af6      	subs	r6, r6, r3
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	9306      	str	r3, [sp, #24]
 80083dc:	9b08      	ldr	r3, [sp, #32]
 80083de:	b30b      	cbz	r3, 8008424 <_dtoa_r+0x794>
 80083e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 80c6 	beq.w	8008574 <_dtoa_r+0x8e4>
 80083e8:	2c00      	cmp	r4, #0
 80083ea:	f000 80c0 	beq.w	800856e <_dtoa_r+0x8de>
 80083ee:	4629      	mov	r1, r5
 80083f0:	4622      	mov	r2, r4
 80083f2:	4648      	mov	r0, r9
 80083f4:	f000 fc5c 	bl	8008cb0 <__pow5mult>
 80083f8:	9a02      	ldr	r2, [sp, #8]
 80083fa:	4601      	mov	r1, r0
 80083fc:	4605      	mov	r5, r0
 80083fe:	4648      	mov	r0, r9
 8008400:	f000 fbb4 	bl	8008b6c <__multiply>
 8008404:	9902      	ldr	r1, [sp, #8]
 8008406:	4680      	mov	r8, r0
 8008408:	4648      	mov	r0, r9
 800840a:	f000 fa9b 	bl	8008944 <_Bfree>
 800840e:	9b08      	ldr	r3, [sp, #32]
 8008410:	1b1b      	subs	r3, r3, r4
 8008412:	9308      	str	r3, [sp, #32]
 8008414:	f000 80b1 	beq.w	800857a <_dtoa_r+0x8ea>
 8008418:	9a08      	ldr	r2, [sp, #32]
 800841a:	4641      	mov	r1, r8
 800841c:	4648      	mov	r0, r9
 800841e:	f000 fc47 	bl	8008cb0 <__pow5mult>
 8008422:	9002      	str	r0, [sp, #8]
 8008424:	2101      	movs	r1, #1
 8008426:	4648      	mov	r0, r9
 8008428:	f000 fb8a 	bl	8008b40 <__i2b>
 800842c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800842e:	4604      	mov	r4, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 81d8 	beq.w	80087e6 <_dtoa_r+0xb56>
 8008436:	461a      	mov	r2, r3
 8008438:	4601      	mov	r1, r0
 800843a:	4648      	mov	r0, r9
 800843c:	f000 fc38 	bl	8008cb0 <__pow5mult>
 8008440:	9b07      	ldr	r3, [sp, #28]
 8008442:	2b01      	cmp	r3, #1
 8008444:	4604      	mov	r4, r0
 8008446:	f300 809f 	bgt.w	8008588 <_dtoa_r+0x8f8>
 800844a:	9b04      	ldr	r3, [sp, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f040 8097 	bne.w	8008580 <_dtoa_r+0x8f0>
 8008452:	9b05      	ldr	r3, [sp, #20]
 8008454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008458:	2b00      	cmp	r3, #0
 800845a:	f040 8093 	bne.w	8008584 <_dtoa_r+0x8f4>
 800845e:	9b05      	ldr	r3, [sp, #20]
 8008460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008464:	0d1b      	lsrs	r3, r3, #20
 8008466:	051b      	lsls	r3, r3, #20
 8008468:	b133      	cbz	r3, 8008478 <_dtoa_r+0x7e8>
 800846a:	9b00      	ldr	r3, [sp, #0]
 800846c:	3301      	adds	r3, #1
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	9b06      	ldr	r3, [sp, #24]
 8008472:	3301      	adds	r3, #1
 8008474:	9306      	str	r3, [sp, #24]
 8008476:	2301      	movs	r3, #1
 8008478:	9308      	str	r3, [sp, #32]
 800847a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 81b8 	beq.w	80087f2 <_dtoa_r+0xb62>
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008488:	6918      	ldr	r0, [r3, #16]
 800848a:	f000 fb0d 	bl	8008aa8 <__hi0bits>
 800848e:	f1c0 0020 	rsb	r0, r0, #32
 8008492:	9b06      	ldr	r3, [sp, #24]
 8008494:	4418      	add	r0, r3
 8008496:	f010 001f 	ands.w	r0, r0, #31
 800849a:	f000 8082 	beq.w	80085a2 <_dtoa_r+0x912>
 800849e:	f1c0 0320 	rsb	r3, r0, #32
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	dd73      	ble.n	800858e <_dtoa_r+0x8fe>
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	f1c0 001c 	rsb	r0, r0, #28
 80084ac:	4403      	add	r3, r0
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	9b06      	ldr	r3, [sp, #24]
 80084b2:	4403      	add	r3, r0
 80084b4:	4406      	add	r6, r0
 80084b6:	9306      	str	r3, [sp, #24]
 80084b8:	9b00      	ldr	r3, [sp, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dd05      	ble.n	80084ca <_dtoa_r+0x83a>
 80084be:	9902      	ldr	r1, [sp, #8]
 80084c0:	461a      	mov	r2, r3
 80084c2:	4648      	mov	r0, r9
 80084c4:	f000 fc4e 	bl	8008d64 <__lshift>
 80084c8:	9002      	str	r0, [sp, #8]
 80084ca:	9b06      	ldr	r3, [sp, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	dd05      	ble.n	80084dc <_dtoa_r+0x84c>
 80084d0:	4621      	mov	r1, r4
 80084d2:	461a      	mov	r2, r3
 80084d4:	4648      	mov	r0, r9
 80084d6:	f000 fc45 	bl	8008d64 <__lshift>
 80084da:	4604      	mov	r4, r0
 80084dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d061      	beq.n	80085a6 <_dtoa_r+0x916>
 80084e2:	9802      	ldr	r0, [sp, #8]
 80084e4:	4621      	mov	r1, r4
 80084e6:	f000 fca9 	bl	8008e3c <__mcmp>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	da5b      	bge.n	80085a6 <_dtoa_r+0x916>
 80084ee:	2300      	movs	r3, #0
 80084f0:	9902      	ldr	r1, [sp, #8]
 80084f2:	220a      	movs	r2, #10
 80084f4:	4648      	mov	r0, r9
 80084f6:	f000 fa47 	bl	8008988 <__multadd>
 80084fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fc:	9002      	str	r0, [sp, #8]
 80084fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 8177 	beq.w	80087f6 <_dtoa_r+0xb66>
 8008508:	4629      	mov	r1, r5
 800850a:	2300      	movs	r3, #0
 800850c:	220a      	movs	r2, #10
 800850e:	4648      	mov	r0, r9
 8008510:	f000 fa3a 	bl	8008988 <__multadd>
 8008514:	f1bb 0f00 	cmp.w	fp, #0
 8008518:	4605      	mov	r5, r0
 800851a:	dc6f      	bgt.n	80085fc <_dtoa_r+0x96c>
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	2b02      	cmp	r3, #2
 8008520:	dc49      	bgt.n	80085b6 <_dtoa_r+0x926>
 8008522:	e06b      	b.n	80085fc <_dtoa_r+0x96c>
 8008524:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800852a:	e73c      	b.n	80083a6 <_dtoa_r+0x716>
 800852c:	3fe00000 	.word	0x3fe00000
 8008530:	40240000 	.word	0x40240000
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	1e5c      	subs	r4, r3, #1
 8008538:	9b08      	ldr	r3, [sp, #32]
 800853a:	42a3      	cmp	r3, r4
 800853c:	db09      	blt.n	8008552 <_dtoa_r+0x8c2>
 800853e:	1b1c      	subs	r4, r3, r4
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f6bf af30 	bge.w	80083a8 <_dtoa_r+0x718>
 8008548:	9b00      	ldr	r3, [sp, #0]
 800854a:	9a03      	ldr	r2, [sp, #12]
 800854c:	1a9e      	subs	r6, r3, r2
 800854e:	2300      	movs	r3, #0
 8008550:	e72b      	b.n	80083aa <_dtoa_r+0x71a>
 8008552:	9b08      	ldr	r3, [sp, #32]
 8008554:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008556:	9408      	str	r4, [sp, #32]
 8008558:	1ae3      	subs	r3, r4, r3
 800855a:	441a      	add	r2, r3
 800855c:	9e00      	ldr	r6, [sp, #0]
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	920d      	str	r2, [sp, #52]	@ 0x34
 8008562:	2400      	movs	r4, #0
 8008564:	e721      	b.n	80083aa <_dtoa_r+0x71a>
 8008566:	9c08      	ldr	r4, [sp, #32]
 8008568:	9e00      	ldr	r6, [sp, #0]
 800856a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800856c:	e728      	b.n	80083c0 <_dtoa_r+0x730>
 800856e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008572:	e751      	b.n	8008418 <_dtoa_r+0x788>
 8008574:	9a08      	ldr	r2, [sp, #32]
 8008576:	9902      	ldr	r1, [sp, #8]
 8008578:	e750      	b.n	800841c <_dtoa_r+0x78c>
 800857a:	f8cd 8008 	str.w	r8, [sp, #8]
 800857e:	e751      	b.n	8008424 <_dtoa_r+0x794>
 8008580:	2300      	movs	r3, #0
 8008582:	e779      	b.n	8008478 <_dtoa_r+0x7e8>
 8008584:	9b04      	ldr	r3, [sp, #16]
 8008586:	e777      	b.n	8008478 <_dtoa_r+0x7e8>
 8008588:	2300      	movs	r3, #0
 800858a:	9308      	str	r3, [sp, #32]
 800858c:	e779      	b.n	8008482 <_dtoa_r+0x7f2>
 800858e:	d093      	beq.n	80084b8 <_dtoa_r+0x828>
 8008590:	9a00      	ldr	r2, [sp, #0]
 8008592:	331c      	adds	r3, #28
 8008594:	441a      	add	r2, r3
 8008596:	9200      	str	r2, [sp, #0]
 8008598:	9a06      	ldr	r2, [sp, #24]
 800859a:	441a      	add	r2, r3
 800859c:	441e      	add	r6, r3
 800859e:	9206      	str	r2, [sp, #24]
 80085a0:	e78a      	b.n	80084b8 <_dtoa_r+0x828>
 80085a2:	4603      	mov	r3, r0
 80085a4:	e7f4      	b.n	8008590 <_dtoa_r+0x900>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	46b8      	mov	r8, r7
 80085ac:	dc20      	bgt.n	80085f0 <_dtoa_r+0x960>
 80085ae:	469b      	mov	fp, r3
 80085b0:	9b07      	ldr	r3, [sp, #28]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	dd1e      	ble.n	80085f4 <_dtoa_r+0x964>
 80085b6:	f1bb 0f00 	cmp.w	fp, #0
 80085ba:	f47f adb1 	bne.w	8008120 <_dtoa_r+0x490>
 80085be:	4621      	mov	r1, r4
 80085c0:	465b      	mov	r3, fp
 80085c2:	2205      	movs	r2, #5
 80085c4:	4648      	mov	r0, r9
 80085c6:	f000 f9df 	bl	8008988 <__multadd>
 80085ca:	4601      	mov	r1, r0
 80085cc:	4604      	mov	r4, r0
 80085ce:	9802      	ldr	r0, [sp, #8]
 80085d0:	f000 fc34 	bl	8008e3c <__mcmp>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f77f ada3 	ble.w	8008120 <_dtoa_r+0x490>
 80085da:	4656      	mov	r6, sl
 80085dc:	2331      	movs	r3, #49	@ 0x31
 80085de:	f806 3b01 	strb.w	r3, [r6], #1
 80085e2:	f108 0801 	add.w	r8, r8, #1
 80085e6:	e59f      	b.n	8008128 <_dtoa_r+0x498>
 80085e8:	9c03      	ldr	r4, [sp, #12]
 80085ea:	46b8      	mov	r8, r7
 80085ec:	4625      	mov	r5, r4
 80085ee:	e7f4      	b.n	80085da <_dtoa_r+0x94a>
 80085f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80085f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8101 	beq.w	80087fe <_dtoa_r+0xb6e>
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	dd05      	ble.n	800860c <_dtoa_r+0x97c>
 8008600:	4629      	mov	r1, r5
 8008602:	4632      	mov	r2, r6
 8008604:	4648      	mov	r0, r9
 8008606:	f000 fbad 	bl	8008d64 <__lshift>
 800860a:	4605      	mov	r5, r0
 800860c:	9b08      	ldr	r3, [sp, #32]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d05c      	beq.n	80086cc <_dtoa_r+0xa3c>
 8008612:	6869      	ldr	r1, [r5, #4]
 8008614:	4648      	mov	r0, r9
 8008616:	f000 f955 	bl	80088c4 <_Balloc>
 800861a:	4606      	mov	r6, r0
 800861c:	b928      	cbnz	r0, 800862a <_dtoa_r+0x99a>
 800861e:	4b82      	ldr	r3, [pc, #520]	@ (8008828 <_dtoa_r+0xb98>)
 8008620:	4602      	mov	r2, r0
 8008622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008626:	f7ff bb4a 	b.w	8007cbe <_dtoa_r+0x2e>
 800862a:	692a      	ldr	r2, [r5, #16]
 800862c:	3202      	adds	r2, #2
 800862e:	0092      	lsls	r2, r2, #2
 8008630:	f105 010c 	add.w	r1, r5, #12
 8008634:	300c      	adds	r0, #12
 8008636:	f7ff fa8c 	bl	8007b52 <memcpy>
 800863a:	2201      	movs	r2, #1
 800863c:	4631      	mov	r1, r6
 800863e:	4648      	mov	r0, r9
 8008640:	f000 fb90 	bl	8008d64 <__lshift>
 8008644:	f10a 0301 	add.w	r3, sl, #1
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	eb0a 030b 	add.w	r3, sl, fp
 800864e:	9308      	str	r3, [sp, #32]
 8008650:	9b04      	ldr	r3, [sp, #16]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	462f      	mov	r7, r5
 8008658:	9306      	str	r3, [sp, #24]
 800865a:	4605      	mov	r5, r0
 800865c:	9b00      	ldr	r3, [sp, #0]
 800865e:	9802      	ldr	r0, [sp, #8]
 8008660:	4621      	mov	r1, r4
 8008662:	f103 3bff 	add.w	fp, r3, #4294967295
 8008666:	f7ff fa89 	bl	8007b7c <quorem>
 800866a:	4603      	mov	r3, r0
 800866c:	3330      	adds	r3, #48	@ 0x30
 800866e:	9003      	str	r0, [sp, #12]
 8008670:	4639      	mov	r1, r7
 8008672:	9802      	ldr	r0, [sp, #8]
 8008674:	9309      	str	r3, [sp, #36]	@ 0x24
 8008676:	f000 fbe1 	bl	8008e3c <__mcmp>
 800867a:	462a      	mov	r2, r5
 800867c:	9004      	str	r0, [sp, #16]
 800867e:	4621      	mov	r1, r4
 8008680:	4648      	mov	r0, r9
 8008682:	f000 fbf7 	bl	8008e74 <__mdiff>
 8008686:	68c2      	ldr	r2, [r0, #12]
 8008688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800868a:	4606      	mov	r6, r0
 800868c:	bb02      	cbnz	r2, 80086d0 <_dtoa_r+0xa40>
 800868e:	4601      	mov	r1, r0
 8008690:	9802      	ldr	r0, [sp, #8]
 8008692:	f000 fbd3 	bl	8008e3c <__mcmp>
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	4602      	mov	r2, r0
 800869a:	4631      	mov	r1, r6
 800869c:	4648      	mov	r0, r9
 800869e:	920c      	str	r2, [sp, #48]	@ 0x30
 80086a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086a2:	f000 f94f 	bl	8008944 <_Bfree>
 80086a6:	9b07      	ldr	r3, [sp, #28]
 80086a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086aa:	9e00      	ldr	r6, [sp, #0]
 80086ac:	ea42 0103 	orr.w	r1, r2, r3
 80086b0:	9b06      	ldr	r3, [sp, #24]
 80086b2:	4319      	orrs	r1, r3
 80086b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b6:	d10d      	bne.n	80086d4 <_dtoa_r+0xa44>
 80086b8:	2b39      	cmp	r3, #57	@ 0x39
 80086ba:	d027      	beq.n	800870c <_dtoa_r+0xa7c>
 80086bc:	9a04      	ldr	r2, [sp, #16]
 80086be:	2a00      	cmp	r2, #0
 80086c0:	dd01      	ble.n	80086c6 <_dtoa_r+0xa36>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	3331      	adds	r3, #49	@ 0x31
 80086c6:	f88b 3000 	strb.w	r3, [fp]
 80086ca:	e52e      	b.n	800812a <_dtoa_r+0x49a>
 80086cc:	4628      	mov	r0, r5
 80086ce:	e7b9      	b.n	8008644 <_dtoa_r+0x9b4>
 80086d0:	2201      	movs	r2, #1
 80086d2:	e7e2      	b.n	800869a <_dtoa_r+0xa0a>
 80086d4:	9904      	ldr	r1, [sp, #16]
 80086d6:	2900      	cmp	r1, #0
 80086d8:	db04      	blt.n	80086e4 <_dtoa_r+0xa54>
 80086da:	9807      	ldr	r0, [sp, #28]
 80086dc:	4301      	orrs	r1, r0
 80086de:	9806      	ldr	r0, [sp, #24]
 80086e0:	4301      	orrs	r1, r0
 80086e2:	d120      	bne.n	8008726 <_dtoa_r+0xa96>
 80086e4:	2a00      	cmp	r2, #0
 80086e6:	ddee      	ble.n	80086c6 <_dtoa_r+0xa36>
 80086e8:	9902      	ldr	r1, [sp, #8]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	2201      	movs	r2, #1
 80086ee:	4648      	mov	r0, r9
 80086f0:	f000 fb38 	bl	8008d64 <__lshift>
 80086f4:	4621      	mov	r1, r4
 80086f6:	9002      	str	r0, [sp, #8]
 80086f8:	f000 fba0 	bl	8008e3c <__mcmp>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	dc02      	bgt.n	8008708 <_dtoa_r+0xa78>
 8008702:	d1e0      	bne.n	80086c6 <_dtoa_r+0xa36>
 8008704:	07da      	lsls	r2, r3, #31
 8008706:	d5de      	bpl.n	80086c6 <_dtoa_r+0xa36>
 8008708:	2b39      	cmp	r3, #57	@ 0x39
 800870a:	d1da      	bne.n	80086c2 <_dtoa_r+0xa32>
 800870c:	2339      	movs	r3, #57	@ 0x39
 800870e:	f88b 3000 	strb.w	r3, [fp]
 8008712:	4633      	mov	r3, r6
 8008714:	461e      	mov	r6, r3
 8008716:	3b01      	subs	r3, #1
 8008718:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800871c:	2a39      	cmp	r2, #57	@ 0x39
 800871e:	d04e      	beq.n	80087be <_dtoa_r+0xb2e>
 8008720:	3201      	adds	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
 8008724:	e501      	b.n	800812a <_dtoa_r+0x49a>
 8008726:	2a00      	cmp	r2, #0
 8008728:	dd03      	ble.n	8008732 <_dtoa_r+0xaa2>
 800872a:	2b39      	cmp	r3, #57	@ 0x39
 800872c:	d0ee      	beq.n	800870c <_dtoa_r+0xa7c>
 800872e:	3301      	adds	r3, #1
 8008730:	e7c9      	b.n	80086c6 <_dtoa_r+0xa36>
 8008732:	9a00      	ldr	r2, [sp, #0]
 8008734:	9908      	ldr	r1, [sp, #32]
 8008736:	f802 3c01 	strb.w	r3, [r2, #-1]
 800873a:	428a      	cmp	r2, r1
 800873c:	d028      	beq.n	8008790 <_dtoa_r+0xb00>
 800873e:	9902      	ldr	r1, [sp, #8]
 8008740:	2300      	movs	r3, #0
 8008742:	220a      	movs	r2, #10
 8008744:	4648      	mov	r0, r9
 8008746:	f000 f91f 	bl	8008988 <__multadd>
 800874a:	42af      	cmp	r7, r5
 800874c:	9002      	str	r0, [sp, #8]
 800874e:	f04f 0300 	mov.w	r3, #0
 8008752:	f04f 020a 	mov.w	r2, #10
 8008756:	4639      	mov	r1, r7
 8008758:	4648      	mov	r0, r9
 800875a:	d107      	bne.n	800876c <_dtoa_r+0xadc>
 800875c:	f000 f914 	bl	8008988 <__multadd>
 8008760:	4607      	mov	r7, r0
 8008762:	4605      	mov	r5, r0
 8008764:	9b00      	ldr	r3, [sp, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	e777      	b.n	800865c <_dtoa_r+0x9cc>
 800876c:	f000 f90c 	bl	8008988 <__multadd>
 8008770:	4629      	mov	r1, r5
 8008772:	4607      	mov	r7, r0
 8008774:	2300      	movs	r3, #0
 8008776:	220a      	movs	r2, #10
 8008778:	4648      	mov	r0, r9
 800877a:	f000 f905 	bl	8008988 <__multadd>
 800877e:	4605      	mov	r5, r0
 8008780:	e7f0      	b.n	8008764 <_dtoa_r+0xad4>
 8008782:	f1bb 0f00 	cmp.w	fp, #0
 8008786:	bfcc      	ite	gt
 8008788:	465e      	movgt	r6, fp
 800878a:	2601      	movle	r6, #1
 800878c:	4456      	add	r6, sl
 800878e:	2700      	movs	r7, #0
 8008790:	9902      	ldr	r1, [sp, #8]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	2201      	movs	r2, #1
 8008796:	4648      	mov	r0, r9
 8008798:	f000 fae4 	bl	8008d64 <__lshift>
 800879c:	4621      	mov	r1, r4
 800879e:	9002      	str	r0, [sp, #8]
 80087a0:	f000 fb4c 	bl	8008e3c <__mcmp>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	dcb4      	bgt.n	8008712 <_dtoa_r+0xa82>
 80087a8:	d102      	bne.n	80087b0 <_dtoa_r+0xb20>
 80087aa:	9b00      	ldr	r3, [sp, #0]
 80087ac:	07db      	lsls	r3, r3, #31
 80087ae:	d4b0      	bmi.n	8008712 <_dtoa_r+0xa82>
 80087b0:	4633      	mov	r3, r6
 80087b2:	461e      	mov	r6, r3
 80087b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087b8:	2a30      	cmp	r2, #48	@ 0x30
 80087ba:	d0fa      	beq.n	80087b2 <_dtoa_r+0xb22>
 80087bc:	e4b5      	b.n	800812a <_dtoa_r+0x49a>
 80087be:	459a      	cmp	sl, r3
 80087c0:	d1a8      	bne.n	8008714 <_dtoa_r+0xa84>
 80087c2:	2331      	movs	r3, #49	@ 0x31
 80087c4:	f108 0801 	add.w	r8, r8, #1
 80087c8:	f88a 3000 	strb.w	r3, [sl]
 80087cc:	e4ad      	b.n	800812a <_dtoa_r+0x49a>
 80087ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800882c <_dtoa_r+0xb9c>
 80087d4:	b11b      	cbz	r3, 80087de <_dtoa_r+0xb4e>
 80087d6:	f10a 0308 	add.w	r3, sl, #8
 80087da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	4650      	mov	r0, sl
 80087e0:	b017      	add	sp, #92	@ 0x5c
 80087e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e6:	9b07      	ldr	r3, [sp, #28]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	f77f ae2e 	ble.w	800844a <_dtoa_r+0x7ba>
 80087ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087f0:	9308      	str	r3, [sp, #32]
 80087f2:	2001      	movs	r0, #1
 80087f4:	e64d      	b.n	8008492 <_dtoa_r+0x802>
 80087f6:	f1bb 0f00 	cmp.w	fp, #0
 80087fa:	f77f aed9 	ble.w	80085b0 <_dtoa_r+0x920>
 80087fe:	4656      	mov	r6, sl
 8008800:	9802      	ldr	r0, [sp, #8]
 8008802:	4621      	mov	r1, r4
 8008804:	f7ff f9ba 	bl	8007b7c <quorem>
 8008808:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800880c:	f806 3b01 	strb.w	r3, [r6], #1
 8008810:	eba6 020a 	sub.w	r2, r6, sl
 8008814:	4593      	cmp	fp, r2
 8008816:	ddb4      	ble.n	8008782 <_dtoa_r+0xaf2>
 8008818:	9902      	ldr	r1, [sp, #8]
 800881a:	2300      	movs	r3, #0
 800881c:	220a      	movs	r2, #10
 800881e:	4648      	mov	r0, r9
 8008820:	f000 f8b2 	bl	8008988 <__multadd>
 8008824:	9002      	str	r0, [sp, #8]
 8008826:	e7eb      	b.n	8008800 <_dtoa_r+0xb70>
 8008828:	0800ce19 	.word	0x0800ce19
 800882c:	0800cd9d 	.word	0x0800cd9d

08008830 <_free_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4605      	mov	r5, r0
 8008834:	2900      	cmp	r1, #0
 8008836:	d041      	beq.n	80088bc <_free_r+0x8c>
 8008838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800883c:	1f0c      	subs	r4, r1, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfb8      	it	lt
 8008842:	18e4      	addlt	r4, r4, r3
 8008844:	f7fe f85a 	bl	80068fc <__malloc_lock>
 8008848:	4a1d      	ldr	r2, [pc, #116]	@ (80088c0 <_free_r+0x90>)
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	b933      	cbnz	r3, 800885c <_free_r+0x2c>
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	6014      	str	r4, [r2, #0]
 8008852:	4628      	mov	r0, r5
 8008854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008858:	f7fe b856 	b.w	8006908 <__malloc_unlock>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d908      	bls.n	8008872 <_free_r+0x42>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	1821      	adds	r1, r4, r0
 8008864:	428b      	cmp	r3, r1
 8008866:	bf01      	itttt	eq
 8008868:	6819      	ldreq	r1, [r3, #0]
 800886a:	685b      	ldreq	r3, [r3, #4]
 800886c:	1809      	addeq	r1, r1, r0
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	e7ed      	b.n	800884e <_free_r+0x1e>
 8008872:	461a      	mov	r2, r3
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	b10b      	cbz	r3, 800887c <_free_r+0x4c>
 8008878:	42a3      	cmp	r3, r4
 800887a:	d9fa      	bls.n	8008872 <_free_r+0x42>
 800887c:	6811      	ldr	r1, [r2, #0]
 800887e:	1850      	adds	r0, r2, r1
 8008880:	42a0      	cmp	r0, r4
 8008882:	d10b      	bne.n	800889c <_free_r+0x6c>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	4401      	add	r1, r0
 8008888:	1850      	adds	r0, r2, r1
 800888a:	4283      	cmp	r3, r0
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	d1e0      	bne.n	8008852 <_free_r+0x22>
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	6053      	str	r3, [r2, #4]
 8008896:	4408      	add	r0, r1
 8008898:	6010      	str	r0, [r2, #0]
 800889a:	e7da      	b.n	8008852 <_free_r+0x22>
 800889c:	d902      	bls.n	80088a4 <_free_r+0x74>
 800889e:	230c      	movs	r3, #12
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	e7d6      	b.n	8008852 <_free_r+0x22>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	1821      	adds	r1, r4, r0
 80088a8:	428b      	cmp	r3, r1
 80088aa:	bf04      	itt	eq
 80088ac:	6819      	ldreq	r1, [r3, #0]
 80088ae:	685b      	ldreq	r3, [r3, #4]
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	bf04      	itt	eq
 80088b4:	1809      	addeq	r1, r1, r0
 80088b6:	6021      	streq	r1, [r4, #0]
 80088b8:	6054      	str	r4, [r2, #4]
 80088ba:	e7ca      	b.n	8008852 <_free_r+0x22>
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	2005c508 	.word	0x2005c508

080088c4 <_Balloc>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	69c6      	ldr	r6, [r0, #28]
 80088c8:	4604      	mov	r4, r0
 80088ca:	460d      	mov	r5, r1
 80088cc:	b976      	cbnz	r6, 80088ec <_Balloc+0x28>
 80088ce:	2010      	movs	r0, #16
 80088d0:	f7fd ff6a 	bl	80067a8 <malloc>
 80088d4:	4602      	mov	r2, r0
 80088d6:	61e0      	str	r0, [r4, #28]
 80088d8:	b920      	cbnz	r0, 80088e4 <_Balloc+0x20>
 80088da:	4b18      	ldr	r3, [pc, #96]	@ (800893c <_Balloc+0x78>)
 80088dc:	4818      	ldr	r0, [pc, #96]	@ (8008940 <_Balloc+0x7c>)
 80088de:	216b      	movs	r1, #107	@ 0x6b
 80088e0:	f001 ff1e 	bl	800a720 <__assert_func>
 80088e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088e8:	6006      	str	r6, [r0, #0]
 80088ea:	60c6      	str	r6, [r0, #12]
 80088ec:	69e6      	ldr	r6, [r4, #28]
 80088ee:	68f3      	ldr	r3, [r6, #12]
 80088f0:	b183      	cbz	r3, 8008914 <_Balloc+0x50>
 80088f2:	69e3      	ldr	r3, [r4, #28]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088fa:	b9b8      	cbnz	r0, 800892c <_Balloc+0x68>
 80088fc:	2101      	movs	r1, #1
 80088fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008902:	1d72      	adds	r2, r6, #5
 8008904:	0092      	lsls	r2, r2, #2
 8008906:	4620      	mov	r0, r4
 8008908:	f001 ff28 	bl	800a75c <_calloc_r>
 800890c:	b160      	cbz	r0, 8008928 <_Balloc+0x64>
 800890e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008912:	e00e      	b.n	8008932 <_Balloc+0x6e>
 8008914:	2221      	movs	r2, #33	@ 0x21
 8008916:	2104      	movs	r1, #4
 8008918:	4620      	mov	r0, r4
 800891a:	f001 ff1f 	bl	800a75c <_calloc_r>
 800891e:	69e3      	ldr	r3, [r4, #28]
 8008920:	60f0      	str	r0, [r6, #12]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e4      	bne.n	80088f2 <_Balloc+0x2e>
 8008928:	2000      	movs	r0, #0
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	6802      	ldr	r2, [r0, #0]
 800892e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008932:	2300      	movs	r3, #0
 8008934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008938:	e7f7      	b.n	800892a <_Balloc+0x66>
 800893a:	bf00      	nop
 800893c:	0800cdaa 	.word	0x0800cdaa
 8008940:	0800ce2a 	.word	0x0800ce2a

08008944 <_Bfree>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	69c6      	ldr	r6, [r0, #28]
 8008948:	4605      	mov	r5, r0
 800894a:	460c      	mov	r4, r1
 800894c:	b976      	cbnz	r6, 800896c <_Bfree+0x28>
 800894e:	2010      	movs	r0, #16
 8008950:	f7fd ff2a 	bl	80067a8 <malloc>
 8008954:	4602      	mov	r2, r0
 8008956:	61e8      	str	r0, [r5, #28]
 8008958:	b920      	cbnz	r0, 8008964 <_Bfree+0x20>
 800895a:	4b09      	ldr	r3, [pc, #36]	@ (8008980 <_Bfree+0x3c>)
 800895c:	4809      	ldr	r0, [pc, #36]	@ (8008984 <_Bfree+0x40>)
 800895e:	218f      	movs	r1, #143	@ 0x8f
 8008960:	f001 fede 	bl	800a720 <__assert_func>
 8008964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008968:	6006      	str	r6, [r0, #0]
 800896a:	60c6      	str	r6, [r0, #12]
 800896c:	b13c      	cbz	r4, 800897e <_Bfree+0x3a>
 800896e:	69eb      	ldr	r3, [r5, #28]
 8008970:	6862      	ldr	r2, [r4, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008978:	6021      	str	r1, [r4, #0]
 800897a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	0800cdaa 	.word	0x0800cdaa
 8008984:	0800ce2a 	.word	0x0800ce2a

08008988 <__multadd>:
 8008988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898c:	690d      	ldr	r5, [r1, #16]
 800898e:	4607      	mov	r7, r0
 8008990:	460c      	mov	r4, r1
 8008992:	461e      	mov	r6, r3
 8008994:	f101 0c14 	add.w	ip, r1, #20
 8008998:	2000      	movs	r0, #0
 800899a:	f8dc 3000 	ldr.w	r3, [ip]
 800899e:	b299      	uxth	r1, r3
 80089a0:	fb02 6101 	mla	r1, r2, r1, r6
 80089a4:	0c1e      	lsrs	r6, r3, #16
 80089a6:	0c0b      	lsrs	r3, r1, #16
 80089a8:	fb02 3306 	mla	r3, r2, r6, r3
 80089ac:	b289      	uxth	r1, r1
 80089ae:	3001      	adds	r0, #1
 80089b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089b4:	4285      	cmp	r5, r0
 80089b6:	f84c 1b04 	str.w	r1, [ip], #4
 80089ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089be:	dcec      	bgt.n	800899a <__multadd+0x12>
 80089c0:	b30e      	cbz	r6, 8008a06 <__multadd+0x7e>
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	42ab      	cmp	r3, r5
 80089c6:	dc19      	bgt.n	80089fc <__multadd+0x74>
 80089c8:	6861      	ldr	r1, [r4, #4]
 80089ca:	4638      	mov	r0, r7
 80089cc:	3101      	adds	r1, #1
 80089ce:	f7ff ff79 	bl	80088c4 <_Balloc>
 80089d2:	4680      	mov	r8, r0
 80089d4:	b928      	cbnz	r0, 80089e2 <__multadd+0x5a>
 80089d6:	4602      	mov	r2, r0
 80089d8:	4b0c      	ldr	r3, [pc, #48]	@ (8008a0c <__multadd+0x84>)
 80089da:	480d      	ldr	r0, [pc, #52]	@ (8008a10 <__multadd+0x88>)
 80089dc:	21ba      	movs	r1, #186	@ 0xba
 80089de:	f001 fe9f 	bl	800a720 <__assert_func>
 80089e2:	6922      	ldr	r2, [r4, #16]
 80089e4:	3202      	adds	r2, #2
 80089e6:	f104 010c 	add.w	r1, r4, #12
 80089ea:	0092      	lsls	r2, r2, #2
 80089ec:	300c      	adds	r0, #12
 80089ee:	f7ff f8b0 	bl	8007b52 <memcpy>
 80089f2:	4621      	mov	r1, r4
 80089f4:	4638      	mov	r0, r7
 80089f6:	f7ff ffa5 	bl	8008944 <_Bfree>
 80089fa:	4644      	mov	r4, r8
 80089fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a00:	3501      	adds	r5, #1
 8008a02:	615e      	str	r6, [r3, #20]
 8008a04:	6125      	str	r5, [r4, #16]
 8008a06:	4620      	mov	r0, r4
 8008a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0c:	0800ce19 	.word	0x0800ce19
 8008a10:	0800ce2a 	.word	0x0800ce2a

08008a14 <__s2b>:
 8008a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4615      	mov	r5, r2
 8008a1c:	461f      	mov	r7, r3
 8008a1e:	2209      	movs	r2, #9
 8008a20:	3308      	adds	r3, #8
 8008a22:	4606      	mov	r6, r0
 8008a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a28:	2100      	movs	r1, #0
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	db09      	blt.n	8008a44 <__s2b+0x30>
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7ff ff47 	bl	80088c4 <_Balloc>
 8008a36:	b940      	cbnz	r0, 8008a4a <__s2b+0x36>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	4b19      	ldr	r3, [pc, #100]	@ (8008aa0 <__s2b+0x8c>)
 8008a3c:	4819      	ldr	r0, [pc, #100]	@ (8008aa4 <__s2b+0x90>)
 8008a3e:	21d3      	movs	r1, #211	@ 0xd3
 8008a40:	f001 fe6e 	bl	800a720 <__assert_func>
 8008a44:	0052      	lsls	r2, r2, #1
 8008a46:	3101      	adds	r1, #1
 8008a48:	e7f0      	b.n	8008a2c <__s2b+0x18>
 8008a4a:	9b08      	ldr	r3, [sp, #32]
 8008a4c:	6143      	str	r3, [r0, #20]
 8008a4e:	2d09      	cmp	r5, #9
 8008a50:	f04f 0301 	mov.w	r3, #1
 8008a54:	6103      	str	r3, [r0, #16]
 8008a56:	dd16      	ble.n	8008a86 <__s2b+0x72>
 8008a58:	f104 0909 	add.w	r9, r4, #9
 8008a5c:	46c8      	mov	r8, r9
 8008a5e:	442c      	add	r4, r5
 8008a60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a64:	4601      	mov	r1, r0
 8008a66:	3b30      	subs	r3, #48	@ 0x30
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ff8c 	bl	8008988 <__multadd>
 8008a70:	45a0      	cmp	r8, r4
 8008a72:	d1f5      	bne.n	8008a60 <__s2b+0x4c>
 8008a74:	f1a5 0408 	sub.w	r4, r5, #8
 8008a78:	444c      	add	r4, r9
 8008a7a:	1b2d      	subs	r5, r5, r4
 8008a7c:	1963      	adds	r3, r4, r5
 8008a7e:	42bb      	cmp	r3, r7
 8008a80:	db04      	blt.n	8008a8c <__s2b+0x78>
 8008a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a86:	340a      	adds	r4, #10
 8008a88:	2509      	movs	r5, #9
 8008a8a:	e7f6      	b.n	8008a7a <__s2b+0x66>
 8008a8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a90:	4601      	mov	r1, r0
 8008a92:	3b30      	subs	r3, #48	@ 0x30
 8008a94:	220a      	movs	r2, #10
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7ff ff76 	bl	8008988 <__multadd>
 8008a9c:	e7ee      	b.n	8008a7c <__s2b+0x68>
 8008a9e:	bf00      	nop
 8008aa0:	0800ce19 	.word	0x0800ce19
 8008aa4:	0800ce2a 	.word	0x0800ce2a

08008aa8 <__hi0bits>:
 8008aa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008aac:	4603      	mov	r3, r0
 8008aae:	bf36      	itet	cc
 8008ab0:	0403      	lslcc	r3, r0, #16
 8008ab2:	2000      	movcs	r0, #0
 8008ab4:	2010      	movcc	r0, #16
 8008ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aba:	bf3c      	itt	cc
 8008abc:	021b      	lslcc	r3, r3, #8
 8008abe:	3008      	addcc	r0, #8
 8008ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ac4:	bf3c      	itt	cc
 8008ac6:	011b      	lslcc	r3, r3, #4
 8008ac8:	3004      	addcc	r0, #4
 8008aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ace:	bf3c      	itt	cc
 8008ad0:	009b      	lslcc	r3, r3, #2
 8008ad2:	3002      	addcc	r0, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	db05      	blt.n	8008ae4 <__hi0bits+0x3c>
 8008ad8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008adc:	f100 0001 	add.w	r0, r0, #1
 8008ae0:	bf08      	it	eq
 8008ae2:	2020      	moveq	r0, #32
 8008ae4:	4770      	bx	lr

08008ae6 <__lo0bits>:
 8008ae6:	6803      	ldr	r3, [r0, #0]
 8008ae8:	4602      	mov	r2, r0
 8008aea:	f013 0007 	ands.w	r0, r3, #7
 8008aee:	d00b      	beq.n	8008b08 <__lo0bits+0x22>
 8008af0:	07d9      	lsls	r1, r3, #31
 8008af2:	d421      	bmi.n	8008b38 <__lo0bits+0x52>
 8008af4:	0798      	lsls	r0, r3, #30
 8008af6:	bf49      	itett	mi
 8008af8:	085b      	lsrmi	r3, r3, #1
 8008afa:	089b      	lsrpl	r3, r3, #2
 8008afc:	2001      	movmi	r0, #1
 8008afe:	6013      	strmi	r3, [r2, #0]
 8008b00:	bf5c      	itt	pl
 8008b02:	6013      	strpl	r3, [r2, #0]
 8008b04:	2002      	movpl	r0, #2
 8008b06:	4770      	bx	lr
 8008b08:	b299      	uxth	r1, r3
 8008b0a:	b909      	cbnz	r1, 8008b10 <__lo0bits+0x2a>
 8008b0c:	0c1b      	lsrs	r3, r3, #16
 8008b0e:	2010      	movs	r0, #16
 8008b10:	b2d9      	uxtb	r1, r3
 8008b12:	b909      	cbnz	r1, 8008b18 <__lo0bits+0x32>
 8008b14:	3008      	adds	r0, #8
 8008b16:	0a1b      	lsrs	r3, r3, #8
 8008b18:	0719      	lsls	r1, r3, #28
 8008b1a:	bf04      	itt	eq
 8008b1c:	091b      	lsreq	r3, r3, #4
 8008b1e:	3004      	addeq	r0, #4
 8008b20:	0799      	lsls	r1, r3, #30
 8008b22:	bf04      	itt	eq
 8008b24:	089b      	lsreq	r3, r3, #2
 8008b26:	3002      	addeq	r0, #2
 8008b28:	07d9      	lsls	r1, r3, #31
 8008b2a:	d403      	bmi.n	8008b34 <__lo0bits+0x4e>
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	f100 0001 	add.w	r0, r0, #1
 8008b32:	d003      	beq.n	8008b3c <__lo0bits+0x56>
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	4770      	bx	lr
 8008b38:	2000      	movs	r0, #0
 8008b3a:	4770      	bx	lr
 8008b3c:	2020      	movs	r0, #32
 8008b3e:	4770      	bx	lr

08008b40 <__i2b>:
 8008b40:	b510      	push	{r4, lr}
 8008b42:	460c      	mov	r4, r1
 8008b44:	2101      	movs	r1, #1
 8008b46:	f7ff febd 	bl	80088c4 <_Balloc>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	b928      	cbnz	r0, 8008b5a <__i2b+0x1a>
 8008b4e:	4b05      	ldr	r3, [pc, #20]	@ (8008b64 <__i2b+0x24>)
 8008b50:	4805      	ldr	r0, [pc, #20]	@ (8008b68 <__i2b+0x28>)
 8008b52:	f240 1145 	movw	r1, #325	@ 0x145
 8008b56:	f001 fde3 	bl	800a720 <__assert_func>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	6144      	str	r4, [r0, #20]
 8008b5e:	6103      	str	r3, [r0, #16]
 8008b60:	bd10      	pop	{r4, pc}
 8008b62:	bf00      	nop
 8008b64:	0800ce19 	.word	0x0800ce19
 8008b68:	0800ce2a 	.word	0x0800ce2a

08008b6c <__multiply>:
 8008b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	4617      	mov	r7, r2
 8008b72:	690a      	ldr	r2, [r1, #16]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	bfa8      	it	ge
 8008b7a:	463b      	movge	r3, r7
 8008b7c:	4689      	mov	r9, r1
 8008b7e:	bfa4      	itt	ge
 8008b80:	460f      	movge	r7, r1
 8008b82:	4699      	movge	r9, r3
 8008b84:	693d      	ldr	r5, [r7, #16]
 8008b86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	eb05 060a 	add.w	r6, r5, sl
 8008b92:	42b3      	cmp	r3, r6
 8008b94:	b085      	sub	sp, #20
 8008b96:	bfb8      	it	lt
 8008b98:	3101      	addlt	r1, #1
 8008b9a:	f7ff fe93 	bl	80088c4 <_Balloc>
 8008b9e:	b930      	cbnz	r0, 8008bae <__multiply+0x42>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	4b41      	ldr	r3, [pc, #260]	@ (8008ca8 <__multiply+0x13c>)
 8008ba4:	4841      	ldr	r0, [pc, #260]	@ (8008cac <__multiply+0x140>)
 8008ba6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008baa:	f001 fdb9 	bl	800a720 <__assert_func>
 8008bae:	f100 0414 	add.w	r4, r0, #20
 8008bb2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008bb6:	4623      	mov	r3, r4
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4573      	cmp	r3, lr
 8008bbc:	d320      	bcc.n	8008c00 <__multiply+0x94>
 8008bbe:	f107 0814 	add.w	r8, r7, #20
 8008bc2:	f109 0114 	add.w	r1, r9, #20
 8008bc6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008bca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008bce:	9302      	str	r3, [sp, #8]
 8008bd0:	1beb      	subs	r3, r5, r7
 8008bd2:	3b15      	subs	r3, #21
 8008bd4:	f023 0303 	bic.w	r3, r3, #3
 8008bd8:	3304      	adds	r3, #4
 8008bda:	3715      	adds	r7, #21
 8008bdc:	42bd      	cmp	r5, r7
 8008bde:	bf38      	it	cc
 8008be0:	2304      	movcc	r3, #4
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	9b02      	ldr	r3, [sp, #8]
 8008be6:	9103      	str	r1, [sp, #12]
 8008be8:	428b      	cmp	r3, r1
 8008bea:	d80c      	bhi.n	8008c06 <__multiply+0x9a>
 8008bec:	2e00      	cmp	r6, #0
 8008bee:	dd03      	ble.n	8008bf8 <__multiply+0x8c>
 8008bf0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d055      	beq.n	8008ca4 <__multiply+0x138>
 8008bf8:	6106      	str	r6, [r0, #16]
 8008bfa:	b005      	add	sp, #20
 8008bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c00:	f843 2b04 	str.w	r2, [r3], #4
 8008c04:	e7d9      	b.n	8008bba <__multiply+0x4e>
 8008c06:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c0a:	f1ba 0f00 	cmp.w	sl, #0
 8008c0e:	d01f      	beq.n	8008c50 <__multiply+0xe4>
 8008c10:	46c4      	mov	ip, r8
 8008c12:	46a1      	mov	r9, r4
 8008c14:	2700      	movs	r7, #0
 8008c16:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c1a:	f8d9 3000 	ldr.w	r3, [r9]
 8008c1e:	fa1f fb82 	uxth.w	fp, r2
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c28:	443b      	add	r3, r7
 8008c2a:	f8d9 7000 	ldr.w	r7, [r9]
 8008c2e:	0c12      	lsrs	r2, r2, #16
 8008c30:	0c3f      	lsrs	r7, r7, #16
 8008c32:	fb0a 7202 	mla	r2, sl, r2, r7
 8008c36:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c40:	4565      	cmp	r5, ip
 8008c42:	f849 3b04 	str.w	r3, [r9], #4
 8008c46:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008c4a:	d8e4      	bhi.n	8008c16 <__multiply+0xaa>
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	50e7      	str	r7, [r4, r3]
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c56:	3104      	adds	r1, #4
 8008c58:	f1b9 0f00 	cmp.w	r9, #0
 8008c5c:	d020      	beq.n	8008ca0 <__multiply+0x134>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	4647      	mov	r7, r8
 8008c62:	46a4      	mov	ip, r4
 8008c64:	f04f 0a00 	mov.w	sl, #0
 8008c68:	f8b7 b000 	ldrh.w	fp, [r7]
 8008c6c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008c70:	fb09 220b 	mla	r2, r9, fp, r2
 8008c74:	4452      	add	r2, sl
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c7c:	f84c 3b04 	str.w	r3, [ip], #4
 8008c80:	f857 3b04 	ldr.w	r3, [r7], #4
 8008c84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c88:	f8bc 3000 	ldrh.w	r3, [ip]
 8008c8c:	fb09 330a 	mla	r3, r9, sl, r3
 8008c90:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008c94:	42bd      	cmp	r5, r7
 8008c96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c9a:	d8e5      	bhi.n	8008c68 <__multiply+0xfc>
 8008c9c:	9a01      	ldr	r2, [sp, #4]
 8008c9e:	50a3      	str	r3, [r4, r2]
 8008ca0:	3404      	adds	r4, #4
 8008ca2:	e79f      	b.n	8008be4 <__multiply+0x78>
 8008ca4:	3e01      	subs	r6, #1
 8008ca6:	e7a1      	b.n	8008bec <__multiply+0x80>
 8008ca8:	0800ce19 	.word	0x0800ce19
 8008cac:	0800ce2a 	.word	0x0800ce2a

08008cb0 <__pow5mult>:
 8008cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	4615      	mov	r5, r2
 8008cb6:	f012 0203 	ands.w	r2, r2, #3
 8008cba:	4607      	mov	r7, r0
 8008cbc:	460e      	mov	r6, r1
 8008cbe:	d007      	beq.n	8008cd0 <__pow5mult+0x20>
 8008cc0:	4c25      	ldr	r4, [pc, #148]	@ (8008d58 <__pow5mult+0xa8>)
 8008cc2:	3a01      	subs	r2, #1
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cca:	f7ff fe5d 	bl	8008988 <__multadd>
 8008cce:	4606      	mov	r6, r0
 8008cd0:	10ad      	asrs	r5, r5, #2
 8008cd2:	d03d      	beq.n	8008d50 <__pow5mult+0xa0>
 8008cd4:	69fc      	ldr	r4, [r7, #28]
 8008cd6:	b97c      	cbnz	r4, 8008cf8 <__pow5mult+0x48>
 8008cd8:	2010      	movs	r0, #16
 8008cda:	f7fd fd65 	bl	80067a8 <malloc>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	61f8      	str	r0, [r7, #28]
 8008ce2:	b928      	cbnz	r0, 8008cf0 <__pow5mult+0x40>
 8008ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d5c <__pow5mult+0xac>)
 8008ce6:	481e      	ldr	r0, [pc, #120]	@ (8008d60 <__pow5mult+0xb0>)
 8008ce8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008cec:	f001 fd18 	bl	800a720 <__assert_func>
 8008cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cf4:	6004      	str	r4, [r0, #0]
 8008cf6:	60c4      	str	r4, [r0, #12]
 8008cf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d00:	b94c      	cbnz	r4, 8008d16 <__pow5mult+0x66>
 8008d02:	f240 2171 	movw	r1, #625	@ 0x271
 8008d06:	4638      	mov	r0, r7
 8008d08:	f7ff ff1a 	bl	8008b40 <__i2b>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d12:	4604      	mov	r4, r0
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	f04f 0900 	mov.w	r9, #0
 8008d1a:	07eb      	lsls	r3, r5, #31
 8008d1c:	d50a      	bpl.n	8008d34 <__pow5mult+0x84>
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4622      	mov	r2, r4
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7ff ff22 	bl	8008b6c <__multiply>
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f7ff fe09 	bl	8008944 <_Bfree>
 8008d32:	4646      	mov	r6, r8
 8008d34:	106d      	asrs	r5, r5, #1
 8008d36:	d00b      	beq.n	8008d50 <__pow5mult+0xa0>
 8008d38:	6820      	ldr	r0, [r4, #0]
 8008d3a:	b938      	cbnz	r0, 8008d4c <__pow5mult+0x9c>
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff ff13 	bl	8008b6c <__multiply>
 8008d46:	6020      	str	r0, [r4, #0]
 8008d48:	f8c0 9000 	str.w	r9, [r0]
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	e7e4      	b.n	8008d1a <__pow5mult+0x6a>
 8008d50:	4630      	mov	r0, r6
 8008d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d56:	bf00      	nop
 8008d58:	0800cf3c 	.word	0x0800cf3c
 8008d5c:	0800cdaa 	.word	0x0800cdaa
 8008d60:	0800ce2a 	.word	0x0800ce2a

08008d64 <__lshift>:
 8008d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d68:	460c      	mov	r4, r1
 8008d6a:	6849      	ldr	r1, [r1, #4]
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	4607      	mov	r7, r0
 8008d76:	4691      	mov	r9, r2
 8008d78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d7c:	f108 0601 	add.w	r6, r8, #1
 8008d80:	42b3      	cmp	r3, r6
 8008d82:	db0b      	blt.n	8008d9c <__lshift+0x38>
 8008d84:	4638      	mov	r0, r7
 8008d86:	f7ff fd9d 	bl	80088c4 <_Balloc>
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	b948      	cbnz	r0, 8008da2 <__lshift+0x3e>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	4b28      	ldr	r3, [pc, #160]	@ (8008e34 <__lshift+0xd0>)
 8008d92:	4829      	ldr	r0, [pc, #164]	@ (8008e38 <__lshift+0xd4>)
 8008d94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d98:	f001 fcc2 	bl	800a720 <__assert_func>
 8008d9c:	3101      	adds	r1, #1
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	e7ee      	b.n	8008d80 <__lshift+0x1c>
 8008da2:	2300      	movs	r3, #0
 8008da4:	f100 0114 	add.w	r1, r0, #20
 8008da8:	f100 0210 	add.w	r2, r0, #16
 8008dac:	4618      	mov	r0, r3
 8008dae:	4553      	cmp	r3, sl
 8008db0:	db33      	blt.n	8008e1a <__lshift+0xb6>
 8008db2:	6920      	ldr	r0, [r4, #16]
 8008db4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008db8:	f104 0314 	add.w	r3, r4, #20
 8008dbc:	f019 091f 	ands.w	r9, r9, #31
 8008dc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dc8:	d02b      	beq.n	8008e22 <__lshift+0xbe>
 8008dca:	f1c9 0e20 	rsb	lr, r9, #32
 8008dce:	468a      	mov	sl, r1
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	6818      	ldr	r0, [r3, #0]
 8008dd4:	fa00 f009 	lsl.w	r0, r0, r9
 8008dd8:	4310      	orrs	r0, r2
 8008dda:	f84a 0b04 	str.w	r0, [sl], #4
 8008dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de2:	459c      	cmp	ip, r3
 8008de4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008de8:	d8f3      	bhi.n	8008dd2 <__lshift+0x6e>
 8008dea:	ebac 0304 	sub.w	r3, ip, r4
 8008dee:	3b15      	subs	r3, #21
 8008df0:	f023 0303 	bic.w	r3, r3, #3
 8008df4:	3304      	adds	r3, #4
 8008df6:	f104 0015 	add.w	r0, r4, #21
 8008dfa:	4560      	cmp	r0, ip
 8008dfc:	bf88      	it	hi
 8008dfe:	2304      	movhi	r3, #4
 8008e00:	50ca      	str	r2, [r1, r3]
 8008e02:	b10a      	cbz	r2, 8008e08 <__lshift+0xa4>
 8008e04:	f108 0602 	add.w	r6, r8, #2
 8008e08:	3e01      	subs	r6, #1
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	612e      	str	r6, [r5, #16]
 8008e0e:	4621      	mov	r1, r4
 8008e10:	f7ff fd98 	bl	8008944 <_Bfree>
 8008e14:	4628      	mov	r0, r5
 8008e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e1e:	3301      	adds	r3, #1
 8008e20:	e7c5      	b.n	8008dae <__lshift+0x4a>
 8008e22:	3904      	subs	r1, #4
 8008e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e28:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e2c:	459c      	cmp	ip, r3
 8008e2e:	d8f9      	bhi.n	8008e24 <__lshift+0xc0>
 8008e30:	e7ea      	b.n	8008e08 <__lshift+0xa4>
 8008e32:	bf00      	nop
 8008e34:	0800ce19 	.word	0x0800ce19
 8008e38:	0800ce2a 	.word	0x0800ce2a

08008e3c <__mcmp>:
 8008e3c:	690a      	ldr	r2, [r1, #16]
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6900      	ldr	r0, [r0, #16]
 8008e42:	1a80      	subs	r0, r0, r2
 8008e44:	b530      	push	{r4, r5, lr}
 8008e46:	d10e      	bne.n	8008e66 <__mcmp+0x2a>
 8008e48:	3314      	adds	r3, #20
 8008e4a:	3114      	adds	r1, #20
 8008e4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e5c:	4295      	cmp	r5, r2
 8008e5e:	d003      	beq.n	8008e68 <__mcmp+0x2c>
 8008e60:	d205      	bcs.n	8008e6e <__mcmp+0x32>
 8008e62:	f04f 30ff 	mov.w	r0, #4294967295
 8008e66:	bd30      	pop	{r4, r5, pc}
 8008e68:	42a3      	cmp	r3, r4
 8008e6a:	d3f3      	bcc.n	8008e54 <__mcmp+0x18>
 8008e6c:	e7fb      	b.n	8008e66 <__mcmp+0x2a>
 8008e6e:	2001      	movs	r0, #1
 8008e70:	e7f9      	b.n	8008e66 <__mcmp+0x2a>
	...

08008e74 <__mdiff>:
 8008e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	4689      	mov	r9, r1
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4648      	mov	r0, r9
 8008e80:	4614      	mov	r4, r2
 8008e82:	f7ff ffdb 	bl	8008e3c <__mcmp>
 8008e86:	1e05      	subs	r5, r0, #0
 8008e88:	d112      	bne.n	8008eb0 <__mdiff+0x3c>
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7ff fd19 	bl	80088c4 <_Balloc>
 8008e92:	4602      	mov	r2, r0
 8008e94:	b928      	cbnz	r0, 8008ea2 <__mdiff+0x2e>
 8008e96:	4b3f      	ldr	r3, [pc, #252]	@ (8008f94 <__mdiff+0x120>)
 8008e98:	f240 2137 	movw	r1, #567	@ 0x237
 8008e9c:	483e      	ldr	r0, [pc, #248]	@ (8008f98 <__mdiff+0x124>)
 8008e9e:	f001 fc3f 	bl	800a720 <__assert_func>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	b003      	add	sp, #12
 8008eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb0:	bfbc      	itt	lt
 8008eb2:	464b      	movlt	r3, r9
 8008eb4:	46a1      	movlt	r9, r4
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ebc:	bfba      	itte	lt
 8008ebe:	461c      	movlt	r4, r3
 8008ec0:	2501      	movlt	r5, #1
 8008ec2:	2500      	movge	r5, #0
 8008ec4:	f7ff fcfe 	bl	80088c4 <_Balloc>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	b918      	cbnz	r0, 8008ed4 <__mdiff+0x60>
 8008ecc:	4b31      	ldr	r3, [pc, #196]	@ (8008f94 <__mdiff+0x120>)
 8008ece:	f240 2145 	movw	r1, #581	@ 0x245
 8008ed2:	e7e3      	b.n	8008e9c <__mdiff+0x28>
 8008ed4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ed8:	6926      	ldr	r6, [r4, #16]
 8008eda:	60c5      	str	r5, [r0, #12]
 8008edc:	f109 0310 	add.w	r3, r9, #16
 8008ee0:	f109 0514 	add.w	r5, r9, #20
 8008ee4:	f104 0e14 	add.w	lr, r4, #20
 8008ee8:	f100 0b14 	add.w	fp, r0, #20
 8008eec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ef0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	46d9      	mov	r9, fp
 8008ef8:	f04f 0c00 	mov.w	ip, #0
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	fa1f f38a 	uxth.w	r3, sl
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	b283      	uxth	r3, r0
 8008f10:	1acb      	subs	r3, r1, r3
 8008f12:	0c00      	lsrs	r0, r0, #16
 8008f14:	4463      	add	r3, ip
 8008f16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f24:	4576      	cmp	r6, lr
 8008f26:	f849 3b04 	str.w	r3, [r9], #4
 8008f2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f2e:	d8e5      	bhi.n	8008efc <__mdiff+0x88>
 8008f30:	1b33      	subs	r3, r6, r4
 8008f32:	3b15      	subs	r3, #21
 8008f34:	f023 0303 	bic.w	r3, r3, #3
 8008f38:	3415      	adds	r4, #21
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	bf38      	it	cc
 8008f40:	2304      	movcc	r3, #4
 8008f42:	441d      	add	r5, r3
 8008f44:	445b      	add	r3, fp
 8008f46:	461e      	mov	r6, r3
 8008f48:	462c      	mov	r4, r5
 8008f4a:	4544      	cmp	r4, r8
 8008f4c:	d30e      	bcc.n	8008f6c <__mdiff+0xf8>
 8008f4e:	f108 0103 	add.w	r1, r8, #3
 8008f52:	1b49      	subs	r1, r1, r5
 8008f54:	f021 0103 	bic.w	r1, r1, #3
 8008f58:	3d03      	subs	r5, #3
 8008f5a:	45a8      	cmp	r8, r5
 8008f5c:	bf38      	it	cc
 8008f5e:	2100      	movcc	r1, #0
 8008f60:	440b      	add	r3, r1
 8008f62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f66:	b191      	cbz	r1, 8008f8e <__mdiff+0x11a>
 8008f68:	6117      	str	r7, [r2, #16]
 8008f6a:	e79d      	b.n	8008ea8 <__mdiff+0x34>
 8008f6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f70:	46e6      	mov	lr, ip
 8008f72:	0c08      	lsrs	r0, r1, #16
 8008f74:	fa1c fc81 	uxtah	ip, ip, r1
 8008f78:	4471      	add	r1, lr
 8008f7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f7e:	b289      	uxth	r1, r1
 8008f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f84:	f846 1b04 	str.w	r1, [r6], #4
 8008f88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f8c:	e7dd      	b.n	8008f4a <__mdiff+0xd6>
 8008f8e:	3f01      	subs	r7, #1
 8008f90:	e7e7      	b.n	8008f62 <__mdiff+0xee>
 8008f92:	bf00      	nop
 8008f94:	0800ce19 	.word	0x0800ce19
 8008f98:	0800ce2a 	.word	0x0800ce2a

08008f9c <__ulp>:
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	ed8d 0b00 	vstr	d0, [sp]
 8008fa2:	9a01      	ldr	r2, [sp, #4]
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe4 <__ulp+0x48>)
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dc08      	bgt.n	8008fc2 <__ulp+0x26>
 8008fb0:	425b      	negs	r3, r3
 8008fb2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008fb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008fba:	da04      	bge.n	8008fc6 <__ulp+0x2a>
 8008fbc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008fc0:	4113      	asrs	r3, r2
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	e008      	b.n	8008fd8 <__ulp+0x3c>
 8008fc6:	f1a2 0314 	sub.w	r3, r2, #20
 8008fca:	2b1e      	cmp	r3, #30
 8008fcc:	bfda      	itte	le
 8008fce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008fd2:	40da      	lsrle	r2, r3
 8008fd4:	2201      	movgt	r2, #1
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	ec41 0b10 	vmov	d0, r0, r1
 8008fe0:	b002      	add	sp, #8
 8008fe2:	4770      	bx	lr
 8008fe4:	7ff00000 	.word	0x7ff00000

08008fe8 <__b2d>:
 8008fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fec:	6906      	ldr	r6, [r0, #16]
 8008fee:	f100 0814 	add.w	r8, r0, #20
 8008ff2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008ff6:	1f37      	subs	r7, r6, #4
 8008ff8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7ff fd53 	bl	8008aa8 <__hi0bits>
 8009002:	f1c0 0320 	rsb	r3, r0, #32
 8009006:	280a      	cmp	r0, #10
 8009008:	600b      	str	r3, [r1, #0]
 800900a:	491b      	ldr	r1, [pc, #108]	@ (8009078 <__b2d+0x90>)
 800900c:	dc15      	bgt.n	800903a <__b2d+0x52>
 800900e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009012:	fa22 f30c 	lsr.w	r3, r2, ip
 8009016:	45b8      	cmp	r8, r7
 8009018:	ea43 0501 	orr.w	r5, r3, r1
 800901c:	bf34      	ite	cc
 800901e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009022:	2300      	movcs	r3, #0
 8009024:	3015      	adds	r0, #21
 8009026:	fa02 f000 	lsl.w	r0, r2, r0
 800902a:	fa23 f30c 	lsr.w	r3, r3, ip
 800902e:	4303      	orrs	r3, r0
 8009030:	461c      	mov	r4, r3
 8009032:	ec45 4b10 	vmov	d0, r4, r5
 8009036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800903a:	45b8      	cmp	r8, r7
 800903c:	bf3a      	itte	cc
 800903e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009042:	f1a6 0708 	subcc.w	r7, r6, #8
 8009046:	2300      	movcs	r3, #0
 8009048:	380b      	subs	r0, #11
 800904a:	d012      	beq.n	8009072 <__b2d+0x8a>
 800904c:	f1c0 0120 	rsb	r1, r0, #32
 8009050:	fa23 f401 	lsr.w	r4, r3, r1
 8009054:	4082      	lsls	r2, r0
 8009056:	4322      	orrs	r2, r4
 8009058:	4547      	cmp	r7, r8
 800905a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800905e:	bf8c      	ite	hi
 8009060:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009064:	2200      	movls	r2, #0
 8009066:	4083      	lsls	r3, r0
 8009068:	40ca      	lsrs	r2, r1
 800906a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800906e:	4313      	orrs	r3, r2
 8009070:	e7de      	b.n	8009030 <__b2d+0x48>
 8009072:	ea42 0501 	orr.w	r5, r2, r1
 8009076:	e7db      	b.n	8009030 <__b2d+0x48>
 8009078:	3ff00000 	.word	0x3ff00000

0800907c <__d2b>:
 800907c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009080:	460f      	mov	r7, r1
 8009082:	2101      	movs	r1, #1
 8009084:	ec59 8b10 	vmov	r8, r9, d0
 8009088:	4616      	mov	r6, r2
 800908a:	f7ff fc1b 	bl	80088c4 <_Balloc>
 800908e:	4604      	mov	r4, r0
 8009090:	b930      	cbnz	r0, 80090a0 <__d2b+0x24>
 8009092:	4602      	mov	r2, r0
 8009094:	4b23      	ldr	r3, [pc, #140]	@ (8009124 <__d2b+0xa8>)
 8009096:	4824      	ldr	r0, [pc, #144]	@ (8009128 <__d2b+0xac>)
 8009098:	f240 310f 	movw	r1, #783	@ 0x30f
 800909c:	f001 fb40 	bl	800a720 <__assert_func>
 80090a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090a8:	b10d      	cbz	r5, 80090ae <__d2b+0x32>
 80090aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	f1b8 0300 	subs.w	r3, r8, #0
 80090b4:	d023      	beq.n	80090fe <__d2b+0x82>
 80090b6:	4668      	mov	r0, sp
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	f7ff fd14 	bl	8008ae6 <__lo0bits>
 80090be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090c2:	b1d0      	cbz	r0, 80090fa <__d2b+0x7e>
 80090c4:	f1c0 0320 	rsb	r3, r0, #32
 80090c8:	fa02 f303 	lsl.w	r3, r2, r3
 80090cc:	430b      	orrs	r3, r1
 80090ce:	40c2      	lsrs	r2, r0
 80090d0:	6163      	str	r3, [r4, #20]
 80090d2:	9201      	str	r2, [sp, #4]
 80090d4:	9b01      	ldr	r3, [sp, #4]
 80090d6:	61a3      	str	r3, [r4, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bf0c      	ite	eq
 80090dc:	2201      	moveq	r2, #1
 80090de:	2202      	movne	r2, #2
 80090e0:	6122      	str	r2, [r4, #16]
 80090e2:	b1a5      	cbz	r5, 800910e <__d2b+0x92>
 80090e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090e8:	4405      	add	r5, r0
 80090ea:	603d      	str	r5, [r7, #0]
 80090ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090f0:	6030      	str	r0, [r6, #0]
 80090f2:	4620      	mov	r0, r4
 80090f4:	b003      	add	sp, #12
 80090f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090fa:	6161      	str	r1, [r4, #20]
 80090fc:	e7ea      	b.n	80090d4 <__d2b+0x58>
 80090fe:	a801      	add	r0, sp, #4
 8009100:	f7ff fcf1 	bl	8008ae6 <__lo0bits>
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	6163      	str	r3, [r4, #20]
 8009108:	3020      	adds	r0, #32
 800910a:	2201      	movs	r2, #1
 800910c:	e7e8      	b.n	80090e0 <__d2b+0x64>
 800910e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009112:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009116:	6038      	str	r0, [r7, #0]
 8009118:	6918      	ldr	r0, [r3, #16]
 800911a:	f7ff fcc5 	bl	8008aa8 <__hi0bits>
 800911e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009122:	e7e5      	b.n	80090f0 <__d2b+0x74>
 8009124:	0800ce19 	.word	0x0800ce19
 8009128:	0800ce2a 	.word	0x0800ce2a

0800912c <__ratio>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	b085      	sub	sp, #20
 8009132:	e9cd 1000 	strd	r1, r0, [sp]
 8009136:	a902      	add	r1, sp, #8
 8009138:	f7ff ff56 	bl	8008fe8 <__b2d>
 800913c:	9800      	ldr	r0, [sp, #0]
 800913e:	a903      	add	r1, sp, #12
 8009140:	ec55 4b10 	vmov	r4, r5, d0
 8009144:	f7ff ff50 	bl	8008fe8 <__b2d>
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	6919      	ldr	r1, [r3, #16]
 800914c:	9b00      	ldr	r3, [sp, #0]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	1ac9      	subs	r1, r1, r3
 8009152:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009156:	1a9b      	subs	r3, r3, r2
 8009158:	ec5b ab10 	vmov	sl, fp, d0
 800915c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfce      	itee	gt
 8009164:	462a      	movgt	r2, r5
 8009166:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800916a:	465a      	movle	r2, fp
 800916c:	462f      	mov	r7, r5
 800916e:	46d9      	mov	r9, fp
 8009170:	bfcc      	ite	gt
 8009172:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009176:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800917a:	464b      	mov	r3, r9
 800917c:	4652      	mov	r2, sl
 800917e:	4620      	mov	r0, r4
 8009180:	4639      	mov	r1, r7
 8009182:	f7f7 fb7b 	bl	800087c <__aeabi_ddiv>
 8009186:	ec41 0b10 	vmov	d0, r0, r1
 800918a:	b005      	add	sp, #20
 800918c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009190 <__copybits>:
 8009190:	3901      	subs	r1, #1
 8009192:	b570      	push	{r4, r5, r6, lr}
 8009194:	1149      	asrs	r1, r1, #5
 8009196:	6914      	ldr	r4, [r2, #16]
 8009198:	3101      	adds	r1, #1
 800919a:	f102 0314 	add.w	r3, r2, #20
 800919e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091a6:	1f05      	subs	r5, r0, #4
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	d30c      	bcc.n	80091c6 <__copybits+0x36>
 80091ac:	1aa3      	subs	r3, r4, r2
 80091ae:	3b11      	subs	r3, #17
 80091b0:	f023 0303 	bic.w	r3, r3, #3
 80091b4:	3211      	adds	r2, #17
 80091b6:	42a2      	cmp	r2, r4
 80091b8:	bf88      	it	hi
 80091ba:	2300      	movhi	r3, #0
 80091bc:	4418      	add	r0, r3
 80091be:	2300      	movs	r3, #0
 80091c0:	4288      	cmp	r0, r1
 80091c2:	d305      	bcc.n	80091d0 <__copybits+0x40>
 80091c4:	bd70      	pop	{r4, r5, r6, pc}
 80091c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80091ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80091ce:	e7eb      	b.n	80091a8 <__copybits+0x18>
 80091d0:	f840 3b04 	str.w	r3, [r0], #4
 80091d4:	e7f4      	b.n	80091c0 <__copybits+0x30>

080091d6 <__any_on>:
 80091d6:	f100 0214 	add.w	r2, r0, #20
 80091da:	6900      	ldr	r0, [r0, #16]
 80091dc:	114b      	asrs	r3, r1, #5
 80091de:	4298      	cmp	r0, r3
 80091e0:	b510      	push	{r4, lr}
 80091e2:	db11      	blt.n	8009208 <__any_on+0x32>
 80091e4:	dd0a      	ble.n	80091fc <__any_on+0x26>
 80091e6:	f011 011f 	ands.w	r1, r1, #31
 80091ea:	d007      	beq.n	80091fc <__any_on+0x26>
 80091ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80091f0:	fa24 f001 	lsr.w	r0, r4, r1
 80091f4:	fa00 f101 	lsl.w	r1, r0, r1
 80091f8:	428c      	cmp	r4, r1
 80091fa:	d10b      	bne.n	8009214 <__any_on+0x3e>
 80091fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009200:	4293      	cmp	r3, r2
 8009202:	d803      	bhi.n	800920c <__any_on+0x36>
 8009204:	2000      	movs	r0, #0
 8009206:	bd10      	pop	{r4, pc}
 8009208:	4603      	mov	r3, r0
 800920a:	e7f7      	b.n	80091fc <__any_on+0x26>
 800920c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009210:	2900      	cmp	r1, #0
 8009212:	d0f5      	beq.n	8009200 <__any_on+0x2a>
 8009214:	2001      	movs	r0, #1
 8009216:	e7f6      	b.n	8009206 <__any_on+0x30>

08009218 <sulp>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	4604      	mov	r4, r0
 800921c:	460d      	mov	r5, r1
 800921e:	ec45 4b10 	vmov	d0, r4, r5
 8009222:	4616      	mov	r6, r2
 8009224:	f7ff feba 	bl	8008f9c <__ulp>
 8009228:	ec51 0b10 	vmov	r0, r1, d0
 800922c:	b17e      	cbz	r6, 800924e <sulp+0x36>
 800922e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009232:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009236:	2b00      	cmp	r3, #0
 8009238:	dd09      	ble.n	800924e <sulp+0x36>
 800923a:	051b      	lsls	r3, r3, #20
 800923c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009240:	2400      	movs	r4, #0
 8009242:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009246:	4622      	mov	r2, r4
 8009248:	462b      	mov	r3, r5
 800924a:	f7f7 f9ed 	bl	8000628 <__aeabi_dmul>
 800924e:	ec41 0b10 	vmov	d0, r0, r1
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	0000      	movs	r0, r0
	...

08009258 <_strtod_l>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	b09f      	sub	sp, #124	@ 0x7c
 800925e:	460c      	mov	r4, r1
 8009260:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009262:	2200      	movs	r2, #0
 8009264:	921a      	str	r2, [sp, #104]	@ 0x68
 8009266:	9005      	str	r0, [sp, #20]
 8009268:	f04f 0a00 	mov.w	sl, #0
 800926c:	f04f 0b00 	mov.w	fp, #0
 8009270:	460a      	mov	r2, r1
 8009272:	9219      	str	r2, [sp, #100]	@ 0x64
 8009274:	7811      	ldrb	r1, [r2, #0]
 8009276:	292b      	cmp	r1, #43	@ 0x2b
 8009278:	d04a      	beq.n	8009310 <_strtod_l+0xb8>
 800927a:	d838      	bhi.n	80092ee <_strtod_l+0x96>
 800927c:	290d      	cmp	r1, #13
 800927e:	d832      	bhi.n	80092e6 <_strtod_l+0x8e>
 8009280:	2908      	cmp	r1, #8
 8009282:	d832      	bhi.n	80092ea <_strtod_l+0x92>
 8009284:	2900      	cmp	r1, #0
 8009286:	d03b      	beq.n	8009300 <_strtod_l+0xa8>
 8009288:	2200      	movs	r2, #0
 800928a:	920e      	str	r2, [sp, #56]	@ 0x38
 800928c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800928e:	782a      	ldrb	r2, [r5, #0]
 8009290:	2a30      	cmp	r2, #48	@ 0x30
 8009292:	f040 80b2 	bne.w	80093fa <_strtod_l+0x1a2>
 8009296:	786a      	ldrb	r2, [r5, #1]
 8009298:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800929c:	2a58      	cmp	r2, #88	@ 0x58
 800929e:	d16e      	bne.n	800937e <_strtod_l+0x126>
 80092a0:	9302      	str	r3, [sp, #8]
 80092a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	4a8f      	ldr	r2, [pc, #572]	@ (80094e8 <_strtod_l+0x290>)
 80092ac:	9805      	ldr	r0, [sp, #20]
 80092ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80092b0:	a919      	add	r1, sp, #100	@ 0x64
 80092b2:	f001 facf 	bl	800a854 <__gethex>
 80092b6:	f010 060f 	ands.w	r6, r0, #15
 80092ba:	4604      	mov	r4, r0
 80092bc:	d005      	beq.n	80092ca <_strtod_l+0x72>
 80092be:	2e06      	cmp	r6, #6
 80092c0:	d128      	bne.n	8009314 <_strtod_l+0xbc>
 80092c2:	3501      	adds	r5, #1
 80092c4:	2300      	movs	r3, #0
 80092c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80092c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80092ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f040 858e 	bne.w	8009dee <_strtod_l+0xb96>
 80092d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092d4:	b1cb      	cbz	r3, 800930a <_strtod_l+0xb2>
 80092d6:	4652      	mov	r2, sl
 80092d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80092dc:	ec43 2b10 	vmov	d0, r2, r3
 80092e0:	b01f      	add	sp, #124	@ 0x7c
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	2920      	cmp	r1, #32
 80092e8:	d1ce      	bne.n	8009288 <_strtod_l+0x30>
 80092ea:	3201      	adds	r2, #1
 80092ec:	e7c1      	b.n	8009272 <_strtod_l+0x1a>
 80092ee:	292d      	cmp	r1, #45	@ 0x2d
 80092f0:	d1ca      	bne.n	8009288 <_strtod_l+0x30>
 80092f2:	2101      	movs	r1, #1
 80092f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80092f6:	1c51      	adds	r1, r2, #1
 80092f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80092fa:	7852      	ldrb	r2, [r2, #1]
 80092fc:	2a00      	cmp	r2, #0
 80092fe:	d1c5      	bne.n	800928c <_strtod_l+0x34>
 8009300:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009302:	9419      	str	r4, [sp, #100]	@ 0x64
 8009304:	2b00      	cmp	r3, #0
 8009306:	f040 8570 	bne.w	8009dea <_strtod_l+0xb92>
 800930a:	4652      	mov	r2, sl
 800930c:	465b      	mov	r3, fp
 800930e:	e7e5      	b.n	80092dc <_strtod_l+0x84>
 8009310:	2100      	movs	r1, #0
 8009312:	e7ef      	b.n	80092f4 <_strtod_l+0x9c>
 8009314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009316:	b13a      	cbz	r2, 8009328 <_strtod_l+0xd0>
 8009318:	2135      	movs	r1, #53	@ 0x35
 800931a:	a81c      	add	r0, sp, #112	@ 0x70
 800931c:	f7ff ff38 	bl	8009190 <__copybits>
 8009320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009322:	9805      	ldr	r0, [sp, #20]
 8009324:	f7ff fb0e 	bl	8008944 <_Bfree>
 8009328:	3e01      	subs	r6, #1
 800932a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800932c:	2e04      	cmp	r6, #4
 800932e:	d806      	bhi.n	800933e <_strtod_l+0xe6>
 8009330:	e8df f006 	tbb	[pc, r6]
 8009334:	201d0314 	.word	0x201d0314
 8009338:	14          	.byte	0x14
 8009339:	00          	.byte	0x00
 800933a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800933e:	05e1      	lsls	r1, r4, #23
 8009340:	bf48      	it	mi
 8009342:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009346:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800934a:	0d1b      	lsrs	r3, r3, #20
 800934c:	051b      	lsls	r3, r3, #20
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1bb      	bne.n	80092ca <_strtod_l+0x72>
 8009352:	f7fe fbd1 	bl	8007af8 <__errno>
 8009356:	2322      	movs	r3, #34	@ 0x22
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	e7b6      	b.n	80092ca <_strtod_l+0x72>
 800935c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009360:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009368:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800936c:	e7e7      	b.n	800933e <_strtod_l+0xe6>
 800936e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80094f0 <_strtod_l+0x298>
 8009372:	e7e4      	b.n	800933e <_strtod_l+0xe6>
 8009374:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009378:	f04f 3aff 	mov.w	sl, #4294967295
 800937c:	e7df      	b.n	800933e <_strtod_l+0xe6>
 800937e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	9219      	str	r2, [sp, #100]	@ 0x64
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b30      	cmp	r3, #48	@ 0x30
 8009388:	d0f9      	beq.n	800937e <_strtod_l+0x126>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d09d      	beq.n	80092ca <_strtod_l+0x72>
 800938e:	2301      	movs	r3, #1
 8009390:	2700      	movs	r7, #0
 8009392:	9308      	str	r3, [sp, #32]
 8009394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009396:	930c      	str	r3, [sp, #48]	@ 0x30
 8009398:	970b      	str	r7, [sp, #44]	@ 0x2c
 800939a:	46b9      	mov	r9, r7
 800939c:	220a      	movs	r2, #10
 800939e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80093a0:	7805      	ldrb	r5, [r0, #0]
 80093a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80093a6:	b2d9      	uxtb	r1, r3
 80093a8:	2909      	cmp	r1, #9
 80093aa:	d928      	bls.n	80093fe <_strtod_l+0x1a6>
 80093ac:	494f      	ldr	r1, [pc, #316]	@ (80094ec <_strtod_l+0x294>)
 80093ae:	2201      	movs	r2, #1
 80093b0:	f001 f97a 	bl	800a6a8 <strncmp>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d032      	beq.n	800941e <_strtod_l+0x1c6>
 80093b8:	2000      	movs	r0, #0
 80093ba:	462a      	mov	r2, r5
 80093bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80093be:	464d      	mov	r5, r9
 80093c0:	4603      	mov	r3, r0
 80093c2:	2a65      	cmp	r2, #101	@ 0x65
 80093c4:	d001      	beq.n	80093ca <_strtod_l+0x172>
 80093c6:	2a45      	cmp	r2, #69	@ 0x45
 80093c8:	d114      	bne.n	80093f4 <_strtod_l+0x19c>
 80093ca:	b91d      	cbnz	r5, 80093d4 <_strtod_l+0x17c>
 80093cc:	9a08      	ldr	r2, [sp, #32]
 80093ce:	4302      	orrs	r2, r0
 80093d0:	d096      	beq.n	8009300 <_strtod_l+0xa8>
 80093d2:	2500      	movs	r5, #0
 80093d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80093d6:	1c62      	adds	r2, r4, #1
 80093d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80093da:	7862      	ldrb	r2, [r4, #1]
 80093dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80093de:	d07a      	beq.n	80094d6 <_strtod_l+0x27e>
 80093e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80093e2:	d07e      	beq.n	80094e2 <_strtod_l+0x28a>
 80093e4:	f04f 0c00 	mov.w	ip, #0
 80093e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80093ec:	2909      	cmp	r1, #9
 80093ee:	f240 8085 	bls.w	80094fc <_strtod_l+0x2a4>
 80093f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	e0a5      	b.n	8009546 <_strtod_l+0x2ee>
 80093fa:	2300      	movs	r3, #0
 80093fc:	e7c8      	b.n	8009390 <_strtod_l+0x138>
 80093fe:	f1b9 0f08 	cmp.w	r9, #8
 8009402:	bfd8      	it	le
 8009404:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009406:	f100 0001 	add.w	r0, r0, #1
 800940a:	bfda      	itte	le
 800940c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009410:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009412:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009416:	f109 0901 	add.w	r9, r9, #1
 800941a:	9019      	str	r0, [sp, #100]	@ 0x64
 800941c:	e7bf      	b.n	800939e <_strtod_l+0x146>
 800941e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	9219      	str	r2, [sp, #100]	@ 0x64
 8009424:	785a      	ldrb	r2, [r3, #1]
 8009426:	f1b9 0f00 	cmp.w	r9, #0
 800942a:	d03b      	beq.n	80094a4 <_strtod_l+0x24c>
 800942c:	900a      	str	r0, [sp, #40]	@ 0x28
 800942e:	464d      	mov	r5, r9
 8009430:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009434:	2b09      	cmp	r3, #9
 8009436:	d912      	bls.n	800945e <_strtod_l+0x206>
 8009438:	2301      	movs	r3, #1
 800943a:	e7c2      	b.n	80093c2 <_strtod_l+0x16a>
 800943c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	9219      	str	r2, [sp, #100]	@ 0x64
 8009442:	785a      	ldrb	r2, [r3, #1]
 8009444:	3001      	adds	r0, #1
 8009446:	2a30      	cmp	r2, #48	@ 0x30
 8009448:	d0f8      	beq.n	800943c <_strtod_l+0x1e4>
 800944a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800944e:	2b08      	cmp	r3, #8
 8009450:	f200 84d2 	bhi.w	8009df8 <_strtod_l+0xba0>
 8009454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009456:	900a      	str	r0, [sp, #40]	@ 0x28
 8009458:	2000      	movs	r0, #0
 800945a:	930c      	str	r3, [sp, #48]	@ 0x30
 800945c:	4605      	mov	r5, r0
 800945e:	3a30      	subs	r2, #48	@ 0x30
 8009460:	f100 0301 	add.w	r3, r0, #1
 8009464:	d018      	beq.n	8009498 <_strtod_l+0x240>
 8009466:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009468:	4419      	add	r1, r3
 800946a:	910a      	str	r1, [sp, #40]	@ 0x28
 800946c:	462e      	mov	r6, r5
 800946e:	f04f 0e0a 	mov.w	lr, #10
 8009472:	1c71      	adds	r1, r6, #1
 8009474:	eba1 0c05 	sub.w	ip, r1, r5
 8009478:	4563      	cmp	r3, ip
 800947a:	dc15      	bgt.n	80094a8 <_strtod_l+0x250>
 800947c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009480:	182b      	adds	r3, r5, r0
 8009482:	2b08      	cmp	r3, #8
 8009484:	f105 0501 	add.w	r5, r5, #1
 8009488:	4405      	add	r5, r0
 800948a:	dc1a      	bgt.n	80094c2 <_strtod_l+0x26a>
 800948c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800948e:	230a      	movs	r3, #10
 8009490:	fb03 2301 	mla	r3, r3, r1, r2
 8009494:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009496:	2300      	movs	r3, #0
 8009498:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800949a:	1c51      	adds	r1, r2, #1
 800949c:	9119      	str	r1, [sp, #100]	@ 0x64
 800949e:	7852      	ldrb	r2, [r2, #1]
 80094a0:	4618      	mov	r0, r3
 80094a2:	e7c5      	b.n	8009430 <_strtod_l+0x1d8>
 80094a4:	4648      	mov	r0, r9
 80094a6:	e7ce      	b.n	8009446 <_strtod_l+0x1ee>
 80094a8:	2e08      	cmp	r6, #8
 80094aa:	dc05      	bgt.n	80094b8 <_strtod_l+0x260>
 80094ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80094ae:	fb0e f606 	mul.w	r6, lr, r6
 80094b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80094b4:	460e      	mov	r6, r1
 80094b6:	e7dc      	b.n	8009472 <_strtod_l+0x21a>
 80094b8:	2910      	cmp	r1, #16
 80094ba:	bfd8      	it	le
 80094bc:	fb0e f707 	mulle.w	r7, lr, r7
 80094c0:	e7f8      	b.n	80094b4 <_strtod_l+0x25c>
 80094c2:	2b0f      	cmp	r3, #15
 80094c4:	bfdc      	itt	le
 80094c6:	230a      	movle	r3, #10
 80094c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80094cc:	e7e3      	b.n	8009496 <_strtod_l+0x23e>
 80094ce:	2300      	movs	r3, #0
 80094d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d2:	2301      	movs	r3, #1
 80094d4:	e77a      	b.n	80093cc <_strtod_l+0x174>
 80094d6:	f04f 0c00 	mov.w	ip, #0
 80094da:	1ca2      	adds	r2, r4, #2
 80094dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80094de:	78a2      	ldrb	r2, [r4, #2]
 80094e0:	e782      	b.n	80093e8 <_strtod_l+0x190>
 80094e2:	f04f 0c01 	mov.w	ip, #1
 80094e6:	e7f8      	b.n	80094da <_strtod_l+0x282>
 80094e8:	0800d04c 	.word	0x0800d04c
 80094ec:	0800ce83 	.word	0x0800ce83
 80094f0:	7ff00000 	.word	0x7ff00000
 80094f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094f6:	1c51      	adds	r1, r2, #1
 80094f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80094fa:	7852      	ldrb	r2, [r2, #1]
 80094fc:	2a30      	cmp	r2, #48	@ 0x30
 80094fe:	d0f9      	beq.n	80094f4 <_strtod_l+0x29c>
 8009500:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009504:	2908      	cmp	r1, #8
 8009506:	f63f af75 	bhi.w	80093f4 <_strtod_l+0x19c>
 800950a:	3a30      	subs	r2, #48	@ 0x30
 800950c:	9209      	str	r2, [sp, #36]	@ 0x24
 800950e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009510:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009512:	f04f 080a 	mov.w	r8, #10
 8009516:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009518:	1c56      	adds	r6, r2, #1
 800951a:	9619      	str	r6, [sp, #100]	@ 0x64
 800951c:	7852      	ldrb	r2, [r2, #1]
 800951e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009522:	f1be 0f09 	cmp.w	lr, #9
 8009526:	d939      	bls.n	800959c <_strtod_l+0x344>
 8009528:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800952a:	1a76      	subs	r6, r6, r1
 800952c:	2e08      	cmp	r6, #8
 800952e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009532:	dc03      	bgt.n	800953c <_strtod_l+0x2e4>
 8009534:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009536:	4588      	cmp	r8, r1
 8009538:	bfa8      	it	ge
 800953a:	4688      	movge	r8, r1
 800953c:	f1bc 0f00 	cmp.w	ip, #0
 8009540:	d001      	beq.n	8009546 <_strtod_l+0x2ee>
 8009542:	f1c8 0800 	rsb	r8, r8, #0
 8009546:	2d00      	cmp	r5, #0
 8009548:	d14e      	bne.n	80095e8 <_strtod_l+0x390>
 800954a:	9908      	ldr	r1, [sp, #32]
 800954c:	4308      	orrs	r0, r1
 800954e:	f47f aebc 	bne.w	80092ca <_strtod_l+0x72>
 8009552:	2b00      	cmp	r3, #0
 8009554:	f47f aed4 	bne.w	8009300 <_strtod_l+0xa8>
 8009558:	2a69      	cmp	r2, #105	@ 0x69
 800955a:	d028      	beq.n	80095ae <_strtod_l+0x356>
 800955c:	dc25      	bgt.n	80095aa <_strtod_l+0x352>
 800955e:	2a49      	cmp	r2, #73	@ 0x49
 8009560:	d025      	beq.n	80095ae <_strtod_l+0x356>
 8009562:	2a4e      	cmp	r2, #78	@ 0x4e
 8009564:	f47f aecc 	bne.w	8009300 <_strtod_l+0xa8>
 8009568:	499a      	ldr	r1, [pc, #616]	@ (80097d4 <_strtod_l+0x57c>)
 800956a:	a819      	add	r0, sp, #100	@ 0x64
 800956c:	f001 fb94 	bl	800ac98 <__match>
 8009570:	2800      	cmp	r0, #0
 8009572:	f43f aec5 	beq.w	8009300 <_strtod_l+0xa8>
 8009576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	2b28      	cmp	r3, #40	@ 0x28
 800957c:	d12e      	bne.n	80095dc <_strtod_l+0x384>
 800957e:	4996      	ldr	r1, [pc, #600]	@ (80097d8 <_strtod_l+0x580>)
 8009580:	aa1c      	add	r2, sp, #112	@ 0x70
 8009582:	a819      	add	r0, sp, #100	@ 0x64
 8009584:	f001 fb9c 	bl	800acc0 <__hexnan>
 8009588:	2805      	cmp	r0, #5
 800958a:	d127      	bne.n	80095dc <_strtod_l+0x384>
 800958c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800958e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009592:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009596:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800959a:	e696      	b.n	80092ca <_strtod_l+0x72>
 800959c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800959e:	fb08 2101 	mla	r1, r8, r1, r2
 80095a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80095a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80095a8:	e7b5      	b.n	8009516 <_strtod_l+0x2be>
 80095aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80095ac:	e7da      	b.n	8009564 <_strtod_l+0x30c>
 80095ae:	498b      	ldr	r1, [pc, #556]	@ (80097dc <_strtod_l+0x584>)
 80095b0:	a819      	add	r0, sp, #100	@ 0x64
 80095b2:	f001 fb71 	bl	800ac98 <__match>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f43f aea2 	beq.w	8009300 <_strtod_l+0xa8>
 80095bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095be:	4988      	ldr	r1, [pc, #544]	@ (80097e0 <_strtod_l+0x588>)
 80095c0:	3b01      	subs	r3, #1
 80095c2:	a819      	add	r0, sp, #100	@ 0x64
 80095c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80095c6:	f001 fb67 	bl	800ac98 <__match>
 80095ca:	b910      	cbnz	r0, 80095d2 <_strtod_l+0x37a>
 80095cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095ce:	3301      	adds	r3, #1
 80095d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80095d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80097f0 <_strtod_l+0x598>
 80095d6:	f04f 0a00 	mov.w	sl, #0
 80095da:	e676      	b.n	80092ca <_strtod_l+0x72>
 80095dc:	4881      	ldr	r0, [pc, #516]	@ (80097e4 <_strtod_l+0x58c>)
 80095de:	f001 f897 	bl	800a710 <nan>
 80095e2:	ec5b ab10 	vmov	sl, fp, d0
 80095e6:	e670      	b.n	80092ca <_strtod_l+0x72>
 80095e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80095ec:	eba8 0303 	sub.w	r3, r8, r3
 80095f0:	f1b9 0f00 	cmp.w	r9, #0
 80095f4:	bf08      	it	eq
 80095f6:	46a9      	moveq	r9, r5
 80095f8:	2d10      	cmp	r5, #16
 80095fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80095fc:	462c      	mov	r4, r5
 80095fe:	bfa8      	it	ge
 8009600:	2410      	movge	r4, #16
 8009602:	f7f6 ff97 	bl	8000534 <__aeabi_ui2d>
 8009606:	2d09      	cmp	r5, #9
 8009608:	4682      	mov	sl, r0
 800960a:	468b      	mov	fp, r1
 800960c:	dc13      	bgt.n	8009636 <_strtod_l+0x3de>
 800960e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009610:	2b00      	cmp	r3, #0
 8009612:	f43f ae5a 	beq.w	80092ca <_strtod_l+0x72>
 8009616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009618:	dd78      	ble.n	800970c <_strtod_l+0x4b4>
 800961a:	2b16      	cmp	r3, #22
 800961c:	dc5f      	bgt.n	80096de <_strtod_l+0x486>
 800961e:	4972      	ldr	r1, [pc, #456]	@ (80097e8 <_strtod_l+0x590>)
 8009620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009628:	4652      	mov	r2, sl
 800962a:	465b      	mov	r3, fp
 800962c:	f7f6 fffc 	bl	8000628 <__aeabi_dmul>
 8009630:	4682      	mov	sl, r0
 8009632:	468b      	mov	fp, r1
 8009634:	e649      	b.n	80092ca <_strtod_l+0x72>
 8009636:	4b6c      	ldr	r3, [pc, #432]	@ (80097e8 <_strtod_l+0x590>)
 8009638:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800963c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009640:	f7f6 fff2 	bl	8000628 <__aeabi_dmul>
 8009644:	4682      	mov	sl, r0
 8009646:	4638      	mov	r0, r7
 8009648:	468b      	mov	fp, r1
 800964a:	f7f6 ff73 	bl	8000534 <__aeabi_ui2d>
 800964e:	4602      	mov	r2, r0
 8009650:	460b      	mov	r3, r1
 8009652:	4650      	mov	r0, sl
 8009654:	4659      	mov	r1, fp
 8009656:	f7f6 fe31 	bl	80002bc <__adddf3>
 800965a:	2d0f      	cmp	r5, #15
 800965c:	4682      	mov	sl, r0
 800965e:	468b      	mov	fp, r1
 8009660:	ddd5      	ble.n	800960e <_strtod_l+0x3b6>
 8009662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009664:	1b2c      	subs	r4, r5, r4
 8009666:	441c      	add	r4, r3
 8009668:	2c00      	cmp	r4, #0
 800966a:	f340 8093 	ble.w	8009794 <_strtod_l+0x53c>
 800966e:	f014 030f 	ands.w	r3, r4, #15
 8009672:	d00a      	beq.n	800968a <_strtod_l+0x432>
 8009674:	495c      	ldr	r1, [pc, #368]	@ (80097e8 <_strtod_l+0x590>)
 8009676:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800967a:	4652      	mov	r2, sl
 800967c:	465b      	mov	r3, fp
 800967e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009682:	f7f6 ffd1 	bl	8000628 <__aeabi_dmul>
 8009686:	4682      	mov	sl, r0
 8009688:	468b      	mov	fp, r1
 800968a:	f034 040f 	bics.w	r4, r4, #15
 800968e:	d073      	beq.n	8009778 <_strtod_l+0x520>
 8009690:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009694:	dd49      	ble.n	800972a <_strtod_l+0x4d2>
 8009696:	2400      	movs	r4, #0
 8009698:	46a0      	mov	r8, r4
 800969a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800969c:	46a1      	mov	r9, r4
 800969e:	9a05      	ldr	r2, [sp, #20]
 80096a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80097f0 <_strtod_l+0x598>
 80096a4:	2322      	movs	r3, #34	@ 0x22
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	f04f 0a00 	mov.w	sl, #0
 80096ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f43f ae0b 	beq.w	80092ca <_strtod_l+0x72>
 80096b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096b6:	9805      	ldr	r0, [sp, #20]
 80096b8:	f7ff f944 	bl	8008944 <_Bfree>
 80096bc:	9805      	ldr	r0, [sp, #20]
 80096be:	4649      	mov	r1, r9
 80096c0:	f7ff f940 	bl	8008944 <_Bfree>
 80096c4:	9805      	ldr	r0, [sp, #20]
 80096c6:	4641      	mov	r1, r8
 80096c8:	f7ff f93c 	bl	8008944 <_Bfree>
 80096cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096ce:	9805      	ldr	r0, [sp, #20]
 80096d0:	f7ff f938 	bl	8008944 <_Bfree>
 80096d4:	9805      	ldr	r0, [sp, #20]
 80096d6:	4621      	mov	r1, r4
 80096d8:	f7ff f934 	bl	8008944 <_Bfree>
 80096dc:	e5f5      	b.n	80092ca <_strtod_l+0x72>
 80096de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80096e4:	4293      	cmp	r3, r2
 80096e6:	dbbc      	blt.n	8009662 <_strtod_l+0x40a>
 80096e8:	4c3f      	ldr	r4, [pc, #252]	@ (80097e8 <_strtod_l+0x590>)
 80096ea:	f1c5 050f 	rsb	r5, r5, #15
 80096ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096f2:	4652      	mov	r2, sl
 80096f4:	465b      	mov	r3, fp
 80096f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096fa:	f7f6 ff95 	bl	8000628 <__aeabi_dmul>
 80096fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009700:	1b5d      	subs	r5, r3, r5
 8009702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800970a:	e78f      	b.n	800962c <_strtod_l+0x3d4>
 800970c:	3316      	adds	r3, #22
 800970e:	dba8      	blt.n	8009662 <_strtod_l+0x40a>
 8009710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009712:	eba3 0808 	sub.w	r8, r3, r8
 8009716:	4b34      	ldr	r3, [pc, #208]	@ (80097e8 <_strtod_l+0x590>)
 8009718:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800971c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009720:	4650      	mov	r0, sl
 8009722:	4659      	mov	r1, fp
 8009724:	f7f7 f8aa 	bl	800087c <__aeabi_ddiv>
 8009728:	e782      	b.n	8009630 <_strtod_l+0x3d8>
 800972a:	2300      	movs	r3, #0
 800972c:	4f2f      	ldr	r7, [pc, #188]	@ (80097ec <_strtod_l+0x594>)
 800972e:	1124      	asrs	r4, r4, #4
 8009730:	4650      	mov	r0, sl
 8009732:	4659      	mov	r1, fp
 8009734:	461e      	mov	r6, r3
 8009736:	2c01      	cmp	r4, #1
 8009738:	dc21      	bgt.n	800977e <_strtod_l+0x526>
 800973a:	b10b      	cbz	r3, 8009740 <_strtod_l+0x4e8>
 800973c:	4682      	mov	sl, r0
 800973e:	468b      	mov	fp, r1
 8009740:	492a      	ldr	r1, [pc, #168]	@ (80097ec <_strtod_l+0x594>)
 8009742:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009746:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800974a:	4652      	mov	r2, sl
 800974c:	465b      	mov	r3, fp
 800974e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009752:	f7f6 ff69 	bl	8000628 <__aeabi_dmul>
 8009756:	4b26      	ldr	r3, [pc, #152]	@ (80097f0 <_strtod_l+0x598>)
 8009758:	460a      	mov	r2, r1
 800975a:	400b      	ands	r3, r1
 800975c:	4925      	ldr	r1, [pc, #148]	@ (80097f4 <_strtod_l+0x59c>)
 800975e:	428b      	cmp	r3, r1
 8009760:	4682      	mov	sl, r0
 8009762:	d898      	bhi.n	8009696 <_strtod_l+0x43e>
 8009764:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009768:	428b      	cmp	r3, r1
 800976a:	bf86      	itte	hi
 800976c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80097f8 <_strtod_l+0x5a0>
 8009770:	f04f 3aff 	movhi.w	sl, #4294967295
 8009774:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009778:	2300      	movs	r3, #0
 800977a:	9308      	str	r3, [sp, #32]
 800977c:	e076      	b.n	800986c <_strtod_l+0x614>
 800977e:	07e2      	lsls	r2, r4, #31
 8009780:	d504      	bpl.n	800978c <_strtod_l+0x534>
 8009782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009786:	f7f6 ff4f 	bl	8000628 <__aeabi_dmul>
 800978a:	2301      	movs	r3, #1
 800978c:	3601      	adds	r6, #1
 800978e:	1064      	asrs	r4, r4, #1
 8009790:	3708      	adds	r7, #8
 8009792:	e7d0      	b.n	8009736 <_strtod_l+0x4de>
 8009794:	d0f0      	beq.n	8009778 <_strtod_l+0x520>
 8009796:	4264      	negs	r4, r4
 8009798:	f014 020f 	ands.w	r2, r4, #15
 800979c:	d00a      	beq.n	80097b4 <_strtod_l+0x55c>
 800979e:	4b12      	ldr	r3, [pc, #72]	@ (80097e8 <_strtod_l+0x590>)
 80097a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a4:	4650      	mov	r0, sl
 80097a6:	4659      	mov	r1, fp
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f7 f866 	bl	800087c <__aeabi_ddiv>
 80097b0:	4682      	mov	sl, r0
 80097b2:	468b      	mov	fp, r1
 80097b4:	1124      	asrs	r4, r4, #4
 80097b6:	d0df      	beq.n	8009778 <_strtod_l+0x520>
 80097b8:	2c1f      	cmp	r4, #31
 80097ba:	dd1f      	ble.n	80097fc <_strtod_l+0x5a4>
 80097bc:	2400      	movs	r4, #0
 80097be:	46a0      	mov	r8, r4
 80097c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097c2:	46a1      	mov	r9, r4
 80097c4:	9a05      	ldr	r2, [sp, #20]
 80097c6:	2322      	movs	r3, #34	@ 0x22
 80097c8:	f04f 0a00 	mov.w	sl, #0
 80097cc:	f04f 0b00 	mov.w	fp, #0
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	e76b      	b.n	80096ac <_strtod_l+0x454>
 80097d4:	0800cd71 	.word	0x0800cd71
 80097d8:	0800d038 	.word	0x0800d038
 80097dc:	0800cd69 	.word	0x0800cd69
 80097e0:	0800cda0 	.word	0x0800cda0
 80097e4:	0800ced9 	.word	0x0800ced9
 80097e8:	0800cf70 	.word	0x0800cf70
 80097ec:	0800cf48 	.word	0x0800cf48
 80097f0:	7ff00000 	.word	0x7ff00000
 80097f4:	7ca00000 	.word	0x7ca00000
 80097f8:	7fefffff 	.word	0x7fefffff
 80097fc:	f014 0310 	ands.w	r3, r4, #16
 8009800:	bf18      	it	ne
 8009802:	236a      	movne	r3, #106	@ 0x6a
 8009804:	4ea9      	ldr	r6, [pc, #676]	@ (8009aac <_strtod_l+0x854>)
 8009806:	9308      	str	r3, [sp, #32]
 8009808:	4650      	mov	r0, sl
 800980a:	4659      	mov	r1, fp
 800980c:	2300      	movs	r3, #0
 800980e:	07e7      	lsls	r7, r4, #31
 8009810:	d504      	bpl.n	800981c <_strtod_l+0x5c4>
 8009812:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009816:	f7f6 ff07 	bl	8000628 <__aeabi_dmul>
 800981a:	2301      	movs	r3, #1
 800981c:	1064      	asrs	r4, r4, #1
 800981e:	f106 0608 	add.w	r6, r6, #8
 8009822:	d1f4      	bne.n	800980e <_strtod_l+0x5b6>
 8009824:	b10b      	cbz	r3, 800982a <_strtod_l+0x5d2>
 8009826:	4682      	mov	sl, r0
 8009828:	468b      	mov	fp, r1
 800982a:	9b08      	ldr	r3, [sp, #32]
 800982c:	b1b3      	cbz	r3, 800985c <_strtod_l+0x604>
 800982e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009832:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009836:	2b00      	cmp	r3, #0
 8009838:	4659      	mov	r1, fp
 800983a:	dd0f      	ble.n	800985c <_strtod_l+0x604>
 800983c:	2b1f      	cmp	r3, #31
 800983e:	dd56      	ble.n	80098ee <_strtod_l+0x696>
 8009840:	2b34      	cmp	r3, #52	@ 0x34
 8009842:	bfde      	ittt	le
 8009844:	f04f 33ff 	movle.w	r3, #4294967295
 8009848:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800984c:	4093      	lslle	r3, r2
 800984e:	f04f 0a00 	mov.w	sl, #0
 8009852:	bfcc      	ite	gt
 8009854:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009858:	ea03 0b01 	andle.w	fp, r3, r1
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	4650      	mov	r0, sl
 8009862:	4659      	mov	r1, fp
 8009864:	f7f7 f948 	bl	8000af8 <__aeabi_dcmpeq>
 8009868:	2800      	cmp	r0, #0
 800986a:	d1a7      	bne.n	80097bc <_strtod_l+0x564>
 800986c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009872:	9805      	ldr	r0, [sp, #20]
 8009874:	462b      	mov	r3, r5
 8009876:	464a      	mov	r2, r9
 8009878:	f7ff f8cc 	bl	8008a14 <__s2b>
 800987c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800987e:	2800      	cmp	r0, #0
 8009880:	f43f af09 	beq.w	8009696 <_strtod_l+0x43e>
 8009884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009886:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009888:	2a00      	cmp	r2, #0
 800988a:	eba3 0308 	sub.w	r3, r3, r8
 800988e:	bfa8      	it	ge
 8009890:	2300      	movge	r3, #0
 8009892:	9312      	str	r3, [sp, #72]	@ 0x48
 8009894:	2400      	movs	r4, #0
 8009896:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800989a:	9316      	str	r3, [sp, #88]	@ 0x58
 800989c:	46a0      	mov	r8, r4
 800989e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098a0:	9805      	ldr	r0, [sp, #20]
 80098a2:	6859      	ldr	r1, [r3, #4]
 80098a4:	f7ff f80e 	bl	80088c4 <_Balloc>
 80098a8:	4681      	mov	r9, r0
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f43f aef7 	beq.w	800969e <_strtod_l+0x446>
 80098b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098b2:	691a      	ldr	r2, [r3, #16]
 80098b4:	3202      	adds	r2, #2
 80098b6:	f103 010c 	add.w	r1, r3, #12
 80098ba:	0092      	lsls	r2, r2, #2
 80098bc:	300c      	adds	r0, #12
 80098be:	f7fe f948 	bl	8007b52 <memcpy>
 80098c2:	ec4b ab10 	vmov	d0, sl, fp
 80098c6:	9805      	ldr	r0, [sp, #20]
 80098c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80098ca:	a91b      	add	r1, sp, #108	@ 0x6c
 80098cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80098d0:	f7ff fbd4 	bl	800907c <__d2b>
 80098d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f43f aee1 	beq.w	800969e <_strtod_l+0x446>
 80098dc:	9805      	ldr	r0, [sp, #20]
 80098de:	2101      	movs	r1, #1
 80098e0:	f7ff f92e 	bl	8008b40 <__i2b>
 80098e4:	4680      	mov	r8, r0
 80098e6:	b948      	cbnz	r0, 80098fc <_strtod_l+0x6a4>
 80098e8:	f04f 0800 	mov.w	r8, #0
 80098ec:	e6d7      	b.n	800969e <_strtod_l+0x446>
 80098ee:	f04f 32ff 	mov.w	r2, #4294967295
 80098f2:	fa02 f303 	lsl.w	r3, r2, r3
 80098f6:	ea03 0a0a 	and.w	sl, r3, sl
 80098fa:	e7af      	b.n	800985c <_strtod_l+0x604>
 80098fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80098fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009900:	2d00      	cmp	r5, #0
 8009902:	bfab      	itete	ge
 8009904:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009906:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009908:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800990a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800990c:	bfac      	ite	ge
 800990e:	18ef      	addge	r7, r5, r3
 8009910:	1b5e      	sublt	r6, r3, r5
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	1aed      	subs	r5, r5, r3
 8009916:	4415      	add	r5, r2
 8009918:	4b65      	ldr	r3, [pc, #404]	@ (8009ab0 <_strtod_l+0x858>)
 800991a:	3d01      	subs	r5, #1
 800991c:	429d      	cmp	r5, r3
 800991e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009922:	da50      	bge.n	80099c6 <_strtod_l+0x76e>
 8009924:	1b5b      	subs	r3, r3, r5
 8009926:	2b1f      	cmp	r3, #31
 8009928:	eba2 0203 	sub.w	r2, r2, r3
 800992c:	f04f 0101 	mov.w	r1, #1
 8009930:	dc3d      	bgt.n	80099ae <_strtod_l+0x756>
 8009932:	fa01 f303 	lsl.w	r3, r1, r3
 8009936:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009938:	2300      	movs	r3, #0
 800993a:	9310      	str	r3, [sp, #64]	@ 0x40
 800993c:	18bd      	adds	r5, r7, r2
 800993e:	9b08      	ldr	r3, [sp, #32]
 8009940:	42af      	cmp	r7, r5
 8009942:	4416      	add	r6, r2
 8009944:	441e      	add	r6, r3
 8009946:	463b      	mov	r3, r7
 8009948:	bfa8      	it	ge
 800994a:	462b      	movge	r3, r5
 800994c:	42b3      	cmp	r3, r6
 800994e:	bfa8      	it	ge
 8009950:	4633      	movge	r3, r6
 8009952:	2b00      	cmp	r3, #0
 8009954:	bfc2      	ittt	gt
 8009956:	1aed      	subgt	r5, r5, r3
 8009958:	1af6      	subgt	r6, r6, r3
 800995a:	1aff      	subgt	r7, r7, r3
 800995c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800995e:	2b00      	cmp	r3, #0
 8009960:	dd16      	ble.n	8009990 <_strtod_l+0x738>
 8009962:	4641      	mov	r1, r8
 8009964:	9805      	ldr	r0, [sp, #20]
 8009966:	461a      	mov	r2, r3
 8009968:	f7ff f9a2 	bl	8008cb0 <__pow5mult>
 800996c:	4680      	mov	r8, r0
 800996e:	2800      	cmp	r0, #0
 8009970:	d0ba      	beq.n	80098e8 <_strtod_l+0x690>
 8009972:	4601      	mov	r1, r0
 8009974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009976:	9805      	ldr	r0, [sp, #20]
 8009978:	f7ff f8f8 	bl	8008b6c <__multiply>
 800997c:	900a      	str	r0, [sp, #40]	@ 0x28
 800997e:	2800      	cmp	r0, #0
 8009980:	f43f ae8d 	beq.w	800969e <_strtod_l+0x446>
 8009984:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009986:	9805      	ldr	r0, [sp, #20]
 8009988:	f7fe ffdc 	bl	8008944 <_Bfree>
 800998c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800998e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009990:	2d00      	cmp	r5, #0
 8009992:	dc1d      	bgt.n	80099d0 <_strtod_l+0x778>
 8009994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009996:	2b00      	cmp	r3, #0
 8009998:	dd23      	ble.n	80099e2 <_strtod_l+0x78a>
 800999a:	4649      	mov	r1, r9
 800999c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800999e:	9805      	ldr	r0, [sp, #20]
 80099a0:	f7ff f986 	bl	8008cb0 <__pow5mult>
 80099a4:	4681      	mov	r9, r0
 80099a6:	b9e0      	cbnz	r0, 80099e2 <_strtod_l+0x78a>
 80099a8:	f04f 0900 	mov.w	r9, #0
 80099ac:	e677      	b.n	800969e <_strtod_l+0x446>
 80099ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80099b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80099b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80099ba:	35e2      	adds	r5, #226	@ 0xe2
 80099bc:	fa01 f305 	lsl.w	r3, r1, r5
 80099c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80099c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80099c4:	e7ba      	b.n	800993c <_strtod_l+0x6e4>
 80099c6:	2300      	movs	r3, #0
 80099c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80099ca:	2301      	movs	r3, #1
 80099cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ce:	e7b5      	b.n	800993c <_strtod_l+0x6e4>
 80099d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099d2:	9805      	ldr	r0, [sp, #20]
 80099d4:	462a      	mov	r2, r5
 80099d6:	f7ff f9c5 	bl	8008d64 <__lshift>
 80099da:	901a      	str	r0, [sp, #104]	@ 0x68
 80099dc:	2800      	cmp	r0, #0
 80099de:	d1d9      	bne.n	8009994 <_strtod_l+0x73c>
 80099e0:	e65d      	b.n	800969e <_strtod_l+0x446>
 80099e2:	2e00      	cmp	r6, #0
 80099e4:	dd07      	ble.n	80099f6 <_strtod_l+0x79e>
 80099e6:	4649      	mov	r1, r9
 80099e8:	9805      	ldr	r0, [sp, #20]
 80099ea:	4632      	mov	r2, r6
 80099ec:	f7ff f9ba 	bl	8008d64 <__lshift>
 80099f0:	4681      	mov	r9, r0
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d0d8      	beq.n	80099a8 <_strtod_l+0x750>
 80099f6:	2f00      	cmp	r7, #0
 80099f8:	dd08      	ble.n	8009a0c <_strtod_l+0x7b4>
 80099fa:	4641      	mov	r1, r8
 80099fc:	9805      	ldr	r0, [sp, #20]
 80099fe:	463a      	mov	r2, r7
 8009a00:	f7ff f9b0 	bl	8008d64 <__lshift>
 8009a04:	4680      	mov	r8, r0
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f43f ae49 	beq.w	800969e <_strtod_l+0x446>
 8009a0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a0e:	9805      	ldr	r0, [sp, #20]
 8009a10:	464a      	mov	r2, r9
 8009a12:	f7ff fa2f 	bl	8008e74 <__mdiff>
 8009a16:	4604      	mov	r4, r0
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	f43f ae40 	beq.w	800969e <_strtod_l+0x446>
 8009a1e:	68c3      	ldr	r3, [r0, #12]
 8009a20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a22:	2300      	movs	r3, #0
 8009a24:	60c3      	str	r3, [r0, #12]
 8009a26:	4641      	mov	r1, r8
 8009a28:	f7ff fa08 	bl	8008e3c <__mcmp>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	da45      	bge.n	8009abc <_strtod_l+0x864>
 8009a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a32:	ea53 030a 	orrs.w	r3, r3, sl
 8009a36:	d16b      	bne.n	8009b10 <_strtod_l+0x8b8>
 8009a38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d167      	bne.n	8009b10 <_strtod_l+0x8b8>
 8009a40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a44:	0d1b      	lsrs	r3, r3, #20
 8009a46:	051b      	lsls	r3, r3, #20
 8009a48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a4c:	d960      	bls.n	8009b10 <_strtod_l+0x8b8>
 8009a4e:	6963      	ldr	r3, [r4, #20]
 8009a50:	b913      	cbnz	r3, 8009a58 <_strtod_l+0x800>
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	dd5b      	ble.n	8009b10 <_strtod_l+0x8b8>
 8009a58:	4621      	mov	r1, r4
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	9805      	ldr	r0, [sp, #20]
 8009a5e:	f7ff f981 	bl	8008d64 <__lshift>
 8009a62:	4641      	mov	r1, r8
 8009a64:	4604      	mov	r4, r0
 8009a66:	f7ff f9e9 	bl	8008e3c <__mcmp>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	dd50      	ble.n	8009b10 <_strtod_l+0x8b8>
 8009a6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a72:	9a08      	ldr	r2, [sp, #32]
 8009a74:	0d1b      	lsrs	r3, r3, #20
 8009a76:	051b      	lsls	r3, r3, #20
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	d06a      	beq.n	8009b52 <_strtod_l+0x8fa>
 8009a7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a80:	d867      	bhi.n	8009b52 <_strtod_l+0x8fa>
 8009a82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a86:	f67f ae9d 	bls.w	80097c4 <_strtod_l+0x56c>
 8009a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab4 <_strtod_l+0x85c>)
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	4659      	mov	r1, fp
 8009a90:	2200      	movs	r2, #0
 8009a92:	f7f6 fdc9 	bl	8000628 <__aeabi_dmul>
 8009a96:	4b08      	ldr	r3, [pc, #32]	@ (8009ab8 <_strtod_l+0x860>)
 8009a98:	400b      	ands	r3, r1
 8009a9a:	4682      	mov	sl, r0
 8009a9c:	468b      	mov	fp, r1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f47f ae08 	bne.w	80096b4 <_strtod_l+0x45c>
 8009aa4:	9a05      	ldr	r2, [sp, #20]
 8009aa6:	2322      	movs	r3, #34	@ 0x22
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	e603      	b.n	80096b4 <_strtod_l+0x45c>
 8009aac:	0800d060 	.word	0x0800d060
 8009ab0:	fffffc02 	.word	0xfffffc02
 8009ab4:	39500000 	.word	0x39500000
 8009ab8:	7ff00000 	.word	0x7ff00000
 8009abc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009ac0:	d165      	bne.n	8009b8e <_strtod_l+0x936>
 8009ac2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ac8:	b35a      	cbz	r2, 8009b22 <_strtod_l+0x8ca>
 8009aca:	4a9f      	ldr	r2, [pc, #636]	@ (8009d48 <_strtod_l+0xaf0>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d12b      	bne.n	8009b28 <_strtod_l+0x8d0>
 8009ad0:	9b08      	ldr	r3, [sp, #32]
 8009ad2:	4651      	mov	r1, sl
 8009ad4:	b303      	cbz	r3, 8009b18 <_strtod_l+0x8c0>
 8009ad6:	4b9d      	ldr	r3, [pc, #628]	@ (8009d4c <_strtod_l+0xaf4>)
 8009ad8:	465a      	mov	r2, fp
 8009ada:	4013      	ands	r3, r2
 8009adc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae4:	d81b      	bhi.n	8009b1e <_strtod_l+0x8c6>
 8009ae6:	0d1b      	lsrs	r3, r3, #20
 8009ae8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	4299      	cmp	r1, r3
 8009af2:	d119      	bne.n	8009b28 <_strtod_l+0x8d0>
 8009af4:	4b96      	ldr	r3, [pc, #600]	@ (8009d50 <_strtod_l+0xaf8>)
 8009af6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d102      	bne.n	8009b02 <_strtod_l+0x8aa>
 8009afc:	3101      	adds	r1, #1
 8009afe:	f43f adce 	beq.w	800969e <_strtod_l+0x446>
 8009b02:	4b92      	ldr	r3, [pc, #584]	@ (8009d4c <_strtod_l+0xaf4>)
 8009b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b06:	401a      	ands	r2, r3
 8009b08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009b0c:	f04f 0a00 	mov.w	sl, #0
 8009b10:	9b08      	ldr	r3, [sp, #32]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1b9      	bne.n	8009a8a <_strtod_l+0x832>
 8009b16:	e5cd      	b.n	80096b4 <_strtod_l+0x45c>
 8009b18:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1c:	e7e8      	b.n	8009af0 <_strtod_l+0x898>
 8009b1e:	4613      	mov	r3, r2
 8009b20:	e7e6      	b.n	8009af0 <_strtod_l+0x898>
 8009b22:	ea53 030a 	orrs.w	r3, r3, sl
 8009b26:	d0a2      	beq.n	8009a6e <_strtod_l+0x816>
 8009b28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b2a:	b1db      	cbz	r3, 8009b64 <_strtod_l+0x90c>
 8009b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b2e:	4213      	tst	r3, r2
 8009b30:	d0ee      	beq.n	8009b10 <_strtod_l+0x8b8>
 8009b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b34:	9a08      	ldr	r2, [sp, #32]
 8009b36:	4650      	mov	r0, sl
 8009b38:	4659      	mov	r1, fp
 8009b3a:	b1bb      	cbz	r3, 8009b6c <_strtod_l+0x914>
 8009b3c:	f7ff fb6c 	bl	8009218 <sulp>
 8009b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b44:	ec53 2b10 	vmov	r2, r3, d0
 8009b48:	f7f6 fbb8 	bl	80002bc <__adddf3>
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	468b      	mov	fp, r1
 8009b50:	e7de      	b.n	8009b10 <_strtod_l+0x8b8>
 8009b52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b5e:	f04f 3aff 	mov.w	sl, #4294967295
 8009b62:	e7d5      	b.n	8009b10 <_strtod_l+0x8b8>
 8009b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b66:	ea13 0f0a 	tst.w	r3, sl
 8009b6a:	e7e1      	b.n	8009b30 <_strtod_l+0x8d8>
 8009b6c:	f7ff fb54 	bl	8009218 <sulp>
 8009b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b74:	ec53 2b10 	vmov	r2, r3, d0
 8009b78:	f7f6 fb9e 	bl	80002b8 <__aeabi_dsub>
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4682      	mov	sl, r0
 8009b82:	468b      	mov	fp, r1
 8009b84:	f7f6 ffb8 	bl	8000af8 <__aeabi_dcmpeq>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d0c1      	beq.n	8009b10 <_strtod_l+0x8b8>
 8009b8c:	e61a      	b.n	80097c4 <_strtod_l+0x56c>
 8009b8e:	4641      	mov	r1, r8
 8009b90:	4620      	mov	r0, r4
 8009b92:	f7ff facb 	bl	800912c <__ratio>
 8009b96:	ec57 6b10 	vmov	r6, r7, d0
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f6 ffbc 	bl	8000b20 <__aeabi_dcmple>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d06f      	beq.n	8009c8c <_strtod_l+0xa34>
 8009bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d17a      	bne.n	8009ca8 <_strtod_l+0xa50>
 8009bb2:	f1ba 0f00 	cmp.w	sl, #0
 8009bb6:	d158      	bne.n	8009c6a <_strtod_l+0xa12>
 8009bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d15a      	bne.n	8009c78 <_strtod_l+0xa20>
 8009bc2:	4b64      	ldr	r3, [pc, #400]	@ (8009d54 <_strtod_l+0xafc>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	4639      	mov	r1, r7
 8009bca:	f7f6 ff9f 	bl	8000b0c <__aeabi_dcmplt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d159      	bne.n	8009c86 <_strtod_l+0xa2e>
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	4b60      	ldr	r3, [pc, #384]	@ (8009d58 <_strtod_l+0xb00>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f7f6 fd25 	bl	8000628 <__aeabi_dmul>
 8009bde:	4606      	mov	r6, r0
 8009be0:	460f      	mov	r7, r1
 8009be2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009be6:	9606      	str	r6, [sp, #24]
 8009be8:	9307      	str	r3, [sp, #28]
 8009bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bee:	4d57      	ldr	r5, [pc, #348]	@ (8009d4c <_strtod_l+0xaf4>)
 8009bf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bf6:	401d      	ands	r5, r3
 8009bf8:	4b58      	ldr	r3, [pc, #352]	@ (8009d5c <_strtod_l+0xb04>)
 8009bfa:	429d      	cmp	r5, r3
 8009bfc:	f040 80b2 	bne.w	8009d64 <_strtod_l+0xb0c>
 8009c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009c06:	ec4b ab10 	vmov	d0, sl, fp
 8009c0a:	f7ff f9c7 	bl	8008f9c <__ulp>
 8009c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c12:	ec51 0b10 	vmov	r0, r1, d0
 8009c16:	f7f6 fd07 	bl	8000628 <__aeabi_dmul>
 8009c1a:	4652      	mov	r2, sl
 8009c1c:	465b      	mov	r3, fp
 8009c1e:	f7f6 fb4d 	bl	80002bc <__adddf3>
 8009c22:	460b      	mov	r3, r1
 8009c24:	4949      	ldr	r1, [pc, #292]	@ (8009d4c <_strtod_l+0xaf4>)
 8009c26:	4a4e      	ldr	r2, [pc, #312]	@ (8009d60 <_strtod_l+0xb08>)
 8009c28:	4019      	ands	r1, r3
 8009c2a:	4291      	cmp	r1, r2
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	d942      	bls.n	8009cb6 <_strtod_l+0xa5e>
 8009c30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c32:	4b47      	ldr	r3, [pc, #284]	@ (8009d50 <_strtod_l+0xaf8>)
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d103      	bne.n	8009c40 <_strtod_l+0x9e8>
 8009c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	f43f ad2f 	beq.w	800969e <_strtod_l+0x446>
 8009c40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009d50 <_strtod_l+0xaf8>
 8009c44:	f04f 3aff 	mov.w	sl, #4294967295
 8009c48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c4a:	9805      	ldr	r0, [sp, #20]
 8009c4c:	f7fe fe7a 	bl	8008944 <_Bfree>
 8009c50:	9805      	ldr	r0, [sp, #20]
 8009c52:	4649      	mov	r1, r9
 8009c54:	f7fe fe76 	bl	8008944 <_Bfree>
 8009c58:	9805      	ldr	r0, [sp, #20]
 8009c5a:	4641      	mov	r1, r8
 8009c5c:	f7fe fe72 	bl	8008944 <_Bfree>
 8009c60:	9805      	ldr	r0, [sp, #20]
 8009c62:	4621      	mov	r1, r4
 8009c64:	f7fe fe6e 	bl	8008944 <_Bfree>
 8009c68:	e619      	b.n	800989e <_strtod_l+0x646>
 8009c6a:	f1ba 0f01 	cmp.w	sl, #1
 8009c6e:	d103      	bne.n	8009c78 <_strtod_l+0xa20>
 8009c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f43f ada6 	beq.w	80097c4 <_strtod_l+0x56c>
 8009c78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009d28 <_strtod_l+0xad0>
 8009c7c:	4f35      	ldr	r7, [pc, #212]	@ (8009d54 <_strtod_l+0xafc>)
 8009c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c82:	2600      	movs	r6, #0
 8009c84:	e7b1      	b.n	8009bea <_strtod_l+0x992>
 8009c86:	4f34      	ldr	r7, [pc, #208]	@ (8009d58 <_strtod_l+0xb00>)
 8009c88:	2600      	movs	r6, #0
 8009c8a:	e7aa      	b.n	8009be2 <_strtod_l+0x98a>
 8009c8c:	4b32      	ldr	r3, [pc, #200]	@ (8009d58 <_strtod_l+0xb00>)
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4639      	mov	r1, r7
 8009c92:	2200      	movs	r2, #0
 8009c94:	f7f6 fcc8 	bl	8000628 <__aeabi_dmul>
 8009c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	460f      	mov	r7, r1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d09f      	beq.n	8009be2 <_strtod_l+0x98a>
 8009ca2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009ca6:	e7a0      	b.n	8009bea <_strtod_l+0x992>
 8009ca8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009d30 <_strtod_l+0xad8>
 8009cac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009cb0:	ec57 6b17 	vmov	r6, r7, d7
 8009cb4:	e799      	b.n	8009bea <_strtod_l+0x992>
 8009cb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009cba:	9b08      	ldr	r3, [sp, #32]
 8009cbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1c1      	bne.n	8009c48 <_strtod_l+0x9f0>
 8009cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cc8:	0d1b      	lsrs	r3, r3, #20
 8009cca:	051b      	lsls	r3, r3, #20
 8009ccc:	429d      	cmp	r5, r3
 8009cce:	d1bb      	bne.n	8009c48 <_strtod_l+0x9f0>
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	f7f6 fff0 	bl	8000cb8 <__aeabi_d2lz>
 8009cd8:	f7f6 fc78 	bl	80005cc <__aeabi_l2d>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fae8 	bl	80002b8 <__aeabi_dsub>
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4602      	mov	r2, r0
 8009cec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cf6:	ea46 060a 	orr.w	r6, r6, sl
 8009cfa:	431e      	orrs	r6, r3
 8009cfc:	d06f      	beq.n	8009dde <_strtod_l+0xb86>
 8009cfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d38 <_strtod_l+0xae0>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f7f6 ff02 	bl	8000b0c <__aeabi_dcmplt>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f47f acd3 	bne.w	80096b4 <_strtod_l+0x45c>
 8009d0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009d40 <_strtod_l+0xae8>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d18:	f7f6 ff16 	bl	8000b48 <__aeabi_dcmpgt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d093      	beq.n	8009c48 <_strtod_l+0x9f0>
 8009d20:	e4c8      	b.n	80096b4 <_strtod_l+0x45c>
 8009d22:	bf00      	nop
 8009d24:	f3af 8000 	nop.w
 8009d28:	00000000 	.word	0x00000000
 8009d2c:	bff00000 	.word	0xbff00000
 8009d30:	00000000 	.word	0x00000000
 8009d34:	3ff00000 	.word	0x3ff00000
 8009d38:	94a03595 	.word	0x94a03595
 8009d3c:	3fdfffff 	.word	0x3fdfffff
 8009d40:	35afe535 	.word	0x35afe535
 8009d44:	3fe00000 	.word	0x3fe00000
 8009d48:	000fffff 	.word	0x000fffff
 8009d4c:	7ff00000 	.word	0x7ff00000
 8009d50:	7fefffff 	.word	0x7fefffff
 8009d54:	3ff00000 	.word	0x3ff00000
 8009d58:	3fe00000 	.word	0x3fe00000
 8009d5c:	7fe00000 	.word	0x7fe00000
 8009d60:	7c9fffff 	.word	0x7c9fffff
 8009d64:	9b08      	ldr	r3, [sp, #32]
 8009d66:	b323      	cbz	r3, 8009db2 <_strtod_l+0xb5a>
 8009d68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d6c:	d821      	bhi.n	8009db2 <_strtod_l+0xb5a>
 8009d6e:	a328      	add	r3, pc, #160	@ (adr r3, 8009e10 <_strtod_l+0xbb8>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	4630      	mov	r0, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	f7f6 fed2 	bl	8000b20 <__aeabi_dcmple>
 8009d7c:	b1a0      	cbz	r0, 8009da8 <_strtod_l+0xb50>
 8009d7e:	4639      	mov	r1, r7
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7f6 ff29 	bl	8000bd8 <__aeabi_d2uiz>
 8009d86:	2801      	cmp	r0, #1
 8009d88:	bf38      	it	cc
 8009d8a:	2001      	movcc	r0, #1
 8009d8c:	f7f6 fbd2 	bl	8000534 <__aeabi_ui2d>
 8009d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d92:	4606      	mov	r6, r0
 8009d94:	460f      	mov	r7, r1
 8009d96:	b9fb      	cbnz	r3, 8009dd8 <_strtod_l+0xb80>
 8009d98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009da0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009da4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009da8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009daa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009dae:	1b5b      	subs	r3, r3, r5
 8009db0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009db2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009db6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009dba:	f7ff f8ef 	bl	8008f9c <__ulp>
 8009dbe:	4650      	mov	r0, sl
 8009dc0:	ec53 2b10 	vmov	r2, r3, d0
 8009dc4:	4659      	mov	r1, fp
 8009dc6:	f7f6 fc2f 	bl	8000628 <__aeabi_dmul>
 8009dca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009dce:	f7f6 fa75 	bl	80002bc <__adddf3>
 8009dd2:	4682      	mov	sl, r0
 8009dd4:	468b      	mov	fp, r1
 8009dd6:	e770      	b.n	8009cba <_strtod_l+0xa62>
 8009dd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009ddc:	e7e0      	b.n	8009da0 <_strtod_l+0xb48>
 8009dde:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e18 <_strtod_l+0xbc0>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7f6 fe92 	bl	8000b0c <__aeabi_dcmplt>
 8009de8:	e798      	b.n	8009d1c <_strtod_l+0xac4>
 8009dea:	2300      	movs	r3, #0
 8009dec:	930e      	str	r3, [sp, #56]	@ 0x38
 8009dee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009df0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	f7ff ba6d 	b.w	80092d2 <_strtod_l+0x7a>
 8009df8:	2a65      	cmp	r2, #101	@ 0x65
 8009dfa:	f43f ab68 	beq.w	80094ce <_strtod_l+0x276>
 8009dfe:	2a45      	cmp	r2, #69	@ 0x45
 8009e00:	f43f ab65 	beq.w	80094ce <_strtod_l+0x276>
 8009e04:	2301      	movs	r3, #1
 8009e06:	f7ff bba0 	b.w	800954a <_strtod_l+0x2f2>
 8009e0a:	bf00      	nop
 8009e0c:	f3af 8000 	nop.w
 8009e10:	ffc00000 	.word	0xffc00000
 8009e14:	41dfffff 	.word	0x41dfffff
 8009e18:	94a03595 	.word	0x94a03595
 8009e1c:	3fcfffff 	.word	0x3fcfffff

08009e20 <_strtod_r>:
 8009e20:	4b01      	ldr	r3, [pc, #4]	@ (8009e28 <_strtod_r+0x8>)
 8009e22:	f7ff ba19 	b.w	8009258 <_strtod_l>
 8009e26:	bf00      	nop
 8009e28:	20040070 	.word	0x20040070

08009e2c <_strtol_l.isra.0>:
 8009e2c:	2b24      	cmp	r3, #36	@ 0x24
 8009e2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e32:	4686      	mov	lr, r0
 8009e34:	4690      	mov	r8, r2
 8009e36:	d801      	bhi.n	8009e3c <_strtol_l.isra.0+0x10>
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d106      	bne.n	8009e4a <_strtol_l.isra.0+0x1e>
 8009e3c:	f7fd fe5c 	bl	8007af8 <__errno>
 8009e40:	2316      	movs	r3, #22
 8009e42:	6003      	str	r3, [r0, #0]
 8009e44:	2000      	movs	r0, #0
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	4834      	ldr	r0, [pc, #208]	@ (8009f1c <_strtol_l.isra.0+0xf0>)
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	462a      	mov	r2, r5
 8009e50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e54:	5d06      	ldrb	r6, [r0, r4]
 8009e56:	f016 0608 	ands.w	r6, r6, #8
 8009e5a:	d1f8      	bne.n	8009e4e <_strtol_l.isra.0+0x22>
 8009e5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e5e:	d110      	bne.n	8009e82 <_strtol_l.isra.0+0x56>
 8009e60:	782c      	ldrb	r4, [r5, #0]
 8009e62:	2601      	movs	r6, #1
 8009e64:	1c95      	adds	r5, r2, #2
 8009e66:	f033 0210 	bics.w	r2, r3, #16
 8009e6a:	d115      	bne.n	8009e98 <_strtol_l.isra.0+0x6c>
 8009e6c:	2c30      	cmp	r4, #48	@ 0x30
 8009e6e:	d10d      	bne.n	8009e8c <_strtol_l.isra.0+0x60>
 8009e70:	782a      	ldrb	r2, [r5, #0]
 8009e72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e76:	2a58      	cmp	r2, #88	@ 0x58
 8009e78:	d108      	bne.n	8009e8c <_strtol_l.isra.0+0x60>
 8009e7a:	786c      	ldrb	r4, [r5, #1]
 8009e7c:	3502      	adds	r5, #2
 8009e7e:	2310      	movs	r3, #16
 8009e80:	e00a      	b.n	8009e98 <_strtol_l.isra.0+0x6c>
 8009e82:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e84:	bf04      	itt	eq
 8009e86:	782c      	ldrbeq	r4, [r5, #0]
 8009e88:	1c95      	addeq	r5, r2, #2
 8009e8a:	e7ec      	b.n	8009e66 <_strtol_l.isra.0+0x3a>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1f6      	bne.n	8009e7e <_strtol_l.isra.0+0x52>
 8009e90:	2c30      	cmp	r4, #48	@ 0x30
 8009e92:	bf14      	ite	ne
 8009e94:	230a      	movne	r3, #10
 8009e96:	2308      	moveq	r3, #8
 8009e98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	fbbc f9f3 	udiv	r9, ip, r3
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009eac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009eb0:	2f09      	cmp	r7, #9
 8009eb2:	d80f      	bhi.n	8009ed4 <_strtol_l.isra.0+0xa8>
 8009eb4:	463c      	mov	r4, r7
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	dd1b      	ble.n	8009ef2 <_strtol_l.isra.0+0xc6>
 8009eba:	1c57      	adds	r7, r2, #1
 8009ebc:	d007      	beq.n	8009ece <_strtol_l.isra.0+0xa2>
 8009ebe:	4581      	cmp	r9, r0
 8009ec0:	d314      	bcc.n	8009eec <_strtol_l.isra.0+0xc0>
 8009ec2:	d101      	bne.n	8009ec8 <_strtol_l.isra.0+0x9c>
 8009ec4:	45a2      	cmp	sl, r4
 8009ec6:	db11      	blt.n	8009eec <_strtol_l.isra.0+0xc0>
 8009ec8:	fb00 4003 	mla	r0, r0, r3, r4
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ed2:	e7eb      	b.n	8009eac <_strtol_l.isra.0+0x80>
 8009ed4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ed8:	2f19      	cmp	r7, #25
 8009eda:	d801      	bhi.n	8009ee0 <_strtol_l.isra.0+0xb4>
 8009edc:	3c37      	subs	r4, #55	@ 0x37
 8009ede:	e7ea      	b.n	8009eb6 <_strtol_l.isra.0+0x8a>
 8009ee0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ee4:	2f19      	cmp	r7, #25
 8009ee6:	d804      	bhi.n	8009ef2 <_strtol_l.isra.0+0xc6>
 8009ee8:	3c57      	subs	r4, #87	@ 0x57
 8009eea:	e7e4      	b.n	8009eb6 <_strtol_l.isra.0+0x8a>
 8009eec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef0:	e7ed      	b.n	8009ece <_strtol_l.isra.0+0xa2>
 8009ef2:	1c53      	adds	r3, r2, #1
 8009ef4:	d108      	bne.n	8009f08 <_strtol_l.isra.0+0xdc>
 8009ef6:	2322      	movs	r3, #34	@ 0x22
 8009ef8:	f8ce 3000 	str.w	r3, [lr]
 8009efc:	4660      	mov	r0, ip
 8009efe:	f1b8 0f00 	cmp.w	r8, #0
 8009f02:	d0a0      	beq.n	8009e46 <_strtol_l.isra.0+0x1a>
 8009f04:	1e69      	subs	r1, r5, #1
 8009f06:	e006      	b.n	8009f16 <_strtol_l.isra.0+0xea>
 8009f08:	b106      	cbz	r6, 8009f0c <_strtol_l.isra.0+0xe0>
 8009f0a:	4240      	negs	r0, r0
 8009f0c:	f1b8 0f00 	cmp.w	r8, #0
 8009f10:	d099      	beq.n	8009e46 <_strtol_l.isra.0+0x1a>
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	d1f6      	bne.n	8009f04 <_strtol_l.isra.0+0xd8>
 8009f16:	f8c8 1000 	str.w	r1, [r8]
 8009f1a:	e794      	b.n	8009e46 <_strtol_l.isra.0+0x1a>
 8009f1c:	0800d089 	.word	0x0800d089

08009f20 <_strtol_r>:
 8009f20:	f7ff bf84 	b.w	8009e2c <_strtol_l.isra.0>

08009f24 <__ssputs_r>:
 8009f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f28:	688e      	ldr	r6, [r1, #8]
 8009f2a:	461f      	mov	r7, r3
 8009f2c:	42be      	cmp	r6, r7
 8009f2e:	680b      	ldr	r3, [r1, #0]
 8009f30:	4682      	mov	sl, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	4690      	mov	r8, r2
 8009f36:	d82d      	bhi.n	8009f94 <__ssputs_r+0x70>
 8009f38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f40:	d026      	beq.n	8009f90 <__ssputs_r+0x6c>
 8009f42:	6965      	ldr	r5, [r4, #20]
 8009f44:	6909      	ldr	r1, [r1, #16]
 8009f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f4a:	eba3 0901 	sub.w	r9, r3, r1
 8009f4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f52:	1c7b      	adds	r3, r7, #1
 8009f54:	444b      	add	r3, r9
 8009f56:	106d      	asrs	r5, r5, #1
 8009f58:	429d      	cmp	r5, r3
 8009f5a:	bf38      	it	cc
 8009f5c:	461d      	movcc	r5, r3
 8009f5e:	0553      	lsls	r3, r2, #21
 8009f60:	d527      	bpl.n	8009fb2 <__ssputs_r+0x8e>
 8009f62:	4629      	mov	r1, r5
 8009f64:	f7fc fc4a 	bl	80067fc <_malloc_r>
 8009f68:	4606      	mov	r6, r0
 8009f6a:	b360      	cbz	r0, 8009fc6 <__ssputs_r+0xa2>
 8009f6c:	6921      	ldr	r1, [r4, #16]
 8009f6e:	464a      	mov	r2, r9
 8009f70:	f7fd fdef 	bl	8007b52 <memcpy>
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f7e:	81a3      	strh	r3, [r4, #12]
 8009f80:	6126      	str	r6, [r4, #16]
 8009f82:	6165      	str	r5, [r4, #20]
 8009f84:	444e      	add	r6, r9
 8009f86:	eba5 0509 	sub.w	r5, r5, r9
 8009f8a:	6026      	str	r6, [r4, #0]
 8009f8c:	60a5      	str	r5, [r4, #8]
 8009f8e:	463e      	mov	r6, r7
 8009f90:	42be      	cmp	r6, r7
 8009f92:	d900      	bls.n	8009f96 <__ssputs_r+0x72>
 8009f94:	463e      	mov	r6, r7
 8009f96:	6820      	ldr	r0, [r4, #0]
 8009f98:	4632      	mov	r2, r6
 8009f9a:	4641      	mov	r1, r8
 8009f9c:	f000 fb6a 	bl	800a674 <memmove>
 8009fa0:	68a3      	ldr	r3, [r4, #8]
 8009fa2:	1b9b      	subs	r3, r3, r6
 8009fa4:	60a3      	str	r3, [r4, #8]
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	4433      	add	r3, r6
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	2000      	movs	r0, #0
 8009fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	f000 ff31 	bl	800ae1a <_realloc_r>
 8009fb8:	4606      	mov	r6, r0
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d1e0      	bne.n	8009f80 <__ssputs_r+0x5c>
 8009fbe:	6921      	ldr	r1, [r4, #16]
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	f7fe fc35 	bl	8008830 <_free_r>
 8009fc6:	230c      	movs	r3, #12
 8009fc8:	f8ca 3000 	str.w	r3, [sl]
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	e7e9      	b.n	8009fae <__ssputs_r+0x8a>
	...

08009fdc <_svfiprintf_r>:
 8009fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	4698      	mov	r8, r3
 8009fe2:	898b      	ldrh	r3, [r1, #12]
 8009fe4:	061b      	lsls	r3, r3, #24
 8009fe6:	b09d      	sub	sp, #116	@ 0x74
 8009fe8:	4607      	mov	r7, r0
 8009fea:	460d      	mov	r5, r1
 8009fec:	4614      	mov	r4, r2
 8009fee:	d510      	bpl.n	800a012 <_svfiprintf_r+0x36>
 8009ff0:	690b      	ldr	r3, [r1, #16]
 8009ff2:	b973      	cbnz	r3, 800a012 <_svfiprintf_r+0x36>
 8009ff4:	2140      	movs	r1, #64	@ 0x40
 8009ff6:	f7fc fc01 	bl	80067fc <_malloc_r>
 8009ffa:	6028      	str	r0, [r5, #0]
 8009ffc:	6128      	str	r0, [r5, #16]
 8009ffe:	b930      	cbnz	r0, 800a00e <_svfiprintf_r+0x32>
 800a000:	230c      	movs	r3, #12
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	f04f 30ff 	mov.w	r0, #4294967295
 800a008:	b01d      	add	sp, #116	@ 0x74
 800a00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00e:	2340      	movs	r3, #64	@ 0x40
 800a010:	616b      	str	r3, [r5, #20]
 800a012:	2300      	movs	r3, #0
 800a014:	9309      	str	r3, [sp, #36]	@ 0x24
 800a016:	2320      	movs	r3, #32
 800a018:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a01c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a020:	2330      	movs	r3, #48	@ 0x30
 800a022:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1c0 <_svfiprintf_r+0x1e4>
 800a026:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a02a:	f04f 0901 	mov.w	r9, #1
 800a02e:	4623      	mov	r3, r4
 800a030:	469a      	mov	sl, r3
 800a032:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a036:	b10a      	cbz	r2, 800a03c <_svfiprintf_r+0x60>
 800a038:	2a25      	cmp	r2, #37	@ 0x25
 800a03a:	d1f9      	bne.n	800a030 <_svfiprintf_r+0x54>
 800a03c:	ebba 0b04 	subs.w	fp, sl, r4
 800a040:	d00b      	beq.n	800a05a <_svfiprintf_r+0x7e>
 800a042:	465b      	mov	r3, fp
 800a044:	4622      	mov	r2, r4
 800a046:	4629      	mov	r1, r5
 800a048:	4638      	mov	r0, r7
 800a04a:	f7ff ff6b 	bl	8009f24 <__ssputs_r>
 800a04e:	3001      	adds	r0, #1
 800a050:	f000 80a7 	beq.w	800a1a2 <_svfiprintf_r+0x1c6>
 800a054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a056:	445a      	add	r2, fp
 800a058:	9209      	str	r2, [sp, #36]	@ 0x24
 800a05a:	f89a 3000 	ldrb.w	r3, [sl]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 809f 	beq.w	800a1a2 <_svfiprintf_r+0x1c6>
 800a064:	2300      	movs	r3, #0
 800a066:	f04f 32ff 	mov.w	r2, #4294967295
 800a06a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a06e:	f10a 0a01 	add.w	sl, sl, #1
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	9307      	str	r3, [sp, #28]
 800a076:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a07a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a07c:	4654      	mov	r4, sl
 800a07e:	2205      	movs	r2, #5
 800a080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a084:	484e      	ldr	r0, [pc, #312]	@ (800a1c0 <_svfiprintf_r+0x1e4>)
 800a086:	f7f6 f8bb 	bl	8000200 <memchr>
 800a08a:	9a04      	ldr	r2, [sp, #16]
 800a08c:	b9d8      	cbnz	r0, 800a0c6 <_svfiprintf_r+0xea>
 800a08e:	06d0      	lsls	r0, r2, #27
 800a090:	bf44      	itt	mi
 800a092:	2320      	movmi	r3, #32
 800a094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a098:	0711      	lsls	r1, r2, #28
 800a09a:	bf44      	itt	mi
 800a09c:	232b      	movmi	r3, #43	@ 0x2b
 800a09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0a8:	d015      	beq.n	800a0d6 <_svfiprintf_r+0xfa>
 800a0aa:	9a07      	ldr	r2, [sp, #28]
 800a0ac:	4654      	mov	r4, sl
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	f04f 0c0a 	mov.w	ip, #10
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ba:	3b30      	subs	r3, #48	@ 0x30
 800a0bc:	2b09      	cmp	r3, #9
 800a0be:	d94b      	bls.n	800a158 <_svfiprintf_r+0x17c>
 800a0c0:	b1b0      	cbz	r0, 800a0f0 <_svfiprintf_r+0x114>
 800a0c2:	9207      	str	r2, [sp, #28]
 800a0c4:	e014      	b.n	800a0f0 <_svfiprintf_r+0x114>
 800a0c6:	eba0 0308 	sub.w	r3, r0, r8
 800a0ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	9304      	str	r3, [sp, #16]
 800a0d2:	46a2      	mov	sl, r4
 800a0d4:	e7d2      	b.n	800a07c <_svfiprintf_r+0xa0>
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	1d19      	adds	r1, r3, #4
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	9103      	str	r1, [sp, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	bfbb      	ittet	lt
 800a0e2:	425b      	neglt	r3, r3
 800a0e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0e8:	9307      	strge	r3, [sp, #28]
 800a0ea:	9307      	strlt	r3, [sp, #28]
 800a0ec:	bfb8      	it	lt
 800a0ee:	9204      	strlt	r2, [sp, #16]
 800a0f0:	7823      	ldrb	r3, [r4, #0]
 800a0f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0f4:	d10a      	bne.n	800a10c <_svfiprintf_r+0x130>
 800a0f6:	7863      	ldrb	r3, [r4, #1]
 800a0f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0fa:	d132      	bne.n	800a162 <_svfiprintf_r+0x186>
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	1d1a      	adds	r2, r3, #4
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	9203      	str	r2, [sp, #12]
 800a104:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a108:	3402      	adds	r4, #2
 800a10a:	9305      	str	r3, [sp, #20]
 800a10c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1d0 <_svfiprintf_r+0x1f4>
 800a110:	7821      	ldrb	r1, [r4, #0]
 800a112:	2203      	movs	r2, #3
 800a114:	4650      	mov	r0, sl
 800a116:	f7f6 f873 	bl	8000200 <memchr>
 800a11a:	b138      	cbz	r0, 800a12c <_svfiprintf_r+0x150>
 800a11c:	9b04      	ldr	r3, [sp, #16]
 800a11e:	eba0 000a 	sub.w	r0, r0, sl
 800a122:	2240      	movs	r2, #64	@ 0x40
 800a124:	4082      	lsls	r2, r0
 800a126:	4313      	orrs	r3, r2
 800a128:	3401      	adds	r4, #1
 800a12a:	9304      	str	r3, [sp, #16]
 800a12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a130:	4824      	ldr	r0, [pc, #144]	@ (800a1c4 <_svfiprintf_r+0x1e8>)
 800a132:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a136:	2206      	movs	r2, #6
 800a138:	f7f6 f862 	bl	8000200 <memchr>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d036      	beq.n	800a1ae <_svfiprintf_r+0x1d2>
 800a140:	4b21      	ldr	r3, [pc, #132]	@ (800a1c8 <_svfiprintf_r+0x1ec>)
 800a142:	bb1b      	cbnz	r3, 800a18c <_svfiprintf_r+0x1b0>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	3307      	adds	r3, #7
 800a148:	f023 0307 	bic.w	r3, r3, #7
 800a14c:	3308      	adds	r3, #8
 800a14e:	9303      	str	r3, [sp, #12]
 800a150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a152:	4433      	add	r3, r6
 800a154:	9309      	str	r3, [sp, #36]	@ 0x24
 800a156:	e76a      	b.n	800a02e <_svfiprintf_r+0x52>
 800a158:	fb0c 3202 	mla	r2, ip, r2, r3
 800a15c:	460c      	mov	r4, r1
 800a15e:	2001      	movs	r0, #1
 800a160:	e7a8      	b.n	800a0b4 <_svfiprintf_r+0xd8>
 800a162:	2300      	movs	r3, #0
 800a164:	3401      	adds	r4, #1
 800a166:	9305      	str	r3, [sp, #20]
 800a168:	4619      	mov	r1, r3
 800a16a:	f04f 0c0a 	mov.w	ip, #10
 800a16e:	4620      	mov	r0, r4
 800a170:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a174:	3a30      	subs	r2, #48	@ 0x30
 800a176:	2a09      	cmp	r2, #9
 800a178:	d903      	bls.n	800a182 <_svfiprintf_r+0x1a6>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0c6      	beq.n	800a10c <_svfiprintf_r+0x130>
 800a17e:	9105      	str	r1, [sp, #20]
 800a180:	e7c4      	b.n	800a10c <_svfiprintf_r+0x130>
 800a182:	fb0c 2101 	mla	r1, ip, r1, r2
 800a186:	4604      	mov	r4, r0
 800a188:	2301      	movs	r3, #1
 800a18a:	e7f0      	b.n	800a16e <_svfiprintf_r+0x192>
 800a18c:	ab03      	add	r3, sp, #12
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	462a      	mov	r2, r5
 800a192:	4b0e      	ldr	r3, [pc, #56]	@ (800a1cc <_svfiprintf_r+0x1f0>)
 800a194:	a904      	add	r1, sp, #16
 800a196:	4638      	mov	r0, r7
 800a198:	f7fc fc5c 	bl	8006a54 <_printf_float>
 800a19c:	1c42      	adds	r2, r0, #1
 800a19e:	4606      	mov	r6, r0
 800a1a0:	d1d6      	bne.n	800a150 <_svfiprintf_r+0x174>
 800a1a2:	89ab      	ldrh	r3, [r5, #12]
 800a1a4:	065b      	lsls	r3, r3, #25
 800a1a6:	f53f af2d 	bmi.w	800a004 <_svfiprintf_r+0x28>
 800a1aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1ac:	e72c      	b.n	800a008 <_svfiprintf_r+0x2c>
 800a1ae:	ab03      	add	r3, sp, #12
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	462a      	mov	r2, r5
 800a1b4:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <_svfiprintf_r+0x1f0>)
 800a1b6:	a904      	add	r1, sp, #16
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7fc fee3 	bl	8006f84 <_printf_i>
 800a1be:	e7ed      	b.n	800a19c <_svfiprintf_r+0x1c0>
 800a1c0:	0800ce85 	.word	0x0800ce85
 800a1c4:	0800ce8f 	.word	0x0800ce8f
 800a1c8:	08006a55 	.word	0x08006a55
 800a1cc:	08009f25 	.word	0x08009f25
 800a1d0:	0800ce8b 	.word	0x0800ce8b

0800a1d4 <__sfputc_r>:
 800a1d4:	6893      	ldr	r3, [r2, #8]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	b410      	push	{r4}
 800a1dc:	6093      	str	r3, [r2, #8]
 800a1de:	da08      	bge.n	800a1f2 <__sfputc_r+0x1e>
 800a1e0:	6994      	ldr	r4, [r2, #24]
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	db01      	blt.n	800a1ea <__sfputc_r+0x16>
 800a1e6:	290a      	cmp	r1, #10
 800a1e8:	d103      	bne.n	800a1f2 <__sfputc_r+0x1e>
 800a1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ee:	f7fd bb8c 	b.w	800790a <__swbuf_r>
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	1c58      	adds	r0, r3, #1
 800a1f6:	6010      	str	r0, [r2, #0]
 800a1f8:	7019      	strb	r1, [r3, #0]
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <__sfputs_r>:
 800a202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a204:	4606      	mov	r6, r0
 800a206:	460f      	mov	r7, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	18d5      	adds	r5, r2, r3
 800a20c:	42ac      	cmp	r4, r5
 800a20e:	d101      	bne.n	800a214 <__sfputs_r+0x12>
 800a210:	2000      	movs	r0, #0
 800a212:	e007      	b.n	800a224 <__sfputs_r+0x22>
 800a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a218:	463a      	mov	r2, r7
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ffda 	bl	800a1d4 <__sfputc_r>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d1f3      	bne.n	800a20c <__sfputs_r+0xa>
 800a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a228 <_vfiprintf_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	460d      	mov	r5, r1
 800a22e:	b09d      	sub	sp, #116	@ 0x74
 800a230:	4614      	mov	r4, r2
 800a232:	4698      	mov	r8, r3
 800a234:	4606      	mov	r6, r0
 800a236:	b118      	cbz	r0, 800a240 <_vfiprintf_r+0x18>
 800a238:	6a03      	ldr	r3, [r0, #32]
 800a23a:	b90b      	cbnz	r3, 800a240 <_vfiprintf_r+0x18>
 800a23c:	f7fd fa5a 	bl	80076f4 <__sinit>
 800a240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a242:	07d9      	lsls	r1, r3, #31
 800a244:	d405      	bmi.n	800a252 <_vfiprintf_r+0x2a>
 800a246:	89ab      	ldrh	r3, [r5, #12]
 800a248:	059a      	lsls	r2, r3, #22
 800a24a:	d402      	bmi.n	800a252 <_vfiprintf_r+0x2a>
 800a24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a24e:	f7fd fc7e 	bl	8007b4e <__retarget_lock_acquire_recursive>
 800a252:	89ab      	ldrh	r3, [r5, #12]
 800a254:	071b      	lsls	r3, r3, #28
 800a256:	d501      	bpl.n	800a25c <_vfiprintf_r+0x34>
 800a258:	692b      	ldr	r3, [r5, #16]
 800a25a:	b99b      	cbnz	r3, 800a284 <_vfiprintf_r+0x5c>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4630      	mov	r0, r6
 800a260:	f7fd fb92 	bl	8007988 <__swsetup_r>
 800a264:	b170      	cbz	r0, 800a284 <_vfiprintf_r+0x5c>
 800a266:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a268:	07dc      	lsls	r4, r3, #31
 800a26a:	d504      	bpl.n	800a276 <_vfiprintf_r+0x4e>
 800a26c:	f04f 30ff 	mov.w	r0, #4294967295
 800a270:	b01d      	add	sp, #116	@ 0x74
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	89ab      	ldrh	r3, [r5, #12]
 800a278:	0598      	lsls	r0, r3, #22
 800a27a:	d4f7      	bmi.n	800a26c <_vfiprintf_r+0x44>
 800a27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a27e:	f7fd fc67 	bl	8007b50 <__retarget_lock_release_recursive>
 800a282:	e7f3      	b.n	800a26c <_vfiprintf_r+0x44>
 800a284:	2300      	movs	r3, #0
 800a286:	9309      	str	r3, [sp, #36]	@ 0x24
 800a288:	2320      	movs	r3, #32
 800a28a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a292:	2330      	movs	r3, #48	@ 0x30
 800a294:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a444 <_vfiprintf_r+0x21c>
 800a298:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a29c:	f04f 0901 	mov.w	r9, #1
 800a2a0:	4623      	mov	r3, r4
 800a2a2:	469a      	mov	sl, r3
 800a2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a8:	b10a      	cbz	r2, 800a2ae <_vfiprintf_r+0x86>
 800a2aa:	2a25      	cmp	r2, #37	@ 0x25
 800a2ac:	d1f9      	bne.n	800a2a2 <_vfiprintf_r+0x7a>
 800a2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a2b2:	d00b      	beq.n	800a2cc <_vfiprintf_r+0xa4>
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ffa1 	bl	800a202 <__sfputs_r>
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	f000 80a7 	beq.w	800a414 <_vfiprintf_r+0x1ec>
 800a2c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2c8:	445a      	add	r2, fp
 800a2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 809f 	beq.w	800a414 <_vfiprintf_r+0x1ec>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2e0:	f10a 0a01 	add.w	sl, sl, #1
 800a2e4:	9304      	str	r3, [sp, #16]
 800a2e6:	9307      	str	r3, [sp, #28]
 800a2e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2ee:	4654      	mov	r4, sl
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f6:	4853      	ldr	r0, [pc, #332]	@ (800a444 <_vfiprintf_r+0x21c>)
 800a2f8:	f7f5 ff82 	bl	8000200 <memchr>
 800a2fc:	9a04      	ldr	r2, [sp, #16]
 800a2fe:	b9d8      	cbnz	r0, 800a338 <_vfiprintf_r+0x110>
 800a300:	06d1      	lsls	r1, r2, #27
 800a302:	bf44      	itt	mi
 800a304:	2320      	movmi	r3, #32
 800a306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a30a:	0713      	lsls	r3, r2, #28
 800a30c:	bf44      	itt	mi
 800a30e:	232b      	movmi	r3, #43	@ 0x2b
 800a310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a314:	f89a 3000 	ldrb.w	r3, [sl]
 800a318:	2b2a      	cmp	r3, #42	@ 0x2a
 800a31a:	d015      	beq.n	800a348 <_vfiprintf_r+0x120>
 800a31c:	9a07      	ldr	r2, [sp, #28]
 800a31e:	4654      	mov	r4, sl
 800a320:	2000      	movs	r0, #0
 800a322:	f04f 0c0a 	mov.w	ip, #10
 800a326:	4621      	mov	r1, r4
 800a328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a32c:	3b30      	subs	r3, #48	@ 0x30
 800a32e:	2b09      	cmp	r3, #9
 800a330:	d94b      	bls.n	800a3ca <_vfiprintf_r+0x1a2>
 800a332:	b1b0      	cbz	r0, 800a362 <_vfiprintf_r+0x13a>
 800a334:	9207      	str	r2, [sp, #28]
 800a336:	e014      	b.n	800a362 <_vfiprintf_r+0x13a>
 800a338:	eba0 0308 	sub.w	r3, r0, r8
 800a33c:	fa09 f303 	lsl.w	r3, r9, r3
 800a340:	4313      	orrs	r3, r2
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	46a2      	mov	sl, r4
 800a346:	e7d2      	b.n	800a2ee <_vfiprintf_r+0xc6>
 800a348:	9b03      	ldr	r3, [sp, #12]
 800a34a:	1d19      	adds	r1, r3, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	9103      	str	r1, [sp, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	bfbb      	ittet	lt
 800a354:	425b      	neglt	r3, r3
 800a356:	f042 0202 	orrlt.w	r2, r2, #2
 800a35a:	9307      	strge	r3, [sp, #28]
 800a35c:	9307      	strlt	r3, [sp, #28]
 800a35e:	bfb8      	it	lt
 800a360:	9204      	strlt	r2, [sp, #16]
 800a362:	7823      	ldrb	r3, [r4, #0]
 800a364:	2b2e      	cmp	r3, #46	@ 0x2e
 800a366:	d10a      	bne.n	800a37e <_vfiprintf_r+0x156>
 800a368:	7863      	ldrb	r3, [r4, #1]
 800a36a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a36c:	d132      	bne.n	800a3d4 <_vfiprintf_r+0x1ac>
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	1d1a      	adds	r2, r3, #4
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	9203      	str	r2, [sp, #12]
 800a376:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a37a:	3402      	adds	r4, #2
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a454 <_vfiprintf_r+0x22c>
 800a382:	7821      	ldrb	r1, [r4, #0]
 800a384:	2203      	movs	r2, #3
 800a386:	4650      	mov	r0, sl
 800a388:	f7f5 ff3a 	bl	8000200 <memchr>
 800a38c:	b138      	cbz	r0, 800a39e <_vfiprintf_r+0x176>
 800a38e:	9b04      	ldr	r3, [sp, #16]
 800a390:	eba0 000a 	sub.w	r0, r0, sl
 800a394:	2240      	movs	r2, #64	@ 0x40
 800a396:	4082      	lsls	r2, r0
 800a398:	4313      	orrs	r3, r2
 800a39a:	3401      	adds	r4, #1
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a2:	4829      	ldr	r0, [pc, #164]	@ (800a448 <_vfiprintf_r+0x220>)
 800a3a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3a8:	2206      	movs	r2, #6
 800a3aa:	f7f5 ff29 	bl	8000200 <memchr>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d03f      	beq.n	800a432 <_vfiprintf_r+0x20a>
 800a3b2:	4b26      	ldr	r3, [pc, #152]	@ (800a44c <_vfiprintf_r+0x224>)
 800a3b4:	bb1b      	cbnz	r3, 800a3fe <_vfiprintf_r+0x1d6>
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	3307      	adds	r3, #7
 800a3ba:	f023 0307 	bic.w	r3, r3, #7
 800a3be:	3308      	adds	r3, #8
 800a3c0:	9303      	str	r3, [sp, #12]
 800a3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c4:	443b      	add	r3, r7
 800a3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3c8:	e76a      	b.n	800a2a0 <_vfiprintf_r+0x78>
 800a3ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	2001      	movs	r0, #1
 800a3d2:	e7a8      	b.n	800a326 <_vfiprintf_r+0xfe>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	3401      	adds	r4, #1
 800a3d8:	9305      	str	r3, [sp, #20]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	f04f 0c0a 	mov.w	ip, #10
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e6:	3a30      	subs	r2, #48	@ 0x30
 800a3e8:	2a09      	cmp	r2, #9
 800a3ea:	d903      	bls.n	800a3f4 <_vfiprintf_r+0x1cc>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0c6      	beq.n	800a37e <_vfiprintf_r+0x156>
 800a3f0:	9105      	str	r1, [sp, #20]
 800a3f2:	e7c4      	b.n	800a37e <_vfiprintf_r+0x156>
 800a3f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e7f0      	b.n	800a3e0 <_vfiprintf_r+0x1b8>
 800a3fe:	ab03      	add	r3, sp, #12
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	462a      	mov	r2, r5
 800a404:	4b12      	ldr	r3, [pc, #72]	@ (800a450 <_vfiprintf_r+0x228>)
 800a406:	a904      	add	r1, sp, #16
 800a408:	4630      	mov	r0, r6
 800a40a:	f7fc fb23 	bl	8006a54 <_printf_float>
 800a40e:	4607      	mov	r7, r0
 800a410:	1c78      	adds	r0, r7, #1
 800a412:	d1d6      	bne.n	800a3c2 <_vfiprintf_r+0x19a>
 800a414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a416:	07d9      	lsls	r1, r3, #31
 800a418:	d405      	bmi.n	800a426 <_vfiprintf_r+0x1fe>
 800a41a:	89ab      	ldrh	r3, [r5, #12]
 800a41c:	059a      	lsls	r2, r3, #22
 800a41e:	d402      	bmi.n	800a426 <_vfiprintf_r+0x1fe>
 800a420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a422:	f7fd fb95 	bl	8007b50 <__retarget_lock_release_recursive>
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	065b      	lsls	r3, r3, #25
 800a42a:	f53f af1f 	bmi.w	800a26c <_vfiprintf_r+0x44>
 800a42e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a430:	e71e      	b.n	800a270 <_vfiprintf_r+0x48>
 800a432:	ab03      	add	r3, sp, #12
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	462a      	mov	r2, r5
 800a438:	4b05      	ldr	r3, [pc, #20]	@ (800a450 <_vfiprintf_r+0x228>)
 800a43a:	a904      	add	r1, sp, #16
 800a43c:	4630      	mov	r0, r6
 800a43e:	f7fc fda1 	bl	8006f84 <_printf_i>
 800a442:	e7e4      	b.n	800a40e <_vfiprintf_r+0x1e6>
 800a444:	0800ce85 	.word	0x0800ce85
 800a448:	0800ce8f 	.word	0x0800ce8f
 800a44c:	08006a55 	.word	0x08006a55
 800a450:	0800a203 	.word	0x0800a203
 800a454:	0800ce8b 	.word	0x0800ce8b

0800a458 <__sflush_r>:
 800a458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	0716      	lsls	r6, r2, #28
 800a462:	4605      	mov	r5, r0
 800a464:	460c      	mov	r4, r1
 800a466:	d454      	bmi.n	800a512 <__sflush_r+0xba>
 800a468:	684b      	ldr	r3, [r1, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	dc02      	bgt.n	800a474 <__sflush_r+0x1c>
 800a46e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a470:	2b00      	cmp	r3, #0
 800a472:	dd48      	ble.n	800a506 <__sflush_r+0xae>
 800a474:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a476:	2e00      	cmp	r6, #0
 800a478:	d045      	beq.n	800a506 <__sflush_r+0xae>
 800a47a:	2300      	movs	r3, #0
 800a47c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a480:	682f      	ldr	r7, [r5, #0]
 800a482:	6a21      	ldr	r1, [r4, #32]
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	d030      	beq.n	800a4ea <__sflush_r+0x92>
 800a488:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	0759      	lsls	r1, r3, #29
 800a48e:	d505      	bpl.n	800a49c <__sflush_r+0x44>
 800a490:	6863      	ldr	r3, [r4, #4]
 800a492:	1ad2      	subs	r2, r2, r3
 800a494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a496:	b10b      	cbz	r3, 800a49c <__sflush_r+0x44>
 800a498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	2300      	movs	r3, #0
 800a49e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4a0:	6a21      	ldr	r1, [r4, #32]
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b0      	blx	r6
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	d106      	bne.n	800a4ba <__sflush_r+0x62>
 800a4ac:	6829      	ldr	r1, [r5, #0]
 800a4ae:	291d      	cmp	r1, #29
 800a4b0:	d82b      	bhi.n	800a50a <__sflush_r+0xb2>
 800a4b2:	4a2a      	ldr	r2, [pc, #168]	@ (800a55c <__sflush_r+0x104>)
 800a4b4:	40ca      	lsrs	r2, r1
 800a4b6:	07d6      	lsls	r6, r2, #31
 800a4b8:	d527      	bpl.n	800a50a <__sflush_r+0xb2>
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	6062      	str	r2, [r4, #4]
 800a4be:	04d9      	lsls	r1, r3, #19
 800a4c0:	6922      	ldr	r2, [r4, #16]
 800a4c2:	6022      	str	r2, [r4, #0]
 800a4c4:	d504      	bpl.n	800a4d0 <__sflush_r+0x78>
 800a4c6:	1c42      	adds	r2, r0, #1
 800a4c8:	d101      	bne.n	800a4ce <__sflush_r+0x76>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	b903      	cbnz	r3, 800a4d0 <__sflush_r+0x78>
 800a4ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4d2:	602f      	str	r7, [r5, #0]
 800a4d4:	b1b9      	cbz	r1, 800a506 <__sflush_r+0xae>
 800a4d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	d002      	beq.n	800a4e4 <__sflush_r+0x8c>
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f7fe f9a6 	bl	8008830 <_free_r>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4e8:	e00d      	b.n	800a506 <__sflush_r+0xae>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	47b0      	blx	r6
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	1c50      	adds	r0, r2, #1
 800a4f4:	d1c9      	bne.n	800a48a <__sflush_r+0x32>
 800a4f6:	682b      	ldr	r3, [r5, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0c6      	beq.n	800a48a <__sflush_r+0x32>
 800a4fc:	2b1d      	cmp	r3, #29
 800a4fe:	d001      	beq.n	800a504 <__sflush_r+0xac>
 800a500:	2b16      	cmp	r3, #22
 800a502:	d11e      	bne.n	800a542 <__sflush_r+0xea>
 800a504:	602f      	str	r7, [r5, #0]
 800a506:	2000      	movs	r0, #0
 800a508:	e022      	b.n	800a550 <__sflush_r+0xf8>
 800a50a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a50e:	b21b      	sxth	r3, r3
 800a510:	e01b      	b.n	800a54a <__sflush_r+0xf2>
 800a512:	690f      	ldr	r7, [r1, #16]
 800a514:	2f00      	cmp	r7, #0
 800a516:	d0f6      	beq.n	800a506 <__sflush_r+0xae>
 800a518:	0793      	lsls	r3, r2, #30
 800a51a:	680e      	ldr	r6, [r1, #0]
 800a51c:	bf08      	it	eq
 800a51e:	694b      	ldreq	r3, [r1, #20]
 800a520:	600f      	str	r7, [r1, #0]
 800a522:	bf18      	it	ne
 800a524:	2300      	movne	r3, #0
 800a526:	eba6 0807 	sub.w	r8, r6, r7
 800a52a:	608b      	str	r3, [r1, #8]
 800a52c:	f1b8 0f00 	cmp.w	r8, #0
 800a530:	dde9      	ble.n	800a506 <__sflush_r+0xae>
 800a532:	6a21      	ldr	r1, [r4, #32]
 800a534:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a536:	4643      	mov	r3, r8
 800a538:	463a      	mov	r2, r7
 800a53a:	4628      	mov	r0, r5
 800a53c:	47b0      	blx	r6
 800a53e:	2800      	cmp	r0, #0
 800a540:	dc08      	bgt.n	800a554 <__sflush_r+0xfc>
 800a542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	f04f 30ff 	mov.w	r0, #4294967295
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a554:	4407      	add	r7, r0
 800a556:	eba8 0800 	sub.w	r8, r8, r0
 800a55a:	e7e7      	b.n	800a52c <__sflush_r+0xd4>
 800a55c:	20400001 	.word	0x20400001

0800a560 <_fflush_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	690b      	ldr	r3, [r1, #16]
 800a564:	4605      	mov	r5, r0
 800a566:	460c      	mov	r4, r1
 800a568:	b913      	cbnz	r3, 800a570 <_fflush_r+0x10>
 800a56a:	2500      	movs	r5, #0
 800a56c:	4628      	mov	r0, r5
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	b118      	cbz	r0, 800a57a <_fflush_r+0x1a>
 800a572:	6a03      	ldr	r3, [r0, #32]
 800a574:	b90b      	cbnz	r3, 800a57a <_fflush_r+0x1a>
 800a576:	f7fd f8bd 	bl	80076f4 <__sinit>
 800a57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0f3      	beq.n	800a56a <_fflush_r+0xa>
 800a582:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a584:	07d0      	lsls	r0, r2, #31
 800a586:	d404      	bmi.n	800a592 <_fflush_r+0x32>
 800a588:	0599      	lsls	r1, r3, #22
 800a58a:	d402      	bmi.n	800a592 <_fflush_r+0x32>
 800a58c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a58e:	f7fd fade 	bl	8007b4e <__retarget_lock_acquire_recursive>
 800a592:	4628      	mov	r0, r5
 800a594:	4621      	mov	r1, r4
 800a596:	f7ff ff5f 	bl	800a458 <__sflush_r>
 800a59a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a59c:	07da      	lsls	r2, r3, #31
 800a59e:	4605      	mov	r5, r0
 800a5a0:	d4e4      	bmi.n	800a56c <_fflush_r+0xc>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	059b      	lsls	r3, r3, #22
 800a5a6:	d4e1      	bmi.n	800a56c <_fflush_r+0xc>
 800a5a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5aa:	f7fd fad1 	bl	8007b50 <__retarget_lock_release_recursive>
 800a5ae:	e7dd      	b.n	800a56c <_fflush_r+0xc>

0800a5b0 <__swhatbuf_r>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	b096      	sub	sp, #88	@ 0x58
 800a5bc:	4615      	mov	r5, r2
 800a5be:	461e      	mov	r6, r3
 800a5c0:	da0d      	bge.n	800a5de <__swhatbuf_r+0x2e>
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5c8:	f04f 0100 	mov.w	r1, #0
 800a5cc:	bf14      	ite	ne
 800a5ce:	2340      	movne	r3, #64	@ 0x40
 800a5d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	6031      	str	r1, [r6, #0]
 800a5d8:	602b      	str	r3, [r5, #0]
 800a5da:	b016      	add	sp, #88	@ 0x58
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
 800a5de:	466a      	mov	r2, sp
 800a5e0:	f000 f874 	bl	800a6cc <_fstat_r>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	dbec      	blt.n	800a5c2 <__swhatbuf_r+0x12>
 800a5e8:	9901      	ldr	r1, [sp, #4]
 800a5ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5f2:	4259      	negs	r1, r3
 800a5f4:	4159      	adcs	r1, r3
 800a5f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5fa:	e7eb      	b.n	800a5d4 <__swhatbuf_r+0x24>

0800a5fc <__smakebuf_r>:
 800a5fc:	898b      	ldrh	r3, [r1, #12]
 800a5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a600:	079d      	lsls	r5, r3, #30
 800a602:	4606      	mov	r6, r0
 800a604:	460c      	mov	r4, r1
 800a606:	d507      	bpl.n	800a618 <__smakebuf_r+0x1c>
 800a608:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	2301      	movs	r3, #1
 800a612:	6163      	str	r3, [r4, #20]
 800a614:	b003      	add	sp, #12
 800a616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a618:	ab01      	add	r3, sp, #4
 800a61a:	466a      	mov	r2, sp
 800a61c:	f7ff ffc8 	bl	800a5b0 <__swhatbuf_r>
 800a620:	9f00      	ldr	r7, [sp, #0]
 800a622:	4605      	mov	r5, r0
 800a624:	4639      	mov	r1, r7
 800a626:	4630      	mov	r0, r6
 800a628:	f7fc f8e8 	bl	80067fc <_malloc_r>
 800a62c:	b948      	cbnz	r0, 800a642 <__smakebuf_r+0x46>
 800a62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a632:	059a      	lsls	r2, r3, #22
 800a634:	d4ee      	bmi.n	800a614 <__smakebuf_r+0x18>
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	f043 0302 	orr.w	r3, r3, #2
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	e7e2      	b.n	800a608 <__smakebuf_r+0xc>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	6020      	str	r0, [r4, #0]
 800a646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a64a:	81a3      	strh	r3, [r4, #12]
 800a64c:	9b01      	ldr	r3, [sp, #4]
 800a64e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a652:	b15b      	cbz	r3, 800a66c <__smakebuf_r+0x70>
 800a654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f849 	bl	800a6f0 <_isatty_r>
 800a65e:	b128      	cbz	r0, 800a66c <__smakebuf_r+0x70>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	431d      	orrs	r5, r3
 800a670:	81a5      	strh	r5, [r4, #12]
 800a672:	e7cf      	b.n	800a614 <__smakebuf_r+0x18>

0800a674 <memmove>:
 800a674:	4288      	cmp	r0, r1
 800a676:	b510      	push	{r4, lr}
 800a678:	eb01 0402 	add.w	r4, r1, r2
 800a67c:	d902      	bls.n	800a684 <memmove+0x10>
 800a67e:	4284      	cmp	r4, r0
 800a680:	4623      	mov	r3, r4
 800a682:	d807      	bhi.n	800a694 <memmove+0x20>
 800a684:	1e43      	subs	r3, r0, #1
 800a686:	42a1      	cmp	r1, r4
 800a688:	d008      	beq.n	800a69c <memmove+0x28>
 800a68a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a68e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a692:	e7f8      	b.n	800a686 <memmove+0x12>
 800a694:	4402      	add	r2, r0
 800a696:	4601      	mov	r1, r0
 800a698:	428a      	cmp	r2, r1
 800a69a:	d100      	bne.n	800a69e <memmove+0x2a>
 800a69c:	bd10      	pop	{r4, pc}
 800a69e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6a6:	e7f7      	b.n	800a698 <memmove+0x24>

0800a6a8 <strncmp>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	b16a      	cbz	r2, 800a6c8 <strncmp+0x20>
 800a6ac:	3901      	subs	r1, #1
 800a6ae:	1884      	adds	r4, r0, r2
 800a6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d103      	bne.n	800a6c4 <strncmp+0x1c>
 800a6bc:	42a0      	cmp	r0, r4
 800a6be:	d001      	beq.n	800a6c4 <strncmp+0x1c>
 800a6c0:	2a00      	cmp	r2, #0
 800a6c2:	d1f5      	bne.n	800a6b0 <strncmp+0x8>
 800a6c4:	1ad0      	subs	r0, r2, r3
 800a6c6:	bd10      	pop	{r4, pc}
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	e7fc      	b.n	800a6c6 <strncmp+0x1e>

0800a6cc <_fstat_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4d07      	ldr	r5, [pc, #28]	@ (800a6ec <_fstat_r+0x20>)
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	f7f8 f84d 	bl	8002778 <_fstat>
 800a6de:	1c43      	adds	r3, r0, #1
 800a6e0:	d102      	bne.n	800a6e8 <_fstat_r+0x1c>
 800a6e2:	682b      	ldr	r3, [r5, #0]
 800a6e4:	b103      	cbz	r3, 800a6e8 <_fstat_r+0x1c>
 800a6e6:	6023      	str	r3, [r4, #0]
 800a6e8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ea:	bf00      	nop
 800a6ec:	2005c648 	.word	0x2005c648

0800a6f0 <_isatty_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d06      	ldr	r5, [pc, #24]	@ (800a70c <_isatty_r+0x1c>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	f7f8 f84c 	bl	8002798 <_isatty>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_isatty_r+0x1a>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_isatty_r+0x1a>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	2005c648 	.word	0x2005c648

0800a710 <nan>:
 800a710:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a718 <nan+0x8>
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	00000000 	.word	0x00000000
 800a71c:	7ff80000 	.word	0x7ff80000

0800a720 <__assert_func>:
 800a720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a722:	4614      	mov	r4, r2
 800a724:	461a      	mov	r2, r3
 800a726:	4b09      	ldr	r3, [pc, #36]	@ (800a74c <__assert_func+0x2c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4605      	mov	r5, r0
 800a72c:	68d8      	ldr	r0, [r3, #12]
 800a72e:	b14c      	cbz	r4, 800a744 <__assert_func+0x24>
 800a730:	4b07      	ldr	r3, [pc, #28]	@ (800a750 <__assert_func+0x30>)
 800a732:	9100      	str	r1, [sp, #0]
 800a734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a738:	4906      	ldr	r1, [pc, #24]	@ (800a754 <__assert_func+0x34>)
 800a73a:	462b      	mov	r3, r5
 800a73c:	f000 fba8 	bl	800ae90 <fiprintf>
 800a740:	f000 fbb8 	bl	800aeb4 <abort>
 800a744:	4b04      	ldr	r3, [pc, #16]	@ (800a758 <__assert_func+0x38>)
 800a746:	461c      	mov	r4, r3
 800a748:	e7f3      	b.n	800a732 <__assert_func+0x12>
 800a74a:	bf00      	nop
 800a74c:	20040020 	.word	0x20040020
 800a750:	0800ce9e 	.word	0x0800ce9e
 800a754:	0800ceab 	.word	0x0800ceab
 800a758:	0800ced9 	.word	0x0800ced9

0800a75c <_calloc_r>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	fba1 5402 	umull	r5, r4, r1, r2
 800a762:	b934      	cbnz	r4, 800a772 <_calloc_r+0x16>
 800a764:	4629      	mov	r1, r5
 800a766:	f7fc f849 	bl	80067fc <_malloc_r>
 800a76a:	4606      	mov	r6, r0
 800a76c:	b928      	cbnz	r0, 800a77a <_calloc_r+0x1e>
 800a76e:	4630      	mov	r0, r6
 800a770:	bd70      	pop	{r4, r5, r6, pc}
 800a772:	220c      	movs	r2, #12
 800a774:	6002      	str	r2, [r0, #0]
 800a776:	2600      	movs	r6, #0
 800a778:	e7f9      	b.n	800a76e <_calloc_r+0x12>
 800a77a:	462a      	mov	r2, r5
 800a77c:	4621      	mov	r1, r4
 800a77e:	f7fd f959 	bl	8007a34 <memset>
 800a782:	e7f4      	b.n	800a76e <_calloc_r+0x12>

0800a784 <rshift>:
 800a784:	6903      	ldr	r3, [r0, #16]
 800a786:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a78a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a78e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a792:	f100 0414 	add.w	r4, r0, #20
 800a796:	dd45      	ble.n	800a824 <rshift+0xa0>
 800a798:	f011 011f 	ands.w	r1, r1, #31
 800a79c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7a4:	d10c      	bne.n	800a7c0 <rshift+0x3c>
 800a7a6:	f100 0710 	add.w	r7, r0, #16
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	42b1      	cmp	r1, r6
 800a7ae:	d334      	bcc.n	800a81a <rshift+0x96>
 800a7b0:	1a9b      	subs	r3, r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	1eea      	subs	r2, r5, #3
 800a7b6:	4296      	cmp	r6, r2
 800a7b8:	bf38      	it	cc
 800a7ba:	2300      	movcc	r3, #0
 800a7bc:	4423      	add	r3, r4
 800a7be:	e015      	b.n	800a7ec <rshift+0x68>
 800a7c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7c4:	f1c1 0820 	rsb	r8, r1, #32
 800a7c8:	40cf      	lsrs	r7, r1
 800a7ca:	f105 0e04 	add.w	lr, r5, #4
 800a7ce:	46a1      	mov	r9, r4
 800a7d0:	4576      	cmp	r6, lr
 800a7d2:	46f4      	mov	ip, lr
 800a7d4:	d815      	bhi.n	800a802 <rshift+0x7e>
 800a7d6:	1a9a      	subs	r2, r3, r2
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	3a04      	subs	r2, #4
 800a7dc:	3501      	adds	r5, #1
 800a7de:	42ae      	cmp	r6, r5
 800a7e0:	bf38      	it	cc
 800a7e2:	2200      	movcc	r2, #0
 800a7e4:	18a3      	adds	r3, r4, r2
 800a7e6:	50a7      	str	r7, [r4, r2]
 800a7e8:	b107      	cbz	r7, 800a7ec <rshift+0x68>
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	1b1a      	subs	r2, r3, r4
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7f4:	bf08      	it	eq
 800a7f6:	2300      	moveq	r3, #0
 800a7f8:	6102      	str	r2, [r0, #16]
 800a7fa:	bf08      	it	eq
 800a7fc:	6143      	streq	r3, [r0, #20]
 800a7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a802:	f8dc c000 	ldr.w	ip, [ip]
 800a806:	fa0c fc08 	lsl.w	ip, ip, r8
 800a80a:	ea4c 0707 	orr.w	r7, ip, r7
 800a80e:	f849 7b04 	str.w	r7, [r9], #4
 800a812:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a816:	40cf      	lsrs	r7, r1
 800a818:	e7da      	b.n	800a7d0 <rshift+0x4c>
 800a81a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a81e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a822:	e7c3      	b.n	800a7ac <rshift+0x28>
 800a824:	4623      	mov	r3, r4
 800a826:	e7e1      	b.n	800a7ec <rshift+0x68>

0800a828 <__hexdig_fun>:
 800a828:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a82c:	2b09      	cmp	r3, #9
 800a82e:	d802      	bhi.n	800a836 <__hexdig_fun+0xe>
 800a830:	3820      	subs	r0, #32
 800a832:	b2c0      	uxtb	r0, r0
 800a834:	4770      	bx	lr
 800a836:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a83a:	2b05      	cmp	r3, #5
 800a83c:	d801      	bhi.n	800a842 <__hexdig_fun+0x1a>
 800a83e:	3847      	subs	r0, #71	@ 0x47
 800a840:	e7f7      	b.n	800a832 <__hexdig_fun+0xa>
 800a842:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a846:	2b05      	cmp	r3, #5
 800a848:	d801      	bhi.n	800a84e <__hexdig_fun+0x26>
 800a84a:	3827      	subs	r0, #39	@ 0x27
 800a84c:	e7f1      	b.n	800a832 <__hexdig_fun+0xa>
 800a84e:	2000      	movs	r0, #0
 800a850:	4770      	bx	lr
	...

0800a854 <__gethex>:
 800a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a858:	b085      	sub	sp, #20
 800a85a:	468a      	mov	sl, r1
 800a85c:	9302      	str	r3, [sp, #8]
 800a85e:	680b      	ldr	r3, [r1, #0]
 800a860:	9001      	str	r0, [sp, #4]
 800a862:	4690      	mov	r8, r2
 800a864:	1c9c      	adds	r4, r3, #2
 800a866:	46a1      	mov	r9, r4
 800a868:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a86c:	2830      	cmp	r0, #48	@ 0x30
 800a86e:	d0fa      	beq.n	800a866 <__gethex+0x12>
 800a870:	eba9 0303 	sub.w	r3, r9, r3
 800a874:	f1a3 0b02 	sub.w	fp, r3, #2
 800a878:	f7ff ffd6 	bl	800a828 <__hexdig_fun>
 800a87c:	4605      	mov	r5, r0
 800a87e:	2800      	cmp	r0, #0
 800a880:	d168      	bne.n	800a954 <__gethex+0x100>
 800a882:	49a0      	ldr	r1, [pc, #640]	@ (800ab04 <__gethex+0x2b0>)
 800a884:	2201      	movs	r2, #1
 800a886:	4648      	mov	r0, r9
 800a888:	f7ff ff0e 	bl	800a6a8 <strncmp>
 800a88c:	4607      	mov	r7, r0
 800a88e:	2800      	cmp	r0, #0
 800a890:	d167      	bne.n	800a962 <__gethex+0x10e>
 800a892:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a896:	4626      	mov	r6, r4
 800a898:	f7ff ffc6 	bl	800a828 <__hexdig_fun>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d062      	beq.n	800a966 <__gethex+0x112>
 800a8a0:	4623      	mov	r3, r4
 800a8a2:	7818      	ldrb	r0, [r3, #0]
 800a8a4:	2830      	cmp	r0, #48	@ 0x30
 800a8a6:	4699      	mov	r9, r3
 800a8a8:	f103 0301 	add.w	r3, r3, #1
 800a8ac:	d0f9      	beq.n	800a8a2 <__gethex+0x4e>
 800a8ae:	f7ff ffbb 	bl	800a828 <__hexdig_fun>
 800a8b2:	fab0 f580 	clz	r5, r0
 800a8b6:	096d      	lsrs	r5, r5, #5
 800a8b8:	f04f 0b01 	mov.w	fp, #1
 800a8bc:	464a      	mov	r2, r9
 800a8be:	4616      	mov	r6, r2
 800a8c0:	3201      	adds	r2, #1
 800a8c2:	7830      	ldrb	r0, [r6, #0]
 800a8c4:	f7ff ffb0 	bl	800a828 <__hexdig_fun>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d1f8      	bne.n	800a8be <__gethex+0x6a>
 800a8cc:	498d      	ldr	r1, [pc, #564]	@ (800ab04 <__gethex+0x2b0>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f7ff fee9 	bl	800a6a8 <strncmp>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d13f      	bne.n	800a95a <__gethex+0x106>
 800a8da:	b944      	cbnz	r4, 800a8ee <__gethex+0x9a>
 800a8dc:	1c74      	adds	r4, r6, #1
 800a8de:	4622      	mov	r2, r4
 800a8e0:	4616      	mov	r6, r2
 800a8e2:	3201      	adds	r2, #1
 800a8e4:	7830      	ldrb	r0, [r6, #0]
 800a8e6:	f7ff ff9f 	bl	800a828 <__hexdig_fun>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d1f8      	bne.n	800a8e0 <__gethex+0x8c>
 800a8ee:	1ba4      	subs	r4, r4, r6
 800a8f0:	00a7      	lsls	r7, r4, #2
 800a8f2:	7833      	ldrb	r3, [r6, #0]
 800a8f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a8f8:	2b50      	cmp	r3, #80	@ 0x50
 800a8fa:	d13e      	bne.n	800a97a <__gethex+0x126>
 800a8fc:	7873      	ldrb	r3, [r6, #1]
 800a8fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800a900:	d033      	beq.n	800a96a <__gethex+0x116>
 800a902:	2b2d      	cmp	r3, #45	@ 0x2d
 800a904:	d034      	beq.n	800a970 <__gethex+0x11c>
 800a906:	1c71      	adds	r1, r6, #1
 800a908:	2400      	movs	r4, #0
 800a90a:	7808      	ldrb	r0, [r1, #0]
 800a90c:	f7ff ff8c 	bl	800a828 <__hexdig_fun>
 800a910:	1e43      	subs	r3, r0, #1
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b18      	cmp	r3, #24
 800a916:	d830      	bhi.n	800a97a <__gethex+0x126>
 800a918:	f1a0 0210 	sub.w	r2, r0, #16
 800a91c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a920:	f7ff ff82 	bl	800a828 <__hexdig_fun>
 800a924:	f100 3cff 	add.w	ip, r0, #4294967295
 800a928:	fa5f fc8c 	uxtb.w	ip, ip
 800a92c:	f1bc 0f18 	cmp.w	ip, #24
 800a930:	f04f 030a 	mov.w	r3, #10
 800a934:	d91e      	bls.n	800a974 <__gethex+0x120>
 800a936:	b104      	cbz	r4, 800a93a <__gethex+0xe6>
 800a938:	4252      	negs	r2, r2
 800a93a:	4417      	add	r7, r2
 800a93c:	f8ca 1000 	str.w	r1, [sl]
 800a940:	b1ed      	cbz	r5, 800a97e <__gethex+0x12a>
 800a942:	f1bb 0f00 	cmp.w	fp, #0
 800a946:	bf0c      	ite	eq
 800a948:	2506      	moveq	r5, #6
 800a94a:	2500      	movne	r5, #0
 800a94c:	4628      	mov	r0, r5
 800a94e:	b005      	add	sp, #20
 800a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a954:	2500      	movs	r5, #0
 800a956:	462c      	mov	r4, r5
 800a958:	e7b0      	b.n	800a8bc <__gethex+0x68>
 800a95a:	2c00      	cmp	r4, #0
 800a95c:	d1c7      	bne.n	800a8ee <__gethex+0x9a>
 800a95e:	4627      	mov	r7, r4
 800a960:	e7c7      	b.n	800a8f2 <__gethex+0x9e>
 800a962:	464e      	mov	r6, r9
 800a964:	462f      	mov	r7, r5
 800a966:	2501      	movs	r5, #1
 800a968:	e7c3      	b.n	800a8f2 <__gethex+0x9e>
 800a96a:	2400      	movs	r4, #0
 800a96c:	1cb1      	adds	r1, r6, #2
 800a96e:	e7cc      	b.n	800a90a <__gethex+0xb6>
 800a970:	2401      	movs	r4, #1
 800a972:	e7fb      	b.n	800a96c <__gethex+0x118>
 800a974:	fb03 0002 	mla	r0, r3, r2, r0
 800a978:	e7ce      	b.n	800a918 <__gethex+0xc4>
 800a97a:	4631      	mov	r1, r6
 800a97c:	e7de      	b.n	800a93c <__gethex+0xe8>
 800a97e:	eba6 0309 	sub.w	r3, r6, r9
 800a982:	3b01      	subs	r3, #1
 800a984:	4629      	mov	r1, r5
 800a986:	2b07      	cmp	r3, #7
 800a988:	dc0a      	bgt.n	800a9a0 <__gethex+0x14c>
 800a98a:	9801      	ldr	r0, [sp, #4]
 800a98c:	f7fd ff9a 	bl	80088c4 <_Balloc>
 800a990:	4604      	mov	r4, r0
 800a992:	b940      	cbnz	r0, 800a9a6 <__gethex+0x152>
 800a994:	4b5c      	ldr	r3, [pc, #368]	@ (800ab08 <__gethex+0x2b4>)
 800a996:	4602      	mov	r2, r0
 800a998:	21e4      	movs	r1, #228	@ 0xe4
 800a99a:	485c      	ldr	r0, [pc, #368]	@ (800ab0c <__gethex+0x2b8>)
 800a99c:	f7ff fec0 	bl	800a720 <__assert_func>
 800a9a0:	3101      	adds	r1, #1
 800a9a2:	105b      	asrs	r3, r3, #1
 800a9a4:	e7ef      	b.n	800a986 <__gethex+0x132>
 800a9a6:	f100 0a14 	add.w	sl, r0, #20
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4655      	mov	r5, sl
 800a9ae:	469b      	mov	fp, r3
 800a9b0:	45b1      	cmp	r9, r6
 800a9b2:	d337      	bcc.n	800aa24 <__gethex+0x1d0>
 800a9b4:	f845 bb04 	str.w	fp, [r5], #4
 800a9b8:	eba5 050a 	sub.w	r5, r5, sl
 800a9bc:	10ad      	asrs	r5, r5, #2
 800a9be:	6125      	str	r5, [r4, #16]
 800a9c0:	4658      	mov	r0, fp
 800a9c2:	f7fe f871 	bl	8008aa8 <__hi0bits>
 800a9c6:	016d      	lsls	r5, r5, #5
 800a9c8:	f8d8 6000 	ldr.w	r6, [r8]
 800a9cc:	1a2d      	subs	r5, r5, r0
 800a9ce:	42b5      	cmp	r5, r6
 800a9d0:	dd54      	ble.n	800aa7c <__gethex+0x228>
 800a9d2:	1bad      	subs	r5, r5, r6
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f7fe fbfd 	bl	80091d6 <__any_on>
 800a9dc:	4681      	mov	r9, r0
 800a9de:	b178      	cbz	r0, 800aa00 <__gethex+0x1ac>
 800a9e0:	1e6b      	subs	r3, r5, #1
 800a9e2:	1159      	asrs	r1, r3, #5
 800a9e4:	f003 021f 	and.w	r2, r3, #31
 800a9e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a9ec:	f04f 0901 	mov.w	r9, #1
 800a9f0:	fa09 f202 	lsl.w	r2, r9, r2
 800a9f4:	420a      	tst	r2, r1
 800a9f6:	d003      	beq.n	800aa00 <__gethex+0x1ac>
 800a9f8:	454b      	cmp	r3, r9
 800a9fa:	dc36      	bgt.n	800aa6a <__gethex+0x216>
 800a9fc:	f04f 0902 	mov.w	r9, #2
 800aa00:	4629      	mov	r1, r5
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff febe 	bl	800a784 <rshift>
 800aa08:	442f      	add	r7, r5
 800aa0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa0e:	42bb      	cmp	r3, r7
 800aa10:	da42      	bge.n	800aa98 <__gethex+0x244>
 800aa12:	9801      	ldr	r0, [sp, #4]
 800aa14:	4621      	mov	r1, r4
 800aa16:	f7fd ff95 	bl	8008944 <_Bfree>
 800aa1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	25a3      	movs	r5, #163	@ 0xa3
 800aa22:	e793      	b.n	800a94c <__gethex+0xf8>
 800aa24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aa28:	2a2e      	cmp	r2, #46	@ 0x2e
 800aa2a:	d012      	beq.n	800aa52 <__gethex+0x1fe>
 800aa2c:	2b20      	cmp	r3, #32
 800aa2e:	d104      	bne.n	800aa3a <__gethex+0x1e6>
 800aa30:	f845 bb04 	str.w	fp, [r5], #4
 800aa34:	f04f 0b00 	mov.w	fp, #0
 800aa38:	465b      	mov	r3, fp
 800aa3a:	7830      	ldrb	r0, [r6, #0]
 800aa3c:	9303      	str	r3, [sp, #12]
 800aa3e:	f7ff fef3 	bl	800a828 <__hexdig_fun>
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	f000 000f 	and.w	r0, r0, #15
 800aa48:	4098      	lsls	r0, r3
 800aa4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa4e:	3304      	adds	r3, #4
 800aa50:	e7ae      	b.n	800a9b0 <__gethex+0x15c>
 800aa52:	45b1      	cmp	r9, r6
 800aa54:	d8ea      	bhi.n	800aa2c <__gethex+0x1d8>
 800aa56:	492b      	ldr	r1, [pc, #172]	@ (800ab04 <__gethex+0x2b0>)
 800aa58:	9303      	str	r3, [sp, #12]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f7ff fe23 	bl	800a6a8 <strncmp>
 800aa62:	9b03      	ldr	r3, [sp, #12]
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d1e1      	bne.n	800aa2c <__gethex+0x1d8>
 800aa68:	e7a2      	b.n	800a9b0 <__gethex+0x15c>
 800aa6a:	1ea9      	subs	r1, r5, #2
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f7fe fbb2 	bl	80091d6 <__any_on>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d0c2      	beq.n	800a9fc <__gethex+0x1a8>
 800aa76:	f04f 0903 	mov.w	r9, #3
 800aa7a:	e7c1      	b.n	800aa00 <__gethex+0x1ac>
 800aa7c:	da09      	bge.n	800aa92 <__gethex+0x23e>
 800aa7e:	1b75      	subs	r5, r6, r5
 800aa80:	4621      	mov	r1, r4
 800aa82:	9801      	ldr	r0, [sp, #4]
 800aa84:	462a      	mov	r2, r5
 800aa86:	f7fe f96d 	bl	8008d64 <__lshift>
 800aa8a:	1b7f      	subs	r7, r7, r5
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	f100 0a14 	add.w	sl, r0, #20
 800aa92:	f04f 0900 	mov.w	r9, #0
 800aa96:	e7b8      	b.n	800aa0a <__gethex+0x1b6>
 800aa98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa9c:	42bd      	cmp	r5, r7
 800aa9e:	dd6f      	ble.n	800ab80 <__gethex+0x32c>
 800aaa0:	1bed      	subs	r5, r5, r7
 800aaa2:	42ae      	cmp	r6, r5
 800aaa4:	dc34      	bgt.n	800ab10 <__gethex+0x2bc>
 800aaa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d022      	beq.n	800aaf4 <__gethex+0x2a0>
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d024      	beq.n	800aafc <__gethex+0x2a8>
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d115      	bne.n	800aae2 <__gethex+0x28e>
 800aab6:	42ae      	cmp	r6, r5
 800aab8:	d113      	bne.n	800aae2 <__gethex+0x28e>
 800aaba:	2e01      	cmp	r6, #1
 800aabc:	d10b      	bne.n	800aad6 <__gethex+0x282>
 800aabe:	9a02      	ldr	r2, [sp, #8]
 800aac0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	2301      	movs	r3, #1
 800aac8:	6123      	str	r3, [r4, #16]
 800aaca:	f8ca 3000 	str.w	r3, [sl]
 800aace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aad0:	2562      	movs	r5, #98	@ 0x62
 800aad2:	601c      	str	r4, [r3, #0]
 800aad4:	e73a      	b.n	800a94c <__gethex+0xf8>
 800aad6:	1e71      	subs	r1, r6, #1
 800aad8:	4620      	mov	r0, r4
 800aada:	f7fe fb7c 	bl	80091d6 <__any_on>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d1ed      	bne.n	800aabe <__gethex+0x26a>
 800aae2:	9801      	ldr	r0, [sp, #4]
 800aae4:	4621      	mov	r1, r4
 800aae6:	f7fd ff2d 	bl	8008944 <_Bfree>
 800aaea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaec:	2300      	movs	r3, #0
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	2550      	movs	r5, #80	@ 0x50
 800aaf2:	e72b      	b.n	800a94c <__gethex+0xf8>
 800aaf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1f3      	bne.n	800aae2 <__gethex+0x28e>
 800aafa:	e7e0      	b.n	800aabe <__gethex+0x26a>
 800aafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1dd      	bne.n	800aabe <__gethex+0x26a>
 800ab02:	e7ee      	b.n	800aae2 <__gethex+0x28e>
 800ab04:	0800ce83 	.word	0x0800ce83
 800ab08:	0800ce19 	.word	0x0800ce19
 800ab0c:	0800ceda 	.word	0x0800ceda
 800ab10:	1e6f      	subs	r7, r5, #1
 800ab12:	f1b9 0f00 	cmp.w	r9, #0
 800ab16:	d130      	bne.n	800ab7a <__gethex+0x326>
 800ab18:	b127      	cbz	r7, 800ab24 <__gethex+0x2d0>
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f7fe fb5a 	bl	80091d6 <__any_on>
 800ab22:	4681      	mov	r9, r0
 800ab24:	117a      	asrs	r2, r7, #5
 800ab26:	2301      	movs	r3, #1
 800ab28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ab2c:	f007 071f 	and.w	r7, r7, #31
 800ab30:	40bb      	lsls	r3, r7
 800ab32:	4213      	tst	r3, r2
 800ab34:	4629      	mov	r1, r5
 800ab36:	4620      	mov	r0, r4
 800ab38:	bf18      	it	ne
 800ab3a:	f049 0902 	orrne.w	r9, r9, #2
 800ab3e:	f7ff fe21 	bl	800a784 <rshift>
 800ab42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ab46:	1b76      	subs	r6, r6, r5
 800ab48:	2502      	movs	r5, #2
 800ab4a:	f1b9 0f00 	cmp.w	r9, #0
 800ab4e:	d047      	beq.n	800abe0 <__gethex+0x38c>
 800ab50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d015      	beq.n	800ab84 <__gethex+0x330>
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d017      	beq.n	800ab8c <__gethex+0x338>
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d109      	bne.n	800ab74 <__gethex+0x320>
 800ab60:	f019 0f02 	tst.w	r9, #2
 800ab64:	d006      	beq.n	800ab74 <__gethex+0x320>
 800ab66:	f8da 3000 	ldr.w	r3, [sl]
 800ab6a:	ea49 0903 	orr.w	r9, r9, r3
 800ab6e:	f019 0f01 	tst.w	r9, #1
 800ab72:	d10e      	bne.n	800ab92 <__gethex+0x33e>
 800ab74:	f045 0510 	orr.w	r5, r5, #16
 800ab78:	e032      	b.n	800abe0 <__gethex+0x38c>
 800ab7a:	f04f 0901 	mov.w	r9, #1
 800ab7e:	e7d1      	b.n	800ab24 <__gethex+0x2d0>
 800ab80:	2501      	movs	r5, #1
 800ab82:	e7e2      	b.n	800ab4a <__gethex+0x2f6>
 800ab84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab86:	f1c3 0301 	rsb	r3, r3, #1
 800ab8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0f0      	beq.n	800ab74 <__gethex+0x320>
 800ab92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab96:	f104 0314 	add.w	r3, r4, #20
 800ab9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aba2:	f04f 0c00 	mov.w	ip, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abb0:	d01b      	beq.n	800abea <__gethex+0x396>
 800abb2:	3201      	adds	r2, #1
 800abb4:	6002      	str	r2, [r0, #0]
 800abb6:	2d02      	cmp	r5, #2
 800abb8:	f104 0314 	add.w	r3, r4, #20
 800abbc:	d13c      	bne.n	800ac38 <__gethex+0x3e4>
 800abbe:	f8d8 2000 	ldr.w	r2, [r8]
 800abc2:	3a01      	subs	r2, #1
 800abc4:	42b2      	cmp	r2, r6
 800abc6:	d109      	bne.n	800abdc <__gethex+0x388>
 800abc8:	1171      	asrs	r1, r6, #5
 800abca:	2201      	movs	r2, #1
 800abcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abd0:	f006 061f 	and.w	r6, r6, #31
 800abd4:	fa02 f606 	lsl.w	r6, r2, r6
 800abd8:	421e      	tst	r6, r3
 800abda:	d13a      	bne.n	800ac52 <__gethex+0x3fe>
 800abdc:	f045 0520 	orr.w	r5, r5, #32
 800abe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abe2:	601c      	str	r4, [r3, #0]
 800abe4:	9b02      	ldr	r3, [sp, #8]
 800abe6:	601f      	str	r7, [r3, #0]
 800abe8:	e6b0      	b.n	800a94c <__gethex+0xf8>
 800abea:	4299      	cmp	r1, r3
 800abec:	f843 cc04 	str.w	ip, [r3, #-4]
 800abf0:	d8d9      	bhi.n	800aba6 <__gethex+0x352>
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	459b      	cmp	fp, r3
 800abf6:	db17      	blt.n	800ac28 <__gethex+0x3d4>
 800abf8:	6861      	ldr	r1, [r4, #4]
 800abfa:	9801      	ldr	r0, [sp, #4]
 800abfc:	3101      	adds	r1, #1
 800abfe:	f7fd fe61 	bl	80088c4 <_Balloc>
 800ac02:	4681      	mov	r9, r0
 800ac04:	b918      	cbnz	r0, 800ac0e <__gethex+0x3ba>
 800ac06:	4b1a      	ldr	r3, [pc, #104]	@ (800ac70 <__gethex+0x41c>)
 800ac08:	4602      	mov	r2, r0
 800ac0a:	2184      	movs	r1, #132	@ 0x84
 800ac0c:	e6c5      	b.n	800a99a <__gethex+0x146>
 800ac0e:	6922      	ldr	r2, [r4, #16]
 800ac10:	3202      	adds	r2, #2
 800ac12:	f104 010c 	add.w	r1, r4, #12
 800ac16:	0092      	lsls	r2, r2, #2
 800ac18:	300c      	adds	r0, #12
 800ac1a:	f7fc ff9a 	bl	8007b52 <memcpy>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	9801      	ldr	r0, [sp, #4]
 800ac22:	f7fd fe8f 	bl	8008944 <_Bfree>
 800ac26:	464c      	mov	r4, r9
 800ac28:	6923      	ldr	r3, [r4, #16]
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac30:	6122      	str	r2, [r4, #16]
 800ac32:	2201      	movs	r2, #1
 800ac34:	615a      	str	r2, [r3, #20]
 800ac36:	e7be      	b.n	800abb6 <__gethex+0x362>
 800ac38:	6922      	ldr	r2, [r4, #16]
 800ac3a:	455a      	cmp	r2, fp
 800ac3c:	dd0b      	ble.n	800ac56 <__gethex+0x402>
 800ac3e:	2101      	movs	r1, #1
 800ac40:	4620      	mov	r0, r4
 800ac42:	f7ff fd9f 	bl	800a784 <rshift>
 800ac46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac4a:	3701      	adds	r7, #1
 800ac4c:	42bb      	cmp	r3, r7
 800ac4e:	f6ff aee0 	blt.w	800aa12 <__gethex+0x1be>
 800ac52:	2501      	movs	r5, #1
 800ac54:	e7c2      	b.n	800abdc <__gethex+0x388>
 800ac56:	f016 061f 	ands.w	r6, r6, #31
 800ac5a:	d0fa      	beq.n	800ac52 <__gethex+0x3fe>
 800ac5c:	4453      	add	r3, sl
 800ac5e:	f1c6 0620 	rsb	r6, r6, #32
 800ac62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac66:	f7fd ff1f 	bl	8008aa8 <__hi0bits>
 800ac6a:	42b0      	cmp	r0, r6
 800ac6c:	dbe7      	blt.n	800ac3e <__gethex+0x3ea>
 800ac6e:	e7f0      	b.n	800ac52 <__gethex+0x3fe>
 800ac70:	0800ce19 	.word	0x0800ce19

0800ac74 <L_shift>:
 800ac74:	f1c2 0208 	rsb	r2, r2, #8
 800ac78:	0092      	lsls	r2, r2, #2
 800ac7a:	b570      	push	{r4, r5, r6, lr}
 800ac7c:	f1c2 0620 	rsb	r6, r2, #32
 800ac80:	6843      	ldr	r3, [r0, #4]
 800ac82:	6804      	ldr	r4, [r0, #0]
 800ac84:	fa03 f506 	lsl.w	r5, r3, r6
 800ac88:	432c      	orrs	r4, r5
 800ac8a:	40d3      	lsrs	r3, r2
 800ac8c:	6004      	str	r4, [r0, #0]
 800ac8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac92:	4288      	cmp	r0, r1
 800ac94:	d3f4      	bcc.n	800ac80 <L_shift+0xc>
 800ac96:	bd70      	pop	{r4, r5, r6, pc}

0800ac98 <__match>:
 800ac98:	b530      	push	{r4, r5, lr}
 800ac9a:	6803      	ldr	r3, [r0, #0]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca2:	b914      	cbnz	r4, 800acaa <__match+0x12>
 800aca4:	6003      	str	r3, [r0, #0]
 800aca6:	2001      	movs	r0, #1
 800aca8:	bd30      	pop	{r4, r5, pc}
 800acaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800acb2:	2d19      	cmp	r5, #25
 800acb4:	bf98      	it	ls
 800acb6:	3220      	addls	r2, #32
 800acb8:	42a2      	cmp	r2, r4
 800acba:	d0f0      	beq.n	800ac9e <__match+0x6>
 800acbc:	2000      	movs	r0, #0
 800acbe:	e7f3      	b.n	800aca8 <__match+0x10>

0800acc0 <__hexnan>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	680b      	ldr	r3, [r1, #0]
 800acc6:	6801      	ldr	r1, [r0, #0]
 800acc8:	115e      	asrs	r6, r3, #5
 800acca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800acce:	f013 031f 	ands.w	r3, r3, #31
 800acd2:	b087      	sub	sp, #28
 800acd4:	bf18      	it	ne
 800acd6:	3604      	addne	r6, #4
 800acd8:	2500      	movs	r5, #0
 800acda:	1f37      	subs	r7, r6, #4
 800acdc:	4682      	mov	sl, r0
 800acde:	4690      	mov	r8, r2
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ace6:	46b9      	mov	r9, r7
 800ace8:	463c      	mov	r4, r7
 800acea:	9502      	str	r5, [sp, #8]
 800acec:	46ab      	mov	fp, r5
 800acee:	784a      	ldrb	r2, [r1, #1]
 800acf0:	1c4b      	adds	r3, r1, #1
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	b342      	cbz	r2, 800ad48 <__hexnan+0x88>
 800acf6:	4610      	mov	r0, r2
 800acf8:	9105      	str	r1, [sp, #20]
 800acfa:	9204      	str	r2, [sp, #16]
 800acfc:	f7ff fd94 	bl	800a828 <__hexdig_fun>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d151      	bne.n	800ada8 <__hexnan+0xe8>
 800ad04:	9a04      	ldr	r2, [sp, #16]
 800ad06:	9905      	ldr	r1, [sp, #20]
 800ad08:	2a20      	cmp	r2, #32
 800ad0a:	d818      	bhi.n	800ad3e <__hexnan+0x7e>
 800ad0c:	9b02      	ldr	r3, [sp, #8]
 800ad0e:	459b      	cmp	fp, r3
 800ad10:	dd13      	ble.n	800ad3a <__hexnan+0x7a>
 800ad12:	454c      	cmp	r4, r9
 800ad14:	d206      	bcs.n	800ad24 <__hexnan+0x64>
 800ad16:	2d07      	cmp	r5, #7
 800ad18:	dc04      	bgt.n	800ad24 <__hexnan+0x64>
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f7ff ffa8 	bl	800ac74 <L_shift>
 800ad24:	4544      	cmp	r4, r8
 800ad26:	d952      	bls.n	800adce <__hexnan+0x10e>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f1a4 0904 	sub.w	r9, r4, #4
 800ad2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad32:	f8cd b008 	str.w	fp, [sp, #8]
 800ad36:	464c      	mov	r4, r9
 800ad38:	461d      	mov	r5, r3
 800ad3a:	9903      	ldr	r1, [sp, #12]
 800ad3c:	e7d7      	b.n	800acee <__hexnan+0x2e>
 800ad3e:	2a29      	cmp	r2, #41	@ 0x29
 800ad40:	d157      	bne.n	800adf2 <__hexnan+0x132>
 800ad42:	3102      	adds	r1, #2
 800ad44:	f8ca 1000 	str.w	r1, [sl]
 800ad48:	f1bb 0f00 	cmp.w	fp, #0
 800ad4c:	d051      	beq.n	800adf2 <__hexnan+0x132>
 800ad4e:	454c      	cmp	r4, r9
 800ad50:	d206      	bcs.n	800ad60 <__hexnan+0xa0>
 800ad52:	2d07      	cmp	r5, #7
 800ad54:	dc04      	bgt.n	800ad60 <__hexnan+0xa0>
 800ad56:	462a      	mov	r2, r5
 800ad58:	4649      	mov	r1, r9
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f7ff ff8a 	bl	800ac74 <L_shift>
 800ad60:	4544      	cmp	r4, r8
 800ad62:	d936      	bls.n	800add2 <__hexnan+0x112>
 800ad64:	f1a8 0204 	sub.w	r2, r8, #4
 800ad68:	4623      	mov	r3, r4
 800ad6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad72:	429f      	cmp	r7, r3
 800ad74:	d2f9      	bcs.n	800ad6a <__hexnan+0xaa>
 800ad76:	1b3b      	subs	r3, r7, r4
 800ad78:	f023 0303 	bic.w	r3, r3, #3
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	3401      	adds	r4, #1
 800ad80:	3e03      	subs	r6, #3
 800ad82:	42b4      	cmp	r4, r6
 800ad84:	bf88      	it	hi
 800ad86:	2304      	movhi	r3, #4
 800ad88:	4443      	add	r3, r8
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f843 2b04 	str.w	r2, [r3], #4
 800ad90:	429f      	cmp	r7, r3
 800ad92:	d2fb      	bcs.n	800ad8c <__hexnan+0xcc>
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	b91b      	cbnz	r3, 800ada0 <__hexnan+0xe0>
 800ad98:	4547      	cmp	r7, r8
 800ad9a:	d128      	bne.n	800adee <__hexnan+0x12e>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	2005      	movs	r0, #5
 800ada2:	b007      	add	sp, #28
 800ada4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada8:	3501      	adds	r5, #1
 800adaa:	2d08      	cmp	r5, #8
 800adac:	f10b 0b01 	add.w	fp, fp, #1
 800adb0:	dd06      	ble.n	800adc0 <__hexnan+0x100>
 800adb2:	4544      	cmp	r4, r8
 800adb4:	d9c1      	bls.n	800ad3a <__hexnan+0x7a>
 800adb6:	2300      	movs	r3, #0
 800adb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800adbc:	2501      	movs	r5, #1
 800adbe:	3c04      	subs	r4, #4
 800adc0:	6822      	ldr	r2, [r4, #0]
 800adc2:	f000 000f 	and.w	r0, r0, #15
 800adc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800adca:	6020      	str	r0, [r4, #0]
 800adcc:	e7b5      	b.n	800ad3a <__hexnan+0x7a>
 800adce:	2508      	movs	r5, #8
 800add0:	e7b3      	b.n	800ad3a <__hexnan+0x7a>
 800add2:	9b01      	ldr	r3, [sp, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0dd      	beq.n	800ad94 <__hexnan+0xd4>
 800add8:	f1c3 0320 	rsb	r3, r3, #32
 800addc:	f04f 32ff 	mov.w	r2, #4294967295
 800ade0:	40da      	lsrs	r2, r3
 800ade2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ade6:	4013      	ands	r3, r2
 800ade8:	f846 3c04 	str.w	r3, [r6, #-4]
 800adec:	e7d2      	b.n	800ad94 <__hexnan+0xd4>
 800adee:	3f04      	subs	r7, #4
 800adf0:	e7d0      	b.n	800ad94 <__hexnan+0xd4>
 800adf2:	2004      	movs	r0, #4
 800adf4:	e7d5      	b.n	800ada2 <__hexnan+0xe2>

0800adf6 <__ascii_mbtowc>:
 800adf6:	b082      	sub	sp, #8
 800adf8:	b901      	cbnz	r1, 800adfc <__ascii_mbtowc+0x6>
 800adfa:	a901      	add	r1, sp, #4
 800adfc:	b142      	cbz	r2, 800ae10 <__ascii_mbtowc+0x1a>
 800adfe:	b14b      	cbz	r3, 800ae14 <__ascii_mbtowc+0x1e>
 800ae00:	7813      	ldrb	r3, [r2, #0]
 800ae02:	600b      	str	r3, [r1, #0]
 800ae04:	7812      	ldrb	r2, [r2, #0]
 800ae06:	1e10      	subs	r0, r2, #0
 800ae08:	bf18      	it	ne
 800ae0a:	2001      	movne	r0, #1
 800ae0c:	b002      	add	sp, #8
 800ae0e:	4770      	bx	lr
 800ae10:	4610      	mov	r0, r2
 800ae12:	e7fb      	b.n	800ae0c <__ascii_mbtowc+0x16>
 800ae14:	f06f 0001 	mvn.w	r0, #1
 800ae18:	e7f8      	b.n	800ae0c <__ascii_mbtowc+0x16>

0800ae1a <_realloc_r>:
 800ae1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1e:	4607      	mov	r7, r0
 800ae20:	4614      	mov	r4, r2
 800ae22:	460d      	mov	r5, r1
 800ae24:	b921      	cbnz	r1, 800ae30 <_realloc_r+0x16>
 800ae26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	f7fb bce6 	b.w	80067fc <_malloc_r>
 800ae30:	b92a      	cbnz	r2, 800ae3e <_realloc_r+0x24>
 800ae32:	f7fd fcfd 	bl	8008830 <_free_r>
 800ae36:	4625      	mov	r5, r4
 800ae38:	4628      	mov	r0, r5
 800ae3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae3e:	f000 f840 	bl	800aec2 <_malloc_usable_size_r>
 800ae42:	4284      	cmp	r4, r0
 800ae44:	4606      	mov	r6, r0
 800ae46:	d802      	bhi.n	800ae4e <_realloc_r+0x34>
 800ae48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae4c:	d8f4      	bhi.n	800ae38 <_realloc_r+0x1e>
 800ae4e:	4621      	mov	r1, r4
 800ae50:	4638      	mov	r0, r7
 800ae52:	f7fb fcd3 	bl	80067fc <_malloc_r>
 800ae56:	4680      	mov	r8, r0
 800ae58:	b908      	cbnz	r0, 800ae5e <_realloc_r+0x44>
 800ae5a:	4645      	mov	r5, r8
 800ae5c:	e7ec      	b.n	800ae38 <_realloc_r+0x1e>
 800ae5e:	42b4      	cmp	r4, r6
 800ae60:	4622      	mov	r2, r4
 800ae62:	4629      	mov	r1, r5
 800ae64:	bf28      	it	cs
 800ae66:	4632      	movcs	r2, r6
 800ae68:	f7fc fe73 	bl	8007b52 <memcpy>
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	4638      	mov	r0, r7
 800ae70:	f7fd fcde 	bl	8008830 <_free_r>
 800ae74:	e7f1      	b.n	800ae5a <_realloc_r+0x40>

0800ae76 <__ascii_wctomb>:
 800ae76:	4603      	mov	r3, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	b141      	cbz	r1, 800ae8e <__ascii_wctomb+0x18>
 800ae7c:	2aff      	cmp	r2, #255	@ 0xff
 800ae7e:	d904      	bls.n	800ae8a <__ascii_wctomb+0x14>
 800ae80:	228a      	movs	r2, #138	@ 0x8a
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	4770      	bx	lr
 800ae8a:	700a      	strb	r2, [r1, #0]
 800ae8c:	2001      	movs	r0, #1
 800ae8e:	4770      	bx	lr

0800ae90 <fiprintf>:
 800ae90:	b40e      	push	{r1, r2, r3}
 800ae92:	b503      	push	{r0, r1, lr}
 800ae94:	4601      	mov	r1, r0
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	4805      	ldr	r0, [pc, #20]	@ (800aeb0 <fiprintf+0x20>)
 800ae9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae9e:	6800      	ldr	r0, [r0, #0]
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	f7ff f9c1 	bl	800a228 <_vfiprintf_r>
 800aea6:	b002      	add	sp, #8
 800aea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeac:	b003      	add	sp, #12
 800aeae:	4770      	bx	lr
 800aeb0:	20040020 	.word	0x20040020

0800aeb4 <abort>:
 800aeb4:	b508      	push	{r3, lr}
 800aeb6:	2006      	movs	r0, #6
 800aeb8:	f000 f834 	bl	800af24 <raise>
 800aebc:	2001      	movs	r0, #1
 800aebe:	f7f7 fc0b 	bl	80026d8 <_exit>

0800aec2 <_malloc_usable_size_r>:
 800aec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec6:	1f18      	subs	r0, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfbc      	itt	lt
 800aecc:	580b      	ldrlt	r3, [r1, r0]
 800aece:	18c0      	addlt	r0, r0, r3
 800aed0:	4770      	bx	lr

0800aed2 <_raise_r>:
 800aed2:	291f      	cmp	r1, #31
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4605      	mov	r5, r0
 800aed8:	460c      	mov	r4, r1
 800aeda:	d904      	bls.n	800aee6 <_raise_r+0x14>
 800aedc:	2316      	movs	r3, #22
 800aede:	6003      	str	r3, [r0, #0]
 800aee0:	f04f 30ff 	mov.w	r0, #4294967295
 800aee4:	bd38      	pop	{r3, r4, r5, pc}
 800aee6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aee8:	b112      	cbz	r2, 800aef0 <_raise_r+0x1e>
 800aeea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeee:	b94b      	cbnz	r3, 800af04 <_raise_r+0x32>
 800aef0:	4628      	mov	r0, r5
 800aef2:	f000 f831 	bl	800af58 <_getpid_r>
 800aef6:	4622      	mov	r2, r4
 800aef8:	4601      	mov	r1, r0
 800aefa:	4628      	mov	r0, r5
 800aefc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af00:	f000 b818 	b.w	800af34 <_kill_r>
 800af04:	2b01      	cmp	r3, #1
 800af06:	d00a      	beq.n	800af1e <_raise_r+0x4c>
 800af08:	1c59      	adds	r1, r3, #1
 800af0a:	d103      	bne.n	800af14 <_raise_r+0x42>
 800af0c:	2316      	movs	r3, #22
 800af0e:	6003      	str	r3, [r0, #0]
 800af10:	2001      	movs	r0, #1
 800af12:	e7e7      	b.n	800aee4 <_raise_r+0x12>
 800af14:	2100      	movs	r1, #0
 800af16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af1a:	4620      	mov	r0, r4
 800af1c:	4798      	blx	r3
 800af1e:	2000      	movs	r0, #0
 800af20:	e7e0      	b.n	800aee4 <_raise_r+0x12>
	...

0800af24 <raise>:
 800af24:	4b02      	ldr	r3, [pc, #8]	@ (800af30 <raise+0xc>)
 800af26:	4601      	mov	r1, r0
 800af28:	6818      	ldr	r0, [r3, #0]
 800af2a:	f7ff bfd2 	b.w	800aed2 <_raise_r>
 800af2e:	bf00      	nop
 800af30:	20040020 	.word	0x20040020

0800af34 <_kill_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	@ (800af54 <_kill_r+0x20>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	4611      	mov	r1, r2
 800af40:	602b      	str	r3, [r5, #0]
 800af42:	f7f7 fbb9 	bl	80026b8 <_kill>
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	d102      	bne.n	800af50 <_kill_r+0x1c>
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	b103      	cbz	r3, 800af50 <_kill_r+0x1c>
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	bf00      	nop
 800af54:	2005c648 	.word	0x2005c648

0800af58 <_getpid_r>:
 800af58:	f7f7 bba6 	b.w	80026a8 <_getpid>

0800af5c <_init>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	bf00      	nop
 800af60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af62:	bc08      	pop	{r3}
 800af64:	469e      	mov	lr, r3
 800af66:	4770      	bx	lr

0800af68 <_fini>:
 800af68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6a:	bf00      	nop
 800af6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af6e:	bc08      	pop	{r3}
 800af70:	469e      	mov	lr, r3
 800af72:	4770      	bx	lr
